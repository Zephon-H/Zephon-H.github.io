<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android-Fragment</title>
    <url>/2018/12/26/Android-Fragment/</url>
    <content><![CDATA[<h1 id="android-fragment">Android-Fragment</h1>
<hr />
<p>一、概念<br />
Fragment 表示 Activity 中的行为或用户界面部分。您可以将多个片段组合在一个 Activity 中来构建多窗格 UI，以及在多个 Activity 中重复使用某个片段。您可以将片段视为 Activity 的模块化组成部分，它具有自己的生命周期，能接收自己的输入事件，并且您可以在 Activity 运行时添加或移除片段（有点像您可以在不同 Activity 中重复使用的“子 Activity”）。<br />
Android 在 Android 3.0（API 级别 11）中引入了片段，主要是为了给大屏幕（如平板电脑）上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用片段实现此类设计时，您无需管理对视图层次结构的复杂更改。 通过将 Activity 布局分成片段，您可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。</p>
<p>二、Fragment的生命周期图<br />
<img src="/img/time.jpg" alt="生命周期图" /></p>
<p>三、创建一个Fragment</p>
<p>1、 静态添加Fragment</p>
<p>1）新建两个Fragment的xml文件 样例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#feff00&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;This is fragment 1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;25sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2）新建一个两个Fragment类，继承自Fragment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment1</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment1, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3）在activity_main.xml中加入Fragment的引用，使用android:name前缀来引用具体的Fragment：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:baselineAligned</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.zephon.ncutea_ui3.Fragment1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dip&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.zephon.ncutea_ui3.Fragment2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dip&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、 动态添加Fragment</p>
<p>1）修改activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:baselineAligned</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2）修改MainActivity中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line">        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</span><br><span class="line">        Fragment1 f1 = <span class="keyword">new</span> Fragment1();</span><br><span class="line">        fragmentTransaction.add(R.id.fragment_container,f1).commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、实践-制作一个类似QQ的点击切换页面的功能<br />
1）新建两个Fragment的xml页面，也可以用上面的Fragment的xml 2）和上述一样建立两个MyFragment为，继承自Fragment 3）修改activity_main.xml如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:baselineAligned</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/bt_tab1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;消息&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/bt_tab2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;联系人&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4）修改MainActivity.java代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentTransaction;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button bt1;</span><br><span class="line">    <span class="keyword">private</span> Button bt2;</span><br><span class="line">    <span class="keyword">private</span> Fragment1 f1;</span><br><span class="line">    <span class="keyword">private</span> Fragment2 f2;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initViews();</span><br><span class="line">        initEvents();</span><br><span class="line">        select(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span></span>&#123;</span><br><span class="line">        bt1 = findViewById(R.id.bt_tab1);</span><br><span class="line">        bt2 = findViewById(R.id.bt_tab2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEvents</span><span class="params">()</span></span>&#123;</span><br><span class="line">        bt1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        bt2.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        FragmentManager fm = getSupportFragmentManager(); <span class="comment">//获得Fragment管理器</span></span><br><span class="line">        FragmentTransaction ft = fm.beginTransaction(); <span class="comment">//开启一个事务</span></span><br><span class="line"></span><br><span class="line">        hidtFragment(ft);   <span class="comment">//先隐藏 Fragment</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> (f1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    f1 = <span class="keyword">new</span> Fragment1();</span><br><span class="line">                    ft.add(R.id.fragment_container,f1);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ft.show(f1);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (f2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    f2 = <span class="keyword">new</span> Fragment2();</span><br><span class="line">                    ft.add(R.id.fragment_container,f2);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    ft.show(f2);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ft.commit();   <span class="comment">//提交事务</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//隐藏所有Fragment</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hidtFragment</span><span class="params">(FragmentTransaction fragmentTransaction)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (f1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fragmentTransaction.hide(f1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fragmentTransaction.hide(f2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写监听</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.bt_tab1:</span><br><span class="line">                select(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.bt_tab2:</span><br><span class="line">                select(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Github上的好的案例推荐:<a href="https://github.com/YoKeyword/Fragmentation">点我</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-ListView</title>
    <url>/2018/12/11/Android-ListView/</url>
    <content><![CDATA[<h1 id="android-listview">Android-ListView</h1>
<hr />
<h2 id="listview低配版">ListView低配版</h2>
<p>首先通过一个简化版的ListView来了解一下ListView的使用大体步骤</p>
<p>一. 编写activity_list_view.xml 代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.ListViewActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/lv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>二. 编写单个的item的布局文件item_listview.xml,代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_pic&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/smile&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;名字&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>三. 自定义一个适配器，继承自BaseAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater layoutInflater;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，传入上下文Context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context=context;</span><br><span class="line">        layoutInflater=LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据集合的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15</span>;<span class="comment">//此处暂用定值，实际开发时需要用相应集合的长度</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个ViewHolder只能服务于当前这个特定的adapter，因为ViewHolder里会指定item的控件，不同的ListView，item可能不同，所以ViewHolder写成一个私有的类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> TextView textView;</span><br><span class="line">        <span class="keyword">public</span> ImageView imageView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重点，需要为它编写一个ViewHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class="line">        ViewHolder holder=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(holder==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            view=layoutInflater.inflate(R.layout.item_listview,<span class="keyword">null</span>);</span><br><span class="line">            holder=<span class="keyword">new</span> ViewHolder();</span><br><span class="line">            holder.textView=view.findViewById(R.id.tv_name);</span><br><span class="line">            holder.imageView=view.findViewById(R.id.iv_pic);</span><br><span class="line"></span><br><span class="line">            view.setTag(holder);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            holder= (ViewHolder) view.getTag();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        holder.textView.setText(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        holder.imageView.setImageResource(R.drawable.smile);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>四. 在MainActivity.java中使用适配器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ListView listView;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_list_view);</span><br><span class="line"></span><br><span class="line">        listView = findViewById(R.id.lv);</span><br><span class="line">        listView.setAdapter(<span class="keyword">new</span> MyAdapter(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="listview中配版">ListView中配版</h2>
<p>很显然，我们使用ListView肯定不可能仅仅只是用来做这样固定的静态页面，所以我们当我们需要做一个动态的，可以从外部改变的ListView时，就需要用一下的方法了。</p>
<p>一. 编写activity_list_view.xml 代码和上面一样 二. 编写单个的item的布局文件item_listview.xml,代码和上面一样 三. 定义一个JavaBean，实现数据的改变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>四. 自定义一个适配器，继承自BaseAdapter，代码稍有改动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComplexMyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater layoutInflater;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; mDatas;<span class="comment">//存放数据</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，传入上下文Context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComplexMyAdapter</span><span class="params">(Context context,List mDatas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context=context;</span><br><span class="line">        <span class="keyword">this</span>.mDatas = mDatas;</span><br><span class="line">        layoutInflater=LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDatas.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDatas.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class="line">        ComplexMyAdapter.ViewHolder holder = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            view = layoutInflater.inflate(R.layout.item_listview, <span class="keyword">null</span>);</span><br><span class="line">            holder = <span class="keyword">new</span> ComplexMyAdapter.ViewHolder();</span><br><span class="line">            holder.tvName = view.findViewById(R.id.tv_name);</span><br><span class="line">            holder.ivPic = view.findViewById(R.id.iv_pic);</span><br><span class="line"></span><br><span class="line">            view.setTag(holder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            holder = (ComplexMyAdapter.ViewHolder) view.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        Bean b = mDatas.get(i);</span><br><span class="line">        holder.tvName.setText(b.getName());</span><br><span class="line">        holder.ivPic.setImageResource(b.getId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        ImageView ivPic;</span><br><span class="line">        TextView tvName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>五. 在MainActivity.java中使用适配器，此时需要初始化数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ListView listView;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_list_view);</span><br><span class="line"></span><br><span class="line">        listView = findViewById(R.id.lv);</span><br><span class="line">        listView.setAdapter(<span class="keyword">new</span> MyAdapter(<span class="keyword">this</span>));</span><br><span class="line">        initData();</span><br><span class="line">        listView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; adapterView, View view, <span class="keyword">int</span> i, <span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(ListViewActivity.<span class="keyword">this</span>,<span class="string">&quot;点击了&quot;</span>+i,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Bean&gt; mDatas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Bean b = <span class="keyword">new</span> Bean(<span class="string">&quot;list0&quot;</span>,R.drawable.smile);</span><br><span class="line">        mDatas.add(b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">18</span>;i++)&#123;</span><br><span class="line">            mDatas.add(<span class="keyword">new</span> Bean(<span class="string">&quot;list&quot;</span>+i,R.drawable.smile));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为数据绑定适配器</span></span><br><span class="line">        ComplexMyAdapter a = <span class="keyword">new</span> ComplexMyAdapter(<span class="keyword">this</span>,mDatas);</span><br><span class="line">        listView.setAdapter(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="listview高配版">ListView高配版</h2>
<p>除了上述以外，还有高配版，就是打造万能适配器，具体有兴趣可自学，暂时不作要求。</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>组件之ListView</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>组件之ListView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-RecycleView</title>
    <url>/2018/12/12/Android-RecycleView/</url>
    <content><![CDATA[<h1 id="android-recycleview">Android-RecycleView</h1>
<hr />
<h2 id="recycleview简介">RecycleView简介</h2>
<p>RecylerView是support-v7包中的新组件，是一个强大的滑动组件，与经典的ListView相比，同样拥有item回收复用的功能，这一点从它的名字recylerview即回收view也可以看出。</p>
<h2 id="recylerview使用步骤">RecylerView使用步骤</h2>
<p>一. 导入v7包，右键项目，点击Open Module Settings，点击Dependencies，再点击右边的+号，点击第一项Library dependency，进入后选择com.android.support:recyclerview-v7:28.0.0后点击ok</p>
<p>二. activity_recycleview布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.RecycleViewActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>三. 和ListView一样的item布局</p>
<p>四. 定义一个线性的Adapter适配器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">LinearAdapter</span>.<span class="title">LinearViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="comment">//private OnItemClickListener listener;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearAdapter</span><span class="params">(Context context<span class="comment">/*, OnItemClickListener listener*/</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context=context;</span><br><span class="line">        <span class="comment">//this.listener=listener;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LinearAdapter.<span class="function">LinearViewHolder <span class="title">onCreateViewHolder</span><span class="params">( ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinearViewHolder(LayoutInflater.from(context).inflate(R.layout.item_listview,viewGroup,<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(LinearAdapter.LinearViewHolder viewHolder, <span class="keyword">final</span> <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        viewHolder.textView.setText(<span class="string">&quot;Hello World!!&quot;</span>);</span><br><span class="line">        <span class="comment">//点击事件的实现</span></span><br><span class="line">        viewHolder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(context,<span class="string">&quot;click&quot;</span>+i,Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="comment">// listener.onClick(i);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LinearViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TextView textView;<span class="comment">//为简化代码就只设置textView了，image就不设置了</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LinearViewHolder</span><span class="params">( View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            textView = itemView.findViewById(R.id.tv_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/* public interface OnItemClickListener&#123;</span></span><br><span class="line"><span class="comment">        void onClick(int pos);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>五. 在MainActivity中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecycleViewActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_recycleview);</span><br><span class="line">        <span class="comment">//绑定id</span></span><br><span class="line">        recyclerView = findViewById(R.id.rv);</span><br><span class="line">        <span class="comment">//设置RecycleView的布局方式，这里是线性布局，默认垂直</span></span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">        recyclerView.setAdapter(<span class="keyword">new</span> LinearAdapter(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="recyclerview的扩展">RecyclerView的扩展</h2>
<p>RecyclerView当然还有很多用法，仅仅是布局就包括了线性布局，网格布局，水平布局，瀑布流等多种形式，除此以外还有Decoration等修饰功能，可以说是非常好用，有兴趣可自行了解。</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>组件之RecycleView</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>组件之RecycleView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-自定义控件</title>
    <url>/2018/12/13/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="android-自定义控件">Android-自定义控件</h1>
<h2 id="简介">简介</h2>
<p>有时，当系统自带的控件不能满足我们的需求时，我们可以利用控件都继承自View的特性来自定义一个控件，下面以自定义的一个标题栏为例，演示安卓中的自定义控件</p>
<h2 id="步骤">步骤</h2>
<p>一、 新建一个布局title.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/bt_back&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/back&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#fff&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_title&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;Title Text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/bt_edit&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/edit&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;3dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;1.5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>二、在activity_main.xml中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/title&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>三、在MainActivity中删除系统自带的标题栏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">         ActionBar actionBar = getSupportActionBar();</span><br><span class="line">        <span class="keyword">if</span>(actionBar!=<span class="keyword">null</span>)actionBar.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>四、在Java文件中实现标题栏上两个按钮的点击事件(略)</p>
<p>五、自定义控件的其余用法请自行学习。</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>组件之自定义控件</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>组件之自定义控件</tag>
      </tags>
  </entry>
  <entry>
    <title>Clash For Windows使用教程</title>
    <url>/2021/09/10/Clash-For-Windows%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="clash-for-windows使用教程">Clash For Windows使用教程</h1>
<h2 id="安装">1. 安装</h2>
<h3 id="命令行安装">1.1 命令行安装</h3>
<p>Windows下如果有scoop环境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scoop bucket add ZephonBucket https://github.com/Zephon-H/ZephonBucket</span><br><span class="line">scoop search clashforwindows</span><br></pre></td></tr></table></figure>
<p>然后会显示出对应软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ZephonBucket&#x27;</span> bucket:</span><br><span class="line">    clashforwindows (0.17.3)</span><br></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scoop install clashforwindows</span><br></pre></td></tr></table></figure>
<h3 id="直接下载安装">1.2 直接下载安装</h3>
<p>直接从<a href="%5BRelease%20v%200.17.3%20·%20Fndroid/clash_for_windows_pkg%20(github.com)%5D(https://github.com/Fndroid/clash_for_windows_pkg/releases/tag/0.17.3)">Github</a>上下载安装</p>
<p>安装模式<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.17.3/Clash.for.Windows.Setup.0.17.3.exe">(点击下载)</a></p>
<p>压缩包模式<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.17.3/Clash.for.Windows-0.17.3-win.7z">(点击下载)</a></p>
<p>也可以从GitHub别的作者下载其它版本的Clash</p>
<h2 id="使用">2. 使用</h2>
<p>点击Clash for windows图标，打开后，进入General进行如图设置：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910123226444.png" /></p>
<p>其中，System Proxy必须打开，Start with Windows(开机自启)随意</p>
<p>设置后，后台图标颜色会改变为如图：<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910124859341.png" /></p>
<p>然后进入Profiles设置</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910123454644.png" /></p>
<p>如图，先在<code>Download from a URL</code>处输入订阅链接，然后点击<code>Download</code></p>
<p>然后会出现对应的信息框：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910123607543.png" /></p>
<p>然后点击Proxies：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910123653830.png" /></p>
<p>如图，通常比较常用的就是Global、Rule和Direct三种模式，其中Rule最常用</p>
<ul>
<li><p>Global：全局模式，点击后，全局网络都会根据这个配置进行访问</p>
<p>具体操作如图：</p>
<p>首先点击类似wifi图标，进行测延迟</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910123838372.png" /></p>
<p>然后选择延迟相对低的节点，如图，我选的是香港78节点，延迟150ms</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910123951904.png" /></p>
<p>然后进行测试，由于此时开的是全局模式，所以，在百度中输入IP搜索，会发现返回的IP地址是对应的节点地区，如我这个就是香港</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910124118163.png" /></p></li>
<li><p>Rule：规则模式(或Proxy模式，或自动模式)</p>
<p>这个是根据订阅对应的代理规则进行配置的，相当于会自动根据你当前访问的网站进行代理切换，防止一些国内网址进入困难或访问缓慢，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910124339455.png" /></p>
<p>我这个订阅对应的节点比较多，所以对应的设置有较多的可选项，但实际上，只用选择第一个(节点选择)进行配置即可，配置过程和全局类似，先测试延迟(ping)，然后选择一个延迟较低的节点即可。</p>
<p>然后进行测试：</p>
<p>百度中搜索IP，会发现使用的本地网</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910124536690.png" /></p>
<p>Google就可以正常使用了</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210910124822470.png" /></p></li>
</ul>
<h2 id="订阅链接的获取">3 订阅链接的获取</h2>
<p>此处不进行推荐，可以自己寻找</p>
<p>现在的订阅通常可以分为SSR类型、Vmess类型和直接的Clash订阅类型，这里推荐一个<a href="https://acl4ssr-sub.github.io/">订阅转换的工具</a></p>
<p>使用方法：直接在订阅链接处输入其它类型订阅，然后其它配置默认(或自己摸索着换一下也行)，然后生成订阅链接，或者一键导入Clash也行</p>
]]></content>
      <categories>
        <category>工具使用教程</category>
      </categories>
      <tags>
        <tag>工具使用教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2020/02/20/Docker/</url>
    <content><![CDATA[<h1 id="docker">Docker</h1>
<h2 id="简介">1、简介</h2>
<p><strong>Docker</strong>是一个开源的应用容器引擎</p>
<p>Docker支持将软件编译成一个镜像，然后在镜像中各种软件做好配置，将镜像发布出去，其它使用者可以直接使用这个镜像</p>
<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<h2 id="核心概念">2、核心概念</h2>
<ul>
<li>Docker主机(Host)：安装了Docker程序的机器(Docker是直接安装在操作系统之上的)</li>
<li>Docker客户端(Client)：连接Docker主机进行操作</li>
<li>Docker仓库(Registry)：用来保存各种打包好的软件镜像</li>
<li>Docker镜像(Images)：软件打包好的镜像，放在Docker仓库中</li>
<li>Docker容器(Container)：镜像启动后的一个实例称为容器</li>
</ul>
<h2 id="使用docker">3、使用Docker</h2>
<p>步骤：</p>
<ol type="1">
<li><p>安装Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查内核版本，必须在3.10及以上</span></span><br><span class="line">uname -r </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Docker</span></span><br><span class="line">yum install docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动Docker</span></span><br><span class="line">Systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">docker -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机自启动</span></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li>
<li><p>去Docker仓库找到软件对应的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search tomcat</span><br><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure></li>
<li><p>使用Docker运行这个镜像，这个镜像就会生成一个Docker容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mytomcat -d tomcat:latest</span><br></pre></td></tr></table></figure></li>
<li><p>对容器的启动停止就是对软件的启动与停止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="docker常用操作">4、Docker常用操作</h2>
<h3 id="镜像操作">镜像操作</h3>
<table>
<thead>
<tr class="header">
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>检索</td>
<td>docker search 关键字</td>
<td>去docker hub上检索镜像</td>
</tr>
<tr class="even">
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr class="odd">
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr class="even">
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody>
</table>
<h3 id="容器操作">容器操作</h3>
<table>
<colgroup>
<col style="width: 7%" />
<col style="width: 40%" />
<col style="width: 52%" />
</colgroup>
<thead>
<tr class="header">
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>运行</td>
<td>docker run --name container-name -d image-name</td>
<td>--name：自定义容器名；-d：后台运行；image-name：指定镜像模板</td>
</tr>
<tr class="even">
<td>列表</td>
<td>docker ps(查看运行中的容器)</td>
<td>加上-a可以查看所有容器</td>
</tr>
<tr class="odd">
<td>停止</td>
<td>docker stop container-name/container-id</td>
<td>停止当前运行的容器</td>
</tr>
<tr class="even">
<td>端口映射</td>
<td>-p 6666:6379(则使用6666访问)</td>
<td>-p：主机端口(映射到)容器内部的端口</td>
</tr>
<tr class="odd">
<td>容器日志</td>
<td>docker logs container -name/container-id</td>
<td></td>
</tr>
</tbody>
</table>
<p>如果有权限问题，可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run xxx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">sudo groupadd docker     #添加docker用户组</span><br><span class="line">sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中</span><br><span class="line">newgrp docker     #更新用户组</span><br><span class="line">docker ps    #测试docker命令是否可以使用sudo正常使用</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换group</span></span><br><span class="line">newgrp - docker</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>EL表达式和JSTL标签-复习</title>
    <url>/2020/02/07/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="el表达式和jstl标签">EL表达式和JSTL标签</h1>
<h2 id="el表达式">EL表达式</h2>
<ul>
<li><p>概念：Expression Language 表达式语言</p></li>
<li><p>作用：替换和简化jsp页面中java代码的编写</p></li>
<li><p>语法：${表达式}</p></li>
<li><p>注意：</p>
<ul>
<li>jsp默认支持el表达式的，如果要忽略EL表达式，可
<ol type="1">
<li>设置jsp中page指令中：isELIgnored="true" 忽略当前jsp页面中所有el表达式</li>
<li> ${表达式}：忽略当前这个el表达式</li>
</ol></li>
</ul></li>
<li><p>使用：</p>
<ul>
<li><p>运算</p>
<ol type="1">
<li>算数运算符：+ - * /(div) %(mod)</li>
<li>比较运算符：&gt; &lt; &gt;= &lt;= != ==</li>
<li>逻辑运算符：&amp;&amp;(and) ||(or) !(not)</li>
<li>空运算符：empty
<ul>
<li>功能：判断字符串/集合/数组对象是否为null并且长度是否为0 <code>$&#123;empty list&#125;</code></li>
<li><code>$&#123;not empty str&#125;</code></li>
</ul></li>
</ol></li>
<li><p>获取值</p>
<ol type="1">
<li>EL表达式只能从域对象中获取值</li>
<li>语法：
<ol type="1">
<li>${域名称.键名}：从指定域中获取指定键的值
<ul>
<li>域名称：
<ol type="1">
<li>pageScope--&gt;pageContext</li>
<li>requestScope--&gt;request</li>
<li>sessionScope--&gt;session</li>
<li>applicationScope--&gt;application(ServletContext)</li>
</ol></li>
</ul></li>
<li>${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止</li>
</ol></li>
<li>获取对象、List集合、Map集合的值
<ol type="1">
<li>对象：<code>$&#123;域名称.键名.属性名&#125;</code>
<ul>
<li>本质上会去调用对象的getter方法</li>
</ul></li>
<li>List集合：<code>$&#123;域名称.键名[索引]&#125;</code></li>
<li>Map集合：<code>$&#123;域名称.键名.key名称&#125;   $&#123;域名称.键名["key名称"]&#125;</code></li>
</ol></li>
</ol></li>
<li><p>隐匿对象</p>
<ul>
<li><p>EL表达式有11个隐式对象</p></li>
<li><p>pageContext：获取jsp其它八个内置对象</p>
<p>${pageContext.request.contextPath}：动态获取虚拟目录</p></li>
</ul></li>
</ul></li>
</ul>
<h2 id="jstl表达式">JSTL表达式</h2>
<ul>
<li><p>概念：JavaServer Page Tag Library JSP标准标签库</p>
<ul>
<li>是由Apache组织提供的开源的免费的JSP标签</li>
</ul></li>
<li><p>作用：用于简化和替换JSP页面上的java代码</p></li>
<li><p>使用步骤：</p>
<ol type="1">
<li>导入jstl相关jar包</li>
<li>引入标签库</li>
<li>使用标签</li>
</ol></li>
<li><p>常用的JSTL标签</p>
<ol type="1">
<li><p>if：相当于java中的if</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- 属性：</span><br><span class="line">    			test 必须属性，接收<span class="keyword">boolean</span>表达式</span><br><span class="line">    				- 如果表达式为<span class="keyword">true</span>，则显示<span class="keyword">if</span>标签体内容，否则不显示</span><br><span class="line">    				- 一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line">    	  注意：c:<span class="keyword">if</span>标签没有<span class="keyword">else</span>情况，想要<span class="keyword">else</span>情况，可以再定义一个c:<span class="keyword">if</span>标签</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;false&quot;</span>&gt;&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>choose：相当于java中的switch</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">  &lt;c:when test=<span class="string">&quot;$&#123;number==0&#125;&quot;</span>&gt;<span class="number">0</span>&lt;/c:when&gt;</span><br><span class="line">  &lt;c:when test=<span class="string">&quot;$&#123;number==1&#125;&quot;</span>&gt;<span class="number">1</span>&lt;/c:when&gt;</span><br><span class="line">  &lt;c:otherwise&gt;</span><br><span class="line">    数字有误</span><br><span class="line">  &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>foreach：相当于java中的for循环</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  varStatus:循环状态对象</span><br><span class="line">    index:容器中元素的索引，从<span class="number">0</span>开始</span><br><span class="line">    count:循环次数，从<span class="number">1</span>开始</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">--%&gt;</span><br><span class="line">  &lt;c:forEach begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;10&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    $&#123;i&#125;&lt;br&gt;</span><br><span class="line">  &lt;/c:forEach&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  <span class="keyword">for</span>(String s:list)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">--%&gt;</span><br><span class="line">  &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;str&quot;</span> varStatus=<span class="string">&quot;s&quot;</span>&gt;</span><br><span class="line">    $&#123;s.index&#125;--$&#123;s.count&#125;--$&#123;str&#125;</span><br><span class="line">  &lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></li>
</ol></li>
</ul>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter和Listener-复习</title>
    <url>/2020/02/06/Filter%E5%92%8CListener-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="filter和listener">Filter和Listener</h1>
<h2 id="filter过滤器">Filter:过滤器</h2>
<ul>
<li><p>当访问服务器中的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能</p></li>
<li><p>过滤器的作用：</p>
<ul>
<li>一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...</li>
</ul></li>
<li><p>快速入门</p>
<ol type="1">
<li>定义一个类，实现接口Filter</li>
</ol></li>
</ul>
<ol start="2" type="1">
<li>复写方法
<ol start="3" type="1">
<li>配置拦截路径
<ul>
<li>web.xml</li>
<li>注解</li>
</ul></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问所有资源之前，都会执行该过滤器</span></span><br><span class="line">     <span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">     </span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;过滤器被执行&quot;</span>);</span><br><span class="line">     </span><br><span class="line">             <span class="comment">// 放行</span></span><br><span class="line">             filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>过滤器细节：</p>
<ol type="1">
<li><p>web.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zephon.web.filter.FilterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>过滤器执行流程</p>
<ol type="1">
<li>执行过滤器</li>
<li>执行放行后的资源</li>
<li>回来执行过滤器放行代码下边的代码</li>
</ol></li>
<li><p>过滤器生命周期方法</p>
<ol type="1">
<li>init：在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</li>
<li>doFilter：每次请求被拦截资源时，会被执行，执行多次</li>
<li>destroy：在服务器关闭后，Filter对象被销毁，如果服务器是正常关闭，则会执行destroy方法。只执行一次，用于释放资源</li>
</ol></li>
<li><p>过滤器配置详解</p>
<ol type="1">
<li><p>拦截路径配置</p>
<ul>
<li>具体资源路径：/index.jsp 只有访问index.jsp资源时，过滤器被执行</li>
<li>拦截目录：/user/* 访问/user下所有资源时，过滤器都会被执行</li>
<li>后缀名拦截：*.jsp 访问所有后缀名为jsp资源时，过滤器都会被执行</li>
<li>拦截所有资源：/*</li>
</ul></li>
<li><p>拦截方式配置：资源被访问的方式</p>
<ul>
<li><p>注解配置</p>
<ul>
<li>设置dispatcherTypes
<ol type="1">
<li>REQUEST：默认值。浏览器直接请求资源</li>
<li>FORWARD：转发访问资源</li>
<li>INCLUDE：包含访问资源</li>
<li>ERROR：错误跳转资源</li>
<li>ASYNC：异步访问资源</li>
</ol></li>
</ul></li>
<li><p>web.xml</p>
<p><code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code></p></li>
</ul></li>
</ol></li>
<li><p>过滤器链</p>
<ul>
<li>执行顺序：如果有两个过滤器：过滤器1和过滤器2
<ol type="1">
<li>过滤器1执行</li>
<li>过滤器2执行</li>
<li>资源执行</li>
<li>过滤器2执行</li>
<li>过滤器1执行</li>
</ol></li>
<li>先后顺序问题：
<ul>
<li>注解配置：按照类名的字符串比较规则比较，值小的先执行(如AFilter和BFilter相比，则AFilter先执行)</li>
<li>web.xml配置：&lt; filter-mapping &gt;谁定义在上面谁先执行</li>
</ul></li>
</ul></li>
</ol></li>
<li><p>案例-过滤敏感词</p>
<ul>
<li>使用动态代理模式，通过增强request对象获取参数相关方法敏感词过滤</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建代理对象，增强getParameter方法</span></span><br><span class="line">        ServletRequest proxy_req = (ServletRequest)Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//增强getParameter方法</span></span><br><span class="line">                <span class="comment">//判断是否是getParameter方法</span></span><br><span class="line">                <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;getParameter&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">// 增强返回值</span></span><br><span class="line">                    <span class="comment">//获取返回值</span></span><br><span class="line">                    String value = (String)method.invoke(req,args);</span><br><span class="line">                    <span class="keyword">if</span>(value!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(String str:list)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(value.contains(str))&#123;</span><br><span class="line">                                value = value.replaceAll(str,<span class="string">&quot;***&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(req,args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 2. 放行</span></span><br><span class="line">        chain.doFilter(proxy_req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载配置文件</span></span><br><span class="line">            <span class="comment">// 1.加载文件</span></span><br><span class="line">            ServletContext servletContext = config.getServletContext();</span><br><span class="line">            String realPath = servletContext.getRealPath(<span class="string">&quot;/WEB-INF/classes/敏感词汇.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.读取文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(realPath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.将文件的每一行数据添加到list</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="listener监听器">Listener：监听器</h2>
<ul>
<li><p>概念：web的三大组件之一</p>
<ul>
<li>事件监听机制
<ul>
<li>事件：一件事情</li>
<li>事件源：事件发生的地方</li>
<li>监听器：一个对象</li>
<li>注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码。</li>
</ul></li>
</ul></li>
<li><p>ServletContextListener：监听servletContext对象的创建和销毁</p>
<ul>
<li>void contextDestroyed(ServletContextEvent sce)：ServletContext对象被销毁之前会调用该方法</li>
<li>void contextInitialized(ServletContextEvent sce)：ServletContext对象创建后会调用该方法</li>
</ul></li>
<li><p>步骤：</p>
<ol type="1">
<li><p>定义一个类，实现ServletContextListener接口</p></li>
<li><p>复写方法</p></li>
<li><p>配置</p>
<ul>
<li><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.zephon.web.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 指定初始化参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/application.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注解</p>
<p><span class="citation" data-cites="WebListener">@WebListener</span>()</p></li>
</ul></li>
</ol></li>
</ul>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>GRU模型</title>
    <url>/2021/10/10/GRU%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="gru模型">GRU模型</h1>
<h2 id="gru">GRU</h2>
<p>GRU(Gated Recurrent Unit)也称门控制单元结构，它也是传统RNN的变体，同LSTM一样能够有效捕捉长序列之间的语义关联，缓解梯度消失或爆炸现象。同时它的结构和计算要比LSTM更简单，它的核心结构可以分为两个部分去解析：</p>
<ul>
<li>更新门</li>
<li>重置门</li>
</ul>
<h2 id="gru的内部结构图和计算公式">GRU的内部结构图和计算公式</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211010201028447.png" /> <span class="math display">\[
z_t = \sigma(W_z\cdot [h_{t-1}, x_t]) \\
r_t=\sigma(W_r\cdot [h_{t-1},x_t]) \\
\widetilde h_t = \tanh (W\cdot [r_t*h_{t-1}, x_t]) \\
h_t = (1-z_t)*h_{t-1} + z_t * \widetilde h_t
\]</span></p>
<p>## 结构解释图</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211010201517871.png" /></p>
<h2 id="gru的更新门和重置门结构图">GRU的更新门和重置门结构图</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/gru2.png" /></p>
<h2 id="内部结构分析">内部结构分析</h2>
<ul>
<li>和之前分析过的LSTM中的门控一样，首先计算更新门和重置门的门值，分别是z(t)和r(t)，计算方法就是使用X(t)与h(t-1)拼接进行线性变换，再经过sigmoid激活</li>
<li>之后更新门门值作用在了h(t-1)上，代表控制上一时间步传来的信息有多少可以被利用</li>
<li>接着就是使用这个更新后的h(t-1)进行基本的RNN计算，即与x(t)拼接进行线性变换，经过tanh激活，得到新的h(t)</li>
<li>最后重置门的门值会作用在新的h(t)，而1-门值会作用在h(t-1)上，随后将两者的结果相加，得到最终的隐含状态输出h(t)</li>
<li>这个过程意味着重置门有能力重置之前所有的计算，当门值趋于1时，输出就是新的h(t)，而当门值趋于0时，输出就是上一时间步的h(t-1)</li>
</ul>
<h2 id="bi-gru">Bi-GRU</h2>
<ul>
<li>Bi-GRU和Bi-LSTM的逻辑相同，都是不改变其内部结构，而是将模型应用两次且方向不同，再将再次得到的GRU结果进行拼接作为最终输出</li>
</ul>
<h2 id="pytorch中的gru工具使用">Pytorch中的GRU工具使用</h2>
<ul>
<li>位置：在torch.nn工具包中，通过torch.nn.GRU可调用</li>
</ul>
<h3 id="nn.gru类初始化主要参数解释">nn.GRU类初始化主要参数解释</h3>
<ul>
<li>input_size：输入张量x中的特征维度的大小</li>
<li>hidden_size：隐层张量h中特征维度的大小</li>
<li>num_layers：隐含层的数量</li>
<li>bidirectional：是否选择使用双向GRU，如果为True，则使用，默认不使用</li>
</ul>
<h3 id="nn.gru类实例化对象主要参数解释">nn.GRU类实例化对象主要参数解释</h3>
<ul>
<li>input：输入张量x</li>
<li>h0：初始化的隐层张量h</li>
</ul>
<h3 id="nn.gru使用示例">nn.GRU使用示例</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="comment"># 5:输入维度；6:隐层维度；2:隐藏层数量</span></span><br><span class="line">rnn = nn.GRU(<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 1:序列长度；3:批次大小；5：输入维度</span></span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 2:隐藏层层数；3:批次大小；6:隐层维度</span></span><br><span class="line">h0 = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">output, hn = rnn(<span class="built_in">input</span>, h0)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="built_in">print</span>(hn)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[[-0.3712, 0.5142, -0.3155, 0.0723, -0.4794, -0.3006], [ 1.0281, 0.8697, -2.3055, -0.3992, -0.7650, -0.5211], [ 0.5593, -0.2648, -0.6986, -0.4224, 0.9587, 0.2137]]], grad_fn=<StackBackward>)</p>
<p>tensor([[[ 0.4705, 0.5385, -0.5387, 0.2447, -0.0955, -0.0045], [-0.4243, 1.7435, -0.6828, -1.5498, -1.0110, 0.1387], [ 0.4374, -0.6985, 0.3958, -0.5070, 0.0546, 0.2563]], [[-0.3712, 0.5142, -0.3155, 0.0723, -0.4794, -0.3006], [ 1.0281, 0.8697, -2.3055, -0.3992, -0.7650, -0.5211], [ 0.5593, -0.2648, -0.6986, -0.4224, 0.9587, 0.2137]]], grad_fn=<StackBackward>)</p>
</blockquote>
<h2 id="gru的优势">GRU的优势</h2>
<ul>
<li>GRU和LSTM作用相同，在捕捉长序列语义关联时，能有效抑制梯度消失或爆炸，效果优于传统RNN且计算复杂度相比LSTM要小</li>
</ul>
<h2 id="gru的缺点">GRU的缺点</h2>
<ul>
<li>GRU仍然不能完全解决梯度消失问题，同时其作用RNN的变体，有着RNN结构本身的一大弊端，即不可并行计算，这在数据量和模型体量逐渐增大的未来，是RNN发展的关键瓶颈。</li>
</ul>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP-复习</title>
    <url>/2020/02/05/HTTP-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="http-复习">HTTP-复习</h1>
<h2 id="概述">概述</h2>
<ul>
<li>Hyper Text Transfer Protocol 超文本传输协议
<ul>
<li>传输协议：定义了客户端和服务器通信时，发送数据的格式</li>
</ul></li>
<li>特点：
<ol type="1">
<li>基于TCP/IP的高级协议</li>
<li>默认端口号：80</li>
<li>基于请求/响应模型的：一次请求对应一次响应</li>
<li>无状态的：每次请求之间相互独立，不能交互数据</li>
</ol></li>
<li>历史版本：
<ul>
<li>1.0：每次请求响应都会建立连接</li>
<li>1.1：复用连接</li>
</ul></li>
</ul>
<h2 id="请求">请求</h2>
<ol type="1">
<li><p>请求行</p>
<p>请求方式 请求url 请求协议/版本</p>
<p><code>GET /login.html HTTP/1.1</code></p>
<ul>
<li>请求方式：
<ul>
<li>HTTP协议有7种请求方式，常用的有2种
<ul>
<li>GET：
<ol type="1">
<li>请求参数在请求行中，在url后</li>
<li>请求的url长度有限制</li>
<li>不太安全</li>
</ol></li>
<li>POST：
<ol type="1">
<li>请求参数在请求体中</li>
<li>请求长度无限制</li>
<li>相对安全</li>
</ol></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>请求头-客户端浏览器告诉服务器一些信息</p>
<p>请求头名称：请求头值</p>
<p><code>Host:localhost</code></p>
<ul>
<li>常见请求头：
<ul>
<li>User-Agent：浏览器告诉服务器，访问时使用的浏览器版本信息(可以在服务器获取该头信息，解决浏览器的兼容性问题)</li>
<li>Referer：http://localhost/login.html（告诉服务器，当前请求从哪里来）
<ul>
<li>作用：
<ol type="1">
<li>防盗链</li>
<li>统计工作</li>
</ol></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>请求空行</p>
<p>空行</p></li>
<li><p>请求体(正文)</p>
<ul>
<li>封装POST请求消息的请求参数的</li>
</ul></li>
</ol>
<p>## Request</p>
<h3 id="request-原理">Request-原理</h3>
<ol type="1">
<li>tomcat服务器会根据请求url中的资源路径，创建对应的ServletDemo的对象</li>
<li>tomcat服务器，会创建request和response对象，request对象中封装请求消息数据</li>
<li>tomcat将request和response两个对象传递给service方法，并且调用service方法</li>
<li>程序员可以通过request获取请求消息数据，通过response对象设置响应消息数据</li>
<li>服务器在给浏览器做出响应前，会从response对象中获取响应消息数据</li>
</ol>
<blockquote>
<ol type="1">
<li>request和response对象是由服务器创建的，我们来使用它们</li>
<li>request对象是来获取请求消息，response对象是来设置响应消息的</li>
</ol>
</blockquote>
<h3 id="request-对象继承体系结构">Request-对象继承体系结构</h3>
<ul>
<li>ServletRequest -- 接口</li>
<li>HttpServletRequest(继承ServletRequest) -- 接口</li>
<li>org.apache.catalina.connector.RequestFacade(实现HttpServletRequest)</li>
</ul>
<h3 id="request-获取请求消息">Request-获取请求消息</h3>
<ol type="1">
<li><p>获取请求消息数据</p>
<ol type="1">
<li>获取请求行数据
<ul>
<li>方法：
<ol type="1">
<li>获取请求方式：String getMethod()</li>
<li><strong>获取虚拟目录：String getContextPath()</strong></li>
<li>获取Servlet路径：String getServletPath()</li>
<li>获取get方式请求参数：String getQueryString()</li>
<li><strong>获取请求URI：String getRequestURI() ：/xxx/aaa</strong>
<ul>
<li>StringBuffer getRequestURL()：http://localhost/xxx/aaa</li>
</ul></li>
<li>获取协议及版本：String getProtocol()</li>
<li>获取客户机的IP地址：String getRemoteAddr()</li>
</ol></li>
</ul></li>
<li>获取请求头数据
<ul>
<li>方法：
<ol type="1">
<li><strong>通过请求头名称获取请求头的值：String getHeader(String name)</strong></li>
<li>获取所有的请求头名称：Enumeration&lt; String &gt; getHeaderName()</li>
</ol></li>
</ul></li>
<li>获取请求体数据
<ul>
<li>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</li>
<li>步骤：
<ol type="1">
<li>获取流数据
<ul>
<li>获取字符输入流，只能操作字符数据：BufferedReader getReader()</li>
<li>获取字节输入流，可以操作所有类型数据：ServletInputStream getInputStream()</li>
</ul></li>
<li>再从流对象中获取数据</li>
</ol></li>
</ul></li>
</ol></li>
<li><p>其它功能</p>
<ol type="1">
<li><p>获取请求参数(通用方式)：get、post都可用</p>
<ol type="1">
<li>根据参数名称获取参数值：String getParameter(String name)</li>
<li>根据参数名称获取参数值的数组：String[] getParameterValues(String name)</li>
<li>获取所有请求的参数名称：Enumeration&lt; String &gt; getParameterNames()</li>
<li>获取所有参数的map集合：Map&lt; String,String[] &gt; getParameterMap()</li>
</ol>
<blockquote>
<p>中文乱码问题：</p>
<ul>
<li><p>get方式：tomcat 8 已经将get方式乱码问题解决了</p></li>
<li><p>post方式：会乱码</p>
<p>解决：req.setCharacterEncoding("utf-8");</p></li>
</ul>
</blockquote></li>
<li><p>请求转发：一种在服务器内部的资源跳转方式</p>
<ul>
<li>步骤
<ol type="1">
<li>通过req对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li>
<li>使用RequestDispatcher对象来进行转发：forward(ServletRequest request,ServletResponse response)</li>
</ol></li>
<li>特点：
<ol type="1">
<li>浏览器地址栏路径不发生变化</li>
<li>只能转发到当前服务器内部资源中</li>
<li>转发是一次请求</li>
</ol></li>
</ul></li>
<li><p>共享数据</p>
<ul>
<li><p>域对象：一个有作用范围的对象，可以在范围内共享数据</p></li>
<li><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p></li>
<li><p>方法：</p>
<ol type="1">
<li>存储数据：setAttribute(String name,Object obj)</li>
<li>通过键获取值：Object getAttribute(String name)</li>
<li>通过键移除键值对：removeAttribute(String name)</li>
</ol></li>
</ul></li>
<li><p>获取ServletContext</p>
<ul>
<li>ServletContext getServletContext()</li>
</ul></li>
</ol></li>
</ol>
<h2 id="响应">响应</h2>
<ol type="1">
<li>响应行
<ul>
<li>组成：协议/版本 响应状态码 状态码描述<code>HTTP/1.1 200 OK</code></li>
<li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态
<ul>
<li>1xx：服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx状态码</li>
<li>2xx：成功</li>
<li>3xx：重定向-302(重定向),304(访问缓存)</li>
<li>4xx：客户端错误-404(路径没有对应资源)，405(请求方式没有对应的方法)</li>
<li>5xx：服务器端错误-500(服务器内部出现异常)</li>
</ul></li>
</ul></li>
<li>响应头
<ul>
<li>格式：头名称：值</li>
<li>常见的响应头：
<ol type="1">
<li>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</li>
<li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据
<ul>
<li>值：
<ul>
<li>in-line：默认值，在当前页面内打开</li>
<li>attachment;filename=xxx：以附件形式打开响应体，文件下载</li>
</ul></li>
</ul></li>
</ol></li>
</ul></li>
<li>响应空行</li>
<li>响应体：传输的数据</li>
</ol>
<p>Response</p>
<h3 id="功能设置响应消息">功能：设置响应消息</h3>
<ol type="1">
<li>设置响应行
<ul>
<li>格式：HTTP/1.1 200 ok</li>
<li>设置状态码：setStatus(int sc)</li>
</ul></li>
<li>设置响应头：setHeader(String name,String value)</li>
<li>设置响应体
<ul>
<li>使用步骤：
<ol type="1">
<li>获取输出流
<ul>
<li>字符输出流：PrintWriter getWriter()</li>
<li>字节输出流：ServletOutputStream getOutputStream()</li>
</ul></li>
<li>使用输出流，将数据输出到客户端浏览器</li>
</ol></li>
</ul></li>
</ol>
<h2 id="案例">案例</h2>
<h3 id="完成重定向">完成重定向</h3>
<ul>
<li>资源跳转的方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重定向到other</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        // 设置状态码302</span></span><br><span class="line"><span class="comment">//        resp.setStatus(302);</span></span><br><span class="line"><span class="comment">//        // 设置响应头location</span></span><br><span class="line"><span class="comment">//        resp.setHeader(&quot;location&quot;,&quot;/other&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简单的重定向方法</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/other&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重定向的特点
<ol type="1">
<li>地址栏发生变化</li>
<li>重定向可以访问其它站点(服务器)资源</li>
<li>重定向是两次请求</li>
</ol></li>
<li>路径写法
<ol type="1">
<li>路径分类
<ul>
<li>相对路径：通过相对路径不可以确定唯一资源(./xxx/aaa，以.开头的路径)</li>
<li>绝对路径：通过绝对路径可确定唯一资源(/xxx/aaa，以/开头的路径)
<ul>
<li>规则：判断定义的路径是给谁用的？(请求从哪里发出）如果是给客户端浏览器使用，需要加虚拟目录(项目的访问路径)，如果是给服务器使用则不需要加虚拟目录</li>
</ul></li>
</ul></li>
<li>动态获取虚拟目录：request.getContextPath()</li>
</ol></li>
</ul>
<h3 id="服务器输出字符数据到浏览器">服务器输出字符数据到浏览器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 解码乱码问题</span></span><br><span class="line">        <span class="comment">// 获取流对象之前设置编码</span></span><br><span class="line">        <span class="comment">// resp.setCharacterEncoding(&quot;utf-8&quot;);</span></span><br><span class="line">        <span class="comment">// resp.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        <span class="comment">// 告诉浏览器发送的消息体数据的编码，建议浏览器使用该编码解码</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;hello你好&quot;</span>);</span><br><span class="line">    &#125;	</span><br></pre></td></tr></table></figure>
<h3 id="服务器输出字节数据到浏览器">服务器输出字节数据到浏览器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取字节输出流</span></span><br><span class="line">        ServletOutputStream sos = resp.getOutputStream();</span><br><span class="line">        <span class="comment">// 输出数据</span></span><br><span class="line">        sos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="验证码">验证码</h3>
<ul>
<li>本质上是一张图片</li>
<li>目的：防止恶意表单</li>
</ul>
<h2 id="servletcontext对象">ServletContext对象</h2>
<ul>
<li><p>概念：代表整个Web应用，可以和程序的容器(服务器)通信</p></li>
<li><p>获取：</p>
<ol type="1">
<li>通过request对象获取request.getServletContext();</li>
<li>通过HttpServlet获取this.getServletContext();</li>
</ol></li>
<li><p>功能：</p>
<ol type="1">
<li><p>获取MIME类型</p>
<ul>
<li>MIME类型：在互联网通信过程中定义的一种文件数据类型
<ul>
<li>格式： 大类型/小类型 text/html， image/jpeg</li>
</ul></li>
<li>获取：String getMimeType(String file)</li>
</ul></li>
<li><p>域对象：共享数据</p>
<ul>
<li>setAttribute(String name,Object value)</li>
<li>getAttribute(String name)</li>
<li>removeAttribute(string name)</li>
</ul>
<blockquote>
<p>ServletContext对象范围：所有用户所有请求的数据</p>
</blockquote></li>
<li><p>获取文件的真实(服务器)路径</p>
<ul>
<li>方法：String getRealPath(String path)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// web目录下资源访问</span></span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">String realPath = context.getRealPath(<span class="string">&quot;/b.txt&quot;</span>);</span><br><span class="line"><span class="comment">// WEB-INF目录下资源访问</span></span><br><span class="line">String realPath1 = context.getRealPath(<span class="string">&quot;/WEB-INF/c.txt&quot;</span>);</span><br><span class="line"><span class="comment">// src目录下资源访问</span></span><br><span class="line">String realPath2 = context.getRealPath(<span class="string">&quot;/WEB-INF/classes/a.txt&quot;</span>);</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li>
</ol></li>
</ul>
<h2 id="案例-1">案例</h2>
<h3 id="文件下载">文件下载</h3>
<ul>
<li><p>步骤</p>
<ol type="1">
<li>定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</li>
<li>定义Servlet
<ol type="1">
<li>获取文件名称</li>
<li>使用字节输入流加载文件进内存</li>
<li>指定response的响应头：<code>content-disposition:attachment;filename=xxx</code></li>
<li>将数据写到response输出流</li>
</ol></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/path/downloadServlet?filename=1.jpg&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/downloadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String filename = req.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = context.getRealPath(<span class="string">&quot;/img/&quot;</span>+filename);</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        String mimeType = context.getMimeType(filename);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;content-type&quot;</span>,mimeType);</span><br><span class="line"></span><br><span class="line">        String agent = req.getHeader(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line">        filename = DownloadUtil.getFileName(agent, filename);</span><br><span class="line">        System.out.println(agent);</span><br><span class="line">        System.out.println(filename);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line"></span><br><span class="line">        ServletOutputStream sos = resp.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>中文文件名问题</p>
<ul>
<li>解决思路：
<ul>
<li>获取客户端使用的浏览器使用版本信息</li>
<li>根据不同的版本信息，设置filename的编码方式不同</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent,String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(agent.contains(<span class="string">&quot;MSIE&quot;</span>))&#123;</span><br><span class="line">            filename = URLEncoder.encode(filename,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">&quot;+&quot;</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(agent.contains(<span class="string">&quot;Firefox&quot;</span>))&#123;</span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">&quot;=?utf-8?B?&quot;</span>+base64Encoder.encode(filename.getBytes(<span class="string">&quot;utf-8&quot;</span>))+<span class="string">&quot;?=&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            filename = URLEncoder.encode(filename,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP-复习</title>
    <url>/2020/02/06/JSP-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="jsp">JSP</h1>
<h2 id="概念">概念</h2>
<ul>
<li><p>Java Server Pages：java服务器端页面</p>
<ul>
<li><p>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</p></li>
<li><p>用于简化书写 ## 原理</p></li>
<li><p>JSP本质上就是一个Servlet</p></li>
</ul></li>
<li><p>JSP的脚本：JSP定义Java代码的方式</p>
<ol type="1">
<li>&lt;% 代码 %&gt;：定义的Java代码，在service方法中可以定义什么，该脚本中就可以定义什么</li>
</ol></li>
</ul>
<ol start="2" type="1">
<li>&lt;%! 代码 %&gt;：定义的Java代码，在jsp转换后的java类的成员位置</li>
<li>&lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中定义什么，该脚本中就可以定义什么。</li>
</ol>
<h2 id="指令">指令</h2>
<ul>
<li><p>作用：用于配置JSP页面，导入资源文件</p></li>
<li><p>格式：<code>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ...%&gt;</code></p></li>
<li><p>分类：</p>
<ol type="1">
<li><p>page：配置JSP页面的</p>
<ul>
<li>contentType：等同于response.setContentType()
<ol type="1">
<li>设置响应体的mime类型以及字符集</li>
<li>设置当前jsp页面的编码（只能是高级的IDE才能生效，否则要设置pageEncoding属性设置当前页面的字符集</li>
</ol></li>
<li>import：导包</li>
<li>errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</li>
<li>isErrorPage：标识当前页面是否是错误页面
<ul>
<li>true：是，可以使用内置对象exception</li>
<li>false：否，默认值，不可以使用内置对象exception</li>
</ul></li>
</ul></li>
<li><p>include：页面包含的。导入页面的资源文件</p>
<p><code>&lt;%@ include file="top.jsp"%&gt;</code></p></li>
<li><p>taglib：导入资源</p>
<p><code>&lt;%@ taglib prefix ="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</code></p>
<ul>
<li>prefix:前缀</li>
</ul></li>
</ol></li>
</ul>
<h2 id="注释">注释</h2>
<ol type="1">
<li>html注释：&lt; !-- -- &gt;：只能注释html代码片断</li>
<li>jsp注释：&lt;%-- --%&gt;：可以注释所有，推荐使用</li>
</ol>
<h2 id="jsp的内置对象">JSP的内置对象</h2>
<ul>
<li><p>在jsp页面中不需要获取和创建，可以直接使用的对象</p></li>
<li><p>jsp一共有9个内置对象</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">变量名</th>
<th style="text-align: center;">真实类型</th>
<th style="text-align: center;">作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">pageContext</td>
<td style="text-align: center;">PageContext</td>
<td style="text-align: center;">当前页面共享数据，还可以获取其它8个对象</td>
</tr>
<tr class="even">
<td style="text-align: center;">request</td>
<td style="text-align: center;">HttpServletRequest</td>
<td style="text-align: center;">一次请求访问多个资源(转发)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">session</td>
<td style="text-align: center;">HttpSession</td>
<td style="text-align: center;">一次会话的多个请求间</td>
</tr>
<tr class="even">
<td style="text-align: center;">application</td>
<td style="text-align: center;">ServletContext</td>
<td style="text-align: center;">所有用户间</td>
</tr>
<tr class="odd">
<td style="text-align: center;">response</td>
<td style="text-align: center;">HttpServletResponse</td>
<td style="text-align: center;">响应对象</td>
</tr>
<tr class="even">
<td style="text-align: center;">page</td>
<td style="text-align: center;">Object</td>
<td style="text-align: center;">当前页面(Servlet)的对象 this</td>
</tr>
<tr class="odd">
<td style="text-align: center;">out</td>
<td style="text-align: center;">JspWriter</td>
<td style="text-align: center;">输出对象，数据输出到页面上</td>
</tr>
<tr class="even">
<td style="text-align: center;">config</td>
<td style="text-align: center;">ServletConfig</td>
<td style="text-align: center;">Servlet的配置对象</td>
</tr>
<tr class="odd">
<td style="text-align: center;">exception</td>
<td style="text-align: center;">Throwable</td>
<td style="text-align: center;">异常对象</td>
</tr>
</tbody>
</table>
<ul>
<li><p>out：字符输出流对象。可以将数据输出到页面上，和response.getWriter()类似</p>
<blockquote>
<p>response.getWriter()和out.write()的区别：</p>
<p>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据，所以response.getWriter()数据输出永远在out.write之前</p>
</blockquote></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>三层架构</title>
    <url>/2019/04/08/Java-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="三层架构">三层架构</h1>
<hr />
<h2 id="简介">简介</h2>
<p>与MVC设计模式的目标一致，都是为了解耦合、提高代码复用</p>
<p>区别：二者对项目理解的角度不同</p>
<h2 id="三层组成">三层组成</h2>
<p>表示层（USL，User Show Layer；经常称作视图层）</p>
<p>--前台：对应于MVC中的View，用于和用户交互、界面的显示(jsp、js、html、css、jquery等web前端技术)，代码位置：Web</p>
<p>--后台：对应于MVC中Controller，用于控制跳转、调用业务逻辑层(Servlet(SpringMVC Structs2))代码位置：xxx.servlet包中</p>
<p>业务逻辑层（BLL，Business Logic Layer；Service层），代码位置：xxx.service包(xxx.manager，xxx.bll)</p>
<p>--接收表示层的请求调用</p>
<p>--组装数据访问层，逻辑性的操作（增删改查，删：查+删）</p>
<p>数据访问层（DAL，Data Access Layer；Dao层）</p>
<p>--直接访问数据库，原子性的操作（增删改查），代码位置：xxx.dao包</p>
<h2 id="三层间的关系">三层间的关系</h2>
<p>上层将请求传递给下层，下层处理后返回给上层</p>
<p>上层依赖于下层，依赖：代码的理解就是持有成员变量，或者理解为：有A的前提是必须先有B（eg：先有数据库，才可能有DAO层，Dao依赖于数据库）</p>
<p>JSP的对象在Servlet中调用：</p>
<p>out：PrintWriter out = response.getWriter()</p>
<p>session：request.getSession()</p>
<p>application：request.getServletContext()</p>
<p>解决乱码的方法：在Servlet中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//设置响应编码</span></span><br><span class="line">PrintWriter out = response.getWriter();<span class="comment">//响应对象</span></span><br></pre></td></tr></table></figure>
<p>Servlet：一个Servlet对应于一个功能，因此，如果有增删改查（查询单个、查询多个）5个功能，则需要创建5个Servlet</p>
<h2 id="三层优化">三层优化</h2>
<h3 id="加入接口建议面向接口开发先接口再实现类">加入接口：建议面向接口开发：先接口再实现类</h3>
<pre><code>&gt; service、dao加入接口
 接口与实现类的命名规范  接口(interface):IXxxService/dao... 实现类(implements):XxxServiceImpl
 包：接口：xxx.service(xx.dao)  实现类：xxx.service.impl(xx.dao.impl)
 具体使用时 采用多态形式  接口 x = new 实现类();</code></pre>
<h3 id="dbutil数据库帮助类">DBUtil(数据库帮助类)</h3>
<p>简化Dao层代码量</p>
<p>帮助类：一般写在xxx.util包</p>
<p>写通用的增删改查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (C), 2015-2019, XXX有限公司</span></span><br><span class="line"><span class="comment"> * FileName: DBUtil</span></span><br><span class="line"><span class="comment"> * Author:   zephon</span></span><br><span class="line"><span class="comment"> * Date:     19-3-24 下午1:35</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * History:</span></span><br><span class="line"><span class="comment"> * &lt;author&gt;          &lt;time&gt;          &lt;version&gt;          &lt;desc&gt;</span></span><br><span class="line"><span class="comment"> * 作者姓名           修改时间           版本号              描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-3-24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/JavaMysql0&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通用的增删改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: sql:带？的sql语句  params:？参数数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">executeUpdate</span><span class="params">(String sql, Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pstmt = createPreparedStatement(sql, params);</span><br><span class="line">            <span class="keyword">int</span> count = pstmt.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeAll(<span class="keyword">null</span>,pstmt,connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通用的查</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: sql:带？的sql语句  params:？参数数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">query</span><span class="params">(String sql, Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pstmt = createPreparedStatement(sql, params);</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="keyword">return</span> rs;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法重构，将重复的代码整合成一个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        connection = DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement <span class="title">createPreparedStatement</span><span class="params">(String sql, Object[] params)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        pstmt = getConnection().prepareStatement(sql);</span><br><span class="line">        <span class="comment">// 设置sql语句中的？的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= params.length; i++) &#123;</span><br><span class="line">            pstmt.setObject(i, params[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pstmt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs,Statement stmt,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) stmt.close();</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-动态编译</title>
    <url>/2019/04/26/Java-%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h1 id="动态编译">动态编译</h1>
<hr />
<h2 id="动态编译的应用场景">动态编译的应用场景</h2>
<ol type="1">
<li><p>可以做一个浏览器端编写java代码，上传服务器编译和运行的在线评测系统</p></li>
<li><p>服务器动态加载某些类文件进行编译</p></li>
</ol>
<h2 id="动态编译的两种做法">动态编译的两种做法</h2>
<ol type="1">
<li><p>通过Runtime调用javac，启动新的进程去操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime run = Runtime.getRuntime();</span><br><span class="line">Process process = run.exe(<span class="string">&quot;javac -cp d:/myjava/a.java&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>通过JavaComplier动态编译</p></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">       <span class="keyword">int</span> result = compiler.run(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">&quot;/home/zephon/桌面/a.java&quot;</span>);</span><br><span class="line">       System.out.println(result==<span class="number">0</span>?<span class="string">&quot;编译成功&quot;</span>:<span class="string">&quot;编译失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//对于字符串，可通过IO流操作，将字符串存储成一个临时文件，然后调用动态编译方法</span></span><br><span class="line">       String str = <span class="string">&quot;public class a&#123;\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;\tpublic static void main(String[] args)&#123;\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;\t\tSystem.out.println(\&quot;hello\&quot;);\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;\t&#125;\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="动态运行编译好的类">动态运行编译好的类</h2>
<ol type="1">
<li><p>通过Runtime.getRuntime()启动新的进程运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime run = Runtime.getRuntime();</span><br><span class="line">Process pro = run.exec(<span class="string">&quot;java -cp ./temp temp/com/Hello&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>通过反射运行编译好的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL[] urls = <span class="keyword">new</span> URL[]&#123;<span class="keyword">new</span> URL(<span class="string">&quot;file:&quot;</span>)&#125;;</span><br><span class="line">      System.out.println(urls[<span class="number">0</span>]);</span><br><span class="line">      URLClassLoader loader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">      Class c = loader.loadClass(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">      <span class="comment">//调用加载类的main方法</span></span><br><span class="line">      Method m = c.getMethod(<span class="string">&quot;main&quot;</span>,String[].class);</span><br><span class="line">      m.invoke(<span class="keyword">null</span>,(Object)<span class="keyword">new</span> String[]&#123;<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="动态编译代码字符串">动态编译代码字符串</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建需要动态编译的代码字符串</span></span><br><span class="line">    String nr = <span class="string">&quot;\r\n&quot;</span>; <span class="comment">//回车</span></span><br><span class="line">    String source = <span class="string">&quot;package temp.com; &quot;</span> + nr +</span><br><span class="line">            <span class="string">&quot; public class  Hello&#123;&quot;</span> + nr +</span><br><span class="line">            <span class="string">&quot; public static void main (String[] args)&#123;&quot;</span> + nr +</span><br><span class="line">            <span class="string">&quot; System.out.println(\&quot;HelloWorld! 1\&quot;);&quot;</span> + nr +</span><br><span class="line">            <span class="string">&quot; &#125;&quot;</span> + nr +</span><br><span class="line">            <span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line">    <span class="comment">// 2.将欲动态编译的代码写入文件中 1.创建临时目录 2.写入临时文件目录</span></span><br><span class="line">    File dir = <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/temp&quot;</span>); <span class="comment">//临时目录</span></span><br><span class="line">    <span class="comment">// 如果 \temp 不存在 就创建</span></span><br><span class="line">    <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">        dir.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    FileWriter writer = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(dir,<span class="string">&quot;Hello.java&quot;</span>));</span><br><span class="line">    writer.write(source);</span><br><span class="line">    writer.flush();</span><br><span class="line">    writer.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.取得当前系统的编译器</span></span><br><span class="line">    JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">    <span class="comment">// 4.获取一个文件管理器</span></span><br><span class="line">    StandardJavaFileManager javaFileManager = javaCompiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 5.文件管理器根与文件连接起来</span></span><br><span class="line">    Iterable it = javaFileManager.getJavaFileObjects(<span class="keyword">new</span> File(dir,<span class="string">&quot;Hello.java&quot;</span>));</span><br><span class="line">    <span class="comment">// 6.创建编译任务</span></span><br><span class="line">    JavaCompiler.CompilationTask task = javaCompiler.getTask(<span class="keyword">null</span>, javaFileManager, <span class="keyword">null</span>, Arrays.asList(<span class="string">&quot;-d&quot;</span>, <span class="string">&quot;./temp&quot;</span>), <span class="keyword">null</span>, it);</span><br><span class="line">    <span class="comment">// 7.执行编译</span></span><br><span class="line">    task.call();</span><br><span class="line">    javaFileManager.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8.运行程序</span></span><br><span class="line">    Runtime run = Runtime.getRuntime();</span><br><span class="line">    Process process = run.exec(<span class="string">&quot;java -cp ./temp temp/com/Hello&quot;</span>);</span><br><span class="line">    InputStream in = process.getInputStream();</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">    String info  = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((info = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(info);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="脚本引擎执行javascrpit代码">脚本引擎执行javascrpit代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得脚本引擎对象</span></span><br><span class="line">ScriptEngineManager sem = <span class="keyword">new</span> ScriptEngineManager();</span><br><span class="line">   ScriptEngine engine = sem.getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义变量,会存储到引擎上下文中</span></span><br><span class="line">   engine.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">   String str =<span class="string">&quot;var user = &#123;name:&#x27;张三&#x27;,age:20&#125;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//执行脚本</span></span><br><span class="line">   engine.eval(str);</span><br><span class="line">   System.out.println(engine.get(<span class="string">&quot;msg&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义函数</span></span><br><span class="line">   engine.eval(<span class="string">&quot;function add(a,b)&#123;var sum = a+b;return sum;&#125;&quot;</span>);</span><br><span class="line">   <span class="comment">//执行函数</span></span><br><span class="line">   Invocable jsInvoke = (Invocable)engine;</span><br><span class="line">   Object result = jsInvoke.invokeFunction(<span class="string">&quot;add&quot;</span>,<span class="keyword">new</span> Object[]&#123;<span class="number">2</span>,<span class="number">4</span>&#125;);</span><br><span class="line">   System.out.println(result);</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-反射</title>
    <url>/2019/04/25/Java-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="反射">反射</h1>
<hr />
<h2 id="动态语言">动态语言</h2>
<p>程序运行时，可以改变程序结构或变量类型。典型的有Python、ruby、javascript等，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&quot;var a=3;var b=5;alert(a+b);&quot;</span></span><br><span class="line">    <span class="built_in">eval</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C,C++,Java不是动态语言，但JAVA有一定的动态性，可以利用反射机制、字节码操作获得类似动态语言的特性。</p>
<h2 id="反射机制">反射机制</h2>
<p>指的是可以在运行时加载、探知、使用编译期间完全未知的类。</p>
<p>程序在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性；</p>
<p>加载完类之后，在堆内存中，就产生了一个Class类型的对象(一个类只有一个Class对象)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以被形象的称为反射(reflection)</p>
<h2 id="class类介绍">Class类介绍</h2>
<p>java.lang.Class类十分特殊，用来表示java中类型本身</p>
<p>Class类的对象包含了某个被加载类的结构。一个被加载的类对应一个Class对象。</p>
<p>当一个class被加载，或当加载器(class loader)的defineClass()被Jvm调用时，JVM便自动产生Class对象</p>
<p>Class类是Reflection的根源，针对任何想动态加载、运行的类，唯有先获得相应的Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取类的名字</span></span><br><span class="line">         System.out.println(c.getName());<span class="comment">//获得包名+类名</span></span><br><span class="line">         System.out.println(c.getSimpleName());<span class="comment">//获得类名</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//获取属性信息</span></span><br><span class="line">         Field[] field = c.getFields();<span class="comment">//只能获得public修饰的field</span></span><br><span class="line">         Field[] fields = c.getDeclaredFields();<span class="comment">//获得所有的field</span></span><br><span class="line">         Field f=  c.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//获取方法信息</span></span><br><span class="line">         Method[] method = c.getMethods();</span><br><span class="line">         Method[] methods = c.getDeclaredMethods();</span><br><span class="line">         Method me = c.getMethod(<span class="string">&quot;getName&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">         Method m = c.getMethod(<span class="string">&quot;setName()&quot;</span>,String.class);<span class="comment">//如果方法有参，则必须传递参数类型对应的class对象</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//获取构造器信息</span></span><br><span class="line">         Constructor[] constructor = c.getConstructors();</span><br><span class="line">         Constructor[] constructors = c.getDeclaredConstructors();</span><br><span class="line">         Constructor co = c.getConstructor(<span class="keyword">null</span>);<span class="comment">//传递参数类型</span></span><br><span class="line">         Constructor cos =  c.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="动态操作">动态操作</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过反射API调用构造方法，构造对象</span></span><br><span class="line"> String str = (String) c.newInstance();<span class="comment">//其实是调用了String的无参构造方法</span></span><br><span class="line"> System.out.println(str);</span><br><span class="line"></span><br><span class="line"> Constructor co = c.getConstructor(String.class);</span><br><span class="line"> String s = (String) co.newInstance(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"> System.out.println(s);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//通过反射API调用普通方法</span></span><br><span class="line"> String s2 = (String) c.newInstance();</span><br><span class="line"> Method m = c.getMethod(<span class="string">&quot;length&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"> System.out.println(m.invoke(s2));<span class="comment">//invoke激活函数</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//通过反射API操作属性</span></span><br><span class="line"> Field f = c.getDeclaredField(<span class="string">&quot;hash&quot;</span>);</span><br><span class="line"> f.setAccessible(<span class="keyword">true</span>);<span class="comment">//这个属性不需要安全检查，可以直接访问</span></span><br><span class="line"> f.set(s2,<span class="number">12345</span>);    <span class="comment">//通过反射直接写属性</span></span><br><span class="line"> System.out.println(s2.hashCode());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-多态</title>
    <url>/2018/11/02/Java-%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="java面向对象三大特征-多态polymorphism">Java面向对象三大特征-多态(polymorphism)</h1>
<hr />
<ol type="1">
<li>多态的概念</li>
</ol>
<hr />
<h2 id="多态的概念">多态的概念</h2>
<ol type="1">
<li><p>多态性是OOP中的一个重要特性，主要是用来实现动态联编的，换句话说，就是程序的最终状态只有在执行过程中才被决定而非在编译期间就决定了。这对于大型系统来说能提高系统的灵活性和扩展性。</p></li>
<li><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p></li>
<li><p>多态就是同一个接口，使用不同的实例而执行不同操作。</p></li>
</ol>
<h2 id="java实现多态的方法与多态的优点">Java实现多态的方法与多态的优点</h2>
<p>引用变量的两种类型：</p>
<p>编译时类型：(模糊一点，一般是一个父类)由声明时的类型决定 运行时的类型：(运行时，具体是哪个子类就是哪个子类)由实际对应的对象类型决定</p>
<p>多态存在的3个必要条件： 继承、重写、父类引用指向子类对象 比如: &gt;Parent p = new Child();</p>
<p>多态的优点：</p>
<ol type="1">
<li>消除类型之间的耦合关系</li>
<li>可替换性</li>
<li>可扩充性</li>
<li>接口性</li>
<li>灵活性</li>
<li>简化性</li>
</ol>
<p>具体例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我能跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//传入动物类</span></span><br><span class="line">        testAnimal(<span class="keyword">new</span> Animal());</span><br><span class="line">        <span class="comment">//传入爬行类</span></span><br><span class="line">        testAnimal(<span class="keyword">new</span> Reptiles());</span><br><span class="line">        <span class="comment">//传入鸟类</span></span><br><span class="line">        testAnimal(<span class="keyword">new</span> Bird());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Animal animal = new Bird();</span></span><br><span class="line"><span class="comment">        testAnimal(animal);</span></span><br><span class="line"><span class="comment">        animal.Oviparous();//会报错，必须强转</span></span><br><span class="line"><span class="comment">        ((Bird) animal).Oviparous();//正确形式</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testAnimal</span><span class="params">(Animal a)</span></span>&#123;</span><br><span class="line">        a.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬行类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reptiles</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我能爬行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸟类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span>  <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;我能飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Oviparous</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是卵生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多态的实现方式">多态的实现方式</h2>
<ul>
<li>重写</li>
<li>接口</li>
<li>抽象类和抽象方法</li>
</ul>
<p>后面两个暂时不讲，等学接口和抽象类时再说。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>面向对象基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面向对象基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-字节码操作</title>
    <url>/2019/04/27/Java-%E5%AD%97%E8%8A%82%E7%A0%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="字节码操作">字节码操作</h1>
<hr />
<h2 id="java动态性的两种常见实现方式">Java动态性的两种常见实现方式</h2>
<ol type="1">
<li><p>字节码操作</p></li>
<li><p>反射</p></li>
</ol>
<h2 id="运行时操作字节码可以让我们实现如下功能">运行时操作字节码可以让我们实现如下功能</h2>
<ol type="1">
<li>动态生成新的类</li>
<li>动态改变某个类的结构(添加/删除/修改 新的属性/方法)</li>
</ol>
<h2 id="优势">优势</h2>
<ol type="1">
<li>比反射开销小，性能高</li>
<li>Javaasist性能高于反射，低于ASM</li>
</ol>
<h2 id="常见的字节码操作类库">常见的字节码操作类库</h2>
<ul>
<li><p>BCEL</p>
<p>Byte Code Engineering Library,这是Apache software Foundation的Jakarta项目的一部分，BCEL是Java classworking广泛使用的一种框架，它可以让你深入JVM汇编语言进行类操作的细节。BCEL与Javassist有不同的处理字节码的方法BCEL在实际的JVM指令层次上进行操作(BCEL拥有丰富的JVM指令级支持)而Javassist所强调的是源代码级别的工作。</p></li>
<li><p>ASM</p>
<p>是一个轻量级java字节码操作框架，直接涉及到JVM底层的操作和指令</p></li>
<li><p>CGLIB(Code Generation Library)</p>
<p>是一个强大的，高性能，高质量的Code生成类库，基于ASM实现。</p></li>
<li><p>Javassit</p>
<p>是一个开源的分析、编辑和创建Java字节码的类库。性能较ASM差，和cglib差不多，但使用简单。很多开源框架都在使用它。</p></li>
</ul>
<p>未完</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-注解</title>
    <url>/2019/04/25/Java-%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="注解">注解</h1>
<hr />
<h2 id="什么是注解">什么是注解</h2>
<h3 id="annotation的作用">Annotation的作用</h3>
<p>不是程序本身，可以对程序作出解释。(这一点和注释没什么区别)</p>
<p>可以被其它程序(比如：编译器)读取。(注解信息处理流程，是注解和注释的重大区别。如果没有注解信息处理流程，则注解毫无意义)</p>
<h3 id="annotation的格式">Annotation的格式</h3>
<p>注解是以"<span class="citation" data-cites="注解名">@注解名</span>"在代码中存在的，还可以添加一些参数值，例如：<span class="citation" data-cites="SuppressWarnings">@SuppressWarnings</span>(value="unchecked")</p>
<h3 id="annotation在哪里使用">Annotation在哪里使用</h3>
<p>可以附加在package,class,method,field等上面，相当于给它们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</p>
<h2 id="内置注解">内置注解</h2>
<ol type="1">
<li><p><span class="citation" data-cites="Override">@Override</span>--定义在java.lang.Override中，此注解只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明</p></li>
<li><p><span class="citation" data-cites="Deprecated">@Deprecated</span>--定义在java.lang.Deprecated中，此注解可用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择</p></li>
<li><p><span class="citation" data-cites="SuppressWarnings">@SuppressWarnings</span>--定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息</p></li>
</ol>
<h2 id="自定义注解">自定义注解</h2>
<p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口</p>
<p>要点：</p>
<p><span class="citation" data-cites="interface用来声明一个注解">@interface用来声明一个注解</span>，格式为：public <span class="citation" data-cites="interface">@interface</span> 注解名{定义体}</p>
<p>其中的每一个方法实际上是声明了一个配置参数。</p>
<ul>
<li><p>方法名称就是参数的名称</p></li>
<li><p>返回值类型就是参数的类型(返回值类型只能是基本类型、Class、String、enum)</p></li>
<li><p>可以通过default来声明参数的</p></li>
<li><p>如果只有一个参数成员，一般参数名为value</p></li>
</ul>
<blockquote>
<p>注意：注解元素必须要有值。我们定义注解元素时，经常使用空字符串、0作为默认值，也经常使用负数表示不存在的含义</p>
</blockquote>
<h3 id="元注解">元注解</h3>
<p>元注解的作用就是负责注解其他注解。Java定义了4个标准的meta-annotaiton类型，它们被用来提供对其它annotation类型作说明</p>
<p>这些类型和它们所支持的类在java.lang.annotation包中可以找到</p>
<p><span class="citation" data-cites="Target">@Target</span>：用于描述注解的使用范围，eg:<span class="citation" data-cites="Target">@Target</span>(value=ElementType.METHOD)</p>
<p><span class="citation" data-cites="Retention">@Retention</span>：表示需要在什么级别保存该注解信息，用于描述注解的生命周期，eg:<span class="citation" data-cites="Retention">@Retention</span>(RetentionPolicy.RUNTIME)</p>
<p><span class="citation" data-cites="Documented">@Documented</span>：</p>
<p><span class="citation" data-cites="Inherited">@Inherited</span>：</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-线程学习笔记（上）</title>
    <url>/2018/11/13/Java-%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="线程学习笔记上">线程学习笔记（上）</h1>
<p>目录：</p>
<ul>
<li>程序 进程 线程</li>
<li>Java实现多线程</li>
<li>线程的状态和方法</li>
<li>线程基本信息和优先级</li>
<li>线程的同步和死锁问题</li>
<li>生产者消费模式</li>
<li>任务调度</li>
</ul>
<h2 id="线程的概念">线程的概念</h2>
<h3 id="程序-进程-线程">程序 进程 线程</h3>
<ol type="1">
<li>程序(Program)：指令集 静态概念<br />
</li>
<li>进程(Process)：操作系统 调度程序 动态概念<br />
</li>
<li>线程(Thread)：在进程内多条执行路径</li>
</ol>
<p>  线程是进程中的一个“单一的连续控制流程”/执行路径</p>
<ul>
<li>线程又被成为轻量级进程</li>
<li>Thread run at the same time,independently of one another</li>
<li>一个进程可拥有多个并行的线程</li>
<li>一个进程中的线程共享相同的内存单元/内存地址空间-&gt;可以访问相同的变量和对象，而且它们从同一堆中分配对象-&gt;通信、数据交换、同步操作(所以线程容易产生并发问题)</li>
<li>由于线程间的通信在同一地址空间上进行的，所以不需要额外的通信机制，这就使得通信更简便而且信息传递的速度也更快</li>
</ul>
<h2 id="线程的实现">线程的实现</h2>
<h3 id="继承threadrun">继承Thread+run()</h3>
<p>启动：创建子类对象+对象.start()<br />
步骤：</p>
<ol type="1">
<li>创建多线程 继承Thread +重写run（线程体）</li>
<li>使用线程，创建子类对象 + 对象.start() 线程启动</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈模拟龟兔赛跑〉</span></span><br><span class="line"><span class="comment"> *  1、创建多线程 继承Thread  +重写run（线程体）</span></span><br><span class="line"><span class="comment"> *  2、使用线程，创建子类对象 + 对象.start()  线程启动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程体</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;兔子跑了&quot;</span>+i+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Rabbit rabbit = <span class="keyword">new</span> Rabbit();</span><br><span class="line">        Tortoise tortoise = <span class="keyword">new</span> Tortoise();</span><br><span class="line"></span><br><span class="line">        rabbit.start();<span class="comment">//不要调用run方法  start方法中有一个start0方法，其中会调用run()方法，可以查看API</span></span><br><span class="line">        tortoise.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tortoise</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;乌龟跑了&quot;</span>+i+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在Java中负责线程功能的是Java.lang.Thread类</li>
<li>可以通过创建Thread的实例来创建新的线程</li>
<li>每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作，方法run()称为线程体</li>
<li>通过调用Thread类的start()方法来启动一个线程</li>
</ul>
<h3 id="实现runnablerun-推荐">实现Runnable+run() (推荐)</h3>
<p>  此处用到了一个静态代理的原理。<br />
  静态代理模式，简而言之就是有一个真实角色，一个代理角色，且二者实现相同的接口，而代理角色则是持有真实角色的引用。</p>
<p>启动：使用静态代理<br />
步骤：</p>
<ol type="1">
<li>创建真实角色<br />
</li>
<li>创建代理角色 Thread+引用<br />
</li>
<li>代理角色.start()</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈使用Runnable创建线程〉</span></span><br><span class="line"><span class="comment"> * 1、类 实现Runnable接口+重写run() --&gt;真实角色类</span></span><br><span class="line"><span class="comment"> * 2、启动多线程 使用静态代理</span></span><br><span class="line"><span class="comment"> *  1）创建真实角色</span></span><br><span class="line"><span class="comment"> *  2）创建代理角色+真实角色比引用</span></span><br><span class="line"><span class="comment"> *  3）调用.start() 启动线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;一边敲代码。。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建真实角色</span></span><br><span class="line">        Programmer programmer = <span class="keyword">new</span> Programmer();</span><br><span class="line">        <span class="comment">//创建代理角色</span></span><br><span class="line">        Thread proxy = <span class="keyword">new</span> Thread(programmer);</span><br><span class="line">        <span class="comment">//调用.start()启动线程</span></span><br><span class="line">        proxy.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;一边看小说...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>继承Thread类方式的缺点:如果我们的类已经从一个类继承，则无法继承Thread类</li>
<li>通过Runnable接口实现多线程</li>
<li>优点：可以同时实现继承。实现Runnable接口方式要通用一些(避免单继承的局限性；便于共享资源，同一份资源，多个代理访问)</li>
</ul>
<h3 id="通过callable接口实现多线程-了解">通过Callable接口实现多线程 (了解)</h3>
<ul>
<li>优点：可以获取返回值,可以声明异常</li>
<li>缺点：繁琐</li>
</ul>
<p>步骤：</p>
<ol type="1">
<li>创建Callable实现类+重写call</li>
<li>借助 执行调度服务ExecutorService，获取Future对象</li>
<li>获取值result.get()</li>
<li>停止服务set.shutdownNow()</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈使用Callable创建线程〉</span></span><br><span class="line"><span class="comment"> * 1. 创建Callable实现类+重写call</span></span><br><span class="line"><span class="comment"> * 2. 借助 执行调度服务ExecutorService，获取Future对象</span></span><br><span class="line"><span class="comment"> * 3. 获取值result.get()</span></span><br><span class="line"><span class="comment"> * 4. 停止服务set.shutdownNow()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Call</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Race tortoise = <span class="keyword">new</span> Race(<span class="string">&quot;乌龟&quot;</span>,<span class="number">150</span>);</span><br><span class="line">        Race rabbit = <span class="keyword">new</span> Race(<span class="string">&quot;兔子&quot;</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//获取值</span></span><br><span class="line">        Future&lt;Integer&gt; result1 = ser.submit(tortoise);</span><br><span class="line">        Future&lt;Integer&gt; result2 = ser.submit(rabbit);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        tortoise.setFlag(<span class="keyword">false</span>);</span><br><span class="line">        rabbit.setFlag(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num1 = result1.get();</span><br><span class="line">        <span class="keyword">int</span> num2 = result2.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;乌龟跑了--&gt;&quot;</span>+num1+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;兔子跑了--&gt;&quot;</span>+num2+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">        <span class="comment">//停止服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;   <span class="comment">//延时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> step = <span class="number">0</span>;<span class="comment">//步</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Race</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Race</span><span class="params">(String name,<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            Thread.sleep(time);<span class="comment">//相当于延时</span></span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>进阶</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>进阶</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-线程学习笔记（中）</title>
    <url>/2018/11/15/Java-%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h1 id="线程学习笔记中">线程学习笔记（中）</h1>
<h2 id="线程状态">线程状态</h2>
<figure>
<img src="/img/animal.png" alt="thread" /><figcaption>thread</figcaption>
</figure>
<ol type="1">
<li>新生状态</li>
<li>就绪状态</li>
<li>运行状态</li>
<li>阻塞状态</li>
<li>死亡状态</li>
</ol>
<p>新生状态：用new关键字和Thread类或其子类建立一个线程对象后，该线程对象就处于新生状态。处于新生状态的线程有自己的内存空间，通过调用start方法进入就绪状态(runnable)<br />
就绪状态：处于就绪状态的线程已经具备了运行条件，但还没有分配到CPU，处于线程就绪对列，等待系统为其分配CPU。等待状态并不是执行状态，当系统选定一个等待执行的Thread对象后，它就会从等待执行状态进入执行状态，系统挑选的动作称之为“CPU调度”。一旦获得CPU，线程就进入运行状态并自动调用自己的run()方法。<br />
运行状态：在运行状态的线程执行自己的run方法中的代码，直到调用其他方法而终止、或等待某资源而阻塞或完成任务而死亡。如果在给定的时间片内没有执行结束，就会被系统给换下来回到等待执行状态。<br />
阻塞状态：处于运行状态的线程在某些情况下，如执行了sleep方法，或等待I/O设备等资源，将让出CPU并暂时停止自己的运行，进入阻塞状态。在阻塞状态的线程不能进入就绪队列。只有当引起阻塞的原因消除时，如sleep时间已到，或等待的I/O设备空闲下来，线程便转入就绪状态，重新到时就绪对列中排队等待，被系统选中后从原来停止的位置开始继续运行。<br />
死亡状态：死亡状态是线程生命周期中的最后一个阶段。线程死亡的原因有两个。一个是正常运行的线程完成了它的全部工作，另一个是线程被强制性地终止，如通过执行stop或destroy方法来终止一个线程(不推荐使用这两个方法，前者会产生异常，后者是强制终止，不会释放锁)</p>
<h2 id="停止线程">停止线程</h2>
<p>1、自然终止：线程体正常执行完毕<br />
2、外部干涉：<br />
1）线程类中定义线程体使用的标识 2）线程体使用该标识 3）提供对外的方法改变该标识 4）外部根据条件调用该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Study s = <span class="keyword">new</span> Study();</span><br><span class="line">        <span class="keyword">new</span> Thread(s).start();</span><br><span class="line">        <span class="comment">//外部干涉</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">50</span>==i)s.stop();</span><br><span class="line">            System.out.println(<span class="string">&quot;main...--&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Study</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//线程类中定义线程体使用的标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程体使用该标识</span></span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Study thread...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对外提供方法改变标识</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="阻塞">阻塞</h1>
<ol type="1">
<li>join:合并线程</li>
<li>yield:暂停自己的线程 是一个静态的方法</li>
<li>sleep:休眠，不释放锁 1）与时间相关：倒计时 2）模仿网络延迟</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        JoinDemo demo = <span class="keyword">new</span> JoinDemo();</span><br><span class="line">        demo.start();<span class="comment">//就绪</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * demo.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，</span></span><br><span class="line"><span class="comment">             * 此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">50</span>)demo.join();</span><br><span class="line">            System.out.println(<span class="string">&quot;main...&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="线程的信息">线程的信息</h1>
<blockquote>
<p>isAlive() 判断线程是否还“活”着<br />
getPriority() 获得线程的优先级数值<br />
setPriority() 设置线程的优先级数值<br />
setName() 设置线程的名字<br />
getName() 获得线程的名字<br />
currentThread() 取得当前正在运行的线程对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈优先级〉--代表的是概率，不是绝对的先后顺序</span></span><br><span class="line"><span class="comment"> * 1、MAX_PRIORITY 10</span></span><br><span class="line"><span class="comment"> * 2、NORM_PRIORITY 5(默认)</span></span><br><span class="line"><span class="comment"> * 3、MIN_PRIORITY 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        t1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)</span><br><span class="line">        System.out.println(currentThread().getName()+<span class="string">&quot;running...&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>进阶</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>进阶</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-线程学习笔记（下）</title>
    <url>/2018/11/16/Java-%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<h1 id="线程学习笔记下">线程学习笔记（下）</h1>
<h2 id="同步">同步</h2>
<ul>
<li>由于同一进程的多个线程共享同一片存储空间，在带来方便的同时，也带来了访问冲突这个严重的问题。Java语言提供了专门机制以解决这种冲突，有效避免了同一个数据对象被多个线程同时访问</li>
<li>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized方法synchronized块</li>
</ul>
<p>同步：也称为并发，由于有多个线程访问同一份资源，所以确保资源安全 --&gt;线程安全 &gt;eg:HashTable是线程安全的，而HashMap是线程不安全的<br />
&gt;eg:StringBuffer是线程安全的，而StringBuild是线程不安全的</p>
<p>一、 同步块</p>
<blockquote>
<p>synchronized(引用类型|this|类.class){}</p>
</blockquote>
<p>二、 同步方法 &gt; public synchronized void test(){}</p>
<p>而同步块中的类.class涉及到单例设计模式</p>
<h2 id="单例设计模式">单例设计模式</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈单例设计模式：确保一个类只有一个对象〉</span></span><br><span class="line"><span class="comment"> *  确保一个类只有一个对象</span></span><br><span class="line"><span class="comment"> *  懒汉式</span></span><br><span class="line"><span class="comment"> *  1、构造器私有化，避免外部直接创建对象</span></span><br><span class="line"><span class="comment"> *  2、声明一个私有的静态变量</span></span><br><span class="line"><span class="comment"> *  3、创建一个对外的公共的静态方法访问该变量，如果变量没有对象，创建该对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jvm</span></span>&#123;</span><br><span class="line">    <span class="comment">//声明一个私有的静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Jvm instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有化，避免外部直接创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Jvm</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个对外的公共的静态方法访问该变量，如果变量没有对象，创建该对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jvm <span class="title">getInstance</span><span class="params">(<span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(time);<span class="comment">//延时</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> Jvm();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="死锁">死锁</h2>
<p>过多的同步容易造成死锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁案例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Object goods = <span class="keyword">new</span> Object();</span><br><span class="line">        Object money = <span class="keyword">new</span> Object();</span><br><span class="line">        Test t1 = <span class="keyword">new</span> Test(goods,money);</span><br><span class="line">        Test2 t2 = <span class="keyword">new</span> Test2(goods,money);</span><br><span class="line">        Thread proxy = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        Thread proxy2 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line">        proxy.start();</span><br><span class="line">        proxy2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Object goods;</span><br><span class="line">    Object money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(Object goods, Object money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goods = goods;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            test();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (goods)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (money)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;一手给钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Object goods ;</span><br><span class="line">    Object money ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test2</span><span class="params">(Object goods, Object money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goods = goods;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            test();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (money)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (goods)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;一手给货&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生产者消费者模式不是设计模式而是解决死锁的一种方式">生产者消费者模式(不是设计模式而是解决死锁的一种方式)</h2>
<ul>
<li>生产者消费者问题，也称有限缓冲问题，是一个多线程同步问题的经典案例。该问题描述了两个共享固定大小缓冲区的线程-即所谓的“生产者”和“消费者”-在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗说这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。</li>
<li>要解决该问题，就必须让生产者在缓冲区满时休眠（要么干脆就放弃数据），等到下次消费者消耗缓冲区中的数据的时候，生产者才能被唤醒，开始往缓冲区添加数据。同样，也可以让消费者在缓冲区空时进入休眠，等到生产者往缓冲区添加数据之后，再唤醒消费者。通常常用的方法有信号灯法、管程等。如果解决方法不够完善，则容易出现死锁情况。出现死锁时，两个线程都会陷入休眠，等待对方唤醒自己。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈生产者消费者模式 信号灯法〉</span></span><br><span class="line"><span class="comment"> *  wait();等待，释放锁 而sleep不释放锁</span></span><br><span class="line"><span class="comment"> *  notify()/notifyAll:唤醒</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String  pic ;</span><br><span class="line">    <span class="comment">//信号灯</span></span><br><span class="line">    <span class="comment">//flag--&gt;T 生产者生产，消费者等待，生产完后，通知消费</span></span><br><span class="line">    <span class="comment">//flag--&gt;F 消费者消费，生产者等待，消费完后，通知生产</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title">play</span><span class="params">(String pic)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;<span class="comment">//生产者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始生产</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.pic = pic;</span><br><span class="line">        <span class="comment">//通知消费</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        <span class="comment">//生产者停下</span></span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;<span class="comment">//消费者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(pic);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//共同资源</span></span><br><span class="line">        Movie m = <span class="keyword">new</span> Movie();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多线程</span></span><br><span class="line">        Player p = <span class="keyword">new</span> Player(m);</span><br><span class="line">        Watcher w = <span class="keyword">new</span> Watcher(m);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(p).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(w).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Movie m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(Movie m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                m.play(<span class="string">&quot;偶数&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                m.play(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Movie m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(Movie m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">           m.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="任务调度">任务调度</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务调度</span></span><br><span class="line"><span class="comment"> * 了解即可</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="keyword">new</span> Date(System.currentTimeMillis()+<span class="number">1000</span>),<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>进阶</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>进阶</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-继承</title>
    <url>/2018/10/31/Java-%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="java面向对象三大特征-继承">Java面向对象三大特征-继承</h1>
<hr />
<ol type="1">
<li>继承的概念</li>
<li>方法重写</li>
<li>简单了解Object类与API</li>
<li>构造方法</li>
<li>继承与组合</li>
<li>一些关键字的解释</li>
</ol>
<hr />
<h2 id="继承的概念">继承的概念</h2>
<p>  类是对对象的抽象，从OOD(面向对象设计)的角度，继承是对某一批类的抽象，从而实现对现实世界更好的建模。从OOP(面向对象编程)的角度，继承则有利于提高代码的复用性。</p>
<p>eg:当要构建动物世界的模型时,我们会依赖继承的关系去构建。我们为什么会这样去构建呢？</p>
<figure>
<img src="/img/animal.png" alt="example1" /><figcaption>example1</figcaption>
</figure>
<p>  正是因为动物种类太多了，所以需要进行分类，在编程中，涉及到了分类，肯定就要抽象，顾名思义，抽象就是抽出相像的部分，这里的狗、猫、人根据其共同点，抽象后就构成了一个新的类别，即哺乳动物，同样的，蛇和鳄鱼又构成爬行动物类，而不管是哺乳动物还是爬行动物，他们又有共同的特征，所以又构成动物类，以此类推。</p>
<p>  在Java编程中继承是用extends来实现的，extends的意思是延伸、扩展，即子类是父类的扩展。</p>
<p>下面以动物分类为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我能跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我能吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        System.out.println(<span class="string">&quot;动物类&quot;</span>);</span><br><span class="line">        animal.run();</span><br><span class="line">        animal.eat();</span><br><span class="line"></span><br><span class="line">        Mammal mammal = <span class="keyword">new</span> Mammal();</span><br><span class="line">        System.out.println(<span class="string">&quot;哺乳类&quot;</span>);</span><br><span class="line">        mammal.viviparous();</span><br><span class="line">        mammal.run();</span><br><span class="line">        mammal.eat();</span><br><span class="line"></span><br><span class="line">        Reptiles reptiles = <span class="keyword">new</span> Reptiles();</span><br><span class="line">        System.out.println(<span class="string">&quot;爬行类&quot;</span>);</span><br><span class="line">        reptiles.Oviparous();</span><br><span class="line">        reptiles.run();</span><br><span class="line">        reptiles.eat();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//哺乳类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viviparous</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是胎生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//爬行类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reptiles</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Oviparous</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是卵生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我能爬行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color=gray size=2> 运行结果:<br />
动物类<br />
我能跑<br />
我能吃<br />
哺乳类<br />
我是胎生<br />
我能跑<br />
我能吃<br />
爬行类<br />
我是卵生<br />
我能爬行<br />
我能吃<br />
</font></p>
<p>  可以看到，在Mammal类和Reptiles类中，并没有写eat方法，但都可以调用，就是因为用了extends继承了Animal类，而在Reptiles中，需要自己扩展，又写了新的run()方法,覆盖了父类的run()方法，这就叫做重写，具体后面会讲。</p>
<p>小结：</p>
<ul>
<li>子类继承父类，可以得到父类的全部属性和方法(除了父类的构造方法)。</li>
<li>Java中的类只有单继承，一个类只能有一个直接父类。没有多继承。多继承会引起混乱，使继承链过于复杂，系统难于维护。就像现实中，如果一个人有多个父亲母亲，世界就会混乱。多继承，就是为了实现代码的复用性，却引入了复杂性，使系统类之间的关系混乱。</li>
<li>Java中的类没有多继承，但有多重继承，即上述的狗类能继承哺乳动物类，哺乳动物类又能继承动物类，这样多层次的继承下去</li>
<li>Java中实际也有多继承，不在类中，但可以通过接口来实现(接口后面再讲)</li>
<li>如果定义一个类时，没有调用extends，则它的父类默认是：Java.lang.Object。</li>
<li>父类和子类有很多不同的叫法：超类、父类、基类、子类 、派生类。。。</li>
<li>如果想要该类不再被其他类继承，则可以使用final关键字</li>
</ul>
<h2 id="方法的重写override-不要与重载overload混淆">方法的重写(override) (不要与重载(overload)混淆)</h2>
<ol type="1">
<li>在子类中可以根据需要对从基类中继承来的方法重写。</li>
<li>重写方法必须和被重写的方法具有相同的方法名称、参数列表和返回类型。</li>
<li>重写方法不能使用比被重写的访问权限</li>
</ol>
<p>子类重写父类的方法时，其实也可以调用父类的该方法，用super关键字。</p>
<p>eg:在上述代码的基础上加上鸟类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//鸟类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span>  <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;我能飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color=gray size=2> 运行结果:<br />
我能跑<br />
我能飞 </font></p>
<h2 id="简单了解object类与api">简单了解Object类与API</h2>
<h2 id="构造方法">构造方法</h2>
<p>构造函数，也叫构造方法，是java中一种特殊的函数。与函数名相同，无返回值。</p>
<p>作用：一般用来初始化成员属性和成员方法的，即new对象产生后，就调用了对象了属性和方法。</p>
<p>  一个对象建立，构造函数只运行一次。而一般函数是对象调用才执行，用".方法名“的方式，给对象添加功能，并且能调用多次。</p>
<p>构造函数的特点:</p>
<p>1、函数名与类名相同</p>
<p>2、不用定义返回值类型。（不同于void类型返&gt;回值，void是没有具体返回值类型；构造函数是连类型都没有）</p>
<p>3、不可以写return语句。（返回值类型都没有，也就不需要return语句了）</p>
<p>  默认构造函数：当一个类中没有定义构造函数时，系统会给该类中加一个默认的空参数的构造函数，方便该类初始化。只是该空构造函数是隐藏不见的。但如果自己定义了构造函数，则默认构造函数就没有了，如果需要需要自己手动添加。</p>
<h2 id="继承与组合">继承与组合</h2>
<p>  继承是is-a的关系</p>
<p>  而组合则是have-a的关系</p>
<p>  组合就是在一个类中，可以用其它的类作为自己的变量，例如，在一个棋盘类中，可以用棋子作为其中的变量，但棋子其实也是我们自己事先定义好的类。</p>
<h2 id="一些关键字的解释">一些关键字的解释</h2>
<p>  extends:类的继承关键字   implements:接口继承关键字</p>
<p>  super:用于实现对父类成员的访问，用来引用当前对象的父类</p>
<p>  this:指向自己的引用</p>
<p>  final:final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写.</p>
<p>   注:实例变量也可以被定义为 final，被定义为 final 的变量不能被修改，就类似于常量的定义。</p>
<h3 id="访问修饰符">访问修饰符</h3>
<table>
<thead>
<tr class="header">
<th>访问权限</th>
<th style="text-align: right;">类</th>
<th style="text-align: center;">包</th>
<th style="text-align: center;">子类</th>
<th style="text-align: center;">其他包</th>
<th style="text-align: center;">解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>public</td>
<td style="text-align: right;">∨</td>
<td style="text-align: center;">∨</td>
<td style="text-align: center;">∨</td>
<td style="text-align: center;">∨</td>
<td style="text-align: center;">对任何人都是可用的</td>
</tr>
<tr class="even">
<td>protect</td>
<td style="text-align: right;">∨</td>
<td style="text-align: center;">∨</td>
<td style="text-align: center;">∨</td>
<td style="text-align: center;">×</td>
<td style="text-align: center;">继承的类可以访问以及和private一样的权限</td>
</tr>
<tr class="odd">
<td>default</td>
<td style="text-align: right;">∨</td>
<td style="text-align: center;">∨</td>
<td style="text-align: center;">×</td>
<td style="text-align: center;">×</td>
<td style="text-align: center;">包访问权限，即在整个包内均可被访问</td>
</tr>
<tr class="even">
<td>private</td>
<td style="text-align: right;">∨</td>
<td style="text-align: center;">×</td>
<td style="text-align: center;">×</td>
<td style="text-align: center;">×</td>
<td style="text-align: center;">除类型创建者和类型的内部方法之外的任何人都不能访问的元素</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java</category>
        <category>面向对象基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面向对象基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-网络编程 学习笔记</title>
    <url>/2018/11/21/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="网络编程学习笔记">网络编程学习笔记</h1>
<p>目录：</p>
<ul>
<li>基本概念</li>
<li>网络分层</li>
<li>数据封装拆分</li>
<li>网络爬虫原理</li>
<li>Socket编程</li>
<li>Udp编程</li>
</ul>
<h2 id="基本概念">基本概念</h2>
<p>一、网络：将不同区域的计算机连接到一起，根据区域大小分局域网、城域网、互联网等</p>
<p>二、地址：IP地址，确定网络上的一个绝对地址/位置 --&gt;房子的地址</p>
<p>三、端口号：区分计算机软件的 --&gt;房子的房门 2个字节 0~65535 共65536个端口<br />
1、在同一个协议下，端口号不能重复，不同协议下可以重复<br />
2、1024以下的不要使用 80-&gt;留给http的 21--&gt;留给ftp的</p>
<p>四、资源定位：URL 统一资源定位符 URI：统一资源</p>
<p>五、数据的传输<br />
1、协议：TCP协议和UDP协议<br />
&gt;1) TCP：先连接再通讯，类似于电话，类似于三次握手，面向连接，安全可靠，效率低下<br />
&gt;2) UDP：类似于短信，非面向连接，效率高</p>
<p>2、传输(底层还是用的流)： &gt;1) 先封装<br />
&gt;2) 后拆封</p>
<p>相关类<br />
&gt; InetAddress InetSocketAddress<br />
&gt; URL<br />
&gt; TCP:ServerSocket Socket<br />
&gt; UDP:DataGramSocket DatagramPacket</p>
<h2 id="地址及端口">地址及端口</h2>
<p>一、InetAddress --封装计算机的ip地址和DNS,没有端口<br />
1、静态方法获取对象<br />
&gt; InetAddress.getLocalHost();<br />
&gt; InetAddress.getByName("www.163.com");<br />
&gt; InetAddress.getByName("ip地址/域名");</p>
<p>2、方法<br />
&gt; getHostAddress() 返回ip地址<br />
&gt; getHostName() 返回域名/本机为计算名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没有封装端口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        InetAddress addr = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(addr.getHostAddress());<span class="comment">//返回192.168.80.2</span></span><br><span class="line">        System.out.println(addr.getHostName());   <span class="comment">//输出计算机名</span></span><br><span class="line">        addr=InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(addr.getHostAddress());  <span class="comment">//返回百度服务器的ip</span></span><br><span class="line">        System.out.println(addr.getHostName());    <span class="comment">//输出www.baidu.com</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二、InetSocketAddress：封装端口<br />
1、创建对象<br />
&gt; InetSocketAddress(String hostname,int port)<br />
&gt; InetSocketAddress(InetAddress addr,int port)<br />
2、方法<br />
&gt; getAddress()<br />
&gt; getHostName()<br />
&gt; getPort()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装端口：在InetAddress基础上+端口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;192.168.80.2&quot;</span>,<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(address.getHostName());</span><br><span class="line">        System.out.println(address.getPort());</span><br><span class="line">        InetAddress addr = address.getAddress();</span><br><span class="line">        System.out.println(addr.getHostAddress());<span class="comment">//返回地址</span></span><br><span class="line">        System.out.println(addr.getHostName());   <span class="comment">//输出计算机名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="url">URL</h2>
<p>四部分组成：协议、存放资源的主机域名、端口、资源文件名</p>
<p>一、创建<br />
&gt; URL(String spec);//绝对路径构建<br />
&gt; URL(URL context,String spec);//相对路径构建<br />
二、方法<br />
&gt; getProtocol;<br />
&gt; getHost();<br />
&gt; getPort();<br />
&gt; getFile();<br />
&gt; getPath();<br />
&gt; getRef();//锚点<br />
&gt; getQuery();//?参数:存在锚点 返回null，不存在，返回参数</p>
<p>三、流</p>
<blockquote>
<p>openStream</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬虫原理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://www.baidu.com&quot;</span>);<span class="comment">//主页/默认资源</span></span><br><span class="line">        <span class="comment">//获取资源网络流</span></span><br><span class="line">        InputStream is = url.openStream();</span><br><span class="line">        <span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(-<span class="number">1</span>!=(len=is.read(flush)))&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(flush,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="udp通信">UDP通信</h2>
<p>一、类 DatagramSocket DatagramPacket<br />
1、客户端：<br />
&gt; 1)创建客户端 DatagramSocket类<br />
&gt; 2)准备数据 字节数组<br />
&gt; 3)打包 DatagramPacket+服务器地址及端口 &gt; 4)发送 &gt; 5)释放资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> * 1、创建客户端+端口</span></span><br><span class="line"><span class="comment"> * 2、准备数据</span></span><br><span class="line"><span class="comment"> * 3、打包(发送的地点及端口)</span></span><br><span class="line"><span class="comment"> * 4、发送</span></span><br><span class="line"><span class="comment"> * 5、释放</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//1、创建客户端+端口</span></span><br><span class="line">       DatagramSocket client = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);</span><br><span class="line">       <span class="comment">//2、准备数据</span></span><br><span class="line">       String msg = <span class="string">&quot;udp编程&quot;</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] data = msg.getBytes();</span><br><span class="line">       <span class="comment">//3、打包(发送的地点及端口)</span></span><br><span class="line">       DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,data.length,<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>));</span><br><span class="line">       <span class="comment">//4、发送</span></span><br><span class="line">       client.send(packet);</span><br><span class="line">       <span class="comment">//5、释放</span></span><br><span class="line">       client.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、服务器端：<br />
&gt; 1)创建服务器端 DatagramSocket 类 +指定端口<br />
&gt; 2)准备接收容器 字节数组 封装 DatagramPacket<br />
&gt; 3)包 接受数据<br />
&gt; 4)分析<br />
&gt; 5)释放资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  服务器端</span></span><br><span class="line"><span class="comment"> *  1、创建服务端+端口</span></span><br><span class="line"><span class="comment"> *  2、准备接受容器</span></span><br><span class="line"><span class="comment"> *  3、封装成包</span></span><br><span class="line"><span class="comment"> *  4、接受数据</span></span><br><span class="line"><span class="comment"> *  5、分析数据</span></span><br><span class="line"><span class="comment"> *  6、释放</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建服务端+端口</span></span><br><span class="line">        DatagramSocket server = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2、准备接受容器</span></span><br><span class="line">        <span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//3、封装成包</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container,container.length);</span><br><span class="line">        <span class="comment">//4、接受数据</span></span><br><span class="line">        server.receive(packet);</span><br><span class="line">        <span class="comment">//5、分析数据</span></span><br><span class="line">        <span class="keyword">byte</span> [] data = packet.getData();</span><br><span class="line">        <span class="keyword">int</span> len = packet.getLength();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">//6、释放</span></span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="socket通信">Socket通信</h2>
<p>基于tcp：面向连接，安全可靠，效率低，类似于打电话<br />
一、面向连接：请求-相应 Request--Response<br />
二、Socket编程<br />
1、服务器：ServerSocket<br />
1、创建服务器，指定端口<br />
2、接收客户端的连接 阻塞式<br />
3、发送数据+接收数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须先启动服务器后连接</span></span><br><span class="line"><span class="comment"> * 1、创建服务器，指定端口</span></span><br><span class="line"><span class="comment"> * 2、接收客户端的连接 阻塞式</span></span><br><span class="line"><span class="comment"> * 3、发送数据+接收数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建服务器，指定端口</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2、接收客户端的连接 阻塞式</span></span><br><span class="line">        <span class="comment">//浏览器也是基于TCP的客户端，所以可以在浏览器网址输入localhost:8888</span></span><br><span class="line">        Socket socket=server.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;一个客户端建立连接&quot;</span>);</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        String msg = <span class="string">&quot;欢迎使用&quot;</span>;</span><br><span class="line">        <span class="comment">//输出流</span></span><br><span class="line">        <span class="comment">/* BufferedWriter bw = new BufferedWriter(new     OutputStreamWriter(socket.getOutputStream()));</span></span><br><span class="line"><span class="comment">        bw.write(msg);</span></span><br><span class="line"><span class="comment">        bw.newLine();</span></span><br><span class="line"><span class="comment">        bw.flush();*/</span></span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">        dos.writeUTF(msg);</span><br><span class="line">        dos.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、客户端：Socket<br />
1、创建客户端，必须制定服务器+端口 此时就在连接<br />
2、接受数据+发送数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、创建客户端，必须制定服务器+端口 此时就在连接</span></span><br><span class="line"><span class="comment"> * 2、接受数据+发送数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">       <span class="comment">/* BufferedReader br = new BufferedReader(new InputStreamReader(client.getInputStream()));</span></span><br><span class="line"><span class="comment">        String echo = br.readLine();//阻塞式方法</span></span><br><span class="line"><span class="comment">        System.out.println(echo);*/</span></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(client.getInputStream());</span><br><span class="line">        String echo = dis.readUTF();</span><br><span class="line">        System.out.println(echo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>进阶</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>进阶</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax学习笔记</title>
    <url>/2019/04/01/JavaWeb-Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="ajax学习笔记">Ajax学习笔记</h1>
<hr />
<h2 id="什么是ajax">什么是Ajax</h2>
<p>Ajax全称“Asynchronous JavaScript and XML"，是一种创建交互式网页应用的网页开发技术。是一种异步刷新技术，用来在当前页面内响应不同的请求内容。</p>
<h2 id="为什么需要ajax">为什么需要Ajax</h2>
<p>因为有的时候我们需要将本次的响应结果和前面的响应结果内容在同一个页面中展现给用户。</p>
<p>如果不用Ajax，就需要在后台服务器端将多次响应内容重新拼接成一个jsp页面，响应。但这样会造成很多响应内容被重复的响应，造成资源浪费</p>
<h2 id="使用ajax">使用Ajax</h2>
<h3 id="ajax访问原理">Ajax访问原理</h3>
<p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。本质上就是JS操作文档结构，使之变成动态的。</p>
<h3 id="ajax的基本使用流程">Ajax的基本使用流程</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Test&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="function">function <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//1.创建ajax引擎对象</span></span><br><span class="line">                <span class="keyword">var</span> ajax;</span><br><span class="line">                <span class="keyword">if</span>(window.XMLHttpRequest)&#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(window.ActiveXObject)&#123;</span><br><span class="line">                    ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Msxm12.XMLHTTP&quot;</span>);<span class="comment">//旧版本IE</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//2.复写onreadystatement函数</span></span><br><span class="line">                ajax.onreadystatechange = function (ev) &#123;</span><br><span class="line">                    <span class="comment">//判断Ajax状态码</span></span><br><span class="line">                    <span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">                        <span class="comment">//判断响应状态码</span></span><br><span class="line">                        <span class="keyword">if</span>(ajax.status==<span class="number">200</span>)&#123;</span><br><span class="line">                            <span class="comment">//获取响应内容</span></span><br><span class="line">                            <span class="keyword">var</span> result = ajax.responseText;</span><br><span class="line">                            <span class="comment">//获取元素对象</span></span><br><span class="line">                            <span class="keyword">var</span> d = document.getElementById(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                            d.innerHTML=result;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ajax.status==<span class="number">404</span>)&#123;</span><br><span class="line">                            document.getElementById(<span class="string">&quot;d&quot;</span>).innerHTML=<span class="string">&quot;请求页面不存在&quot;</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ajax.status==<span class="number">500</span>)&#123;</span><br><span class="line">                            document.getElementById(<span class="string">&quot;d&quot;</span>).innerHTML=<span class="string">&quot;服务器繁忙&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//3.发送对象</span></span><br><span class="line">            ajax.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;ajax&quot;</span>);</span><br><span class="line">            ajax.send(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;bt&quot;</span> onclick=<span class="string">&quot;c()&quot;</span> value=<span class="string">&quot;按钮&quot;</span>/&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;width: 100px; height: 100px; background-color: red &quot;</span> id=<span class="string">&quot;d&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="ajax的状态码">Ajax的状态码</h3>
<table>
<thead>
<tr class="header">
<th>readState值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>表示XMLHttpRequest已建立，但还未初始化，这里尚未调用open方法</td>
</tr>
<tr class="even">
<td>1</td>
<td>表示open方法已经调用，但未调用send方法(已创建，未发送)</td>
</tr>
<tr class="odd">
<td>2</td>
<td>表示send方法已经调用，其它数据未知</td>
</tr>
<tr class="even">
<td>3</td>
<td>表示请求已经成功发送，正在接受数据</td>
</tr>
<tr class="odd">
<td>4</td>
<td>表示数据已经成功接收</td>
</tr>
</tbody>
</table>
<h3 id="ajax的异步和同步">Ajax的异步和同步</h3>
<p>ajax.open(method,url,async)中async为true时，代表异步，默认为异步，false为同步</p>
<h3 id="ajax的请求">Ajax的请求</h3>
<p>get请求：get请求实体拼接在URL后面，用？隔开，键值对</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get方式：请求实体拼接在URL后面</span></span><br><span class="line">ajax.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;ajax?name=张三&amp;pwd=123&quot;</span>);</span><br><span class="line">ajax.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>post请求：有单独的请求实体</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//post方式：</span></span><br><span class="line">ajax.open(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;ajax&quot;</span>);</span><br><span class="line"><span class="comment">//后面的charset=utf-8解决中文乱码</span></span><br><span class="line">ajax.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded;charset=utf-8&quot;</span>);</span><br><span class="line">ajax.send(<span class="string">&quot;name=张三&amp;pwd=123&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="ajax的响应数据类型">Ajax的响应数据类型</h3>
<p>后台用Java代码，前端用JS代码，Java中数据库读入的List无法直接转成JS中的数据类型，所以需要引入一种转换方式，即可以使用XML或Json(重点)</p>
<p>XML数据:responseXML返回document对象，通过document对象将数据从xml中获取出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ajaxServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ajaxServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    ajaxService as = <span class="keyword">new</span> ajaxServiceImp();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        res.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//res.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        res.setContentType(<span class="string">&quot;text/xml;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//使用XML</span></span><br><span class="line">        res.getWriter().write(<span class="string">&quot;&lt;user&gt;&lt;uid&gt;1&lt;/uid&gt;&lt;name&gt;张三&lt;/name&gt;&lt;/user&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Check&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="function">function <span class="title">s</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            ajax.onreadystatechange = function () &#123;</span><br><span class="line">                <span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ajax.status == <span class="number">200</span>)&#123;</span><br><span class="line">                        <span class="comment">//var result = ajax.responseText;</span></span><br><span class="line">                        <span class="keyword">var</span> result = ajax.responseXML;</span><br><span class="line">                        console.log(result.getElementsByTagName(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">                        alert(result.getElementsByTagName(<span class="string">&quot;name&quot;</span>)[<span class="number">0</span>].innerHTML);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ajax.open(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;ajaxServlet&quot;</span>);</span><br><span class="line">            console.log(<span class="string">&quot;name=&quot;</span>+document.getElementById(<span class="string">&quot;name&quot;</span>).value)</span><br><span class="line">            ajax.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded;charset=utf-8&quot;</span>);</span><br><span class="line">            ajax.send(<span class="string">&quot;name=&quot;</span>+document.getElementById(<span class="string">&quot;name&quot;</span>).value);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;欢迎访问英雄商店&lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> id=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;bt&quot;</span> value=<span class="string">&quot;搜索&quot;</span> onclick=<span class="string">&quot;s()&quot;</span>&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;table border=<span class="string">&quot;1px&quot;</span> id=<span class="string">&quot;ta&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>json:其实就是讲述数据按照json的格式拼接好的字符串，方便使用eval方法，将接收的字符串数据直接转换为js对象</p>
<p>json格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var 对象名 = &#123;</span><br><span class="line">    属性名：属性值，</span><br><span class="line">    属性名：属性值，</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (C), 2015-2019, XXX有限公司</span></span><br><span class="line"><span class="comment"> * FileName: ajaxServlet</span></span><br><span class="line"><span class="comment"> * Author:   zephon</span></span><br><span class="line"><span class="comment"> * Date:     19-4-1 下午12:54</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * History:</span></span><br><span class="line"><span class="comment"> * &lt;author&gt;          &lt;time&gt;          &lt;version&gt;          &lt;desc&gt;</span></span><br><span class="line"><span class="comment"> * 作者姓名           修改时间           版本号              描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.zephon.servletImp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.zephon.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zephon.service.ajaxService;</span><br><span class="line"><span class="keyword">import</span> com.zephon.serviceImp.ajaxServiceImp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-4-1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ajaxServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    ajaxService as = <span class="keyword">new</span> ajaxServiceImp();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        res.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        res.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name&quot;</span>+name);</span><br><span class="line"></span><br><span class="line">        User u = as.getUserInfoService(name);</span><br><span class="line">        System.out.println(u.getUid()+<span class="string">&quot;-&quot;</span>+u.getUname()+<span class="string">&quot;-&quot;</span>+u.getPrice()+<span class="string">&quot;-&quot;</span>+u.getLocation()+<span class="string">&quot;-&quot;</span>+u.getDetail());</span><br><span class="line">        <span class="comment">//json处理</span></span><br><span class="line">        <span class="comment">//原始方式（太麻烦)</span></span><br><span class="line">        <span class="comment">//res.getWriter().write(&quot;&#123;name:&#x27;&quot;+u.getUname()+&quot;&#x27;&#125;&quot;);</span></span><br><span class="line">        <span class="comment">//使用gson</span></span><br><span class="line">        <span class="comment">//此处gson报错500 但没输出，因为对于ajax.state=500没有处理，解决方案是将gson.jar拷贝一份到web-inf中的lib中或tomcat的lib中</span></span><br><span class="line">        res.getWriter().write(<span class="keyword">new</span> Gson().toJson(u));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;商店&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="function">function <span class="title">s</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            ajax.onreadystatechange = function () &#123;</span><br><span class="line">                <span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ajax.status == <span class="number">200</span>)&#123;</span><br><span class="line">                        <span class="keyword">var</span> result = ajax.responseText;</span><br><span class="line">                        <span class="comment">//js操作表格</span></span><br><span class="line">                        console.log(<span class="string">&quot;result:&quot;</span>+result)</span><br><span class="line">                        eval(<span class="string">&quot;var u =&quot;</span>+result)</span><br><span class="line">                        console.log(u);</span><br><span class="line">                        <span class="keyword">var</span> ta = document.getElementById(<span class="string">&quot;ta&quot;</span>);</span><br><span class="line">                        ta.innerHTML=<span class="string">&quot;&quot;</span></span><br><span class="line">                        <span class="keyword">var</span> tr = ta.insertRow(<span class="number">0</span>);</span><br><span class="line">                        tr.insertCell(<span class="number">0</span>).innerHTML = <span class="string">&quot;编号&quot;</span>;</span><br><span class="line">                        tr.insertCell(<span class="number">1</span>).innerHTML = <span class="string">&quot;名称&quot;</span>;</span><br><span class="line">                        tr.insertCell(<span class="number">2</span>).innerHTML = <span class="string">&quot;价格&quot;</span>;</span><br><span class="line">                        tr.insertCell(<span class="number">3</span>).innerHTML = <span class="string">&quot;位置&quot;</span>;</span><br><span class="line">                        tr.insertCell(<span class="number">4</span>).innerHTML = <span class="string">&quot;描述&quot;</span>;</span><br><span class="line">                        <span class="keyword">var</span> tr = ta.insertRow(<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">var</span> cell0 = tr.insertCell(<span class="number">0</span>);</span><br><span class="line">                        cell0.innerHTML = u.uid;</span><br><span class="line">                        <span class="keyword">var</span> cell1 = tr.insertCell(<span class="number">1</span>);</span><br><span class="line">                        cell1.innerHTML = u.uname;</span><br><span class="line">                        <span class="keyword">var</span> cell2 = tr.insertCell(<span class="number">2</span>);</span><br><span class="line">                        cell2.innerHTML = u.price;</span><br><span class="line">                        <span class="keyword">var</span> cell3 = tr.insertCell(<span class="number">3</span>);</span><br><span class="line">                        cell3.innerHTML = u.location;</span><br><span class="line">                        <span class="keyword">var</span> cell4= tr.insertCell(<span class="number">4</span>);</span><br><span class="line">                        cell4.innerHTML = u.detail;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ajax.open(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;ajaxServlet&quot;</span>);</span><br><span class="line">            console.log(<span class="string">&quot;name=&quot;</span>+document.getElementById(<span class="string">&quot;name&quot;</span>).value)</span><br><span class="line">            ajax.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded;charset=utf-8&quot;</span>);</span><br><span class="line">            ajax.send(<span class="string">&quot;name=&quot;</span>+document.getElementById(<span class="string">&quot;name&quot;</span>).value);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;欢迎访问英雄商店&lt;/h3&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> id=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;bt&quot;</span> value=<span class="string">&quot;搜索&quot;</span> onclick=<span class="string">&quot;s()&quot;</span>&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;table border=<span class="string">&quot;1px&quot;</span> id=<span class="string">&quot;ta&quot;</span>&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="ajax的封装">Ajax的封装</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建ajax引擎对象</span></span><br><span class="line">    <span class="keyword">var</span> ajax;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">        ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">        ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Msxm12.XMLHTTP&quot;</span>);<span class="comment">//旧版本IE</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">method,url,data,deal200,deal404,deal500,<span class="keyword">async</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ajax = getAjax();</span><br><span class="line">    <span class="comment">//复写onreadystatement函数</span></span><br><span class="line">    ajax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//判断Ajax状态码</span></span><br><span class="line">        <span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//判断响应状态码</span></span><br><span class="line">            <span class="keyword">if</span>(ajax.status==<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(deal200)&#123;</span><br><span class="line">                    deal200(ajax);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ajax.status==<span class="number">404</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(deal404)&#123;</span><br><span class="line">                    deal404();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ajax.status==<span class="number">500</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(deal500)&#123;</span><br><span class="line">                    deal500();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(method.toLowerCase()==<span class="string">&quot;get&quot;</span>)&#123;</span><br><span class="line">        ajax.open(<span class="string">&quot;get&quot;</span>,url+(data==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:(<span class="string">&quot;?&quot;</span>+data)),<span class="keyword">async</span>);</span><br><span class="line">        ajax.send(<span class="literal">null</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.toLowerCase()==<span class="string">&quot;post&quot;</span>)&#123;</span><br><span class="line">        ajax.open(<span class="string">&quot;post&quot;</span>,url,<span class="keyword">async</span>);</span><br><span class="line">        ajax.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded;charset=utf-8&quot;</span>);</span><br><span class="line">        ajax.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;ajax.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        console.log(document.getElementById(<span class="string">&quot;name&quot;</span>).value)</span><br><span class="line">        myAjax(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;ajaxServlet&quot;</span>, <span class="string">&quot;name=&quot;</span> + document.getElementById(<span class="string">&quot;name&quot;</span>).value, function (a) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = a.responseText</span><br><span class="line">            console.log(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>EL表达式</title>
    <url>/2019/04/11/JavaWeb-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="el表达式">EL表达式</h1>
<hr />
<h2 id="简介">简介</h2>
<p>EL（Expression Language） 是为了使JSP写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。</p>
<h2 id="作用">作用</h2>
<p>获取作用域对象中的数据</p>
<p>注意：获取的是pageContext、request、session、application四个对象中的数据，其它数据一概不理会。找到了则获取返回，找不到则什么都不做，也不报错</p>
<h2 id="语法">语法</h2>
<p>${表达式}</p>
<p>表达式：</p>
<p>获取请求数据</p>
<p>request对象存储了请求数据--&gt;param.键名 返回值</p>
<p>request对象存储了请求数据--&gt;paramvalues.键名 返回数组</p>
<p>通过setAttribute方法存储到作用域对象中的数据</p>
<p>${键名} 返回键名所对应的值</p>
<p>注意：如果存储的是普通字符串则直接返回，如果存储的是对象，则返回的是对象</p>
<p>​ 获取对象中的数据：</p>
<p>​ 普通对象：${键名.属性名.属性名...}</p>
<p>​ 集合对象：list集合---&gt;${键名[角标]}</p>
<p>​ map集合--&gt;${键名.map集合存储的键名}</p>
<h2 id="作用域查找顺序">作用域查找顺序</h2>
<p>pageContext--&gt;request--&gt;session--&gt;application</p>
<p>注意：每次查找都是从小到大查找，找到了则获取，不再继续找。</p>
<p>指定查找：<span class="math inline">\({pageScope.键名}---\)</span>{requestScope.键名}---<span class="math inline">\({sessionScope.键名}---\)</span>{application.键名}</p>
<h2 id="el表达式的逻辑运算">EL表达式的逻辑运算</h2>
<p>${逻辑表达式}：&amp;&amp; || ！</p>
<p>${算术表达式}：+，-，*,/</p>
<p>${关系表达式}：&gt;,&lt;,&gt;=,&lt;=,==,!=,%</p>
<p>特殊：三目运算符</p>
<p>注意：+表示加法运算，不表示字符连接，使用EL表达式进行字符连接会报错</p>
<h2 id="el表达式的空值判断">EL表达式的空值判断</h2>
<p>${empty 键名}</p>
<p>作用：判断键名对象的值是否存有数据</p>
<h2 id="el获取请求头数据和cookie数据">EL获取请求头数据和Cookie数据</h2>
<p>请求头数据：</p>
<p>${header}--&gt;返回所有的请求头数据</p>
<p>${header["键名"]}---&gt;返回指定的键名的请求头数据</p>
<p>${headerValues["键名"]}---&gt;返回指定的键名(同键不同值)的值的数组</p>
<p>获取Cookie数据：</p>
<p>${cookie}---&gt;返回存储了所有的cookie对象的map集合</p>
<p>${cookie.键名}---&gt;返回指定的cookie对象</p>
<p>${cookie.键名.name}---&gt;返回指定的cookie对象存储的数据的键名</p>
<p>${cookie.键名.value}---&gt;返回指定的cookie对象存储的数据的值</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2019/03/08/JavaWeb-JDBC/</url>
    <content><![CDATA[<h1 id="jdbc">JDBC</h1>
<hr />
<h2 id="jdbcjava-database-connectivity">JDBC(Java DataBase Connectivity)</h2>
<p>可以为多种关系型数据库DBMS提供统一的访问方式，用Java来操作数据库</p>
<h3 id="jdbc-api提供各种操作访问接口connectionstatementpreparedstatementresultset">JDBC API：提供各种操作访问接口，Connection、Statement、PreparedStatement、ResultSet</h3>
<p>主要功能：</p>
<ul>
<li>与数据库建立连接：</li>
<li>发送SQL语句</li>
<li>返回处理结果</li>
</ul>
<p>类/接口：</p>
<p>DriverManager：管理jdbc驱动</p>
<p>Connection：连接</p>
<p>Statement(PreparedStatement)：增删改查</p>
<p>CallableStatement：调用数据库中的 存储过程/存储函数</p>
<p>Result：返回的结果集</p>
<p>JDBC访问数据库的具体步骤：</p>
<ol type="1">
<li><p>导入驱动，加载具体的驱动类</p></li>
<li><p>与数据库建立连接</p></li>
<li><p>发送sql，执行</p></li>
<li><p>处理结果集（查询）</p></li>
<li><p>JDBC DriveManager：管理不同的数据库驱动</p></li>
</ol>
<h3 id="各种数据库驱动相应的数据库厂商提供的连接">各种数据库驱动：相应的数据库厂商提供的，连接</h3>
<p>数据库驱动：</p>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 18%" />
<col style="width: 31%" />
<col style="width: 43%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">驱动jar</th>
<th style="text-align: center;">具体驱动类</th>
<th style="text-align: center;">连接字符串</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Oracle</td>
<td style="text-align: center;">ojdbc-x.jar</td>
<td style="text-align: center;">oracle.jdbc.OracleDriver</td>
<td style="text-align: center;">jdbc:oracle:thin:<span class="citation" data-cites="localhost:1521:ORCL">@localhost:1521:ORCL</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">MySQL</td>
<td style="text-align: center;">mysql-connector-java-x.jar</td>
<td style="text-align: center;">com.mysql.jdbc.Driver</td>
<td style="text-align: center;">jdbc:mysql://localhost:3306/数据库实例名</td>
</tr>
<tr class="odd">
<td style="text-align: center;">SqlServer</td>
<td style="text-align: center;">sqljdbc-x.jar</td>
<td style="text-align: center;">com.microsoft.sqlserver.jdbc.SQLServerDriver</td>
<td style="text-align: center;">jdbc:microsoft:sqlserver:localhost:1433;databasename=数据库实例名</td>
</tr>
</tbody>
</table>
<p>Connection产生操作数据库的对象：</p>
<p>Connection产生Statement对象：createStatement()</p>
<p>Connection产生PreparedStatement对象：prepareStatement()</p>
<p>Connection产生CallableStatement对象：prepareCall()</p>
<p>Statement操作数据库：</p>
<p>增删改：excuteUpdate()</p>
<p>查询：excuteQuery();</p>
<p>ResultSet：保存结果集 select * from xxx</p>
<p>next()：光标下移，判断是否有下一条数据：true/false</p>
<p>previous()：光标上移</p>
<p>getXxx(字段名/位置)：获取具体的字段值</p>
<p>PreparedStatement操作数据库：</p>
<p>public interface PreparedStatement extends Statement</p>
<p>因此</p>
<p>增删改：excuteUpdate()</p>
<p>查询：executeQuery();</p>
<p>赋值操作：setXxx();</p>
<p>PreparedStatement与Statement在使用时的区别：</p>
<ol type="1">
<li><p>Statement先写sql，然后写executeUpdate(sql);</p></li>
<li><p>PreparedStatement，写sql，可能存在占位符(?)，在创建PreparedStatement对象时，将sql预编译prepareStatement(sql)，executeUpdate(),setXxx()替换占位符</p></li>
</ol>
<p>推荐使用PreparedStatement：原因如下：</p>
<ol type="1">
<li>编码使用简便（避免字符串拼接）</li>
</ol>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//statement方式</span></span><br><span class="line">String name = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line">String sql = <span class="string">&quot;insert into student(stuno,stuname) values (&#x27;&quot;</span>+name+<span class="string">&quot;&#x27;, &quot;</span>+age+“) <span class="string">&quot;;</span></span><br><span class="line"><span class="string">stmt.executeUpdate(sql);</span></span><br><span class="line"><span class="string">//preparedStatement方式</span></span><br><span class="line"><span class="string">String sql = &quot;</span><span class="function">insert into <span class="title">student</span><span class="params">(stuno,stuname)</span> <span class="title">values</span><span class="params">(?,?)</span>&quot;</span>;</span><br><span class="line">psmt = connection.prepareStatement(sql);<span class="comment">//预编译SQL</span></span><br><span class="line">psmt.setString(<span class="number">1</span>,name);</span><br><span class="line">psmt.setInt(<span class="number">2</span>,age);</span><br><span class="line">psmt.executeUpdate();</span><br></pre></td></tr></table></figure></p>
<ol start="2" type="1">
<li><p>提高性能</p>
<p>若需要重复增加200条数</p>
<p>stmt:需要编译200次</p>
<p>psmt:只需要预编译一次，只是executeUpdate()执行100次，省去编译操作。</p></li>
<li><p>安全（可以有效防止SQL注入）</p>
<p>stmt：存在被sql注入的风险</p>
<p>（例如输入 用户名：任意值 ‘ or 1=1 -- 密码：任意值）</p>
<p>分析：select count(*) from login where uname='任意值' or 1=1 --' and upwd = '任意值';</p>
<p>​ =select count(*) from login where uname='任意值' or 1=1</p>
<p>​ =select count(*) from login;</p>
<p>pstmt：有效防止sql注入</p></li>
</ol>
<h3 id="jdbc总结模板">jdbc总结（模板）：</h3>
<p>try{</p>
<ol type="a">
<li><p>导入驱动包、加载具体驱动类ClassforName("具体驱动类");</p></li>
<li><p>与数据建立连接connection = DriverManager.getConnection(...);</p></li>
<li><p>通过connection，获取操作数据库的对象（Statement）</p></li>
</ol>
<p>stmt = connection.createStatement();</p>
<ol start="4" type="a">
<li>(查询)处理结果集rs = pstmt.executeQuery();</li>
</ol>
<p>while(rs.next){rs.getXxx(...);}、</p>
<p>}catch(ClassNotFoundException e1){...}catch(SQLException e2){...}catch(Exception e ){...}finally{xx.close;//打开顺序与关闭顺序相反 rs.close();stmt.close();connection.close();}</p>
<h3 id="callablestatement调用-存储过程存储函数">CallableStatement：调用 存储过程、存储函数</h3>
<p>connection.prepareCall(参数：存储过程或存储函数名)</p>
<p>参数格式：</p>
<p>存储过程(无返回值return,用Out参数代替)：{call 存储过程名(参数列表)}</p>
<p>存储函数(有返回值return)：{？=call 存储函数名(参数列表)}</p>
<p>eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> addTwoNum(num1 <span class="keyword">in</span> number,num2 <span class="keyword">in</span> number,<span class="keyword">result</span> <span class="keyword">out</span> number)<span class="comment">-- 1+2-&gt;3 -- 后跟注释</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">result</span> :<span class="operator">=</span> num1<span class="operator">+</span>num2;</span><br><span class="line"><span class="keyword">end</span> ;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure>
<h3 id="jdbc处理大文本clob及二进制blob类">JDBC处理大文本CLOB及二进制BLOB类</h3>
<h3 id="jsp访问数据库">JSP访问数据库</h3>
<p>导包操作：复制到WEB-INF中的lib中</p>
<p>命名规范：如果在src新建一个数据库是用来操作数据库的，名字后面加上Dao(Data Access object)</p>
<p>src文件中的java文件注意新建包，然后将文件放入包中</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">login</span><span class="params">(Login login)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/JavaMysql&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String PWD = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 导入驱动，加载具体的驱动类</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 与数据库建立连接</span></span><br><span class="line">            connection = DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">            <span class="comment">// 发送sql，执行</span></span><br><span class="line">            stmt = connection.createStatement();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">&quot;select count(*) from login where name=&#x27;&quot;</span> + login.getName() + <span class="string">&quot;&#x27;and pwd=&#x27;&quot;</span> + login.getPwd() + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="keyword">null</span>) rs.close();</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) stmt.close();</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Titile&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">&quot;check.jsp&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span>&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;upwd&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;Util.LoginDao&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;Util.Login&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Login login = <span class="keyword">new</span> Login();</span><br><span class="line">        login.setName(request.getParameter(<span class="string">&quot;uname&quot;</span>));</span><br><span class="line">        login.setPwd(request.getParameter(<span class="string">&quot;upwd&quot;</span>));</span><br><span class="line">        <span class="keyword">int</span> count = <span class="keyword">new</span> LoginDao().login(login);</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">1</span>)&#123;</span><br><span class="line">            out.print(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out.print(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="javabean">JavaBean</h3>
<p>上述LoginDao.java中的函数login()本在jsp中操作，我们将其提取转移到LoginDao.java中，其中LoginDao类，就称之为JavaBean。</p>
<p>JavaBean的作用：</p>
<p>a.减轻了jsp的复杂度</p>
<p>b.提高代码的复用度(以后任何地方的登录操作，均可调用LoginDao.java中的login()方法)</p>
<p>JavaBean(就是一个类)的定义：满足以下两点，就可称为JavaBean</p>
<p>a.public 修饰的类，public无参构造</p>
<p>b.所有属性都是private，并且提供set/get(如果boolean则get可以替换成is)</p>
<p>使用层面，Java分为两大类：</p>
<ol type="a">
<li><p>封装业务逻辑的JavaBean（LoginDao.java封装了登录逻辑）用于操作一个封装数据的JavaBean</p></li>
<li><p>封装数据的JavaBean（实体类，Student.java Person.java）对应于数据库的一张表</p></li>
</ol>
<p>eg:Login login = new Login(uname,upwd);//即用Login对象 封装了2个数据</p>
<p>可以发现，JavaBean可以简化代码（jsp-&gt;jsp+java)、提高代码复用</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JSTL标签库</title>
    <url>/2019/04/13/JavaWeb-JSTL%E6%A0%87%E7%AD%BE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="jstl标签库">JSTL标签库</h1>
<hr />
<h2 id="简介">简介</h2>
<p>JSTL是apache对EL表达式的扩展(也就是说JSTL依赖EL)，JSTL是标签语言，JSTL标签使用以来非常方便，它与JSP动作标签一样，只不过它不是JSP内置的标签，需要我们自己导包，以及指定标签库而已！</p>
<h2 id="作用">作用</h2>
<p>用来提升在JSP页面的逻辑代码的编码效率，使用标签来替换逻辑代码的直接书写，高效，美观，整洁，易读。</p>
<h2 id="使用jstl">使用JSTL</h2>
<p>JSTL的核心标签库(重点)</p>
<p>JSTL的格式化标签库(讲解)</p>
<p>JSTL的SQL标签库(了解)</p>
<p>JSTL的函数标签库(了解)</p>
<p>JSTL的XML标签库(了解)</p>
<h2 id="jstl的核心标签库">JSTL<strong>的核心标签库</strong></h2>
<ol type="1">
<li><p>导入jar包</p></li>
<li><p>声明jstl标签库的引入(核心标签库)</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>内容</p>
<p>基本标签：</p>
<p>​ &lt; c:out value="数据" default="默认值"/&gt;</p>
<p>​ 数据可以为常量值也可以是EL表达式</p>
<p>​ 作用：将数据输出给客户端</p>
<p>​ &lt; c:set var="键名" value="数据" scope="作用域对象(page/request/session/application)"/&gt;</p>
<p>​ 作用：存储数据到作用域对象中</p>
<p>​ &lt; c:remove var="键名" scope="作用域对象"/&gt;</p>
<p>​ 作用：删除作用域中的指定键的数据</p>
<p>​ 注意：如果在不指定作用域的情况使用该标签删除数据，会将四个作用域对象中的符合要求的数据全删掉</p>
<p>逻辑标签：</p>
<pre><code> &lt; c:if test=&quot;$&#123;表达式&#125;&quot; &gt;前端代码&lt; /c:if &gt;</code></pre>
<p>​ 作用：进行逻辑判断，相当于java代码的单分支判断</p>
<p>​ 注意：逻辑判断标签需要依赖于EL的逻辑运算，也就表达式中涉及到数据必须从作用域中获取</p>
<p>​ &lt; c:choose&gt;</p>
<p>​ &lt; c:when test=""&gt;执行内容&lt; /c:when&gt;</p>
<p>​ 。。。</p>
<p>​ &lt; c:when test=""&gt;执行内容&lt; /c:when&gt;</p>
<p>​ &lt; c:otherwise&gt;执行内容&lt; /c:otherwise&gt;</p>
<p>​ &lt; /c:choose&gt;</p>
<p>​ 作用：用来进行多条件的逻辑判断，类似java的多分支语句</p>
<p>​ 注意：条件成立只会执行一次，都不成立则执行otherwise</p>
<p>循环标签：</p>
<p>​ &lt; c:forEach begin="循环开始位置(1)" end="循环结束位置(4)" step="设置步长(2)" varStatus="变量(声明变量记录每次循环的数据(角标、次数、是否是第一次循环、是否是最后一次循环))"&gt;</p>
<p>​ 循环体</p>
<p>​ &lt; /c:forEach&gt;</p>
<p>​ 作用：循环内容进行处理</p>
<p>​ 注意：数据存储在作用域中，需要使用EL表达式获取(例如：<span class="math inline">\({vs.index}--\)</span>{vs.count}--<span class="math inline">\({vs.first}--\)</span>{vs.last})</p>
<p>​ &lt; c:forEach items="要遍历的对象(${list})" var="值(str)"&gt;</p>
<p>​ 循环体</p>
<p>​ &lt; /c:forEach&gt;</p></li>
<li><p>相关网站推荐：<a href="http://www.runoob.com/jsp/jsp-jstl.html" class="uri">http://www.runoob.com/jsp/jsp-jstl.html</a></p></li>
</ol>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC设计模式</title>
    <url>/2019/03/16/JavaWeb-MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="mvc设计模式">MVC设计模式</h1>
<hr />
<h2 id="简介">简介</h2>
<p>M：Model：模型--一个功能。用JavaBean实现(登录功能(LoginDao)、注册功能)eg:LoginDao.java</p>
<p>V：View：视图--用于展示以及与用户交互(负责页面的显示-html/css/jsp/js、登录表单、注册表单)eg:index.jsp</p>
<p>C：Controller：控制器--接收请求，将请求跳转到模型进行处理;模型处理完毕后，再将处理结果返回给请求处(分发器，分发模型-将登录表单的登录请求分发给登录模型)可以用jsp实现，eg:check.jsp，但是不推荐，一般建议使用Servlet实现控制器。</p>
<figure>
<img src="/img/mvc.png" alt="mvc" /><figcaption>mvc</figcaption>
</figure>
<h2 id="servlet">Servlet</h2>
<p>Java类必须符合一定的规范：</p>
<ol type="a">
<li>必须继承javax.servlet.http.HttpServlet</li>
</ol>
<p>b.重写其中的doGet()或doPost()方法</p>
<p>doGet():接受并处理所有get方式提交的请求</p>
<p>doPost():接受并处理所有post方式提交的请求</p>
<p>Servlet要想使用，必须配置</p>
<p>Servlet2.5：web.xml</p>
<figure>
<img src="/img/servlet.png" alt="servlet" /><figcaption>servlet</figcaption>
</figure>
<p>项目的根目录：WebContent、src</p>
<p><a href="WelcomeServlet">所在的jsp是在WebContent目录中，因此，发出的请求WelcomeServlet是去请求项目的根目录(用/表示)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Util.WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/WelcomeServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;a href=<span class="string">&quot;WelcomeServlet&quot;</span>&gt;WelcomeServlet&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>Servlet流程：</p>
<p>请求-&gt;<url-pattern>-&gt;根据<servlet-name>去匹配<servlet>中的<servlet-name>,然后将请求交由该<servlet-class>执行</p>
<p>Servlet3.0：<span class="citation" data-cites="WebServlet">@WebServlet</span></p>
<p>不需要在web.xml中配置，但需要在Servlet类定义处之上编写注解@WebServlet("/url-pattern")</p>
<p>匹配流程：请求地址与@WebServelt中的值进行匹配，如果匹配成功，则说明请求的就是该注解所对应的类</p>
<h2 id="的含义">/的含义</h2>
<p>项目根目录：web、src（所有的构建路径）</p>
<p>eg：web中有一个文件index.jsp：<a href="abc">...&lt; /a&gt;，则寻找范围：既会在src根目录中找也会在web根目录中找</p>
<p>如果index.jsp中请求的是web中有一个文件index.jsp：<a href="a/abc">...&lt; /a&gt;，则寻找范围：先在src或web中找a目录，然后再在a目录中找abc</p>
<p>/：在web.xml中，/ 代表的是项目根路径(localhost:8080/Project/)</p>
<p>/：在jsp中，/代表的是服务器的根路径(localhost:8080/)</p>
<h2 id="servlet生命周期">Servlet生命周期</h2>
<p>加载</p>
<p>初始化：init()，该方法会在Servlet被加载并实例化以后执行，默认第一次访问Servlet时会被执行，可修改为在tomcat启动时自动执行</p>
<p>修改方法：</p>
<p>servlet2.5:</p>
<p>在web.xml中的<servlet></servlet>中添加<load-on-startup>1</load-on-startup></p>
<p>servlet3.0：</p>
<p>修改@WebServlet(value="/WelcomeServlet",loadOnStartup=1)</p>
<p>服务：service() -&gt;doGet() doPost()，每次调用均执行</p>
<p>销毁：destroy()，Servlet被系统回收时执行，关闭tomcat服务时执行</p>
<p>卸载</p>
<h2 id="servlet-api">Servlet API</h2>
<p>由两个软件包组成：对应于HTTP协议的软件包、对应于除HTTP协议外的其它软件包，即Servlet API可以适用于任何通信协议，我们学习的Servlet，是位于javax.servlet.http包中的类和接口，是基础HTTP协议。</p>
<h2 id="servlet继承关系">Servlet继承关系</h2>
<p>ServletConfig：接口</p>
<p>ServletContext getServletContext()：获取Servlet上下文对象</p>
<p>String getInitParameter(String name)：在当前Servlet范围内，获取名为name的参数值（初始化参数）</p>
<p>ServletContext中的常见方法(application)：</p>
<p>getContextPath()：相对路径</p>
<p>getRealPath()：绝对路径</p>
<p>setAttribute()、getAttribute()</p>
<p>String getInitParameter(String name)：在当前web容器范围内，获取名为name的参数值（初始化参数）</p>
<p>eg:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在整个Web容器中设置初始化参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>globalParam<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>globalValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Util.WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当前servlet设置初始化参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>servletParam<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>servletValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/WelcomeServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在3.0中：<span class="citation" data-cites="WebServlet">@WebServlet</span>(value="/WelcomeServlet",loadOnStartup = 1,initParams = {<span class="citation" data-cites="WebInitParam">@WebInitParam</span>(name="paraname",value="Vlaue")})，但全局的不能通过注解配置</p>
<p>HttpServletRequest中的方法：同request，例如setAttribute()、getCookies()、getMethod()</p>
<p>HtppServletResponse中的方法：同response</p>
<figure>
<img src="/img/relation.png" alt="继承关系图" /><figcaption>继承关系图</figcaption>
</figure>
<p>Servlet使用层面：</p>
<p>在src中创建一个Servlet，然后重写doGet()、doPost()就行了(且doGet()、doPost()具体只用写一个)</p>
<h2 id="mvc案例">MVC案例</h2>
<p>登录：</p>
<figure>
<img src="/img/example.png" alt="example" /><figcaption>example</figcaption>
</figure>
<p>login.jsp:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;LoginServlet&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码： &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;upwd&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>Login.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Login</span><span class="params">(String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LoginDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 模型层：用于处理登录(查询数据)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">login</span><span class="params">(Login login)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/JavaMysql&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String PWD = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = -<span class="number">1</span>;<span class="comment">// -1系统异常 0：用户名或密码错误 1：登陆成功</span></span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">         <span class="comment">// 导入驱动，加载具体的驱动类</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 与数据库建立连接</span></span><br><span class="line">            connection = DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">            <span class="comment">// 发送sql，执行</span></span><br><span class="line">            String sql = <span class="string">&quot;select count(*) from login where name=? and pwd=?&quot;</span>;</span><br><span class="line">            pstmt = connection.prepareStatement(sql);</span><br><span class="line">            pstmt.setString(<span class="number">1</span>,login.getName());</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,login.getPwd());</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                count=rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            count = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            count = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            count = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="keyword">null</span>) rs.close();</span><br><span class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) pstmt.close();</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LoginServlet.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 控制器层:接收view请求， 并分发给Model处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//处理登录</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String pwd = request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">new</span> LoginDao().login(<span class="keyword">new</span> Login(name,pwd));</span><br><span class="line">        <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;welcom.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 控制器层:接收view请求， 并分发给Model处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//处理登录</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String pwd = request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = LoginDao.login(<span class="keyword">new</span> Login(name,pwd));</span><br><span class="line">        <span class="keyword">if</span>(result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;welcom.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2</title>
    <url>/2019/05/08/JavaWeb-Struts2/</url>
    <content><![CDATA[<h1 id="struts2">Struts2</h1>
<hr />
<h2 id="struts2介绍">struts2介绍</h2>
<p>Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的<a href="https://baike.baidu.com/item/体系结构/8174145">体系结构</a>与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与<a href="https://baike.baidu.com/item/img/ervlet">Servlet</a>API完全脱离开，所以Struts 2可以理解为WebWork的更新产品。虽然从Struts 1到Struts 2有着太大的变化，但是相对于WebWork，Struts 2的变化很小。</p>
<h2 id="idea使用struts2">Idea使用struts2</h2>
<ol type="1">
<li><p>点击File-&gt;new-&gt;Project...，选择Java Enterprise中的Struts2，libraries中选择Use library</p>
<p>点击create...，选择下载好的struts2的lib中的jar包</p>
<p><img src="/img/s1.png" /></p>
<p><img src="/img/s2.png" /></p></li>
<li><p>点击next-&gt;Finish然后项目建立完成</p></li>
<li><p>点击File-&gt;Project structure...，选择Problems，会发现有一个问题，点击Fix，选择Add.....,然后ok就行了</p>
<p><img src="/img/s3.png" /></p></li>
<li><p>查看web.xml文件，如果有红色报错，只需要将org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter改成org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter即可</p></li>
<li><p>如果有报错Artifact untitled:war exploded: Error during artifact deployment.</p>
<p><img src="/img/s4.png" /></p>
<p>则需要检查</p>
<blockquote>
<ol type="1">
<li>Project structure中的Problems是否仍然存在，若存在则继续Fix</li>
<li>Project structure中的Artifacts中Web-INF中是否有导入的struts2lib，</li>
<li>确保只导入过一次Struts2的lib文件，在Exernal Libraries中导入后，不要在tomcat文件夹中的lib中导入struts2的jar包</li>
</ol>
</blockquote>
<p>全部修改完成后，点击运行就可以成功运行了。</p>
<p><img src="/img/s5.png" /></p></li>
</ol>
<h2 id="使用struts2完成一个简单的登录">使用struts2完成一个简单的登录</h2>
<p>以一个登录案例为例：</p>
<p>Service、dao、pojo文件都和用Servlet时基本一样</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- login.jsp --&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 注意修改action --&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;LoginAction.action&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码: &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * LoginAction.java</span></span><br><span class="line"><span class="comment">  * 作用和Servlet类似</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"><span class="keyword">import</span> com.zephon.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">new</span> UserService().checkLogin();</span><br><span class="line">        System.err.println(user.getUname());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现ModelDriven接口，实现getModel方法，返回一个对象就是我们封装数据的对象(先要将对象封装)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://img/truts.apache.org/dtds/img/truts-2.5.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- struts.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name:配置包名，namespace：给action的访问路径定义一个命名空间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;MyPackage&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- action：配置action类 </span></span><br><span class="line"><span class="comment">			name：决定action访问的资源名称相当于servlet：url-pattern </span></span><br><span class="line"><span class="comment"> 			class：action的完整类名</span></span><br><span class="line"><span class="comment">			method：指定调用action中的哪个方法去处理请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;LoginAction&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zephon.action.LoginAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;execute&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认为请求转发，可修改为重定向 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;redirect&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">&lt;/img/truts&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml idea一般会自动配置好 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="动态设置方法">动态设置方法</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://img/truts.apache.org/dtds/img/truts-2.5.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.devMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.enable.DynamicMethodInvocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- name:配置包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;MyPackage0&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">global-allowed-methods</span>&gt;</span>login,register<span class="tag">&lt;/<span class="name">global-allowed-methods</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;LoginAction_*&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zephon.action.LoginAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&#123;1&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认为请求转发 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">&lt;/img/truts&gt;</span><br></pre></td></tr></table></figure>
<h2 id="log4j警告问题解决">log4j警告问题解决</h2>
<p>导入log4j-core-*.jar包，然后在src中添加log4j2.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;warn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%m%n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参数传递">参数传递</h2>
<h3 id="接收参数">接收参数</h3>
<ol type="1">
<li>(常用)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.err.println(user.getUname());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(uname+<span class="string">&quot;--&quot;</span>+pwd);</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
<p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;LoginAction.action&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.uname&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码: &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;user.pwd&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> User user;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(user.getUname()+<span class="string">&quot;--&quot;</span>+user.getPwd());</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="传递参数给jsp或action">传递参数(给jsp或action)</h3>
<p>使用ActionContext，map类型，包括request,response,servletContext,request域,session域,application域,attr域,param域,valueStack值栈</p>
<p>生命周期：每次请求都会创建一个对应的actioncontext对象，请求结束去销毁actionContext对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用ActionContext</span></span><br><span class="line"><span class="comment">//request中的setAttr</span></span><br><span class="line">      ActionContext.getContext().put(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">      ActionContext.getContext().put(<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">      <span class="comment">//获得session</span></span><br><span class="line">      Map&lt;String,Object&gt; session = ActionContext.getContext().getSession();</span><br><span class="line">      session.put(<span class="string">&quot;session&quot;</span>,<span class="string">&quot;session域&quot;</span>);</span><br><span class="line">      <span class="comment">//获得application</span></span><br><span class="line">      Map&lt;String,Object&gt; application = ActionContext.getContext().getApplication();</span><br><span class="line">      application.put(<span class="string">&quot;application&quot;</span>,<span class="string">&quot;application域&quot;</span>);</span><br><span class="line">      <span class="comment">//获得原生的request</span></span><br><span class="line">      HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">      <span class="comment">//获得原生的response</span></span><br><span class="line">      HttpServletResponse response = ServletActionContext.getResponse();</span><br></pre></td></tr></table></figure>
<h2 id="ognl">OGNL</h2>
<p>可看作是EL+JSTL表达式</p>
<p>循环遍历:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;s:iterator value=<span class="string">&quot;list&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;l&quot;</span>&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">&quot;name&quot;</span>/&gt;&lt;!-- 属性 --&gt;</span><br><span class="line">&lt;/img/:iterator&gt;</span><br></pre></td></tr></table></figure>
<p>条件语句：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;s:<span class="keyword">if</span> test=<span class="string">&quot;num%2==0&quot;</span>&gt;</span><br><span class="line">	偶数</span><br><span class="line">&lt;/img/:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;s:<span class="keyword">else</span>&gt;</span><br><span class="line">    奇数</span><br><span class="line">&lt;/img/:<span class="keyword">else</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="拦截器">拦截器</h2>
<p>拦截器只能控制访问Action，不能控制访问jsp页面</p>
<h3 id="创建拦截器">创建拦截器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种创建拦截器的方法(推荐) 继承类MethodFilterInterceptor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntercept</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation actionInvocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//如果没有登录就跳转到登录页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Login&quot;</span>;</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        <span class="comment">// return actionInvocation.invoke();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第二种(实现Interceptor接口)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntercept1</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation actionInvocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        <span class="keyword">return</span> actionInvocation.invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置拦截器">配置拦截器</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;MyPackage&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注册拦截器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">&quot;MyIntercept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zephon.intercept.MyIntercept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注册拦截器栈 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">&quot;myStack&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 引入自己创建的拦截器 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;MyIntercept&quot;</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!-- 配置不经过拦截器的 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;excludeMethods&quot;</span>&gt;</span>execute<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 引入struts写好的拦截器 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;defaultStack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 指定包中的默认拦截器栈 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">&quot;myStack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>三层架构</title>
    <url>/2019/03/28/JavaWeb-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="三层架构">三层架构</h1>
<hr />
<h2 id="简介">简介</h2>
<p>与MVC设计模式的目标一致，都是为了解耦合、提高代码复用</p>
<p>区别：二者对项目理解的角度不同</p>
<h2 id="三层组成">三层组成</h2>
<p>表示层（USL，User Show Layer；经常称作视图层）</p>
<p>--前台：对应于MVC中的View，用于和用户交互、界面的显示(jsp、js、html、css、jquery等web前端技术)，代码位置：Web</p>
<p>--后台：对应于MVC中Controller，用于控制跳转、调用业务逻辑层(Servlet(SpringMVC Structs2))代码位置：xxx.servlet包中</p>
<p>业务逻辑层（BLL，Business Logic Layer；Service层），代码位置：xxx.service包(xxx.manager，xxx.bll)</p>
<p>--接收表示层的请求调用</p>
<p>--组装数据访问层，逻辑性的操作（增删改查，删：查+删）</p>
<p>数据访问层（DAL，Data Access Layer；Dao层）</p>
<p>--直接访问数据库，原子性的操作（增删改查），代码位置：xxx.dao包</p>
<h2 id="三层间的关系">三层间的关系</h2>
<p>上层将请求传递给下层，下层处理后返回给上层</p>
<p>上层依赖于下层，依赖：代码的理解就是持有成员变量，或者理解为：有A的前提是必须先有B（eg：先有数据库，才可能有DAO层，Dao依赖于数据库）</p>
<p>JSP的对象在Servlet中调用：</p>
<p>out：PrintWriter out = response.getWriter()</p>
<p>session：request.getSession()</p>
<p>application：request.getServletContext()</p>
<p>解决乱码的方法：在Servlet中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//设置响应编码</span></span><br><span class="line">PrintWriter out = response.getWriter();<span class="comment">//响应对象</span></span><br></pre></td></tr></table></figure>
<p>Servlet：一个Servlet对应于一个功能，因此，如果有增删改查（查询单个、查询多个）5个功能，则需要创建5个Servlet</p>
<h2 id="三层优化">三层优化</h2>
<h3 id="加入接口建议面向接口开发先接口再实现类">加入接口：建议面向接口开发：先接口再实现类</h3>
<pre><code>&gt; service、dao加入接口
 接口与实现类的命名规范  接口(interface):IXxxService/dao... 实现类(implements):XxxServiceImpl
 包：接口：xxx.service(xx.dao)  实现类：xxx.service.impl(xx.dao.impl)
 具体使用时 采用多态形式  接口 x = new 实现类();</code></pre>
<h3 id="dbutil数据库帮助类">DBUtil(数据库帮助类)</h3>
<p>简化Dao层代码量</p>
<p>帮助类：一般写在xxx.util包</p>
<p>写通用的增删改查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright (C), 2015-2019, XXX有限公司</span></span><br><span class="line"><span class="comment"> * FileName: DBUtil</span></span><br><span class="line"><span class="comment"> * Author:   zephon</span></span><br><span class="line"><span class="comment"> * Date:     19-3-24 下午1:35</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * History:</span></span><br><span class="line"><span class="comment"> * &lt;author&gt;          &lt;time&gt;          &lt;version&gt;          &lt;desc&gt;</span></span><br><span class="line"><span class="comment"> * 作者姓名           修改时间           版本号              描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-3-24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://localhost:3306/JavaMysql0&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PWD = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通用的增删改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: sql:带？的sql语句  params:？参数数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">executeUpdate</span><span class="params">(String sql, Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pstmt = createPreparedStatement(sql, params);</span><br><span class="line">            <span class="keyword">int</span> count = pstmt.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeAll(<span class="keyword">null</span>,pstmt,connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通用的查</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: sql:带？的sql语句  params:？参数数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">query</span><span class="params">(String sql, Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pstmt = createPreparedStatement(sql, params);</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="keyword">return</span> rs;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法重构，将重复的代码整合成一个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        connection = DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement <span class="title">createPreparedStatement</span><span class="params">(String sql, Object[] params)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        pstmt = getConnection().prepareStatement(sql);</span><br><span class="line">        <span class="comment">// 设置sql语句中的？的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= params.length; i++) &#123;</span><br><span class="line">            pstmt.setObject(i, params[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pstmt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs,Statement stmt,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) stmt.close();</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) connection.close();</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>路径问题</title>
    <url>/2019/05/13/JavaWeb-%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="路径问题">路径问题</h1>
<p>只要路径中以/开头的都叫全路径，从项目根目录(web)出发找到其它资源</p>
<p>只要不以/开头的都叫相对路径，相对路径是从当前资源出发找到其它资源</p>
<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果请求转发，/表示web目录</span></span><br><span class="line"><span class="comment">//如果是重定向，静态资源引用时，img、a href..、script src=&quot;&quot;、css等 引用时，其中/都表示的是tomcat的webapps文件夹根目录(服务器根目录)</span></span><br><span class="line">req.getReauestDispatcher(<span class="string">&quot;index.jsp&quot;</span>).forward(req,res);</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/abc/show&quot;)</span><span class="comment">//即相当于在web中有一个虚拟目录abc</span></span><br><span class="line">...</span><br><span class="line">    <span class="comment">//则是相对路径，为/web/abc/index.jsp中，无法找到</span></span><br><span class="line">    req.getReauestDispatcher(<span class="string">&quot;index.jsp&quot;</span>).forward(req,res);</span><br><span class="line">	<span class="comment">//需要改成/index.jsp，--&gt;使用全路径防止出错</span></span><br><span class="line">	req.getReauestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(req,res);</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<p>在web下有一个文件夹imgages，文件夹中有a.jpg，</p>
<p>web中的index.jsp中使用该图片</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;image/a.jpg&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>servlet中跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/a/b/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(req,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后测试则会发现</p>
<p>在http://localhost:8080/Test_war_exploded中可以看到a.jpg 但在http://localhost:8080/Test_war_exploded/a/b/show中去发现图片无法加载</p>
<p>由于重定向，静态资源引用时，img、a href..、script src=""、css等 引用时，其中/都表示的是tomcat的webapps文件夹根目录(服务器根目录)</p>
<p>所以需要将a.jpg的路径改为</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;/Test_war_exploded/image/a.jpg&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>如果直接是/image/a.jpg去调试查看network会发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request URL: http://localhost:8080/image/a.jpg</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 404 </span><br></pre></td></tr></table></figure>
<p>URL中没有项目名，所以找不到图片资源</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器和监听器</title>
    <url>/2019/04/14/JavaWeb-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<h1 id="过滤器和监听器">过滤器和监听器</h1>
<hr />
<h2 id="过滤器">过滤器</h2>
<h3 id="问题">问题</h3>
<p>Servlet的作用是针对浏览器发起的请求，进行请求的处理。通过Servlet技术我们可以灵活的进行请求的处理，但是我们不但要对请求进行处理，我们还需要对服务器的资源进行统一的管理，比如请求编码格式的统一设置，资源的统一分配等，这个时候应该怎么办呢？</p>
<h3 id="解决">解决</h3>
<p>使用过滤器</p>
<h3 id="作用">作用</h3>
<p>对服务器资源进行管理</p>
<p>保护servlet</p>
<h3 id="使用">使用</h3>
<h4 id="filter接口">Filter接口</h4>
<p>​ 作用：</p>
<p>​ 对服务器接受的请求资源和响应给浏览器的资源进行管理；保护servlet</p>
<p>​ 使用：</p>
<ol type="1">
<li><p>创建一个实现了Filter接口的普通java类</p></li>
<li><p>复写接口的方法</p>
<p>init方法：服务器启动即执行。资源初始化</p>
<p>doFilter方法：拦截请求的方法，在此方法中可以对资源实现管理。(注：需手动对请求放行--chain.doFilter(req,resp))</p>
<p>destroy()方法：服务器关闭执行。</p></li>
<li><p>在web.xml中配置过滤器(或用注解的方式)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;TestFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">        System.out.println(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(req,resp);</span><br><span class="line">        System.out.println(<span class="string">&quot;doFilter2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>过滤器的生命周期：</p>
<p>服务器启动到服务器关闭</p></li>
<li><p>总结:</p>
<p>过滤器由程序员声明和配置，服务器根据请求中的uri信息调用</p></li>
<li><p>执行:</p>
<p>浏览器发起请求到服务器，服务器接收到请求后，根据URI信息在web.xml中找到对应的过滤器执行doFilter方法，该方法对此请求进行处理后如果符合要求则放行。放行后如果还有符合要求的过滤则继续进行过滤，找到执行对应的servlet进行请求处理。servlet对请求处理完毕后，也就service方法结束了。还需继续返回相应的doFilter方法继续执行。</p></li>
</ol>
<h4 id="filter过滤器的配置">Filter过滤器的配置</h4>
<p>urlPatterns：/*--&gt;表示拦截所有的请求</p>
<p>urlPatterns：*.do--&gt;表示拦截所有以.do结尾的请求。一般是用来进行模块拦截处理。</p>
<p>urlPatterns：/ts--&gt;表示拦截指定url的请求。针对某个servlet的请求进行拦截，保护servlet。</p>
<h3 id="案例">案例</h3>
<h4 id="统一管理字符编码">统一管理字符编码</h4>
<h4 id="session管理">session管理</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.http.HttpRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;TestFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">        System.out.println(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">        <span class="comment">//设置编码格式</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//判断session</span></span><br><span class="line">        HttpSession hs = ((HttpServletRequest)req).getSession();</span><br><span class="line">        <span class="keyword">if</span>(hs.getAttribute(<span class="string">&quot;user&quot;</span>)==<span class="keyword">null</span>)&#123;</span><br><span class="line">            ((HttpServletResponse)resp).sendRedirect(<span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            chain.doFilter(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;doFilter2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="权限管理">权限管理</h4>
<p>略</p>
<h4 id="资源管理统一水印和谐词汇等等">资源管理（统一水印，和谐词汇等等）</h4>
<p>略</p>
<h2 id="监听器">监听器</h2>
<h3 id="问题-1">问题</h3>
<p>使用作用域对象时，对于其具体流程，比如该对象是什么时候创建和销毁的，数据是什么时候存取、改变和删除的，我们是无法看到的，因而无法在指定的时机对其进行操作。</p>
<h3 id="解决-1">解决</h3>
<p>使用监听器</p>
<h3 id="概念">概念</h3>
<p>Servlet监听器是Servlet规范中定义的一种特殊类，用于监听ServletContext、HttpSession和ServletRequest等域对象的创建和销毁事件，以及监听这些域对象中属性发生修改的事件。</p>
<h3 id="监听对象">监听对象</h3>
<p>Request</p>
<p>Session</p>
<p>Application</p>
<h3 id="监听内容">监听内容</h3>
<p>创建、销毁、属性改变事件</p>
<h3 id="监听作用">监听作用</h3>
<p>在事件发生之前、之后进行一些处理，比如统计在线人数</p>
<h3 id="使用-1">使用</h3>
<ol type="1">
<li><p>创建一个实现了指定接口的java类</p>
<p>监听request--&gt;ServletRequestListener(reqestInitialized、reqestDestroyed)--&gt;监听request对象的创建和销毁</p>
<p>监听request--&gt;ServletRequestAttributeListener(attributeAdded、attributeRemove、attributeReplaced)--&gt;监听request作用域数据的变更</p>
<p>注意：形参可以获取被监听的数据--&gt;sre.getServletRequest()获取监听的request对象、sare.getName()获取键、sare.getValue()获取值</p>
<p>监听session--&gt;HttpSessionListener()、HttpSessionAttributeListener()，相关函数与request类似</p>
<p>监听application--&gt;ServletContextListener()、ServletContextAttributeEvent()，相关函数与request类似</p></li>
<li><p>在web.xml中配置监听器类(或使用注解)</p></li>
</ol>
<h3 id="案例-1">案例</h3>
<p>统计当前在线人数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span>, <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext sc = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        <span class="comment">//获取在线统计人数的变量</span></span><br><span class="line">        <span class="keyword">int</span> count = (<span class="keyword">int</span>) sc.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="comment">//存储</span></span><br><span class="line">        sc.setAttribute(<span class="string">&quot;count&quot;</span>,++count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext sc = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        <span class="comment">//获取在线统计人数的变量</span></span><br><span class="line">        <span class="keyword">int</span> count = (<span class="keyword">int</span>) sc.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="comment">//存储</span></span><br><span class="line">        sc.setAttribute(<span class="string">&quot;count&quot;</span>,--count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//application对象初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取application</span></span><br><span class="line">        ServletContext sc = servletContextEvent.getServletContext();</span><br><span class="line">        <span class="comment">//在application对象存储变量用来存储统计磁在线人数</span></span><br><span class="line">        sc.setAttribute(<span class="string">&quot;count&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit测试</title>
    <url>/2020/02/03/Junit%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="junit测试">Junit测试</h1>
<h2 id="测试">测试</h2>
<ol type="1">
<li>黑盒测试</li>
<li>白盒测试</li>
</ol>
<h2 id="junit使用-白盒测试">Junit使用-白盒测试</h2>
<p>步骤：</p>
<ol type="1">
<li>定义测试类</li>
<li>定义测试方法</li>
<li>在测试方法上添加注解@Test，第一次时使用alt+enter导入Junit</li>
<li>使用断言处理结果Assert.assertEquals(exp,res);</li>
</ol>
<h2 id="junit中的before和after">Junit中的Before和After</h2>
<p>Junit中的两个注解@Before和<span class="citation" data-cites="After">@After</span></p>
<p><span class="citation" data-cites="Before在">@Before在</span><span class="citation" data-cites="Test前执行">@Test前执行</span>，常用于资源申请、初始化等</p>
<p><span class="citation" data-cites="After在">@After在</span><span class="citation" data-cites="Test后执行">@Test后执行</span>，常用于资源释放等</p>
<p>无论测试结果如何，<span class="citation" data-cites="Before和">@Before和</span><span class="citation" data-cites="After都会执行">@After都会执行</span></p>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>LSTM模型</title>
    <url>/2021/10/10/LSTM%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="lstm模型">LSTM模型</h1>
<h2 id="lstm">LSTM</h2>
<ul>
<li><p>LSTM(Long Short-Term Memory)也称长短时记忆结构，它是传统RNN的变体，与经典RNN相比，能够有效捕捉长序列之间的语义关联，缓解梯度消失或爆炸现象，同时LSTM的结构更复杂，它的核心结构可以分为四个部分去解析：</p>
<ul>
<li>遗忘门</li>
<li>输入门</li>
<li>细胞状态</li>
<li>输出门</li>
</ul></li>
</ul>
<h2 id="lstm的内部结构图">LSTM的内部结构图</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/31.png" /></p>
<h2 id="结构解释图">结构解释图</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/22.png" /></p>
<h2 id="遗忘门">遗忘门</h2>
<h3 id="遗忘门部分结构图与计算公式">遗忘门部分结构图与计算公式</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211010170223963.png" /></p>
<p><span class="math inline">\(f_t=\sigma(W_f\cdot [h_{t-1}, x_t] + b_f)\)</span></p>
<h3 id="遗忘门结构分析">遗忘门结构分析</h3>
<ul>
<li>与传统RNN的内部结构计算非常相似，首先将当前时间步输入x(t)与上一时间步隐含状态h(t-1)拼接，得到[x(t), h(t-1)]，然后通过一个全连接层做变换，最后通过sigmoid函数进行激活得到f(t)，可以将f(t)看做是门值 ，好比一扇门开合的大小程度，门值都将作用在通过该扇门的张量，遗忘门门值将作用的上一层的细胞状态上，代表遗忘过去的多少信息，又因为遗忘门门值是由x(t)，h(t-1)计算得来的，因此整个公式意味着根据当前时间步输入和上一个时间步隐含状态h(t-1)来决定遗忘多少上一层的细胞状态所携带的过往信息</li>
</ul>
<h3 id="遗忘门内部结构过程演示">遗忘门内部结构过程演示</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN26.gif" /></p>
<h3 id="激活函数sigmoid的作用">激活函数sigmoid的作用</h3>
<ul>
<li><p>用于帮助调节流经网络的值 ，sigmoid函数将值压缩在0和1之间</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN27.gif" /></p></li>
</ul>
<h2 id="输入门">输入门</h2>
<h3 id="输入门部分结构图与计算公式">输入门部分结构图与计算公式</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211010171052070.png" /></p>
<p><span class="math inline">\(i_t = \sigma(W_i\cdot [h_{t-1}, x_t]+b_i)\)</span></p>
<p><span class="math inline">\(\widetilde C_t = \tanh(W_C\cdot[h_{t-1}, x_t] + b_C)\)</span></p>
<h3 id="输入门结构分析">输入门结构分析</h3>
<ul>
<li>输入门的计算公式有两个</li>
<li>第一个是<code>产生输入门门值</code>的公式，它和遗忘门公式几乎相同，区别只是在于它们之后要作用的目标上。这个公式意味着输入信息有多少需要进行过滤。</li>
<li>第二个公式是与传统RNN的内部结构计算相同，对于LSTM来说，它<code>得到的是当前的细胞状态</code>，而不是像经典RNN一样得到的是隐含状态。</li>
</ul>
<h3 id="输入门内部结构过程演示">输入门内部结构过程演示</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN28.gif" /></p>
<h2 id="细胞状态">细胞状态</h2>
<h3 id="细胞状态更新图与计算公式">细胞状态更新图与计算公式</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211010172642664.png" /></p>
<p><span class="math inline">\(C_t = f_t*C_{t-1}+i_t*\widetilde C_t\)</span></p>
<h3 id="细胞状态更新分析">细胞状态更新分析</h3>
<ul>
<li>细胞更新的结构与计算公式非常容易理解，没有全连接层，只是将刚才得到的遗忘门门值与上一个时间步得到的C(t-1)相乘，再加上输入门门值与当前时间步得到的未更新C(t)相乘的结果。最终得到更新后的C(t)作为下一个时间步输入的一部分。整个细胞状态更新过程就是对遗忘门和输入的门的应用。</li>
</ul>
<h3 id="细胞状态更新过程演示">细胞状态更新过程演示</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN29.gif" /></p>
<h2 id="输出门">输出门</h2>
<h3 id="输出门部分结构图与计算公式">输出门部分结构图与计算公式</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211010173247998.png" /></p>
<p><span class="math inline">\(o_t = \sigma(W_o[h_{t-1}, x_t]+b_o)\)</span></p>
<p><span class="math inline">\(h_t=o_t*\tanh(C_t)\)</span></p>
<h3 id="输出门结构分析">输出门结构分析</h3>
<ul>
<li>输出门部分的公式也是两个</li>
<li>第一个是<code>计算输出门的门值</code>，和遗忘门、输入门计算方式相同</li>
<li>第二个是使用这个门值产生隐含状态h(t)，它将作用在更新后的细胞状态C(t)上，并做tanh激活，最终得到h(t)作为<code>下一时间步输入的一部分</code></li>
<li>整个输出门的过程，就是为了产生隐含状态h(t)</li>
</ul>
<h3 id="输出门内部结构过程演示">输出门内部结构过程演示</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN30.gif" /></p>
<h2 id="bi-lstm">Bi-LSTM</h2>
<h3 id="什么是bi-lstm">什么是Bi-LSTM</h3>
<ul>
<li>Bi-LSTM即双向LSTM，它没有改变LSTM本身任何的内部结构，只是将LSTM应用两次且方向不同，再将再次得到的LSTM结果进行拼接作为最终输出。</li>
</ul>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/38.png" /></p>
<h3 id="bi-lstm结构分析">Bi-LSTM结构分析</h3>
<ul>
<li>可以看到图中对“我爱中国”这句话(或输入序列)，进行了从左到右和从右到左两次LSTM处理，将得到的结构张量进行了拼接作为最终 输出。这种结构能够捕捉语言语法中一些特定的前置或后置特征，增强语义关联，但是模型参数和计算复杂度也随之增加了一倍，一般需要对语料和计算资源进行评估后决定是否使用该结构。</li>
</ul>
<h2 id="pytorch中lstm工具的使用">Pytorch中LSTM工具的使用</h2>
<ul>
<li>位置：在torch.nn工具包中，通过torch.nn.LSTM可调用</li>
</ul>
<h3 id="nn.lstm类初始化主要参数解释">nn.LSTM类初始化主要参数解释</h3>
<ul>
<li>input_size：输入张量x中特征维度的大小</li>
<li>hidden_size：隐层张量h中的特征维度的大小</li>
<li>num_layers：隐含层的数量</li>
<li>bidirectional：是否选择使用双向LSTM，如果为True，则使用，默认不使用</li>
</ul>
<h3 id="nn.lstm类实例化对象主要参数解释">nn.LSTM类实例化对象主要参数解释</h3>
<ul>
<li>input：输入张量x</li>
<li>h0：初始化的隐层张量h</li>
<li>c0：初始化的细胞状态张量c</li>
</ul>
<h3 id="nn.lstm使用示例">nn.LSTM使用示例</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义LSTM的参数含义：(input_size, hidden_size, num_layers)</span></span><br><span class="line"><span class="comment"># 定义输入张量的参数含义：(sequence_length, batch_size, input_size)</span></span><br><span class="line"><span class="comment"># 定义隐藏层初始张量和细胞初始状态张量的参数含义：(num_layers * num_directions, batch_size, hidden_size)</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 5:输入维度；6:隐层维度；2:隐层数量</span></span><br><span class="line">rnn = nn.LSTM(<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 1:序列长度；3:批次大小；5:输入维度</span></span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 2:隐层数量*单向/双向；3:批次大小;隐层维度:6</span></span><br><span class="line">h0 = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">c0 = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">output, (hn, cn) = rnn(<span class="built_in">input</span>, (h0, c0))</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="built_in">print</span>(hn)</span><br><span class="line"><span class="built_in">print</span>(cn)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[[ 0.1640, -0.1755, -0.2231, 0.2956, -0.1259, 0.0481], [-0.0310, 0.0456, -0.0640, -0.2073, -0.2792, -0.0446], [-0.0691, 0.0526, -0.3319, 0.3188, -0.1701, 0.3165]]], grad_fn=<StackBackward>)</p>
<p>tensor([[[-0.1792, 0.1443, -0.1400, -0.0487, 0.1453, -0.0225], [ 0.0436, 0.5360, -0.0183, 0.2408, -0.3201, -0.0759], [ 0.1945, 0.2964, -0.1649, 0.1836, 0.2909, -0.0121]], [[ 0.1640, -0.1755, -0.2231, 0.2956, -0.1259, 0.0481], [-0.0310, 0.0456, -0.0640, -0.2073, -0.2792, -0.0446], [-0.0691, 0.0526, -0.3319, 0.3188, -0.1701, 0.3165]]], grad_fn=<StackBackward>)</p>
<p>tensor([[[-0.3156, 0.3427, -1.0010, -0.1101, 0.2818, -0.0554], [ 0.1355, 0.8116, -0.1146, 0.5970, -0.5943, -0.1559], [ 0.3381, 0.4068, -1.1335, 0.5564, 0.5162, -0.1545]], [[ 0.4358, -0.3849, -0.3493, 1.8045, -0.2975, 0.0737], [-0.0490, 0.0953, -0.1204, -0.4137, -0.5312, -0.0848], [-0.0952, 0.1141, -0.7335, 0.5470, -0.4002, 0.5907]]], grad_fn=<StackBackward>)</p>
</blockquote>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/2019/02/08/Linux-note/</url>
    <content><![CDATA[<h1 id="linux学习笔记">Linux学习笔记</h1>
<hr />
<h2 id="一些常用语句">一些常用语句</h2>
<p>/opt/google/chrome/chrome --enable-easy-off-store-extension-install  Chrome浏览器可扩展打开</p>
<p>mount /dev/sda1 / -o rw,remount  Windows中的磁盘可读可写访问</p>
<p>sudo fdisk -l  查看硬盘信息</p>
<h2 id="文件目录结构">文件目录结构</h2>
<h3 id="重点">重点</h3>
<blockquote>
<p>/bin 是Binary的缩写，这个目录存放着最经常使用的命令</p>
</blockquote>
<blockquote>
<p>/home 存放普通用户的主目录，在Linux中的每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</p>
</blockquote>
<blockquote>
<p>/root 该目录为系统管理员，也称作超级权限者的用户主目录</p>
</blockquote>
<blockquote>
<p>/etc 所有的系统管理所需要的配置文件和子目录</p>
</blockquote>
<blockquote>
<p>/usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录</p>
</blockquote>
<blockquote>
<p>/boot 存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</p>
</blockquote>
<blockquote>
<p>/media Linux系统会自动识别一些设备，例如U盘、光驱等，当识别后，Linux会把识别的设备挂载到这个目录下e</p>
</blockquote>
<blockquote>
<p>/mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里面的内容了</p>
</blockquote>
<blockquote>
<p>/usr/local 这个另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</p>
</blockquote>
<blockquote>
<p>/var 这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下，包括各种日志文件</p>
</blockquote>
<h3 id="初学者不要修改">初学者不要修改</h3>
<blockquote>
<p>/proc 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</p>
</blockquote>
<blockquote>
<p>/srv service缩写，该目录存放一些服务启动之后需要提取的数据</p>
</blockquote>
<blockquote>
<p>/sys 这个Linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</p>
</blockquote>
<h3 id="非重点">非重点</h3>
<blockquote>
<p>/opt 是给主机额外安装软件所摆放的目录。</p>
</blockquote>
<h2 id="vi和vim编辑器的使用">Vi和Vim编辑器的使用</h2>
<h3 id="三种常用的模式">三种常用的模式</h3>
<h4 id="正常模式">正常模式</h4>
<blockquote>
<p>以vim打开一个档案就直接进入一般模式，可以使用上下左右移动光标，也可以使用删除字符或删除整行来处理，也可以 使用复制/粘贴来处理，也就是可以使用快捷键</p>
</blockquote>
<h4 id="插入模式">插入模式</h4>
<blockquote>
<p>按下i,I,o,O,a,A,r,R等任何一个字母之后才会进入编辑模式，一般来说按i(insert)即可，</p>
</blockquote>
<h4 id="命令行模式">命令行模式</h4>
<blockquote>
<p>在这个模式中，可以提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等的动作</p>
</blockquote>
<blockquote>
<p>:wq 保存并退出</p>
</blockquote>
<blockquote>
<p>:q! 强制退出(不保存)</p>
</blockquote>
<h4 id="模式转换">模式转换</h4>
<blockquote>
<p>正常模式--(:或者/)--&gt;命令模式<br />
命令模式--(Esc)--&gt;正常模式<br />
正常模式--(i或a)--&gt;编辑模式<br />
编辑模式--(Esc)--&gt;正常模式</p>
</blockquote>
<h4 id="常用快捷键与命令">常用快捷键与命令</h4>
<ol type="1">
<li><p>拷贝当前行：yy或Y，粘贴：p(在光标后)或P(在光标前)，拷贝当前行向下5行：5yy，</p></li>
<li><p>删除当前行：dd，删除当前行向下5行：5dd</p></li>
<li><p>在文件中查找某个单词：命令行下/关键字，回车查找，输入n就是查找下一个</p></li>
<li><p>设置文件的行号，取消文件的行号：命令行下：set nu和:set nonu</p></li>
<li><p>编辑/etc/profile文件，使用快捷键到底文档的最末行：G 和最首行:gg</p></li>
<li><p>在一个文件中输入“hello"，然后又撤销这个动作 ：u</p></li>
<li><p>编辑/etc/profile文件，并将光标移动到20行:set nu，20，G</p></li>
</ol>
<h2 id="关机重启用户登录与管理">关机、重启、用户登录与管理</h2>
<h3 id="关机重启">关机&amp;重启</h3>
<blockquote>
<p>shutdown -h now：立即关机</p>
</blockquote>
<blockquote>
<p>shutdown -h 1：一分钟后关机</p>
</blockquote>
<blockquote>
<p>shutdown -r now：立即重启</p>
</blockquote>
<blockquote>
<p>halt：直接使用，停机指令，效果等价于关机</p>
</blockquote>
<blockquote>
<p>reboot：重启</p>
</blockquote>
<blockquote>
<p>sync：用于在关机之前将内存的数据同步到磁盘，防止数据丢失</p>
</blockquote>
<h3 id="用户登录和注销">用户登录和注销</h3>
<blockquote>
<p>logout：注销(在图形运行界面中无效在运行级别3有效，即远程登录时可用，直接在Terminal中没用)</p>
</blockquote>
<blockquote>
<p>su -用户名：切换系统管理员身份</p>
</blockquote>
<h3 id="用户管理">用户管理</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">用户管理</th>
<th style="text-align: center;">命令</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">添加用户</td>
<td style="text-align: center;">useradd [选项] 用户名</td>
</tr>
<tr class="even">
<td style="text-align: center;">指定/修改密码</td>
<td style="text-align: center;">passwd 用户名</td>
</tr>
<tr class="odd">
<td style="text-align: center;">删除用户但保留home目录</td>
<td style="text-align: center;">userdel 用户名</td>
</tr>
<tr class="even">
<td style="text-align: center;">查询用户信息</td>
<td style="text-align: center;">id 用户名</td>
</tr>
</tbody>
</table>
<blockquote>
<p>用户信息中：uid------用户id，gid------组id，</p>
</blockquote>
<h3 id="切换用户">切换用户</h3>
<blockquote>
<p>su - 切换用户名</p>
</blockquote>
<h3 id="用户组">用户组</h3>
<blockquote>
<p>groupadd 组名：添加组</p>
</blockquote>
<blockquote>
<p>groupdel 组名：删除组</p>
</blockquote>
<blockquote>
<p>useradd -g 用户组 用户名：添加用户时直接加上组</p>
</blockquote>
<blockquote>
<p>usermod -g 用户组 用户名：修改用户组</p>
</blockquote>
<h3 id="用户文件">用户文件</h3>
<p>用户配置文件(用户信息)：/etc/passwd，每行含义：用户名：口令：用户id：组id：家目录：shell</p>
<p>组配置文件(组信息)：/etc/group ，每行含义：组名：口令：组标识号：组内用户列表</p>
<p>口令配置文件(密码和登录信息，是加密)：/etc/shadow，每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</p>
<h2 id="实用指令">实用指令</h2>
<h3 id="指定运行级别">指定运行级别</h3>
<p>0：关机</p>
<p>1：单用户[找回用户密码]</p>
<p>2：多用户无网络服务</p>
<p>3：多用户有网络服务</p>
<p>4：保留</p>
<p>5：图形界面</p>
<p>6：重启</p>
<p>常用运行级别是3和5</p>
<p>配置文件：/etc/inittab (ubuntu系统没有此文件)</p>
<p>切换到置顶运行级别的指令：init [0123456]</p>
<h3 id="帮助指令">帮助指令</h3>
<blockquote>
<p>man 获得帮助信息：man [命令或配置文件] (功能描述：获得帮助信息)</p>
</blockquote>
<blockquote>
<p>help 命令：help 或 ls --help</p>
</blockquote>
<h3 id="文件目录类">文件目录类</h3>
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 30%" />
<col style="width: 48%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">指令</th>
<th style="text-align: center;">功能描述</th>
<th style="text-align: center;">选项</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">pwd</td>
<td style="text-align: center;">显示当前工作目录的绝对路径</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">ls -选项 目录/文件</td>
<td style="text-align: center;">查看当前目录所有内容信息</td>
<td style="text-align: center;">-a:(all)所有文件包括隐藏的 -l:以列表方式显示 (可混合)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">cd 参数</td>
<td style="text-align: center;">切换目录</td>
<td style="text-align: center;">~| ：回到家目录， ..上一级</td>
</tr>
<tr class="even">
<td style="text-align: center;">mkdir 目录</td>
<td style="text-align: center;">创建目录</td>
<td style="text-align: center;">-p：创建多级目录</td>
</tr>
<tr class="odd">
<td style="text-align: center;">rmdir 目录</td>
<td style="text-align: center;">删除目录</td>
<td style="text-align: center;">如果是删除非空目录，需要用rm -rf /</td>
</tr>
<tr class="even">
<td style="text-align: center;">touch 文件名</td>
<td style="text-align: center;">创建一个空文件</td>
<td style="text-align: center;">可以一次性创建多个文件eg: touch 1,2,3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">cp source dest</td>
<td style="text-align: center;">拷贝</td>
<td style="text-align: center;">-r:递归复制整个文件夹</td>
</tr>
<tr class="even">
<td style="text-align: center;">rm</td>
<td style="text-align: center;">移除文件或目录</td>
<td style="text-align: center;">-r：递归删除整个文件夹，-f：强制删除不提示</td>
</tr>
<tr class="odd">
<td style="text-align: center;">mv old new</td>
<td style="text-align: center;">移动文件与目录或重命名</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">cat</td>
<td style="text-align: center;">以只读的方式查看文件内容</td>
<td style="text-align: center;">-n：显示行号，(管道命令)| more 分页显示</td>
</tr>
<tr class="odd">
<td style="text-align: center;">more</td>
<td style="text-align: center;">文本过滤，按页显示文本内容</td>
<td style="text-align: center;">快捷键：空格-下一页;Enter-下翻一行;q-离开;Ctrl+F向下滚动一屏;Ctrl+B返回上一屏;=-输出当前行的行号;</td>
</tr>
<tr class="even">
<td style="text-align: center;">less</td>
<td style="text-align: center;">分屏查看大文件</td>
<td style="text-align: center;">快捷键：空格-下一页,pagedown/up 下/上一页;/ 向下查找;?向上查找;q退出</td>
</tr>
<tr class="odd">
<td style="text-align: center;">&gt;</td>
<td style="text-align: center;">输出重定向</td>
<td style="text-align: center;">eg:ls -l &gt;文件：将列表内容写入a.txt中(不存在则创建，存在则覆盖)</td>
</tr>
<tr class="even">
<td style="text-align: center;">&gt;&gt;</td>
<td style="text-align: center;">追加</td>
<td style="text-align: center;">eg:ls -al &gt;&gt;文件：将列表内容追加到文件aa.txt的末尾</td>
</tr>
<tr class="odd">
<td style="text-align: center;">echo "内容"&gt;&gt; 文件</td>
<td style="text-align: center;">是将内容追加到文件中</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">echo</td>
<td style="text-align: center;">输出内容到Terminal</td>
<td style="text-align: center;">eg:echo $PATH</td>
</tr>
<tr class="odd">
<td style="text-align: center;">head</td>
<td style="text-align: center;">显示文件的开头部分</td>
<td style="text-align: center;">默认显示前10行内容 head -n 5 文件 显示前5行</td>
</tr>
<tr class="even">
<td style="text-align: center;">tail</td>
<td style="text-align: center;">输出文件中尾部内容</td>
<td style="text-align: center;">默认前10行，-n 5 前5行； -f:实时追踪该文档所有更新</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ln -s [原文件] [软链接名]</td>
<td style="text-align: center;">给原文件创建一个软链接(类似与快捷方式)</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">history</td>
<td style="text-align: center;">查看已执行过的历史命令</td>
<td style="text-align: center;">! 88 ：执行编号为88的指令</td>
</tr>
</tbody>
</table>
<h3 id="时间日期类">时间日期类</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">指令</th>
<th style="text-align: center;">功能描述</th>
<th style="text-align: center;">选项</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">date</td>
<td style="text-align: center;">显示当前日期</td>
<td style="text-align: center;">格式：+%Y:年,+%m:月,+%d:日,+%H/M/S:时/分/秒(复合"+%Y-%m-%d")</td>
</tr>
<tr class="even">
<td style="text-align: center;">date -s 字符串</td>
<td style="text-align: center;">设置日期</td>
<td style="text-align: center;">eg：date -s "2019-2-4 11:30:00"</td>
</tr>
<tr class="odd">
<td style="text-align: center;">cal</td>
<td style="text-align: center;">查看日历</td>
<td style="text-align: center;">eg：cal 2020查看2020年日历</td>
</tr>
</tbody>
</table>
<h3 id="搜索查找类">搜索查找类</h3>
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 25%" />
<col style="width: 51%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">指令</th>
<th style="text-align: center;">功能描述</th>
<th style="text-align: center;">选项</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">find [范围] [选项]</td>
<td style="text-align: center;">递归遍历目录，将满足条件的显示</td>
<td style="text-align: center;">-name按照文件名查找;-user:按拥有者用户名;-size按文件大小(+n大于,-n小于,n等于)</td>
</tr>
<tr class="even">
<td style="text-align: center;">locate</td>
<td style="text-align: center;">快速查找</td>
<td style="text-align: center;">第一次运行前必须使用updatedb创建locate数据库</td>
</tr>
<tr class="odd">
<td style="text-align: center;">grep [选项] 查找内容 源文件</td>
<td style="text-align: center;">过滤查找</td>
<td style="text-align: center;">-n 显示匹配行及行号; -i 忽略字母大小写，管道符 |(表示将前一个命令的处理结果输出传递到后面命令处理)</td>
</tr>
</tbody>
</table>
<h3 id="压缩和解压缩类">压缩和解压缩类</h3>
<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 31%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">指令</th>
<th style="text-align: center;">功能描述</th>
<th style="text-align: center;">选项</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">gzip 文件</td>
<td style="text-align: center;">压缩文件为 *.gz文件(原文件不保留)</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">gunzip 文件.gz</td>
<td style="text-align: center;">解压缩文件</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">zip [选项] *.zip 文件</td>
<td style="text-align: center;">压缩文件/目录</td>
<td style="text-align: center;">-r：递归压缩</td>
</tr>
<tr class="even">
<td style="text-align: center;">unzip [选项] *.zip</td>
<td style="text-align: center;">解压缩文件</td>
<td style="text-align: center;">-d<目录> 指定解压后存放目录</td>
</tr>
<tr class="odd">
<td style="text-align: center;">tar [选项] *.tar.gz 内容</td>
<td style="text-align: center;">压缩成.tar.gz或解压(根据选项-c/-x改变)</td>
<td style="text-align: center;">-c:产生.tar打包文件,-v:显示详细信息,-f指定压缩后的文件名,-z打包同时压缩,-x解包.tar文件</td>
</tr>
</tbody>
</table>
<h2 id="组管理和权限管理">组管理和权限管理</h2>
<h3 id="文件目录-所有者">文件/目录 所有者</h3>
<p>一般为文件的创建者</p>
<blockquote>
<p>指令：ls -ahl 查看文件的所有者</p>
</blockquote>
<blockquote>
<p>指令：chown 用户名 文件名 修改文件的所有者</p>
</blockquote>
<blockquote>
<p>指令：chgrp 组名 文件名 修改文件所在的组</p>
</blockquote>
<h3 id="权限管理">权限管理</h3>
<h4 id="ls--l-每一行的解释">ls -l 每一行的解释</h4>
<p>文件类型：-:普通文件 d:目录 l:链接 c:字符设备(键盘、鼠标) b:块文件，硬盘</p>
<p>eg：- rw-rw-r-- 1 zephon zephon 10292 2月 4 12:45 Linux.md</p>
<p>  -：文件类型为普通文件；rw-文件所有者权限rw(读写)；rw-文件所在组其它用户权限rw；r--文件的其它组用户的权限；1：如果是文件，表示硬链接的数，如果是目录则表示该目录的子目录个数；zephon：所有者；zephon：组；10292：文件大小，如果是目录显示4096；2月 4 12:45文件最后的修改时间；Linux.md：文件名</p>
<h4 id="rwx作用到文件">rwx作用到文件:</h4>
<ol type="1">
<li>[r]代表可读：可以读取、查看</li>
<li>[w]代表可写：可以修改，但不代表可以删除，删除一个文件的前提条件是对该文件所在目录有写权限</li>
<li>[x]代表可执行：可以被执行</li>
</ol>
<h4 id="rwx作用到目录">rwx作用到目录：</h4>
<ol type="1">
<li>[r]代表可读：可以读取，ls查看目录内容</li>
<li>[w]代表可写：可以修改，目录内创建+删除+重命名目录</li>
<li>[x]代表可执行：可以进入该目录</li>
</ol>
<h4 id="rwx的数字表示">rwx的数字表示：</h4>
<blockquote>
<p>r=4,w=2,x-1 因此 rwx=4+2+1=7</p>
</blockquote>
<h3 id="修改权限">修改权限</h3>
<h4 id="直接修改">直接修改</h4>
<blockquote>
<p>chomd u=rwx,g=rx,o=x 文件目录名 (u：所有者 g：所有组 o：其他人 a：所有人)</p>
</blockquote>
<blockquote>
<p>chmod o+w 文件目录名 :给其它人加一个可写权限</p>
</blockquote>
<blockquote>
<p>chmod a-x 文件目录名：给所有人去除执行权限</p>
</blockquote>
<h4 id="通过数字修改">通过数字修改</h4>
<blockquote>
<p>规则：r=100=4,w=010=2,x=001=1，rwx=4+2+1=7</p>
</blockquote>
<blockquote>
<p>chmod u=rwx,g-rx,o=x 文件目录名 相当于 chmod 751 文件目录名</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>Linux学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-复习</title>
    <url>/2020/02/04/MySQL-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="mysql复习">MySQL复习</h1>
<h2 id="ddl操作数据库">DDL(操作数据库)</h2>
<ol type="1">
<li><p>C(Create)：创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 数据库名称；</span><br><span class="line">create database 数据库名称 character set 字符集；</span><br></pre></td></tr></table></figure></li>
<li><p>R(Retrieve)：查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询所有数据库的名称</span><br><span class="line">show databases;</span><br><span class="line">-- 查询某个数据库的字符集：查询某个数据库的创建语句</span><br><span class="line">show create database 数据库名称；</span><br></pre></td></tr></table></figure></li>
<li><p>U(Update)：修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database 数据库名称 character set 字符集名称;</span><br></pre></td></tr></table></figure></li>
<li><p>D(Delete)：删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 数据库名称;</span><br></pre></td></tr></table></figure></li>
<li><p>使用数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select database(); -- 查询当前正在使用的数据库名称</span><br><span class="line">use 数据库名称; -- 使用数据库</span><br></pre></td></tr></table></figure></li>
<li><p>C(Create)：创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">					属性 类型,</span><br><span class="line">    				属性 类型</span><br><span class="line">)；</span><br><span class="line">-- 类型：</span><br><span class="line">-- 整型-&gt;int</span><br><span class="line">-- 小数-&gt;double</span><br><span class="line">-- 字符串-&gt;varchar(n)</span><br><span class="line">-- 时间-&gt;date(日期，yyyy-MM-dd)、datetime(yyyy-MM-dd HH:mm:ss)、timestamp(时间戳类型，yyyy-MM-dd HH:mm:ss，默认使用当前系统时间自动赋值)</span><br></pre></td></tr></table></figure></li>
<li><p>R(Retrieve)：查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables; -- 查询数据库中所有的表名称</span><br><span class="line">desc 表名； -- 查询表结构</span><br></pre></td></tr></table></figure></li>
<li><p>U(Update)：修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table 表名 rename to 新表名; -- 修改表名</span><br><span class="line">alter table 表名 character set 字符集名称; -- 修改表的字符集</span><br><span class="line">alter table 表名 add 列名 数据类型; -- 添加一列</span><br><span class="line">alter table 表名 change 列名 新列名 新数据类型; -- 修改列名称 类型</span><br><span class="line">alter table 表名 modify 列名 新数据类型;</span><br><span class="line">alter table 表名 drop 列名; -- 删除列</span><br></pre></td></tr></table></figure></li>
<li><p>D(Delete)：删除</p></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure>
<h2 id="dml操作表中数据">DML(操作表中数据)</h2>
<ol type="1">
<li><p>添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名(列名1,列名2,...) values(值1,值2,...);</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 [where 条件]; -- 删除符合条件的数据，如果不加条件，则删除表中所有数据</span><br><span class="line">truncate table 表名; -- 删除表，然后再创建一个一模一样的空表</span><br></pre></td></tr></table></figure></li>
<li><p>修改数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名=值1,列名=值2,...[where 条件]; -- 修改符合条件的数据，如果不加条件，则修改表中所有数据</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="dql查询表中的记录">DQL(查询表中的记录)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名; -- 查询表中所有数据</span><br><span class="line">select 字段列表 from 表名列表 where 条件列表 group by 分组字段 having 分组之后的条件 order by 排序字段 limit 分页限定;</span><br></pre></td></tr></table></figure>
<h3 id="基础查询">基础查询</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct 字段 from 表名; -- 使用distinct去重</span><br><span class="line">select  字段+ifnull(可能为NULL的字段,0)  as 别名from 表名; -- 计算列值，如果有NULL 参与的运算，结果都为NULL，可使用ifnull解决，使用as起别名</span><br><span class="line">-- ifnull(表达式1,表达式2):如果表达式1为null，则用表达式2替换</span><br></pre></td></tr></table></figure>
<h3 id="条件查询">条件查询</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 where 条件;</span><br><span class="line">-- where 子句后跟条件</span><br><span class="line">-- 运算符，&gt;、&lt;、&gt;=、&lt;=、=、!=、&lt;&gt;、&amp;&amp;、and、between and、or、||、in(集合)、like</span><br><span class="line">-- null不能使用=判断，而是用IS NULL 或 IS NOT NULL</span><br><span class="line">-- like：模糊查询</span><br><span class="line">		-- 占位符：_(单个任意字符),%(多个任意字符)</span><br></pre></td></tr></table></figure>
<h3 id="排序查询">排序查询</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 order by 排序字段1 排序方式1,排序字段2 排序方式2...; -- 按排序字段排序，排序方式：ASC(升序，默认)，DESC(降序)，当有多个条件时，当前面条件值一样时，才使用后面条件</span><br></pre></td></tr></table></figure>
<h3 id="聚合函数">聚合函数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- count：计算个数</span><br><span class="line">-- max：计算最大值</span><br><span class="line">-- min：计算最小值</span><br><span class="line">-- sum：计算和</span><br><span class="line">-- avg：计算平均值</span><br><span class="line">select count(列名) from 表名; -- 会排除空值</span><br></pre></td></tr></table></figure>
<h3 id="分组查询">分组查询</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 group by 列名; -- 按列名分组，分别查询;</span><br><span class="line">-- where 和 having的区别？</span><br><span class="line">-- where 在分组之前限定，如果不满足条件，则不参与分组，后不可跟聚合函数</span><br><span class="line">-- having在分组之前限定，如果不满足条件，则不会被查询出来，后可跟聚合函数判断</span><br></pre></td></tr></table></figure>
<h3 id="分页查询">分页查询</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 limit 开始的索引，每页查询的条数;</span><br><span class="line">-- 公式：开始的索引=（当前的页码-1）×每页显示的条数</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-BIO</title>
    <url>/2020/07/11/Netty-BIO/</url>
    <content><![CDATA[<h1 id="netty-bio">Netty-BIO</h1>
<h2 id="io模型">I/O模型</h2>
<h3 id="基本说明">基本说明</h3>
<ol type="1">
<li><p>I/O模型简单的理解：就是用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能</p></li>
<li><p>Java共支持3种网络编程模型/IO模式：BIO、NIO、AIO</p></li>
<li><p>Java BIO：同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个 线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/BIO.png" alt="BIO" /><figcaption>BIO</figcaption>
</figure></li>
<li><p>Java NIO：同步非阻塞，服务器实现模式为一个线程处理多个请求(连接)，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求就进行处理</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/NIO.png" alt="NIO" /><figcaption>NIO</figcaption>
</figure></li>
<li><p>Java AIO：异步非阻塞，AIO引入异步通信的概念，采用了Proactor模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通过服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用</p></li>
</ol>
<h3 id="bionioaio适用场景">BIO、NIO、AIO适用场景</h3>
<ol type="1">
<li>BIO方式适用于连接数目比较少且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序简单易理解</li>
<li>NIO方式适用于连接数目多且连接比较短(轻操作)的架构，比如聊天服务器，弹幕系统、服务器间通讯等。编程比较复杂，JDK1.4开始支持</li>
<li>AIO方式适用于连接数目多且连接比较长(重操作)的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持</li>
</ol>
<h2 id="java-bio">Java BIO</h2>
<h3 id="基本介绍">基本介绍</h3>
<ol type="1">
<li>Java BIO就是传统的Java IO编程，其相关的类和接口在java.io</li>
<li>BIO(blocking I/O)：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善</li>
<li>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，程序简单易理解</li>
</ol>
<h3 id="工作机制">工作机制</h3>
<ol type="1">
<li>服务器端启动一个ServerSocket</li>
<li>客户端启动Socket与服务器进行通信，默认情况下服务器端需要对每个客户端建立一个线程与之通讯</li>
<li>客户端发出请求后，先咨询服务器是否有线程响应，如果没有则会等待，或被拒绝</li>
<li>如果有响应，客户端线程会等待请求结束后，才继续执行</li>
</ol>
<h3 id="代码测试">代码测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 线程池机制</span></span><br><span class="line">        <span class="comment">// 1. 创建一个线程池</span></span><br><span class="line">        ExecutorService threadPool= <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>,<span class="number">100</span>,<span class="number">10</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(), Executors.defaultThreadFactory(),<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">        <span class="comment">// 2. 如果有客户端连接，就创建一个线程与之通讯</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 监听，等待客户端连接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;等待连接......&quot;</span>);</span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;连接到一个客户端&quot;</span>);</span><br><span class="line">            threadPool.execute(()-&gt;&#123;</span><br><span class="line">                handler(socket);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和客户端通讯</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程 id=&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;等待read......&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> len = inputStream.read(bytes);</span><br><span class="line">                <span class="keyword">if</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前线程 id=&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题分析">问题分析</h3>
<ol type="1">
<li>每个请求都需要创建独立的线程，与对应的客户端进行数据Read、业务处理、数据Write</li>
<li>当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大</li>
<li>连接建立后，如果当前线程暂时没有数据可读，则线程就阻塞在Read操作上，造成线程资源浪费</li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-GoogleProtobuf</title>
    <url>/2020/08/17/Netty-GoogleProtobuf/</url>
    <content><![CDATA[<h1 id="netty-googleprotobuf">Netty-GoogleProtobuf</h1>
<h2 id="编码和解码的基本介绍">编码和解码的基本介绍</h2>
<ol type="1">
<li>编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时就需要解码</li>
<li>codec(编解码器)的组成部分有两个：decoder(解码器)和encoder(编码器)。encoder负责把业务数据转换成字节码数据，decoder负责把字节码数据转换成业务数据</li>
</ol>
<h2 id="netty本身的编码解码的机制和问题分析">Netty本身的编码解码的机制和问题分析</h2>
<ol type="1">
<li>Netty自身提供了一些codec(编解码器)</li>
<li>Netty提供的编码器
<ul>
<li>SringEncoder：对字符串数据进行编码</li>
<li>ObjectEncoder：对Java对象进行编码</li>
<li>...</li>
</ul></li>
<li>Netty提供的解码器
<ul>
<li>StringDecoder：对字符串数据进行解码</li>
<li>ObjectDecoder：对Java对象进行解码</li>
<li>...</li>
</ul></li>
<li>Netty本身自带的ObjectDecoder和ObjectEncoder可以用来实现POJO对象或各种业务对象的编码和解码，底层使用的仍是Java序列化技术，而Java序列化技术本身效率就不高，存在如下问题：
<ol type="1">
<li>无法跨语言</li>
<li>序列化后的体积太大，是二进制编码的5倍多</li>
<li>序列化性能太低</li>
</ol></li>
</ol>
<blockquote>
<p>解决方案：[Google的Protobuf]</p>
</blockquote>
<h2 id="protobuf">Protobuf</h2>
<h3 id="protobuf基本介绍和使用">Protobuf基本介绍和使用</h3>
<ol type="1">
<li><p>Protobuf是Google发布的开源项目，全称Google Protocol Buffers，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或RPC(远程过程调用)数据交换格式</p>
<p>目前很多公司 http+json -&gt; tcp+protobuf</p></li>
<li><p>参考文档https://developers.google.com/protocol-buffers/docs/proto</p></li>
<li><p>Protobuf是以message的方式来管理数据的</p></li>
<li><p>支持跨平台、<strong>跨语言</strong>，即[客户端和服务器端可以是不同的语言编写的]（支持目前绝大多数语言，如C++、C#、Java、Python等）</p></li>
<li><p>高性能，高可靠性</p></li>
<li><p>使用protobuf编译器自动生成代码，Protobuf是将类的定义使用.proto文件进行描述。说明：在idea中编写.proto文件时，会自动提示是否下载.proto编写插件，可以让语法高亮</p></li>
<li><p>然后通过protoc.exe编译器根据.proto自动生成.java文件</p></li>
</ol>
<h3 id="入门实例1">入门实例1</h3>
<blockquote>
<p>需求：</p>
<ol type="1">
<li>客户端可以发送一个 Student PoJo对象到服务器(通过Protobuf编码)</li>
<li>服务端能接收Student PoJo对象，并显示信息(通过Protobuf解码)</li>
</ol>
</blockquote>
<ol type="1">
<li><p>引入protobuf</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写proto文件</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 版本</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;StudentPOJO&quot;</span>; <span class="comment">// 生成的外部类名，同时也是文件名</span></span><br><span class="line"><span class="comment">// protobuf 使用message管理数据</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span></span>&#123; <span class="comment">// 会在StudentPOJO外部类生成一个内部类Student，它是真正发送的POJO对象</span></span><br><span class="line">  <span class="built_in">int32</span> id = <span class="number">1</span>; <span class="comment">//Student类中有一个属性，名称为id，类型为int32</span></span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cmd运行<code>proto.exe --java_out. Student.proto</code>或Linux下<code>./protoc --java_out=. Student.proto</code></p></li>
<li><p>编写服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line">                            <span class="comment">// 添加解码器</span></span><br><span class="line">                            <span class="comment">// 指定对哪种对象进行解码</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> ProtobufDecoder(StudentPOJO.Student.getDefaultInstance()));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;...server is ready...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = b.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 读取从客户端发送的StudentPOJO.Student</span></span><br><span class="line">        StudentPOJO.Student student = (StudentPOJO.Student) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送的数据 id=&quot;</span>+student.getId() + <span class="string">&quot;,name=&quot;</span>+student.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.channel().close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">// 设置相关参数</span></span><br><span class="line">            bootstrap.group(eventExecutors)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line">                            <span class="comment">// 添加编码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> ProtobufEncoder());</span><br><span class="line">                            <span class="comment">// 添加自己的处理器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6668</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 发送一个 Student对象到服务器</span></span><br><span class="line">        StudentPOJO.Student student = StudentPOJO.Student.newBuilder().setId(<span class="number">1</span>).setName(<span class="string">&quot;Tom&quot;</span>).build();</span><br><span class="line">        ctx.writeAndFlush(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="入门实例2">入门实例2</h3>
<blockquote>
<p>需求：</p>
<ol type="1">
<li>客户端可以随机发送Student PoJo/Worker PoJo对象到服务器(通过Protobuf编码)</li>
<li>服务端能接收Student PoJo/Workder PoJo对象(需要判断是哪种类型)，并显示信息(通过Protobuf解码)</li>
</ol>
</blockquote>
<ol type="1">
<li><p>编写proto</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 版本</span></span><br><span class="line"><span class="keyword">option</span> optimize_for = SPEED; <span class="comment">// 加快解析</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.zephon.netty.netty.codec2&quot;</span>;<span class="comment">//指定生成到哪个包下</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;MyDataInfo&quot;</span>; <span class="comment">// 生成的外部类名，同时也是文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// protobuf 可以使用message 管理其它message</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">MyMessage</span></span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个枚举类型</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">DataType</span></span>&#123;</span><br><span class="line">    StudentType = <span class="number">0</span>; <span class="comment">// 在proto3 要求enum的编号从0开始</span></span><br><span class="line">    WorkerType = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用data_type来标识传的是哪个枚举类型</span></span><br><span class="line">  DataType data_type = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 表示每次枚举类型最多只出现其中的一个，节省空间</span></span><br><span class="line">  <span class="keyword">oneof</span> dataBody&#123;</span><br><span class="line">    Student student = <span class="number">2</span>;</span><br><span class="line">    Worker worker = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// protobuf 使用message管理数据</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span></span>&#123; <span class="comment">// 会在StudentPOJO外部类生成一个内部类Student，它是真正发送的POJO对象</span></span><br><span class="line">  <span class="built_in">int32</span> id = <span class="number">1</span>; <span class="comment">//Student类中有一个属性，名称为id，类型为int32</span></span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Worker</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> age = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line">                            <span class="comment">// 添加解码器</span></span><br><span class="line">                            <span class="comment">// 指定对哪种对象进行解码</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> ProtobufDecoder(MyDataInfo.MyMessage.getDefaultInstance()));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;...server is ready...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = b.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 读取从客户端发送的StudentPOJO.Student</span></span><br><span class="line">        MyDataInfo.MyMessage message = (MyDataInfo.MyMessage) msg;</span><br><span class="line">        MyDataInfo.MyMessage.DataType dataType = message.getDataType();</span><br><span class="line">        <span class="keyword">if</span>(dataType == MyDataInfo.MyMessage.DataType.StudentType)&#123;</span><br><span class="line">            MyDataInfo.Student student = message.getStudent();</span><br><span class="line">            System.out.println(<span class="string">&quot;student id=&quot;</span>+student.getId()+<span class="string">&quot;,name=&quot;</span>+student.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dataType == MyDataInfo.MyMessage.DataType.WorkerType)&#123;</span><br><span class="line">            MyDataInfo.Worker worker = message.getWorker();</span><br><span class="line">            System.out.println(<span class="string">&quot;worker name=&quot;</span>+worker.getName()+<span class="string">&quot;,age=&quot;</span>+worker.getAge());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;传输类型错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.channel().close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">// 设置相关参数</span></span><br><span class="line">            bootstrap.group(eventExecutors)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line">                            <span class="comment">// 添加编码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> ProtobufEncoder());</span><br><span class="line">                            <span class="comment">// 添加自己的处理器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6668</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 随机发送Student或worker对象</span></span><br><span class="line">        <span class="keyword">int</span> random = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);</span><br><span class="line">        MyDataInfo.MyMessage myMessage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == random) &#123;</span><br><span class="line">            myMessage = MyDataInfo.MyMessage.newBuilder()</span><br><span class="line">                    .setDataType(MyDataInfo.MyMessage.DataType.StudentType)</span><br><span class="line">                    .setStudent(MyDataInfo.Student.newBuilder().setId(<span class="number">1</span>).setName(<span class="string">&quot;Tom&quot;</span>).build()).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            myMessage = MyDataInfo.MyMessage.newBuilder()</span><br><span class="line">                    .setDataType(MyDataInfo.MyMessage.DataType.WorkerType)</span><br><span class="line">                    .setWorker(MyDataInfo.Worker.newBuilder().setName(<span class="string">&quot;Jake&quot;</span>).setAge(<span class="number">22</span>).build()).build();</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.writeAndFlush(myMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-NIO-Buffer&amp;Channel 案例</title>
    <url>/2020/07/12/Netty-NIO-Buffer&amp;Channel%20%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="netty-nio-bufferchannel-案例">Netty-NIO-Buffer&amp;Channel 案例</h1>
<h2 id="案例1-本地文件写数据">案例1-本地文件写数据</h2>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/FileChannelWrite.png" alt="FileChannelWrite" /><figcaption>FileChannelWrite</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;hello buffer&quot;</span>;</span><br><span class="line">        <span class="comment">// 1. 创建一个输出流</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/home/zephon/f.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 根据输出流获取Channel，对应的是FileChannel</span></span><br><span class="line">        <span class="comment">// 实际上其实是FileChannelImpl</span></span><br><span class="line">        FileChannel fileChannel = fileOutputStream.getChannel();</span><br><span class="line">        <span class="comment">// 3. 创建一个缓冲区 ByteBuffer</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 4. 将str放入到byteBuffer中</span></span><br><span class="line">        byteBuffer.put(str.getBytes());</span><br><span class="line">        <span class="comment">// 5. 对byteBuffer进行flip</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        fileChannel.write(byteBuffer);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="案例2-本地文件读数据">案例2-本地文件读数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;/home/zephon/f.txt&quot;</span>);</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        FileChannel fileChannel = fileInputStream.getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate((<span class="keyword">int</span>) file.length());</span><br><span class="line">        fileChannel.read(byteBuffer);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="案例三-使用一个buffer完成文件拷贝">案例三-使用一个Buffer完成文件拷贝</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;/home/zephon/f.txt&quot;</span>);</span><br><span class="line">        FileChannel fileChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/home/zephon/desc.txt&quot;</span>);</span><br><span class="line">        FileChannel outChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 清空buffer，重置</span></span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">            <span class="keyword">int</span> len = fileChannel.read(byteBuffer);</span><br><span class="line">            <span class="keyword">if</span>(len==-<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            outChannel.write(byteBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="案例四-使用transferfrom完成文件拷贝">案例四-使用TransferFrom完成文件拷贝</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;/home/zephon/f.txt&quot;</span>);</span><br><span class="line">        FileChannel inChannel = fileInputStream.getChannel();</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/home/zephon/desc.txt&quot;</span>);</span><br><span class="line">        FileChannel outChannel = fileOutputStream.getChannel();</span><br><span class="line">        outChannel.transferFrom(inChannel,<span class="number">0</span>,inChannel.size());</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关于buffer和channel的注意事项和细节">关于Buffer和Channel的注意事项和细节</h2>
<ol type="1">
<li><p>ByteBuffer支持类型化的put和get，put放入的是什么数据类型，get就应该使用相应的数据类型来取出，否则可能有BufferUnderflowException异常</p></li>
<li><p>可以将一个普通Buffer围成只读Buffer</p></li>
<li><p>NIO还提供了MappedByteBuffer，可以让文件直接在内存(堆外内存)中进行修改，而如何同步到文件由NIO来完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedByteBufferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * FileChannel.MapMode.READ_WRITE：使用读写模式</span></span><br><span class="line"><span class="comment">         * 0：可以直接修改的起始位置</span></span><br><span class="line"><span class="comment">         * 5：映射到内存的大小(不是索引位置)，即将1.txt的多少个字节映射到内存</span></span><br><span class="line"><span class="comment">         * 可以直接修改的范围就是[0,5)</span></span><br><span class="line"><span class="comment">         * 实际类型是 DirectByteBuffer</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MappedByteBuffer mappedByteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        mappedByteBuffer.put(<span class="number">0</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        mappedByteBuffer.put(<span class="number">3</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        randomAccessFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前面所说的读写操作，都是通过一个Buffer完成的，NIO还支持通过多个Buffer(即Buffer数组)完成读写操作，即Scattering(分散)和Gatering(聚合)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Scattering：将数据写入到buffer时，可以采用buffer数组，依次写入 [分散]</span></span><br><span class="line"><span class="comment"> * Gathering：从buffer读出数据时，可以buffer数组，依次读出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGatheringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">8686</span>);</span><br><span class="line">        <span class="comment">// 绑定端口并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line">        <span class="comment">// 创建buffer数组</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待客户端连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="comment">// 假定从客户端接收8个字节</span></span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>;</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(byteRead &lt; messageLength)&#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead += l;</span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead=&quot;</span>+byteRead);</span><br><span class="line">                Arrays.asList(byteBuffers).stream()</span><br><span class="line">                        .map(buffer-&gt;<span class="string">&quot;position=&quot;</span>+buffer.position() + <span class="string">&quot;, limit=&quot;</span>+buffer.limit())</span><br><span class="line">                        .forEach(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将所以buffer进行flip</span></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer-&gt;buffer.flip());</span><br><span class="line">            <span class="comment">// 将数据读出显示回客户端</span></span><br><span class="line">            <span class="keyword">long</span> byteWrite = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(byteWrite &lt; messageLength)&#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.write(byteBuffers);</span><br><span class="line">                byteWrite += l;</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer-&gt;buffer.clear());</span><br><span class="line">            System.out.println(<span class="string">&quot;byteRead=&quot;</span>+ byteRead + <span class="string">&quot; byteWrite=&quot;</span>+ byteWrite + <span class="string">&quot; messageLength:&quot;</span>+messageLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-NIO-Buffer&amp;Channel&amp;Selector</title>
    <url>/2020/07/12/Netty-NIO-Buffer&amp;Channel&amp;Selector/</url>
    <content><![CDATA[<h1 id="netty-nio-bufferchannelselector">Netty-NIO-Buffer&amp;Channel&amp;Selector</h1>
<h2 id="基本介绍">基本介绍</h2>
<ol type="1">
<li><p>Java NIO全称Java non-blocking IO，是指JDK提供的新API。从JDK1.4开始，Java提供了一系列改进的输入/输出的新特性，被统称为NIO(即New IO)，是<strong>同步非阻塞</strong>的</p></li>
<li><p>NIO相关类都被放在java.nio包及子包下，并对原java.io包中的很多类进行改写</p></li>
<li><p>NIO有三大核心部分：<strong>Channel(通道)</strong>、<strong>Buffer(缓冲区)</strong>、<strong>Selector(选择器)</strong></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/NIO-detail.png" alt="NIO-detail" />)</p></li>
<li><p>NIO是面向缓冲区的，或者说是面向 块 编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程中的灵活性，使用它可以提供非阻塞式的高伸缩性网络</p></li>
<li><p>Java NIO的非阻塞模式，使一个线程从某通道发送请求或读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而<strong>不是保持线程阻塞</strong>，所以直到数据变的可以读取之前，该线程可以继续做其它的事情。非阻塞写也是如此，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情</p></li>
<li><p>通俗理解：NIO是可以做到用一个线程来处理多个操作的。假设有10000个请求过来，根据实际情况，可以分配50或100个线程来处理。不像之前的阻塞IO那样，必须分配10000个</p></li>
<li><p>HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个不，而且并发请求的数量比HTTP1.1大了好几个数量级</p></li>
</ol>
<h2 id="buffer测试代码">Buffer测试代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Buffer的使用</span></span><br><span class="line">        <span class="comment">// 创建一个Buffer，大小为5,即可以存放5个int</span></span><br><span class="line">        IntBuffer buffer = IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 向buffer存放数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class="line">            buffer.put(i*<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从buffer读取数据</span></span><br><span class="line">        <span class="comment">// 将buffer转换，读写切换</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(buffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nio和bio的比较">NIO和BIO的比较</h2>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 20%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>BIO</th>
<th>NIO</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>处理数据</td>
<td>以流的方式</td>
<td>以块的方式</td>
</tr>
<tr class="even">
<td>效率</td>
<td>低</td>
<td>高</td>
</tr>
<tr class="odd">
<td>是否阻塞</td>
<td>阻塞</td>
<td>非阻塞</td>
</tr>
<tr class="even">
<td>操作基础</td>
<td>基于字节流和字符流</td>
<td>基于Channel(通道)和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或从缓冲区写入通道中。Selector(选择器)用于监听多个通道的事件(如：连接请求、数据到达等)，因此使用单个线程就可以监听多个客户端通道</td>
</tr>
</tbody>
</table>
<h2 id="selectorchannel和buffer的关系">Selector、Channel和Buffer的关系</h2>
<ol type="1">
<li>每个Channel都会对应一个Buffer</li>
<li>Selector对应一个线程，一个线程对应多个Channel(连接)</li>
<li>多个Channel注册到一个Selector</li>
<li>程序切换到哪个Channel，是由事件(Event)决定的</li>
<li>Selector会根据不同的事件，在各个通道上切换</li>
<li>Buffer 就是一个内存块，底层是一个数组</li>
<li>数据的读取/写入是通过Buffer，这和BIO有本质不同，BIO中要么是输入流，要么是输出流，不能双向，而NIO的Buffer是可读可写的，需要flip()切换</li>
<li>Channel是双向的，可以反映底层操作系统的情况，如Linux底层操作系统通道就是双向的</li>
</ol>
<h2 id="buffer缓冲区">Buffer(缓冲区)</h2>
<h3 id="基本介绍-1">基本介绍</h3>
<p>缓冲区(Buffer)：缓冲区本质上是<strong>一个可以读写数据的内存块</strong>，可以理解是一个容器对象(含数组)，该对象提供了一组方法，可以更轻松地使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。Channel提供从文件、网络读取数据的渠道，但读取或写入的数据都必须经由Buffer</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/Buffer.png" alt="buffer" /><figcaption>buffer</figcaption>
</figure>
<h3 id="buffer类及其子类">Buffer类及其子类</h3>
<ol type="1">
<li><p>在NIO中，Buffer是一个顶层父类，它是一个抽象类</p>
<p>常用Buffer子类</p>
<ul>
<li>ByteBuffer：存储字节数据到缓冲区</li>
<li>ShortBuffer：存储短整数数据到缓冲区</li>
<li>CharBuffer：存储字符数据到缓冲区</li>
<li>IntBuffer：存储整数数据到缓冲区</li>
<li>LongBuffer：存储长整数数据到缓冲区</li>
<li>DoubleBuffer：存储小数到缓冲区</li>
<li>FloatBuffer：存储小数到缓冲区</li>
</ul></li>
<li><p>Buffer类定义的所有的缓冲区都具有四个属性来提供关于其所包含的数据元素的信息</p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>capacity</td>
<td>容量，即可以容纳的最大数据量，在级次区创建时被设定并且不能改变</td>
</tr>
<tr class="even">
<td>limit</td>
<td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，且极限是可以修改的</td>
</tr>
<tr class="odd">
<td>position</td>
<td>位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变该值，为下次读写作准备</td>
</tr>
<tr class="even">
<td>mark</td>
<td>标记</td>
</tr>
</tbody>
</table></li>
<li><p>Buffer类相关方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回此缓冲区的容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 返回此缓冲区的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">position</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 设置此缓冲区的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> finall Buffer <span class="title">position</span><span class="params">(<span class="keyword">int</span> newPosition)</span></span>;</span><br><span class="line"><span class="comment">// 返回此缓冲区的限制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 设置此缓冲区的限制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">limit</span><span class="params">(inte new Limit)</span></span>;</span><br><span class="line"><span class="comment">//清除此缓冲区，即将各个标记恢复到初始状态，但数据并没有真正擦除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 反转此缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 告知在当前位置和限制之间是否有元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasRemaining</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 告知此缓冲区是否为只读缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 告知此缓冲区是否具有可访问的底层实现数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasArray</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 返回此缓冲区的底层实现数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">array</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="bytebuffer">ByteBuffer</h3>
<p>从前面可以看出，对于Java中的基本数据类型(boolean除外)，都有一个Buffer类型与之相对应，<strong>最常用</strong>的自然是ByteBuffer类(二进制数据)，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line"><span class="comment">// 创建直接缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>;</span><br><span class="line"><span class="comment">// 设置缓冲区的初始容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>;</span><br><span class="line"><span class="comment">// 缓冲区存取相关API</span></span><br><span class="line"><span class="comment">// 从当前位置position上get，get之后，position会自动+1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 从绝对位置get</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="comment">// 从当前位置上put，put之后，position会自动+1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 从绝对位置上put</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">byte</span> b)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="channel通道">Channel(通道)</h2>
<h3 id="基本介绍-2">基本介绍</h3>
<ol type="1">
<li><p>NIO的通道类似于流，但有些区别：</p>
<ul>
<li>通道可以同时进行读写，而流只能读或只能写</li>
<li>通道可以实现异步读写数据</li>
<li>通道可以从缓冲读数据，也可以写数据到缓冲</li>
</ul></li>
<li><p>BIO中的stream是单向的，如FileInputStream对旬只能进行读取数据的操作，而NIO的通道(Channel)是双向的，可以读操作，也可以写操作</p></li>
<li><p>Channel在NIO中是一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Channel</span> <span class="keyword">extends</span> <span class="title">Closeable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>常用的Channel类有：FileChannel、DatagramChannel、ServerSocketChannel和SocketChannel</p></li>
<li><p>FileChannel用于文件的数据读写，DatagramChannel用于UDP的数据读写，ServerSocketChannel和SocketChannel用于TCP的数据读写</p></li>
</ol>
<h3 id="filechannel类">FileChannel类</h3>
<p>FileChannel主要用于对本地文件进行IO操作，常见的方法有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从通道读取数据并放到缓冲区中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer dst)</span></span>;</span><br><span class="line"><span class="comment">// 把缓冲区的数据写到通道中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span></span>;</span><br><span class="line"><span class="comment">// 从目标通道中复制数据到当前通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">transferFrom</span><span class="params">(ReadableByteChannel src,<span class="keyword">long</span> position,<span class="keyword">long</span> count)</span></span>;</span><br><span class="line"><span class="comment">// 把数据从当前通道复制给目标通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">transferTo</span><span class="params">(<span class="keyword">long</span> position,<span class="keyword">long</span> count,WriteableByteChannel target)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="selector选择器">Selector(选择器)</h2>
<h3 id="基本介绍-3">基本介绍</h3>
<ol type="1">
<li>Java的NIO，用非阻塞的IO方式。可以用一个线程，处理多个客户端连接，就会使用到Selector(选择器)</li>
<li><strong>Selector能够检测多个注册的通道上是否有事件发生(注意：多个Channel以事件的方式可以注册到同一个Selector)</strong>，如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求</li>
<li>只有在连接真正有读写事件发生时，才会进行读写，就大大减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程</li>
<li>避免了多线程之间的上下文切换导致的开销</li>
</ol>
<h3 id="selector特点说明">Selector特点说明</h3>
<ol type="1">
<li>Netty的IO线程NioEventLoop聚合了Selector(选择器，也叫多路复用器)，可以同时并发处理成百上千个客户端连接</li>
<li>当线程从某客户端Socket通道进行读写数据时，若没有数据可用时，该线程可以进行其它任务</li>
<li>线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以单独的线程可以管理多个输入和输出通道</li>
<li>由于读写操作都是非阻塞的，这就可以充分提升IO线程的运行效率，避免由于频繁I/O阻塞导致的线程挂起</li>
<li>一个I/O线程可以并发处理N个客户端连接和读写操作，这从根本上解决了传统同步阻塞I/O一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升</li>
</ol>
<h3 id="selector类相关方法">Selector类相关方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到一个选择器对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Selector <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 监控所有注册的通道，当其中有IO操作进行时，将对应的SelectionKey加入到内部集合中并返回，参数用来设置超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">long</span> timeout)</span></span>;</span><br><span class="line"><span class="comment">// 从内部集合中得到所有的SelectionKey</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;SelectionKey&gt; <span class="title">selectedKeys</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="注意事项">注意事项</h3>
<ol type="1">
<li><p>NIO中的ServerSocketChannel功能类似于ServerSocket，SocketChannel功能类似Socket</p></li>
<li><p>selector相关方法说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻塞</span></span><br><span class="line">selector.select();</span><br><span class="line"><span class="comment">// 阻塞1000毫秒，在1000毫秒后返回</span></span><br><span class="line">selector.select(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 唤醒selector</span></span><br><span class="line">selector.wakeup();</span><br><span class="line"><span class="comment">// 不阻塞，立刻返还</span></span><br><span class="line">selector.selectNow();</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-NIO-案例</title>
    <url>/2020/07/13/Netty-NIO-%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="netty-nio-案例">Netty-NIO-案例</h1>
<h2 id="nio非阻塞网络编程原理分析图">NIO非阻塞网络编程原理分析图</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/Selector%5Bkey,...%5D.png" /></p>
<ol type="1">
<li>当客户端连接时，会通过ServerSocketChannel得到对应的SocketChannel</li>
<li>Selector进行监听(select()方法)，返回有事件发生的通道的个数</li>
<li>将SocketChannel注册到Selector上<code>register(Selector sel,int ops)</code>，一个Selector上可以注册多个SocketChannel</li>
<li>注册后返回一个SelectionKey，会和该Selector关联(以集合的方式)</li>
<li>进一步得到各个SelectionKey(有事件发生)</li>
<li>再通过SelectionKey反向获取SocketChannel，方法是channel()</li>
<li>可以通过得到的channel，完成业务处理</li>
</ol>
<h2 id="案例1-简单通讯">案例1-简单通讯</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建ServerSocketChannel -&gt; BIO中的ServerSocket</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 2. 得到一个Selector对象</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        <span class="comment">// 3. 绑定端口，在服务器端监听</span></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line">        <span class="comment">// 4. 设置为非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 5. 将ServerSocketChannel注册到Selector中，关心事件为OP_ACCEPT</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="comment">// 6. 循环等待客户端连接</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 等待1秒，如果没有事件发生，返回</span></span><br><span class="line">            <span class="keyword">if</span>(selector.select(<span class="number">1000</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// 没有事件发生</span></span><br><span class="line">                System.out.println(<span class="string">&quot;服务器等待了1秒，无连接&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果返回&gt;0，表示已经获取到关注的事件</span></span><br><span class="line">            <span class="comment">// 获取到相关的selectionKeys集合(关注事件的集合)</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                SelectionKey selectionKey = iterator.next();</span><br><span class="line">                <span class="comment">// 根据selectionKey对应的通道发生的事件，做对应的处理</span></span><br><span class="line">                <span class="keyword">if</span>(selectionKey.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">// 如果是OP_ACCEPT，有新客户端连接</span></span><br><span class="line">                    <span class="comment">// 给该客户端生成一个 SocketChannel</span></span><br><span class="line">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端连接成功，生成SocketChannel&quot;</span>+socketChannel.hashCode());</span><br><span class="line">                    <span class="comment">// 设置为非阻塞式的</span></span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">// 将socketChannel注册到Selector，关注事件为OP_READ，同时关联一个Buffer</span></span><br><span class="line">                    socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(selectionKey.isReadable())&#123;</span><br><span class="line">                    <span class="comment">// 如果是OP_READ，可以读取数据</span></span><br><span class="line">                    <span class="comment">// 通过key反向获取对应Channel</span></span><br><span class="line">                    SocketChannel channel = (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="comment">// 获取到该Channel关联的Buffer</span></span><br><span class="line">                    ByteBuffer buffer = (ByteBuffer) selectionKey.attachment();</span><br><span class="line">                    <span class="comment">// 读取数据</span></span><br><span class="line">                    <span class="keyword">int</span> read = channel.read(buffer);</span><br><span class="line">                    <span class="comment">// cancel防止客户端断开连接后死循环输出</span></span><br><span class="line">                    <span class="keyword">if</span>(read&lt;<span class="number">0</span>)selectionKey.cancel();</span><br><span class="line">                    System.out.println(<span class="string">&quot;from client：&quot;</span>+<span class="keyword">new</span> String(buffer.array()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 手动从集合中移除当前selectionKey,防止重复操作</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 得到一个网络通道</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        <span class="comment">// 2. 设置非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 3. 提供服务器IP和端口</span></span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 4. 连接服务器</span></span><br><span class="line">        <span class="keyword">if</span>(!socketChannel.connect(inetSocketAddress))&#123;</span><br><span class="line">            <span class="keyword">while</span>(!socketChannel.finishConnect())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;因为连接需要时间，客户端不会阻塞，可以做其它工作...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果连接成功,发送数据</span></span><br><span class="line">        String str = <span class="string">&quot;hello word&quot;</span>;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes());</span><br><span class="line">        <span class="comment">// 发送数据，将Buffer数据写入Channel</span></span><br><span class="line">        socketChannel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="selectionkey">SelectionKey</h3>
<ol type="1">
<li><p>SelectionKey，表示Selector和网络通信的注册关系，共四种：</p>
<ul>
<li><p>int OP_ACCEPT：有新的网络连接可以accept，值为16</p></li>
<li><p>int OP_CONNECT：代表连接已经建立，值为8</p></li>
<li><p>int OP_READ：代表读操作，值为1</p></li>
<li><p>int OP_WRITE：代表写操作，值为4</p></li>
</ul></li>
<li><p>SelectionKey相关方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到与之关联的Selector对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Selector <span class="title">selector</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 得到与之关系的通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SelectableChannel <span class="title">channel</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 得到与之关联的共享数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">attachment</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 设置或改变监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> SelectionKey <span class="title">interestOps</span><span class="params">(<span class="keyword">int</span> ops)</span></span>;</span><br><span class="line"><span class="comment">// 是否可以accpet</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAcceptable</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 是否可以读</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 是否可以写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isWriteable</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="serversocketchannel">ServerSocketChannel</h3>
<ol type="1">
<li><p>ServerSocketChannel在<strong>服务器端监听新的客户端Socket连接</strong></p></li>
<li><p>相关方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到一个ServerSocketChannel通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServerSocketChannel <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 设置服务器端端口号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ServerSocketChannel <span class="title">bind</span><span class="params">(SocketAddress local)</span></span>;</span><br><span class="line"><span class="comment">// 设置阻塞或非阻塞模式，取值false表示采用非阻塞模式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SelectableChannel <span class="title">configureBlocking</span><span class="params">(<span class="keyword">boolean</span> block)</span></span>;</span><br><span class="line"><span class="comment">// 接受一个连接，返回代表这个连接的通道对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SocketChannel <span class="title">accept</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 注册一个选择器并设置监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SelectionKey <span class="title">register</span><span class="params">(Selector sel,<span class="keyword">int</span> ops)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="socketchannel">SocketChannel</h3>
<ol type="1">
<li><p>SocketChannel，网络IO通道，<strong>具体负责进行读写操作</strong>。NIO把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区</p></li>
<li><p>相关方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到一个SocketChannel通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SocketChannel <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 设置阻塞或非阻塞模式，取值false表示采用非阻塞模式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SelectableChannel <span class="title">configureBlocking</span><span class="params">(<span class="keyword">boolean</span> block)</span></span>;</span><br><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">(SocketAddress remote)</span></span>;</span><br><span class="line"><span class="comment">// 如果上面的方法连接失败，接下来就要通过该方法完成连接操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">finishConnect</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 往通道里写数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span></span>;</span><br><span class="line"><span class="comment">// 从通道里读数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer dst)</span></span>;</span><br><span class="line"><span class="comment">// 注册一个选择器并设置监听事件，最后一个参数可以设置共享数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SelectionKey <span class="title">register</span><span class="params">(Selector sel,<span class="keyword">int</span> ops,Object att)</span></span>;</span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="案例2-群聊系统">案例2-群聊系统</h2>
<p>功能要求：</p>
<ol type="1">
<li>实现服务器和客户端之间数据简单通讯</li>
<li>实现多人群聊</li>
<li>服务器端可以监测用户上线、离线并实现消息转发功能</li>
<li>客户端可以无阻塞发送消息给其它用户，同时可以接收其它用户发送的消息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel listenChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            listenChannel = ServerSocketChannel.open();</span><br><span class="line">            listenChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line">            <span class="comment">// 设置 非阻塞</span></span><br><span class="line">            listenChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> count = selector.select();</span><br><span class="line">                <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        <span class="keyword">if</span>(key.isAcceptable())&#123;</span><br><span class="line">                            SocketChannel sc = listenChannel.accept();</span><br><span class="line">                            sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            sc.register(selector,SelectionKey.OP_READ);</span><br><span class="line">                            System.out.println(sc.getRemoteAddress()+<span class="string">&quot;上线&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                            readData(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取客户端信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(SelectionKey key)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个SocketChannel</span></span><br><span class="line">        SocketChannel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 取关联channel</span></span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">// 创建buffer</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="keyword">int</span> count = channel.read(buffer);</span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// 将缓冲区数据转字符串</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                System.out.println(<span class="string">&quot;form 客户端：&quot;</span>+msg);</span><br><span class="line">                <span class="comment">// 向其它客户端转发消息(排除自己)</span></span><br><span class="line">                sendInfoToOtherClients(msg,channel);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(channel.getRemoteAddress()+<span class="string">&quot;离线了&quot;</span>);</span><br><span class="line">                <span class="comment">// 取消注册</span></span><br><span class="line">                key.cancel();</span><br><span class="line">                <span class="comment">// 关闭通道</span></span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转发消息给其它客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> self</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendInfoToOtherClients</span><span class="params">(String msg,SocketChannel self)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Iterator&lt;SelectionKey&gt; iterator = selector.keys().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            SelectionKey key = iterator.next();</span><br><span class="line">            Channel target = key.channel();</span><br><span class="line">            <span class="comment">// 排除self</span></span><br><span class="line">            <span class="keyword">if</span>(target <span class="keyword">instanceof</span> SocketChannel &amp;&amp; target != self)&#123;</span><br><span class="line">                SocketChannel dest = (SocketChannel) target;</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">                dest.write(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Server server = <span class="keyword">new</span> Server();</span><br><span class="line">        server.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(HOST, PORT));</span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        System.out.println(username +<span class="string">&quot; is ok ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String info)</span></span>&#123;</span><br><span class="line">        info = username+<span class="string">&quot;：&quot;</span>+info;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(info.getBytes());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> readChannels = selector.select();</span><br><span class="line">            <span class="keyword">if</span>(readChannels&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.keys().iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                    SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                        SocketChannel channel = (SocketChannel) key.channel();</span><br><span class="line">                        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        <span class="keyword">int</span> read = socketChannel.read(buffer);</span><br><span class="line">                        <span class="keyword">if</span>(read&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="keyword">new</span> String(buffer.array()).trim());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;没有可用通道...&quot;);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 启动客户端</span></span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        <span class="comment">// 启动一个线程每隔3秒读取数据</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                client.readInfo();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            client.sendInfo(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-NIO-Buffer&amp;Channel&amp;Selector</title>
    <url>/2020/07/12/Netty-NIO/</url>
    <content><![CDATA[<h1 id="netty-nio-bufferchannelselector">Netty-NIO-Buffer&amp;Channel&amp;Selector</h1>
<h2 id="基本介绍">基本介绍</h2>
<ol type="1">
<li><p>Java NIO全称Java non-blocking IO，是指JDK提供的新API。从JDK1.4开始，Java提供了一系列改进的输入/输出的新特性，被统称为NIO(即New IO)，是<strong>同步非阻塞</strong>的</p></li>
<li><p>NIO相关类都被放在java.nio包及子包下，并对原java.io包中的很多类进行改写</p></li>
<li><p>NIO有三大核心部分：<strong>Channel(通道)</strong>、<strong>Buffer(缓冲区)</strong>、<strong>Selector(选择器)</strong></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/NIO-detail.png" alt="NIO-detail" />)</p></li>
<li><p>NIO是面向缓冲区的，或者说是面向 块 编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程中的灵活性，使用它可以提供非阻塞式的高伸缩性网络</p></li>
<li><p>Java NIO的非阻塞模式，使一个线程从某通道发送请求或读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而<strong>不是保持线程阻塞</strong>，所以直到数据变的可以读取之前，该线程可以继续做其它的事情。非阻塞写也是如此，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情</p></li>
<li><p>通俗理解：NIO是可以做到用一个线程来处理多个操作的。假设有10000个请求过来，根据实际情况，可以分配50或100个线程来处理。不像之前的阻塞IO那样，必须分配10000个</p></li>
<li><p>HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个不，而且并发请求的数量比HTTP1.1大了好几个数量级</p></li>
</ol>
<h2 id="buffer测试代码">Buffer测试代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Buffer的使用</span></span><br><span class="line">        <span class="comment">// 创建一个Buffer，大小为5,即可以存放5个int</span></span><br><span class="line">        IntBuffer buffer = IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 向buffer存放数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class="line">            buffer.put(i*<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从buffer读取数据</span></span><br><span class="line">        <span class="comment">// 将buffer转换，读写切换</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(buffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nio和bio的比较">NIO和BIO的比较</h2>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 20%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>BIO</th>
<th>NIO</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>处理数据</td>
<td>以流的方式</td>
<td>以块的方式</td>
</tr>
<tr class="even">
<td>效率</td>
<td>低</td>
<td>高</td>
</tr>
<tr class="odd">
<td>是否阻塞</td>
<td>阻塞</td>
<td>非阻塞</td>
</tr>
<tr class="even">
<td>操作基础</td>
<td>基于字节流和字符流</td>
<td>基于Channel(通道)和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或从缓冲区写入通道中。Selector(选择器)用于监听多个通道的事件(如：连接请求、数据到达等)，因此使用单个线程就可以监听多个客户端通道</td>
</tr>
</tbody>
</table>
<h2 id="selectorchannel和buffer的关系">Selector、Channel和Buffer的关系</h2>
<ol type="1">
<li>每个Channel都会对应一个Buffer</li>
<li>Selector对应一个线程，一个线程对应多个Channel(连接)</li>
<li>多个Channel注册到一个Selector</li>
<li>程序切换到哪个Channel，是由事件(Event)决定的</li>
<li>Selector会根据不同的事件，在各个通道上切换</li>
<li>Buffer 就是一个内存块，底层是一个数组</li>
<li>数据的读取/写入是通过Buffer，这和BIO有本质不同，BIO中要么是输入流，要么是输出流，不能双向，而NIO的Buffer是可读可写的，需要flip()切换</li>
<li>Channel是双向的，可以反映底层操作系统的情况，如Linux底层操作系统通道就是双向的</li>
</ol>
<h2 id="buffer缓冲区">Buffer(缓冲区)</h2>
<h3 id="基本介绍-1">基本介绍</h3>
<p>缓冲区(Buffer)：缓冲区本质上是<strong>一个可以读写数据的内存块</strong>，可以理解是一个容器对象(含数组)，该对象提供了一组方法，可以更轻松地使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。Channel提供从文件、网络读取数据的渠道，但读取或写入的数据都必须经由Buffer</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/Buffer.png" alt="buffer" /><figcaption>buffer</figcaption>
</figure>
<h3 id="buffer类及其子类">Buffer类及其子类</h3>
<ol type="1">
<li><p>在NIO中，Buffer是一个顶层父类，它是一个抽象类</p>
<p>常用Buffer子类</p>
<ul>
<li>ByteBuffer：存储字节数据到缓冲区</li>
<li>ShortBuffer：存储短整数数据到缓冲区</li>
<li>CharBuffer：存储字符数据到缓冲区</li>
<li>IntBuffer：存储整数数据到缓冲区</li>
<li>LongBuffer：存储长整数数据到缓冲区</li>
<li>DoubleBuffer：存储小数到缓冲区</li>
<li>FloatBuffer：存储小数到缓冲区</li>
</ul></li>
<li><p>Buffer类定义的所有的缓冲区都具有四个属性来提供关于其所包含的数据元素的信息</p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>capacity</td>
<td>容量，即可以容纳的最大数据量，在级次区创建时被设定并且不能改变</td>
</tr>
<tr class="even">
<td>limit</td>
<td>表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作，且极限是可以修改的</td>
</tr>
<tr class="odd">
<td>position</td>
<td>位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变该值，为下次读写作准备</td>
</tr>
<tr class="even">
<td>mark</td>
<td>标记</td>
</tr>
</tbody>
</table></li>
<li><p>Buffer类相关方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回此缓冲区的容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 返回此缓冲区的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">position</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 设置此缓冲区的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> finall Buffer <span class="title">position</span><span class="params">(<span class="keyword">int</span> newPosition)</span></span>;</span><br><span class="line"><span class="comment">// 返回此缓冲区的限制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">limit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 设置此缓冲区的限制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">limit</span><span class="params">(inte new Limit)</span></span>;</span><br><span class="line"><span class="comment">//清除此缓冲区，即将各个标记恢复到初始状态，但数据并没有真正擦除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 反转此缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 告知在当前位置和限制之间是否有元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasRemaining</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 告知此缓冲区是否为只读缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 告知此缓冲区是否具有可访问的底层实现数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasArray</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 返回此缓冲区的底层实现数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">array</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="bytebuffer">ByteBuffer</h3>
<p>从前面可以看出，对于Java中的基本数据类型(boolean除外)，都有一个Buffer类型与之相对应，<strong>最常用</strong>的自然是ByteBuffer类(二进制数据)，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line"><span class="comment">// 创建直接缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>;</span><br><span class="line"><span class="comment">// 设置缓冲区的初始容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>;</span><br><span class="line"><span class="comment">// 缓冲区存取相关API</span></span><br><span class="line"><span class="comment">// 从当前位置position上get，get之后，position会自动+1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 从绝对位置get</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">byte</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="comment">// 从当前位置上put，put之后，position会自动+1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 从绝对位置上put</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">byte</span> b)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="channel通道">Channel(通道)</h2>
<h3 id="基本介绍-2">基本介绍</h3>
<ol type="1">
<li><p>NIO的通道类似于流，但有些区别：</p>
<ul>
<li>通道可以同时进行读写，而流只能读或只能写</li>
<li>通道可以实现异步读写数据</li>
<li>通道可以从缓冲读数据，也可以写数据到缓冲</li>
</ul></li>
<li><p>BIO中的stream是单向的，如FileInputStream对旬只能进行读取数据的操作，而NIO的通道(Channel)是双向的，可以读操作，也可以写操作</p></li>
<li><p>Channel在NIO中是一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Channel</span> <span class="keyword">extends</span> <span class="title">Closeable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>常用的Channel类有：FileChannel、DatagramChannel、ServerSocketChannel和SocketChannel</p></li>
<li><p>FileChannel用于文件的数据读写，DatagramChannel用于UDP的数据读写，ServerSocketChannel和SocketChannel用于TCP的数据读写</p></li>
</ol>
<h3 id="filechannel类">FileChannel类</h3>
<p>FileChannel主要用于对本地文件进行IO操作，常见的方法有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从通道读取数据并放到缓冲区中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer dst)</span></span>;</span><br><span class="line"><span class="comment">// 把缓冲区的数据写到通道中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span></span>;</span><br><span class="line"><span class="comment">// 从目标通道中复制数据到当前通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">transferFrom</span><span class="params">(ReadableByteChannel src,<span class="keyword">long</span> position,<span class="keyword">long</span> count)</span></span>;</span><br><span class="line"><span class="comment">// 把数据从当前通道复制给目标通道</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">transferTo</span><span class="params">(<span class="keyword">long</span> position,<span class="keyword">long</span> count,WriteableByteChannel target)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="selector选择器">Selector(选择器)</h2>
<h3 id="基本介绍-3">基本介绍</h3>
<ol type="1">
<li>Java的NIO，用非阻塞的IO方式。可以用一个线程，处理多个客户端连接，就会使用到Selector(选择器)</li>
<li><strong>Selector能够检测多个注册的通道上是否有事件发生(注意：多个Channel以事件的方式可以注册到同一个Selector)</strong>，如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求</li>
<li>只有在连接真正有读写事件发生时，才会进行读写，就大大减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程</li>
<li>避免了多线程之间的上下文切换导致的开销</li>
</ol>
<h3 id="selector特点说明">Selector特点说明</h3>
<ol type="1">
<li>Netty的IO线程NioEventLoop聚合了Selector(选择器，也叫多路复用器)，可以同时并发处理成百上千个客户端连接</li>
<li>当线程从某客户端Socket通道进行读写数据时，若没有数据可用时，该线程可以进行其它任务</li>
<li>线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以单独的线程可以管理多个输入和输出通道</li>
<li>由于读写操作都是非阻塞的，这就可以充分提升IO线程的运行效率，避免由于频繁I/O阻塞导致的线程挂起</li>
<li>一个I/O线程可以并发处理N个客户端连接和读写操作，这从根本上解决了传统同步阻塞I/O一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升</li>
</ol>
<h3 id="selector类相关方法">Selector类相关方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到一个选择器对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Selector <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 监控所有注册的通道，当其中有IO操作进行时，将对应的SelectionKey加入到内部集合中并返回，参数用来设置超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">long</span> timeout)</span></span>;</span><br><span class="line"><span class="comment">// 从内部集合中得到所有的SelectionKey</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;SelectionKey&gt; <span class="title">selectedKeys</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="注意事项">注意事项</h3>
<ol type="1">
<li><p>NIO中的ServerSocketChannel功能类似于ServerSocket，SocketChannel功能类似Socket</p></li>
<li><p>selector相关方法说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 阻塞</span></span><br><span class="line">selector.select();</span><br><span class="line"><span class="comment">// 阻塞1000毫秒，在1000毫秒后返回</span></span><br><span class="line">selector.select(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 唤醒selector</span></span><br><span class="line">selector.wakeup();</span><br><span class="line"><span class="comment">// 不阻塞，立刻返还</span></span><br><span class="line">selector.selectNow();</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="nio非阻塞网络编程原理分析图">NIO非阻塞网络编程原理分析图</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/Selector%5Bkey,...%5D.png" /></p>
<ol type="1">
<li>当客户端连接时，会通过ServerSocketChannel得到对应的SocketChannel</li>
<li>将SocketChannel注册到Selector上<code>register(Selector sel,int ops)</code>，一个Selector上可以注册多个SocketChannel</li>
<li>注册后返回一个SelectionKey，会和该Selector关联(以集合的方式)</li>
<li>Selector进行监听(select()方法)，返回有事件发生的通道的个数</li>
<li>进一步得到各个SelectionKey(有事件发生)</li>
<li>再通过SelectionKey反向获取SocketChannel，方法是channel()</li>
<li>可以通过得到的channel，完成业务处理</li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-NIO与零拷贝</title>
    <url>/2020/07/12/Netty-NIO%E4%B8%8E%E9%9B%B6%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="netty-nio与零拷贝">Netty-NIO与零拷贝</h1>
<h2 id="零拷贝基本介绍">零拷贝基本介绍</h2>
<ol type="1">
<li>零拷贝是网络编程的关键，很多性能优化都离不开</li>
<li>在Java程序中，常用的零拷贝有mmap(内存映射)和sendFile</li>
<li>零拷贝并非是不拷贝，而是没有CPU拷贝</li>
<li>所说的零拷贝，是从操作系统的角度来说的。因为内核缓冲区之间，没有数据是重复的(只有kernel buffer有一份数据)</li>
<li>零拷贝不仅带来更少的数据复制，还能带来其它的性能优势，例如更少的上下文切换，更少的CPU缓存伪共享以及无CPU校验和计算</li>
</ol>
<h2 id="传统io数据读写">传统IO数据读写</h2>
<ol type="1">
<li><p>Java传统IO和网络编程的一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(file,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)file.length()];</span><br><span class="line">raf.read(arr);</span><br><span class="line">Socket socket = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>).accept();</span><br><span class="line">socket.getOutputStream().write(arr);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="mmap优化三次拷贝三次交换">mmap优化(三次拷贝，三次交换)</h2>
<ol type="1">
<li>mmap通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户控件的拷贝次数</li>
</ol>
<h2 id="sendfile优化三次拷贝两次交换">sendFile优化(三次拷贝，两次交换)</h2>
<ol type="1">
<li>Linux2.1版本提供了sendFile函数，其基本原理：数据根本不经过用户态，直接从内核缓冲区进入到Socket Buffer，同时，由于和用户态完全无关，就减少了一次上下文切换</li>
<li>Linux2.4版本中，做了一些修改，避免了从内核缓冲区拷贝到Socket buffer的操作，从而再一次减少了数据拷贝(两次拷贝，两次交换)(实际上有一次CPU拷贝，从kernel buffer到socket buffer，但拷贝的信息很少，如length、offset，消耗低，可以忽略)</li>
</ol>
<h2 id="mmap和sendfile的区别">mmap和sendFile的区别</h2>
<ol type="1">
<li>mmap适合小数据量读写，sendFile适合大文件传输</li>
<li>mmap需要4次上下文切换，3次数据拷贝，sendFile需要3次上下文切换，最少2次数据拷贝</li>
<li>sendFile可以利用DMA方式，减少CPU拷贝，mmap则不能(必须从内核拷贝到Socket缓冲区)</li>
</ol>
<h2 id="nio零拷贝案例">NIO零拷贝案例</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="number">7001</span>);</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(-<span class="number">1</span>!=count)&#123;</span><br><span class="line">                count = socketChannel.read(buffer);</span><br><span class="line">                buffer.rewind(); <span class="comment">//倒带</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>,<span class="number">7001</span>));</span><br><span class="line">        String fileName = <span class="string">&quot;test.zip&quot;</span>;</span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> FileInputStream(fileName).getChannel();</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 在Linux下一个 transferTo方法就可以完成传输</span></span><br><span class="line">        <span class="comment">// 在Windows下一次调用transferTo最多只能发送8m，就需要分段传输，且要注意传输时的位置</span></span><br><span class="line">        <span class="comment">// transferTo底层使用零拷贝</span></span><br><span class="line">        <span class="keyword">long</span> transferCount = fileChannel.transferTo(<span class="number">0</span>, fileChannel.size(), socketChannel);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送总字节数：&quot;</span>+transferCount);</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="aio基本介绍">AIO基本介绍</h2>
<ol type="1">
<li>JDK 7引入了Asynchronous I/O，即AIO。在进行I/O编程中，常用到两种模式Reactor和Proactor，Java的NIO就是Reactor，当有事件触发时，服务器得到通知，进行相应的处理</li>
<li>AIO即NIO2.0,叫做异步不阻塞的IO，AIO引入异步通道的概念，采用了Proactor模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用</li>
<li>目前AIO还没有广泛应用，Netty也是基于NIO，而不是AIO</li>
</ol>
<h2 id="bionioaio对比表">BIO、NIO、AIO对比表</h2>
<table>
<thead>
<tr class="header">
<th></th>
<th>BIO</th>
<th>NIO</th>
<th>AIO</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>IO模型</td>
<td>同步阻塞</td>
<td>同步非阻塞(多路复用)</td>
<td>异步非阻塞</td>
</tr>
<tr class="even">
<td>编程难度</td>
<td>简单</td>
<td>复杂</td>
<td>复杂</td>
</tr>
<tr class="odd">
<td>可靠性</td>
<td>差</td>
<td>好</td>
<td>好</td>
</tr>
<tr class="even">
<td>吞吐量</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
</tbody>
</table>
<p>举例说明：</p>
<ol type="1">
<li><strong>同步阻塞</strong>：到理发店理发，就一直等理发师，直到轮到自己理发</li>
<li><strong>同步非阻塞</strong>：到理发店理发，发现前面有其它人理发，给理发师说下，先做其它事情，一会过来看是否轮到自己</li>
<li><strong>异步非阻塞</strong>：给理发师打电话，让理发师上门服务，自己做其它事件，理发师自己来家给你理发(或到理发店理发，发现前面有其它人理发，告诉理发师，先做其它事，轮到自己时，理发师来通知)</li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-线程模型</title>
    <url>/2020/08/12/Netty-Netty%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="netty-netty模型">Netty-Netty模型</h1>
<h2 id="工作原理示意图-简单版">工作原理示意图-简单版</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/Netty-Model1.png" /></p>
<ol type="1">
<li>BossGroup线程维护Selector，只关注accept</li>
<li>当接收到accept事件后，获取到对应的SocketChannel，封装成NIOSocketChannel并注册到Worker线程(事件循环)，并进行维护</li>
<li>当Worker线程监听到selector中通道发生自己感兴趣的事件后，就进行处理(由handler)，handler已经加入到通道</li>
</ol>
<h2 id="工作原理示意图-进阶版">工作原理示意图-进阶版</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/NettyModel2.png" /></p>
<h2 id="工作原理示意图-详细版">工作原理示意图-详细版</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/NettyModel3.png" /></p>
<ol type="1">
<li>Netty抽象出两组线程池，BossGroup专门负责接收客户端的连接；WorkerGroup专门负责网络的读写</li>
<li>BossGroup和WorkerGroup类型都是NioEventLoopGroup</li>
<li>NioEventLoopGroup相当于一个事件循环组，这个组中含有多个事件循环，每个事件循环是NioEventLoop</li>
<li>NioEventLoop表示一个不断循环的执行处理任务的线程，每个NioEventLoop都有一个selector，用于监听绑定在其上的socket的网络通信</li>
<li>NioEventLoopGroup可以有多个线程，即可以含有多个NioEventLoop</li>
<li>每个Boss NioEventLoop循环执行的步骤有3步
<ul>
<li>1）轮询accept事件</li>
<li>2）处理accept事件，与client建立连接，生成NioSocketChannel，并将其注册到某个worker NIOEventLoop上的selector</li>
<li>3）处理任务队列的任务，即runAllTasks</li>
</ul></li>
<li>每个Worker NioEventLoop循环执行的步骤
<ul>
<li>1）轮询read、write事件</li>
<li>2）处理IO事件，即read、write事件，在对应的NioSocketChannel处理</li>
<li>处理任务队列的任务，即runAllTasks</li>
</ul></li>
<li>每个Worker NIOEventLoop处理业务时，会使用pipline(管道)，pipeline中包含了channel，即通过pipeline，可以获取到对应通道， 管道中维护了很多的处理器</li>
</ol>
<h2 id="案例-tcp服务">案例-TCP服务</h2>
<blockquote>
<p>要求：</p>
<ol type="1">
<li>Netty服务器在6668端口监听，客户端能发送消息给服务器"hello server"</li>
<li>服务器可以回复消息给客户端"hello client"</li>
</ol>
</blockquote>
<p>服务器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zephon.netty.netty.chatting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建BossGroup 和WorkerGroup</span></span><br><span class="line">        <span class="comment">// 1. 创建两个线程组，两个都是无限循环</span></span><br><span class="line">        <span class="comment">// bossGroup处理连接请求</span></span><br><span class="line">        <span class="comment">// bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数，默认是cpu核数×2</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="comment">// workerGroup真正和客户端业务处理</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建服务器端的启动对象，配置参数</span></span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)<span class="comment">// 设置两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">// 使用NioServerSocketChannel作为服务器的通道实现</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>) <span class="comment">// 设置线程队列等待连接的个数</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)<span class="comment">// 设置保持活动连接状态</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="comment">// 给pipeline设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;); <span class="comment">// 给workerGroup的EventLoop对应的管道设置处理器</span></span><br><span class="line">            System.out.println(<span class="string">&quot;...server is ready...&quot;</span>);</span><br><span class="line">            <span class="comment">// 绑定一个端口并且同步，生成一个ChannelFuture对象</span></span><br><span class="line">            <span class="comment">// 启动服务器(并绑定端口)</span></span><br><span class="line">            ChannelFuture channelFuture = b.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象，含有管道pipeline、通道、地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 客户端发送的数据，默认是Object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx=&quot;</span>+ctx);</span><br><span class="line">        <span class="comment">// 将msg转成ByteBuf(由netty提供)</span></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;client send msg:&quot;</span>+buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;client address:&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据读取完毕</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将数据写入缓冲区，并刷新</span></span><br><span class="line">        <span class="comment">// 一般对发送的数据进行编码</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello client~&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常，一般需要关闭通道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.channel().close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zephon.netty.netty.chatting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 客户端需要一个事件循环组</span></span><br><span class="line">        NioEventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建客户端启动对象</span></span><br><span class="line">            <span class="comment">// 客户端使用的不是ServerBootStrap，而是BootStrap</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">// 设置相关参数</span></span><br><span class="line">            bootstrap.group(eventExecutors) <span class="comment">// 设置线程组</span></span><br><span class="line">                    .channel(NioSocketChannel.class) <span class="comment">// 设置客户端通道实现类</span></span><br><span class="line">            .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">// 添加自己的处理器</span></span><br><span class="line">                    socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;); <span class="comment">// 设置处理器</span></span><br><span class="line">            System.out.println(<span class="string">&quot;client is ok...&quot;</span>);</span><br><span class="line">            <span class="comment">// 启动客户端去连接服务器</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6668</span>).sync();</span><br><span class="line">            <span class="comment">// 给关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当通道就绪就会触发该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client ctx:&quot;</span>+ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello server&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当通道有读取事件时会触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复的消息:&quot;</span>+buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器地址:&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="任务队列中的task有3种典型使用场景">任务队列中的Task有3种典型使用场景</h2>
<blockquote>
<p>问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 如这里有一个非常耗时的业务 -&gt; 异步执行 -&gt; 提交该channel对应的NioEventLoop的taskQueue中</span></span><br><span class="line">        <span class="comment">// 默认会阻塞，等10秒后继续执行</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;耗时业务&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ol type="1">
<li><p>用户程序自定义的普通任务</p>
<p>对应代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 如这里有一个非常耗时的业务 -&gt; 异步执行 -&gt; 提交该channel对应的NioEventLoop的taskQueue中</span></span><br><span class="line">        <span class="comment">// 默认会阻塞，等10秒后继续执行</span></span><br><span class="line"><span class="comment">//        TimeUnit.SECONDS.sleep(10);</span></span><br><span class="line"><span class="comment">//        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;耗时业务&quot;, CharsetUtil.UTF_8));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解决方案1：用户程序自定义的普通任务</span></span><br><span class="line">        ctx.channel().eventLoop().execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;耗时业务1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ctx.channel().eventLoop().execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 与初始相比间隔30秒</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;耗时业务2&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>用户自定义定时任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 如这里有一个非常耗时的业务 -&gt; 异步执行 -&gt; 提交该channel对应的NioEventLoop的taskQueue中</span></span><br><span class="line">        <span class="comment">// 默认会阻塞，等10秒后继续执行</span></span><br><span class="line"><span class="comment">//        TimeUnit.SECONDS.sleep(10);</span></span><br><span class="line"><span class="comment">//        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;耗时业务&quot;, CharsetUtil.UTF_8));</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 用户自定义定时任务 -&gt; 该任务提交到scheduleTaskQueue中</span></span><br><span class="line">        ctx.channel().eventLoop().schedule(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;耗时业务&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">5</span>,TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>非当前Reactor线程调用Channel的各种方法</p>
<blockquote>
<p>如：在<strong>推送系统</strong>的业务线程里面，根据<strong>用户的标识</strong>，找到对应的<strong>Channel引用</strong>，然后调用Write类方法向该用户推送消息，就会进入到这种场景。最终的Write会提交到任务队列中后被<strong>异步消费</strong></p>
</blockquote></li>
</ol>
<h2 id="本质说明">本质说明</h2>
<ol type="1">
<li>Netty抽象出两组线程池，BossGroup专门负责接收客户端连接，WorkerGroup专门负责网络读写操作</li>
<li>NioEventLoop表示一个不断循环执行处理任务的线程，每个NioEventLoop都有一个selector，用户监听绑定在其上的socket网络通信</li>
<li>NioEventLoop内部采用串行化设计，从消息的读取-&gt;解码-&gt;处理-&gt;编码-&gt;发送，始终由IO线程NioEventLoop负责
<ul>
<li>NioEventLoopGroup下包含多个NioEventLoop</li>
<li>每个NioEventLoop中包含有一个Selector，一个taskQueue</li>
<li>每个NioEventLoop的Selector上可以注册监听多个NioChannel</li>
<li>每个NioChannel只会绑定在唯一的NioEventLoop上</li>
<li>每个NioChannel都绑定有一个自己的ChannelPipeline</li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-TCP粘包和拆包及解决方案</title>
    <url>/2020/08/22/Netty-TCP%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="netty-tcp粘包和拆包及解决方案">Netty-TCP粘包和拆包及解决方案</h1>
<h2 id="tcp粘包和拆包基本介绍">TCP粘包和拆包基本介绍</h2>
<ol type="1">
<li><p>TCP是面向连接的，面向流的，提供高可靠性服务。收发两端(客户端和服务器端)都要有一一成对的socket，因此，发送端为了将多个发给接收端的包，更有效的发给对方，使用了优化方法(Nagle算法)，将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样做虽然提高了效率，但是接收端就难于分辨出完整的数据包了，因为<strong>面向流的通信是无消息保护边界</strong>的</p></li>
<li><p>由于TCP无消息保护边界，需要在接收端处理消息边界问题，也就是我们所说的粘包、拆包问题</p></li>
<li><p>TCP粘包、拆包图解</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/package.png" /></p>
<blockquote>
<p>假设客户端分别发送了两个数据包D1和D2给服务端，由于服务端一次读取到字节数是不确定的，故可能存在以下四种情况</p>
<ol type="1">
<li>服务端分两次读取到了两个独立的数据包，分别D1和D2，没有粘包和拆包</li>
<li>服务端一次接收到了两个数据包，D1和D2粘合在一起，称为TCP粘包</li>
<li>服务端分两次读取到了数据包，第一次读取到了完整的D1包和D2包的部分内容，第二次读取到D2包的剩余内容，这称为TCP拆包</li>
<li>服务端分两次读取到了数据包，第一次读取到了D1包的部分内容D1_1，第二次读取到了D1包的剩余部分内容D1_2和完整的D2包，也称为TCP拆包</li>
</ol>
</blockquote></li>
</ol>
<h2 id="tcp粘包和拆包现象实例">TCP粘包和拆包现象实例</h2>
<blockquote>
<p>在编写Netty程序时，如果没有做处理，就会发生粘包和拆包的问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = b.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[msg.readableBytes()];</span><br><span class="line">        msg.readBytes(buffer);</span><br><span class="line"></span><br><span class="line">        String message = <span class="keyword">new</span> String(buffer, CharsetUtil.UTF_8);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器接收数据：&quot;</span> + message);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器接收消息量=&quot;</span> + (++<span class="keyword">this</span>.count));</span><br><span class="line"></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(UUID.randomUUID().toString() + <span class="string">&quot; &quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(eventLoopGroup)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = b.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[msg.readableBytes()];</span><br><span class="line">        msg.readBytes(buffer);</span><br><span class="line">        String message = <span class="keyword">new</span> String(buffer, CharsetUtil.UTF_8);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端接收到消息：&quot;</span>+message);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端接收消息数量：&quot;</span>+(++count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            ByteBuf buf = Unpooled.copiedBuffer(<span class="string">&quot;hello server &quot;</span>+i, CharsetUtil.UTF_8);</span><br><span class="line">            ctx.writeAndFlush(buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="tcp粘包和拆包解决方案">TCP粘包和拆包解决方案</h2>
<ol type="1">
<li>使用自定义协议+编解码器来解决</li>
<li>关键就是要解决服务器端每次读取数据长度的问题，这个问题解决，就不会出现服务器多读或少读数据的问题，从而避免TCP粘包、拆包</li>
</ol>
<h3 id="具体实例">具体实例</h3>
<blockquote>
<ol type="1">
<li>要求客户端发送5个Message对象，客户端每次发送一个Message对象</li>
<li>服务器端每次接收一个Message，分5次进行解码，每读取到一个Message，会回复一个Message对象给客户端</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 协议包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLen</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.len = len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(<span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyMessageDecoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyMessageEncoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = b.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMessageDecoder</span> <span class="keyword">extends</span> <span class="title">ReplayingDecoder</span>&lt;<span class="title">Void</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyMessageDecoder decode被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> length = in.readInt();</span><br><span class="line">        <span class="keyword">byte</span>[] content = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">        in.readBytes(content);</span><br><span class="line">        MessageProtocol messageProtocol = <span class="keyword">new</span> MessageProtocol();</span><br><span class="line">        messageProtocol.setLen(length);</span><br><span class="line">        messageProtocol.setContent(content);</span><br><span class="line">        out.add(messageProtocol);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">MessageProtocol</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, MessageProtocol msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = msg.getLen();</span><br><span class="line">        <span class="keyword">byte</span>[] content = msg.getContent();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器接收信息:&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度=&quot;</span>+length);</span><br><span class="line">        System.out.println(<span class="string">&quot;内容=&quot;</span>+<span class="keyword">new</span> String(content, CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器接收到消息包数量:&quot;</span>+(++<span class="keyword">this</span>.count));</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回复消息</span></span><br><span class="line">        String responseContent = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">int</span> responseLength = responseContent.getBytes(CharsetUtil.UTF_8).length;</span><br><span class="line">        MessageProtocol messageProtocol = <span class="keyword">new</span> MessageProtocol();</span><br><span class="line">        messageProtocol.setLen(responseLength);</span><br><span class="line">        messageProtocol.setContent(responseContent.getBytes(CharsetUtil.UTF_8));</span><br><span class="line">        ctx.writeAndFlush(messageProtocol);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(eventLoopGroup)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyMessageEncoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyMessageDecoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = b.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventLoopGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">MessageProtocol</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, MessageProtocol msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = msg.getLen();</span><br><span class="line">        <span class="keyword">byte</span>[] content = msg.getContent();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端接收到的消息:&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度=&quot;</span>+len);</span><br><span class="line">        System.out.println(<span class="string">&quot;内容=&quot;</span>+<span class="keyword">new</span> String(content,CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端接收消息数量：&quot;</span>+(++<span class="keyword">this</span>.count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            String msg = <span class="string">&quot;今天星期六&quot;</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] content = msg.getBytes(CharsetUtil.UTF_8);</span><br><span class="line">            <span class="keyword">int</span> length = msg.getBytes(CharsetUtil.UTF_8).length;</span><br><span class="line">            <span class="comment">// 创建协议包对象</span></span><br><span class="line">            MessageProtocol messageProtocol = <span class="keyword">new</span> MessageProtocol();</span><br><span class="line">            messageProtocol.setLen(length);</span><br><span class="line">            messageProtocol.setContent(content);</span><br><span class="line">            ctx.writeAndFlush(messageProtocol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMessageEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">MessageProtocol</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, MessageProtocol msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyMessageEncoder encode被调用&quot;</span>);</span><br><span class="line">        out.writeInt(msg.getLen());</span><br><span class="line">        out.writeBytes(msg.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-介绍和应用</title>
    <url>/2020/08/09/Netty-%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="netty-介绍和应用">Netty-介绍和应用</h1>
<h2 id="netty介绍">Netty介绍</h2>
<ol type="1">
<li><p>Netty是由JBOSS提供的一个Java开源框架，现为GitHub上独立的项目</p></li>
<li><p>Netty是一个 <strong>异步的、基于事件驱动的</strong>网络应用框架，用以快速开发高性能、高可靠性的网络IO程序</p></li>
<li><p>Netty主要针对在TCP协议下，面向Clients端的高并发应用，或者Peer-toPeer场景下的大量数据持续传输的应用</p></li>
<li><p>Netty本质是一个 NIO框架，适用于服务器通讯相关的多种应用场景</p></li>
<li><p>要透彻理解Netty，需要先学习NIO，这样才能阅读Netty的源码</p></li>
</ol>
<h2 id="netty应用场景">Netty应用场景</h2>
<h3 id="互联网行业">互联网行业</h3>
<ol type="1">
<li><p>在分布式系统中，各个节点之间需要远程服务调用，高性能的RPC框架必不可少，Netty作为异步高性能的通信框架，往往作为基础通信组件被这些RPC框架使用</p></li>
<li><p>典型的应用有：阿里分布式服务框架Dubbo的RPC框架使用Dubbo协议进行节点间通信，Dubbo协议默认使用Netty作为基础通信组件，用于实现各进行节点之间的内部通信</p></li>
</ol>
<h2 id="游戏行业">游戏行业</h2>
<ol type="1">
<li><p>网络游戏中使用，提供了TCP/UDP和HTTP协议栈，方便定制和开发私有协议栈，账号登录服务器</p></li>
<li><p>地图服务器之间可以方便的通过Netty进行高性能的通信</p></li>
</ol>
<h3 id="大数据领域">大数据领域</h3>
<ol type="1">
<li>经典的Hadoop的高性能通信和序列化组件的RPC框架，默认采用Netty进行跨界点通信</li>
<li>它的Netty Service基于Netty框架二次封装实现</li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-异步模型</title>
    <url>/2020/08/13/Netty-%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="netty-异步模型">Netty-异步模型</h1>
<h2 id="基本介绍">基本介绍</h2>
<ol type="1">
<li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。</li>
<li>Netty中的I/O操作是异步的，包括Bind、Write、Connect等操作会简单的返回一个ChannelFuture</li>
<li>调用者并不能立刻获得结果，而是通过Future-Listener机制，用户可以方便的主动获取或通过通知机制获得IO操作结果</li>
<li>Netty的异步模型是建立在future和callback之上的。callback就是回调。重点说Future，它的核心思想是：假设一个方法fun，计算过程可能非常耗时，等待fun返回显然不合适。那么可以在调用fun的时候，立马返回一个Future，后续可以通过Future去监控方法fun的处理过程(即：Future-Listener机制)</li>
</ol>
<h2 id="future说明">Future说明</h2>
<ol type="1">
<li>表示异步的执行结果，可以通过它提供的方法来检查执行是否完成，如检索计算等</li>
<li>ChannelFuture是一个接口，可以添加监听器，当监听的事件发生时，就会通知监听器</li>
</ol>
<h2 id="工作原理示意图">工作原理示意图</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/netty-async.png" /></p>
<blockquote>
<p>说明：</p>
<ol type="1">
<li>在使用Netty进行编程时，拦截操作和转换出入站数据只需要提供callback或利用future即可。这使得<strong>链式操作</strong>简单、高效，并有利于编写可重用的、通用的代码</li>
<li>Netty框架的目标就是让业务逻辑从网络基础应用编码中分离出来、解脱出来</li>
</ol>
</blockquote>
<h2 id="future-listener机制">Future-Listener机制</h2>
<ol type="1">
<li><p>当Future对象刚刚创建时，处于非完成状态，调用者可以通过返回的ChannelFuture来获取操作执行的状态，注册监听函数来执行完成后的操作</p></li>
<li><p>常见有如下操作</p>
<ul>
<li>通过isDone方法来判断当前操作是否完成</li>
<li>通过isSuccess方法来判断已完成的当前操作是否成功</li>
<li>通过getCause方法来获取已完成的当前操作失败的原因</li>
<li>通过isCancelled方法来判断已完成的当前操作是否被取消</li>
<li>通过addListener方法来注册监听器，当操作已完成(isDone方法返回完成)，将会通知指定的监听器；如果Future对象已完成，则通知指定的监听器</li>
</ul></li>
<li><p>举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给channelFuture注册监听器，监控关心的事件</span></span><br><span class="line">channelFuture.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture channelFuture)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(channelFuture.isSuccess())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;监听端口 6688 成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;监听商品 6688 失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>小结：</p>
<p>相比传统阻塞I/O，执行I/O操作后线程会被阻塞住，直到操作完成；异步处理的好处是不会造成线程阻塞，线程在I/O操作期间可以执行别的程序，在高并发情形下会更稳定和更高的吞吐量</p>
</blockquote>
<h2 id="http服务实例">HTTP服务实例</h2>
<blockquote>
<p>需求：</p>
<ol type="1">
<li>监听6668端口</li>
<li>浏览器发出请求"http://localhost:6668"，服务器可以回复消息给客户端"hello，我是服务器"，并对特定请求资源进行过滤</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zephon.netty.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.DefaultFullHttpResponse;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpHeaderNames;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpObject;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpResponseStatus;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpVersion;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line">        <span class="comment">// 加入一个netty提供的httpServerCodec codec-&gt; coder + decoder</span></span><br><span class="line">        <span class="comment">// HttpServerCodec 说明：</span></span><br><span class="line">        <span class="comment">// 1.HttpServerCodec 是netty提供的处理http的编-解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">// 2.增加一个自定义的处理器</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 1. SimpleChannelInboundHandler 是 ChannelInboundHandlerAdapter 的子类</span></span><br><span class="line"><span class="comment"> * 2. HttpObject 客户端和服务器端相互通讯的数据被封装成HttpObject</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHttpServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取客户端数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channelHandlerContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 判断msg是否是httprequest请求</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;msg 类型：&quot;</span> + msg.getClass());</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端地址：&quot;</span> + channelHandlerContext.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">            HttpRequest request = (HttpRequest) msg;</span><br><span class="line">            <span class="comment">// 获取uri，过滤指定资源</span></span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(request.uri());</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;/favicon.ico&quot;</span>.equals(uri.getPath()))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请求了favicon.ico，不做响应&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 回复信息给浏览器(满足http协议)</span></span><br><span class="line">            ByteBuf buf = Unpooled.copiedBuffer(<span class="string">&quot;hello，我是服务器&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">            <span class="comment">// 构造一个Http响应</span></span><br><span class="line">            DefaultFullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1,</span><br><span class="line">                    HttpResponseStatus.OK,</span><br><span class="line">                    buf);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH,buf.readableBytes());</span><br><span class="line">            <span class="comment">// 将构建好的response返回</span></span><br><span class="line">            channelHandlerContext.writeAndFlush(response);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> TestServerInitializer());</span><br><span class="line">            ChannelFuture channelFuture = b.bind(<span class="number">8088</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-核心模块组件</title>
    <url>/2020/08/14/Netty-%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="netty-核心模块组件">Netty-核心模块组件</h1>
<h2 id="bootstrapserverbootstrap">Bootstrap、ServerBootstrap</h2>
<ol type="1">
<li><p>Bootstrap意思是引导，一个Netty应用通常由一个Bootstrap开始，主要作用是配置整个Netty程序，串联各个组件，Netty中Bootstrap类是客户端程序的启动引导类，ServerBootstrap是服务端启动引导类</p></li>
<li><p>常见的方法有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该方法用于服务器端，用来设置两个EventLoopGroup</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerBootstrap <span class="title">group</span><span class="params">(EventLoopGroup parentGroup, EventLoopGroup childGroup)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 该方法用于客户端，用来设置一个EventLoopGroup</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerBootstrap <span class="title">group</span><span class="params">(EventLoopGroup group)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 该方法用来设置一个服务器端的通道实现</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">channel</span><span class="params">(Class&lt;? extends C&gt; channelClass)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 用来给ServerChannel添加配置</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> &lt;T&gt; B <span class="title">option</span><span class="params">(ChannelOption&lt;T&gt; option, T value)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 用来给接收到的通道添加配置</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> &lt;T&gt; ServerBootstrap <span class="title">childOption</span><span class="params">(ChannelOption&lt;T&gt; childOption, T value)</span></span></span><br><span class="line"><span class="function"><span class="comment">// handler对应bossGroup</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">handler</span><span class="params">(ChannelHandler handler)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 用来设置业务处理类(自定义的handler)，对应workerGroup</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerBootstrap <span class="title">childHandler</span><span class="params">(ChannelHandler childHandler)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 用于服务器端，用来设置占用的端口号</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">bind</span><span class="params">(<span class="keyword">int</span> inetPort)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 用于客户端，用来连接服务器</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">connect</span><span class="params">(String inetHost, <span class="keyword">int</span> inetPort)</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="future和channelfuture">Future和ChannelFuture</h2>
<ol type="1">
<li><p>Netty中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理。但可以过一会等它执行完成或直接注册一个监听，具体的实现就是通过Future和ChannelFuture，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发监听事件</p></li>
<li><p>常见的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回当前正在进行IO操作的通道</span></span><br><span class="line"><span class="function">Channel <span class="title">channel</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 等待异步操作执行完毕</span></span><br><span class="line"><span class="function">ChannelFuture <span class="title">sync</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="channel">Channel</h2>
<ol type="1">
<li>Netty 网络通信的组件，能够用于执行网络I/O操作</li>
<li>通过Channel可获得当前网络连接的通道的状态</li>
<li>通过Channel可获得网络连接的配置参数</li>
<li>Channel提供异步的网络I/O操作(如建立连接、读写、绑定端口)，异步调用意味着任何I/O调用都将立即返回，并且不保证在调用结束时所请求的I/O操作已完成</li>
<li>调用立即返回一个ChannelFuture实例，通过注册监听器到ChannelFuture上，可以I/O操作成功、失败或取消时回调通知调用方</li>
<li>支持关联I/O操作与对应的处理程序</li>
<li>不同协议、不同的阻塞类型的连接都有不同的Channel类型与之对应，常用Channel类型
<ul>
<li>NioSocketChannel：异步的客户端TCP Socket连接</li>
<li>NioServerSocketChannel：异步的服务器端TCP Socket连接</li>
<li>NioDatagrapChannel：异步的UDP连接</li>
<li>NioSctpChannel：异步的客户端Sctp连接</li>
<li>NioSctpServerChannel：异步的Sctp服务器端连接</li>
</ul></li>
</ol>
<h2 id="selector">Selector</h2>
<ol type="1">
<li>Netty基于Selector对象实现I/O多路复用，通过Selector一个线程可以监听多个连接的Channel事件</li>
<li>当向一个Selector中注册Channel后，Selector内部的机制就可以自动不断地查询(Select)这些注册的Channel是否有已就绪的I/O事件(例如可读、可写、网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个Channel</li>
</ol>
<h2 id="channelhandler及其实现类">ChannelHandler及其实现类</h2>
<ol type="1">
<li>ChannelHandler是一个接口，处理I/O事件或拦截I/O操作，并将其转发到其ChannelPipeline(业务处理链)中的下一个处理程序</li>
<li>ChannelHandler本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用起见，可以继承它的子类</li>
<li>经常需要自定义一个Handler类去继承ChannelInboundHandlerAdapter，然后重写相应的方法实现业务逻辑</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">ChannelInboundHandler</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 通道就绪事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelActive();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通道读取数据事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数据读取完毕事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelReadComplete();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 通道发生异常事件</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireExceptionCaught(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="pipeline和channelpipeline">Pipeline和ChannelPipeline</h2>
<p><strong>ChannelPipeline是一个重点：</strong></p>
<ol type="1">
<li><p>ChannelPipeline是一个Handler的集合，它负责处理和拦截inbound或者outbound的事件和操作，相当于一个贯穿Netty的链(<strong>也可以这样理解：ChannelPipeline是保存ChannelHandler的List，用于处理器或拦截Channel的入站事件和出站操作</strong>)</p></li>
<li><p>ChannelPipeline实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及Channel中各个的ChannelHandler如何相互交互</p></li>
<li><p>在Netty中每个Channel都有且仅有一个ChannelPipeline与之对应，它们的组成关系如下</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/ChannelPipeline.png" /></p>
<ul>
<li>一个Channel包含了一个ChannelPipeline，而ChannelPipeline中又维护了一个由ChannelHandlerContext 组成的双向链表，并且每个ChannelHandlerContext中又关联着ChannelHandler</li>
<li>入站事件和出站事件在一个双向链表中，入站事件会从链表head往后传递到最后一个入站的handler，出站事件会从链表tail往前传递到最前一个出站的handler，两种类型的handler互不干扰</li>
</ul></li>
<li><p>常用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把一个业务处理类(handler)添加到链中的第一个位置</span></span><br><span class="line"><span class="function">ChannelPipeline <span class="title">addFirst</span><span class="params">(ChannelHandler... handlers)</span></span>;</span><br><span class="line"><span class="comment">// 把一个业务处理类(handler)添加到链中的最后一个位置</span></span><br><span class="line"><span class="function">ChannelPipeline <span class="title">addLast</span><span class="params">(ChannelHandler... handlers)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="channelhandlercontext">ChannelHandlerContext</h2>
<ol type="1">
<li><p>保存Channel相关的所有上下文信息，同时关联一个ChannelHandler对象</p></li>
<li><p>即ChannelHandlerContext中包含一个具体的事件处理器ChannelHandler，同时ChannelHandlerContext中也绑定了对应的pipeline和Channel的信息，方便对ChannelHandler进行调用</p></li>
<li><p>常用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line"><span class="function">ChannelFuture <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 刷新</span></span><br><span class="line"><span class="function">ChannelOutboundInvoker <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 将数据写到ChannelPipeline中当前ChannelHandler的下一个ChannelHandler开始处理(出站)</span></span><br><span class="line"><span class="function">ChannelFuture <span class="title">writeAndFlush</span><span class="params">(Object msg)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="channeloption">ChannelOption</h2>
<ol type="1">
<li><p>Netty在创建Channel实例后，一般都需要设置ChannelOption参数</p></li>
<li><p>ChannelOption参数：</p>
<blockquote>
<p><strong>ChannelOption.SO_BACKLOG</strong>：</p>
<p>对应TCP/IP协议listen函数中backlog参数，用来初始化服务器可连接队列大小，服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接。多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列大小</p>
<p><strong>ChannelOption.SO_KEEPALIVE</strong>：</p>
<p>一直保持连接活动状态</p>
</blockquote></li>
</ol>
<h2 id="eventloopgroup和其实现类nioeventloopgroup">EventLoopGroup和其实现类NioEventLoopGroup</h2>
<ol type="1">
<li><p>EventLoopGroup是一组EventLoop的抽象，Netty为了更好的利用多核CPU资源，一般会有多个EventLoop同时工作，每个EventLoop维护着一个Selector实例</p></li>
<li><p>EventLoopGroup提供next接口，可以从组里面按照一定规则获取其中一个EventLoop来处理任务。在Netty服务器端编程中，一般都需要提供两个EventLoopGroup，如：BossEventLoopGroup和WorkerEventLoopGroup</p></li>
<li><p>通常一个服务端口，即一个ServerSocketChannel对应一个Selector和一个EventLoop线程。BossEventLoop负责接收客户端的连接并将SocketChannel交给WorkerEventLoopGroup来进行IO处理</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/EventLoop.png" /></p></li>
</ol>
<blockquote>
<ul>
<li>BossEventLoopGroup通常是一个单线程的EventLoop，EventLoop维护着一个注册了ServerSocketChannel的Selector实例BossEventLoop不断轮询Selector将连接事件分离出来</li>
<li>通常是OP_ACCEPT事件，然后将接收到的SocketChannel交给WorkerEventLoopGroup</li>
<li>WorkerEventLoopGroup会由next选择其中一个EventLoopGroup来将这个SocketChannel注册到其维护的Selector并对其后续的IO事件进行处理</li>
</ul>
</blockquote>
<ol start="4" type="1">
<li><p>常用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioEventLoopGroup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 断开连接，关闭线程</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;?&gt; <span class="title">shutdownGracefully</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="unpooled类">Unpooled类</h2>
<ol type="1">
<li><p>Netty提供一个专门用来操作缓冲区(即Netty的数据容器)的工具类</p></li>
<li><p>常用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过给定的数据和字符编码返回一个ByteBuf对象，与NIO中的ByteBuffer类似，但有区别</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuf <span class="title">copiedBuffer</span><span class="params">(CharSequence string, Charset charset)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>举例说明Unpooled获取Netty的数据容器ByteBuf的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyByteBuf01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个ByteBuf</span></span><br><span class="line">        <span class="comment">// 说明：</span></span><br><span class="line">        <span class="comment">// 1. 创建对象，该对象包含一个数组arr，是一个byte[10]</span></span><br><span class="line">        <span class="comment">// 2. 在netty的buffer中，不需要使用flip进行反转</span></span><br><span class="line">        <span class="comment">//    底层维护了readerIndex和writeIndex</span></span><br><span class="line">        <span class="comment">// 3. 通过readIndex和writeIndex和capacity，将buffer分成三个区域</span></span><br><span class="line">        <span class="comment">//    0 - readIndex：已读区</span></span><br><span class="line">        <span class="comment">//    readIndex - writeIndex：可读区</span></span><br><span class="line">        <span class="comment">//    writeIndex - capacity：可写区</span></span><br><span class="line">        ByteBuf buf = Unpooled.buffer(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            buf.writeByte(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buf.capacity(); i++) &#123;</span><br><span class="line">            System.out.println(buf.readByte());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-概述</title>
    <url>/2020/08/09/Netty-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="netty-概述">Netty-概述</h1>
<h2 id="原生nio存在的问题">原生NIO存在的问题</h2>
<ol type="1">
<li>NIO的类库和API繁杂，使用麻烦：需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等</li>
<li>需要具备其它的额外技能：要熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，必须对多线程和网络编程非常熟悉</li>
<li>开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等</li>
<li>JDK NIO的BUG：例如Epoll Bug，它会导致Selector空轮询，最终导致CPU100%，直到JDK1.7版本该问题仍旧存在，没有被根本解决</li>
</ol>
<h2 id="netty官网说明">Netty官网说明</h2>
<p><a href="https://netty.io">Netty is an asynchronous event-driven network application framework* for rapid development of maintainable high performance protocol servers &amp; clients.</a></p>
<figure>
<img src="https://netty.io/images/components.png" alt="netty" /><figcaption>netty</figcaption>
</figure>
<ol type="1">
<li>Netty是由JBOSS提供的一个Java开源框架，Netty提供异步的、基于事件驱动的网络应用程序框架，用心快速开发高性能、高可靠性的网络IO程序</li>
<li>Netty可以帮助你快速、简单的开发出一个网络应用，相当于简化和流程化了NIO开发过程</li>
<li>Netty是目前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，知名的Elasticsearch、Dubbo框架内部都采用了Netty</li>
</ol>
<h2 id="netty的优点">Netty的优点</h2>
<ol type="1">
<li>Netty对JDK自带的NIO的API进行了封装，解决了上述问题</li>
<li>设计优雅：适用于各种传输类型的统一API阻塞和非阻塞Socket；基于灵活且可扩展的事件模型，可以清晰地分离关注点；高度可定制的线程模型-单线程，一个或多个线程池</li>
<li>使用方便：详细记录的JavaDoc，用户指南和示例；没有其它依赖项，JDK5(Netty 3.x)或6(Netty 4.x)就足够了</li>
<li>高性能、吞吐量更高：延迟更低；减少资源消耗；最小化不必要的内存复制</li>
<li>安全：完整的SSL/TLS和StartTLS支持</li>
<li>社区活跃、不断更新：社区活跃，版本迭代周期短，发现的Bug可以及时修复，同时，更多的新功能会被加入</li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-线程模型</title>
    <url>/2020/08/11/Netty-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="netty-线程模型">Netty-线程模型</h1>
<h2 id="线程模型基本介绍">线程模型基本介绍</h2>
<ol type="1">
<li>不同的线程模式，对程序的性能有很大的影响，为了搞情清Netty的线程模式，首先来系统了解各个线程模式，最后再看Netty线程模式有什么优越性</li>
<li>目前存在的线程模型有：
<ul>
<li>传统阻塞I/O服务模型</li>
<li>Reactor模式</li>
</ul></li>
<li>根据Reactor的数量和处理资源池线程的数量不同，有3种典型的实现
<ul>
<li>单Reactor单线程</li>
<li>单Reactor多线程</li>
<li>主从Reactor多线程</li>
</ul></li>
<li>Netty线程模式(Netty主要<strong>基于主从Reactor多线程模型</strong>做了一定的改进，其中主从Reactor多线程模型有多个Reactor)</li>
</ol>
<h2 id="服务模型原理图">服务模型原理图</h2>
<p>黄色框表示对象，蓝色框表示线程，白色框表示方法(API)</p>
<h3 id="传统阻塞io服务模型">传统阻塞I/O服务模型</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/%E4%BC%A0%E7%BB%9FIO.png" /></p>
<h4 id="特点">特点</h4>
<ol type="1">
<li>采用阻塞IO模式获取输入的数据</li>
<li>每个连接都需要独立的线程完成数据的输入、业务处理、数据返回</li>
</ol>
<h4 id="问题分析">问题分析</h4>
<ol type="1">
<li>当并发数很大，就会创建大量的线程，占用很大系统资源</li>
<li>连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在read操作，造成线程资源浪费</li>
</ol>
<h3 id="reactor模式">Reactor模式</h3>
<p>Reactor对应的叫法：</p>
<ol type="1">
<li>反应器模式</li>
<li>分发者模式(Dispatcher)</li>
<li>通知者模式(notifier)</li>
</ol>
<h4 id="针对传统阻塞io服务模型的2个缺点解决方案">针对传统阻塞I/O服务模型的2个缺点，解决方案</h4>
<ol type="1">
<li>基于I/O复用模型：多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li>
<li>基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务</li>
</ol>
<p>简单图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/reactor.png" /></p>
<p>详细图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/reactor-detail.png" /></p>
<p>说明：</p>
<ol type="1">
<li>Reactor模式，通过一个或多个输入同时传递给服务处理器的模式(基于事件驱动)</li>
<li>服务器端程序处理传入的多个请求，并将它们同步分派到相应的处理线程，因此Reactor模式也叫Dispatcher模式</li>
<li>Reactor模式使用IO复用监听事件 ，收到事件后，分发给某个线程(进程)，这是网络服务器高并发处理的关键</li>
</ol>
<h4 id="reactor模式中核心组成">Reactor模式中核心组成</h4>
<ol type="1">
<li>Reactor： Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线程转移到适当的联系人</li>
<li>Handlers：处理程序执行I/O事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。Reactor通过高度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作。</li>
</ol>
<h4 id="reactor模式分类">Reactor模式分类</h4>
<p>根据Reactor的数量和处理资源池线程的数量不同，有3种典型实现</p>
<ol type="1">
<li>单Reactor单线程</li>
<li>单Reactor多线程</li>
<li>主从Reactor多线程</li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-编解码器和handler的调用机制</title>
    <url>/2020/08/19/Netty-%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E5%92%8Chandler%E7%9A%84%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="netty-编解码器和handler的调用机制">Netty-编解码器和handler的调用机制</h1>
<h2 id="基本说明">基本说明</h2>
<ol type="1">
<li><p>netty的组件设计：Netty的主要组件有Channel、EventLoop、ChannelFuture、ChannelHandler、ChannelPipe等</p></li>
<li><p>ChannelHandler充当了处理入站和出站数据的应用程序逻辑的容器。如：实现ChannelInboundHandler接口(或ChannelInboundHandlerAdapter)，就可以接收入站事件和数据，这些数据会被业务逻辑处理。当要给客户端发送响应时，也可以从ChannelInboundHandler冲刷数据。业务逻辑通常写在一个或多个ChannelInboundHandler中。ChannelOutboundHandler原理一样，只不过它是用来处理出站数据的</p></li>
<li><p>ChannelPipeline提供了ChannelHandler链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么称这些事件为出站的，即客户端发送给服务端的数据会通过pipeline中的一系列ChannelOutboundHandler，并被这些Handler处理，反之则称为入站的(从客户端角度判断是出/入站)</p>
<blockquote>
<p>出站要编码，入站要解码</p>
<p>出站对应写，入站对应读</p>
</blockquote></li>
</ol>
<h2 id="编码解码器">编码解码器</h2>
<ol type="1">
<li>当Netty发送或接收一个消息时，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式(比如java对象)；如果是出站消息，它就会被编码成字节</li>
<li>Netty提供一系列实用的编解码器，他们都实现了ChannelInboundHandler或ChannelOutboundHandler接口。在这些类中，channelRead方法已经被重写了。以入站为例，对于每个从入站Channel读取的消息，这个方法会被调用。然后，它将调用由解码器所提供的decode()方法进行解码，并将已经解码的字节转发给ChannelPipeline中的下一个ChannelInboundHandler</li>
</ol>
<h3 id="解码器-bytetomessagedecoder">解码器-ByteToMessageDecoder</h3>
<ol type="1">
<li><p>关系继承图</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/ByteToMessageDecoder.png" /></p></li>
<li><p>由于不可能知道远程节点是否会一次性发送一个完整的信息，tcp有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理</p></li>
<li><p>一个关于ByteToMessageDecoder实例分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToIntegerDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(in.readableBytes() &gt;= <span class="number">4</span>)&#123;</span><br><span class="line">            out.add(in.readInt());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：</p>
<ol type="1">
<li><p>这个例子，每次入站从ByteBuf中读取4字节，将其解码为一个int，然后将它添加到下一个List中，当没有更多元素可以被添加到该List中时，它的内容将会被发送给下一个ChannelInboundHandler。int在被添加到List中时，会被自动装箱为Integer。在调用readInt()方法前必须验证所输入的ByteBuf是否具有足够的数据</p></li>
<li><p>decode执行分析图</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/decode-analyse.png" /></p></li>
</ol>
</blockquote></li>
</ol>
<h3 id="解码器-replayingdecoder">解码器-ReplayingDecoder</h3>
<ol type="1">
<li><p>public abstract class ReplayingDecoder&lt; S &gt; extends ByteToMessageDecoder</p></li>
<li><p>ReplayingDecoder扩展了ByteToMessageDecoder类，使用这个类，我们不必调用readableBytes()方法。参数S指定了用户状态管理的类型，其中Void代表不需要状态管理</p></li>
<li><p>应用实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyByteToLongDecoder2</span> <span class="keyword">extends</span> <span class="title">ReplayingDecoder</span>&lt;<span class="title">Void</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 在ReplayingDecoder不需要判断数据是否足够读取，内部会进行处理判断</span></span><br><span class="line">        out.add(in.readLong());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ReplayingDecoder使用方便，但它也有一些局限性：</p>
<ul>
<li>并不是所有的ByteBuf操作都被支持，如果调用了一个不被支持的方法，将会抛出一个UnsupportedOperationException</li>
<li>ReplayingDecoder在某些情况下可能稍慢于ByteToMessageDecoder，例如网络缓慢并且消息格式复杂时，消息会被拆成了多个碎片，速度变慢</li>
</ul></li>
</ol>
<h3 id="其它解码器">其它解码器</h3>
<ol type="1">
<li>LineBasedFrameDecoder：这个类在Netty内部也有使用，它使用行尾控制字符()作为分隔符来解析数据</li>
<li>DelimiterBasedFrameDecoder：使用自定义的特殊字符作为消息的分隔符</li>
<li>HttpObjectDecoder：一个HTTP数据的解码器</li>
<li>LengthFieldBasedFrameDecoder：通过指定长度来标识整包消息，这样就可以自动处理粘包和半包消息</li>
</ol>
<h2 id="netty的handler调用机制">Netty的handler调用机制</h2>
<h3 id="实例">实例</h3>
<h4 id="示意图">示意图</h4>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/handler-example.png" /></p>
<h4 id="代码">代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> MyServerInitializer());</span><br><span class="line">            ChannelFuture channelFuture = b.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">        <span class="comment">// 入站handler解码</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyByteToLongDecoder());</span><br><span class="line">        <span class="comment">// 出站handler编码</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyLongToByteEncoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyByteToLongDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * decode会根据接收的数据，被调用多次，直到确定没有新的元素被添加到list</span></span><br><span class="line"><span class="comment">     * 或是Bytebuf没有更多的可读字节为止</span></span><br><span class="line"><span class="comment">     * 如果List out不为空，就会将list的内容传递给下一个ChannelInboundHandler处理</span></span><br><span class="line"><span class="comment">     * 该处理器的方法也会调用多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in  入站的ByteBuf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out List集合，将解码后的数据传给下一个Handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(in.readableBytes() &gt;= <span class="number">8</span>)&#123;</span><br><span class="line">            out.add(in.readLong());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Long msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从客户端&quot;</span>+ctx.channel().remoteAddress() + <span class="string">&quot; 读取到long：&quot;</span>+msg);</span><br><span class="line">        <span class="comment">// 给客户端发送一个Long</span></span><br><span class="line">        ctx.writeAndFlush(<span class="number">654321L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(group)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> MyClientInitializer());</span><br><span class="line">            ChannelFuture channelFuture = b.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClientInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyLongToByteEncoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyByteToLongDecoder());</span><br><span class="line"></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> MyClientHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLongToByteEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, Long msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyLongToByteEncoder encode 被调用&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;msg=&quot;</span>+msg);</span><br><span class="line">        out.writeLong(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Long msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器&quot;</span>+ctx.channel().remoteAddress() + <span class="string">&quot; 回送消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyClientHandler 发送数据&quot;</span>);</span><br><span class="line">        <span class="comment">//        ctx.writeAndFlush(123456L);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分析：</span></span><br><span class="line"><span class="comment">         * 1. &quot;abcdabcdabcdabcd&quot; 是16个字节</span></span><br><span class="line"><span class="comment">         * 2. 该处理器的前一个handler 是 MyLongToByteEncoder</span></span><br><span class="line"><span class="comment">         * 3. MyLongToByteEncoder父类是 MessageToByteEncoder</span></span><br><span class="line"><span class="comment">         * 4. 父类中的write方法中会判断数据是否应该处理的类型，如果不是则会跳过encode</span></span><br><span class="line"><span class="comment">         * 5. 因此编写Encoder需要注意传入的数据类型和处理的数据类型一致</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;abcdabcdabcdabcd&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结论">结论</h4>
<blockquote>
<ol type="1">
<li>不论解码器handler还是编码器handler即接收的消息类型必须与待处理的消息类型一致，否则该handler不会被执行</li>
<li>在解码器进行数据解码时，需要判断缓存区(ByteBuf)的数据是否足够，否则接收到的结果可能会和期望结果不一致</li>
</ol>
</blockquote>
<h2 id="log4j整合到netty">Log4j整合到Netty</h2>
<ol type="1">
<li>在Maven中添加对Log4j的依赖</li>
<li>配置Log4j，在resources/log4j.properties</li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx入门</title>
    <url>/2020/04/22/Nginx/</url>
    <content><![CDATA[<h1 id="nginx入门">Nginx入门</h1>
<h2 id="基本概念">基本概念</h2>
<h3 id="nginx是什么能做什么">Nginx是什么，能做什么</h3>
<p><a href="https://baike.baidu.com/item/nginx/3817705?fr=aladdin">Nginx是一个高性能的HTTP和反向代理web服务器，特点是占有内存少，并发能力强</a></p>
<h3 id="反向代理">反向代理</h3>
<ol type="1">
<li>正向代理
<ul>
<li>如果把局域网的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</li>
<li>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问</li>
</ul></li>
<li>反向代理
<ul>
<li>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</li>
</ul></li>
</ol>
<h3 id="负载均衡">负载均衡</h3>
<p>单个服务器解决不了高并发请求服务器满足不了的问题，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是<strong>负载均衡</strong></p>
<h3 id="动静分离">动静分离</h3>
<p>为了加快网络的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p>
<h2 id="安装命令和配置文件">安装、命令和配置文件</h2>
<h3 id="安装">安装</h3>
<p>docker中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker run --name mynginx -p 8888:80  -d nginx</span><br><span class="line">docker start mynginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker exec -it mynginx bash </span><br></pre></td></tr></table></figure>
<h3 id="常用命令">常用命令</h3>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nginx的版本号</span></span><br><span class="line"><span class="attribute">nginx</span> -v</span><br><span class="line"><span class="comment"># 关闭nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">nginx </span><br><span class="line"><span class="comment"># 重新加载</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<h3 id="配置文件">配置文件</h3>
<p>docker中配置文件位置：/etc/nginx/nginx.conf</p>
<p>配置文件的三部分</p>
<ol type="1">
<li><p>全局块</p>
<ul>
<li>从配置文件到events块之间的内容，主要设置一些影响nginx服务器整体运行的配置指令，主要包括配置运行Nginx服务器的用户（组）、允许生成的worker process数、进程PID存放路径、日志存放路径和类型以及配置文件的引入</li>
<li><code>worker_processes 1;</code>，其中worker_processes值越大，可以支持的并发处理量就越多，但会受到硬件、软件等设备的制约</li>
</ul></li>
<li><p>events块</p>
<ul>
<li>events块涉及的指令主要影响Nginx服务器与用户的网络连接，常用的设置包括是否开启对多work process下的网络连接进行序列化、是否允许同时接收多个网络连接、选取哪种事件驱动模型来处理连接请求、每个word process可以同时支持的最大连接数等</li>
<li><code>worker_connections 1024;</code>表示每个work process支持的最大连接数为1024</li>
<li>这部分对Nginx的性能影响较大</li>
</ul></li>
<li><p>http块</p>
<ul>
<li><p>Nginx服务器配置最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里</p></li>
<li><p>http块又包括http全局块、server块</p></li>
<li><p>http全局块</p>
<ul>
<li>http全局块配置的指令包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单连接请求数上限等</li>
</ul></li>
<li><p>server块（在较新版本中的存放位置：/etc/nginx/conf.d/default.conf）</p>
<ul>
<li><p>和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网硬件成本。每个http块可包括多个server块，而每个server块就相当于一个虚拟主机，而每个server块也分为全局server块，以及可同时包含多个location块</p></li>
<li><p>全局server块</p>
<p>最常见的配置是本虚拟主机的监听配置和本虚拟主机的名称或IP配置</p>
<p>listen：端口号</p>
<p>server_name ：主机名称</p></li>
<li><p>location块</p>
<p>一个server块可以配置多个location块。主要作用是基于Nginx服务器接收到的请求字符串，对虚拟主机名称（也可以是IP别名）之外的字符串进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p></li>
</ul></li>
</ul></li>
</ol>
<h2 id="配置实例">配置实例</h2>
<h3 id="配置反向代理">配置反向代理</h3>
<h4 id="案例1">案例1</h4>
<ol type="1">
<li><p>实现效果</p>
<ul>
<li>打开浏览器，在浏览器地址栏中输入地址www.123.com，跳转到tomcat页面</li>
</ul></li>
<li><p>具体实现</p>
<ol type="1">
<li><p>在host文件中配置配置dns解析，将www.123.com解析到本地地址</p></li>
<li><p>在nginx进行请求转发配置（反向代理）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen	80;</span><br><span class="line">	server_name 服务器地址;</span><br><span class="line">	location / &#123;</span><br><span class="line">		root html;</span><br><span class="line">		proxy_pass http://127.0.0.1:8080;</span><br><span class="line">		index index.html</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol></li>
</ol>
<h4 id="案例2">案例2</h4>
<ol type="1">
<li><p>实现效果，监听端口8888，访问http://127.0.0.1:8888/a/ 直接跳转到127.0.0.1:8080；访问http://127.0.0.1:8888/b/直接跳转到127.0.0.1:8081</p></li>
<li><p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen	8888;</span><br><span class="line">	server_name 服务器地址;</span><br><span class="line">	# ~表示正则表达式形式</span><br><span class="line">	location ~ /a/ &#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:8080;</span><br><span class="line">	&#125;</span><br><span class="line">	location ~ /b/ &#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:8081;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件中符号说明：</p>
<p>~：用于表示uri包含正则表达式，并且区分大小写</p>
<p>=：用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求</p>
<p>~*：用于表示uri包含正则表达式，并且不区分大小写</p>
<p>^~：用于不含正则表达式的uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配</p>
<blockquote>
<p>注意：如果uri包含正则表达式，则必须要有<sub>或</sub>*标识</p>
</blockquote></li>
</ol>
<h3 id="配置负载均衡">配置负载均衡</h3>
<ol type="1">
<li><p>实现效果，浏览器输入地址http://192.168.1.1/a.html，负载均衡效果，平均分配到8080和8081端口中</p></li>
<li><p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen	8888;</span><br><span class="line">	server_name 服务器地址;</span><br><span class="line">	upstream myserver&#123;</span><br><span class="line">		server 192.168.1.1:8080 weight=1;</span><br><span class="line">		server 192.168.1.1:8081 weight=1;</span><br><span class="line">	&#125;</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://myserver;</span><br><span class="line">		root hml;</span><br><span class="line">		index index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Nginx提供了几种分配方式：</p>
<ol type="1">
<li>轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down调，能自动剔除</li>
<li>weight：weight代表权重，默认为1,权重越高，被分配的客户端越多，指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况</li>
<li>ip_hash：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题</li>
<li>fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配</li>
</ol></li>
</ol>
<h3 id="配置动静分离">配置动静分离</h3>
<p>目录实现角度大致分两种：</p>
<ol type="1">
<li>纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案</li>
<li>动态根静态文件混合一直发布，通过nginx来分开</li>
</ol>
<p>案例：</p>
<ol type="1">
<li><p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen	<span class="number">8888</span>;</span><br><span class="line">	server_name 服务器地址;</span><br><span class="line">	</span><br><span class="line">	location /www/ &#123;</span><br><span class="line">		root /data/;</span><br><span class="line">		index index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">    location /image/ &#123;</span><br><span class="line">        root /data/;</span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="配置高可用集群">配置高可用集群</h3>
<ol type="1">
<li><p>什么是Nginx的高可用</p>
<ul>
<li>两台Nginx服务器</li>
<li>keepalived</li>
<li>虚拟ip</li>
<li>完成当一个Nginx宕机后，仍然可用的功能</li>
</ul></li>
<li><p>配置高可用的准备工作</p>
<ol type="1">
<li>需要两台服务器 192.168.1.1 和192.168.1.2</li>
<li>在两台服务器上安装nginx</li>
<li>在两台服务器上安装keepalived：yum install keepalived -y</li>
</ol></li>
<li><p>分别在两台服务器上配置/etc/keepalived/keepalived.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global_defs &#123;					#全局配置</span><br><span class="line">	notification_email &#123;		#指定keepalived在发生切换时需要发送email到的对象，一行一个</span><br><span class="line">		acassen@firewall.loc	#指定收件人邮箱</span><br><span class="line">		failover@firewall.loc</span><br><span class="line">		sysadmin@firewall.loc</span><br><span class="line">	&#125;</span><br><span class="line">	notification_email_from Alexandre.Cassen@firewall.loc #指定发件人</span><br><span class="line">	smtp_server 192.168.1.129	#指定smtp服务器地址</span><br><span class="line">	smtp_connect_timeout 30		#指定smtp连接超时时间</span><br><span class="line">	router_id LVS_DEVEL			#此处注意router_id为负载均衡标识，在局域网内应该是唯一的。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_http_port &#123;		# 脚本配置</span><br><span class="line">    script &quot;/usr/local/src/nginx_check.sh&quot; # 检测脚本</span><br><span class="line">    interval 2		# 检测脚本执行的间隔</span><br><span class="line">    weight 2		# 权重</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;	# 虚拟配置</span><br><span class="line">    state MASTER	# 备份服务器上将MASTER改为BACKUP</span><br><span class="line">    interface eth3s0f1	# 网卡</span><br><span class="line">    virtual_router_id 51 #主、备机的virtual_router_id必须相同</span><br><span class="line">    priority 100	# 主、备机取不同的优先级，主机值较大，备份机值较小</span><br><span class="line">    advert_int 1	# 时间间隔，每隔1s发送心跳检测主机是否存活</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111  #此密码最多只支持八位数，建议密码不要设置太复杂，要尽可能简单，最好不要有特殊字符、汉字。</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.50	# 虚拟地址</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写nginx_check.sh脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ! /bin/bash</span></span><br><span class="line">A=`ps -C nginx -no-header | wc -l`</span><br><span class="line">if [ $A -eq 0 ] ;then</span><br><span class="line">	nginx	# Nginx启动</span><br><span class="line">	sleep 2</span><br><span class="line">	if [ `ps -C nginx --no-header | wc -l` -eq 0 ];then</span><br><span class="line">		killall keepalived</span><br><span class="line">	fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p>启动Nginx和keepalived</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx</span><br><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="基本原理">基本原理</h2>
<ol type="1">
<li><p>master&amp;worker</p>
<p>使用一个master进程和多个worker进程，一个master进程发送信号给多个worker进程</p></li>
<li><p>worker如何进行工作</p>
<p>当一个client给master时，多个worker争抢client</p></li>
<li><p>一个master和多个worker的好处</p>
<ol type="1">
<li>对于每个worker进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多，其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master进程则很快启动新的worker进程。当然，worker进程的异常退出，肯定是程序有bug了，异常退出，会导致当前worker上的所有请求失败，不过不会影响到所有请求，所以降低了风险。</li>
<li>可以使用nginx -s reload热部署，利用nginx进程热部署操作</li>
</ol></li>
<li><p>设置多少个worker</p>
<p>Nginx同redis类似，都采用了io多路复用机制，每个worker都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求，即时是成千上万个请求也不在话下。每个worker的线程可以把一个cpu的性能发挥到极致。所以<code>worker数和服务器的cpu数相等是最为适宜的</code>。设少了会浪费CPU，设多了会造成CPU频繁切换上下文带来损耗。</p></li>
<li><p>设置worker数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes 4</span><br><span class="line"># work绑定cpu(4work绑定4cpu)</span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000</span><br><span class="line"># work绑定cpu (4work绑定8CPU中的4个)</span><br><span class="line">worker_cpu_affinity 00000001 00000010 00000100 00001000</span><br></pre></td></tr></table></figure></li>
<li><p>连接数worker_connection</p>
<p>这个值是表示每个worker进程所能建立连接的最大值，所以，一个nginx能建立的最大连接数，应该是worker_connections<em>worker_processes。当然，这里说的是最大连接数，对于HTTP请求本地资源来说，能够支持的最大并发数量是worker_connections </em> worker_processes，如果支持http1.1的浏览器，每次访问要占用两个连接，所以普通的静态访问最大并发数是：worker_connections * worker_processes/2，而如果是HTTP作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/4。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接</p>
<p>问题：</p>
<ol type="1">
<li><p>发送请求，占用worker的几个连接数？</p>
<p>答案：2个或4个</p></li>
<li><p>Nginx有一个master，四个worker，每个worker支持最大的连接数据1024,支持的最大并发数是多少？</p>
<ul>
<li>普通静态访问最大并发数：worker_connections * worker_processes / 2</li>
<li>而如果是HTTP作为反向代理，最大并发数量是： worker_connections * worker_processes/4</li>
</ul></li>
</ol></li>
</ol>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Other</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/2019/10/20/NodeJS/</url>
    <content><![CDATA[<h1 id="node.js">Node.js</h1>
<h2 id="知识点">知识点</h2>
<ul>
<li>模块系统
<ul>
<li>核心模块</li>
<li>第三方模块</li>
<li>自己写的模块</li>
</ul></li>
<li>npm</li>
<li>package.json</li>
<li>Express
<ul>
<li>第三方Web开发框架</li>
<li>高度封装了http模块</li>
<li>更加专注于业务，而非底层细节</li>
<li>知其所以然</li>
</ul></li>
<li>增删改查
<ul>
<li>使用文件来保存数据(锻炼异步编码)</li>
</ul></li>
<li>MongoDB
<ul>
<li>所有方法都封装好了</li>
</ul></li>
</ul>
<h2 id="软件开发版本介绍">软件开发版本介绍</h2>
<p>x(新增功能比较多，甚至可能去除了某些功能).x(加入了新功能).x(修复bug，提升性能)</p>
<h2 id="第三方模块">第三方模块</h2>
<ul>
<li>凡是第三方模块都必须通过npm来下载</li>
<li>使用的时候可以通过require('包名')的方式来进行加载才可以使用</li>
<li>不可能有任何一个第三方包和核心模块名字是一样的</li>
<li>既不是核心模块、也不是路径形式的模块
<ul>
<li>先找到当前文件所处目录的node_modules目录</li>
<li>node_modules/art-template</li>
<li>node_modules/art-template/package.json文件</li>
<li>node_modules/art-template/package.json文件中的main属性</li>
<li>main属性中就记录了art-template的入口模块，然后加载使用这个第三方包，实际上最终加载的还是文件</li>
<li>如果package.json文件不存在或者main指定的入口模块是也没有则node会自动找该目录下的index.js，也就是说，index.js会作为一个默认备选项</li>
<li>如果以上所有条件都不成立，则会进入上一级目录中的node_modules目录查找，如果上一级还是没有，则继续往上上级查找，以此类推，如果直到当前磁盘根目录还找不到，则报错。</li>
</ul></li>
<li>注意：一个项目有且只有一个node_modules，放在项目根目录中，这样的话项目中所有的子目录都可以加载到</li>
</ul>
<h2 id="模块查找机制">模块查找机制</h2>
<ul>
<li>优先从缓存加载</li>
<li>核心模块</li>
<li>路径形式的文件模块</li>
<li>第三方模块</li>
</ul>
<h2 id="package.json">package.json</h2>
<p>建议每个项目都要有一个package.json文件(包描述文件，就像产品说明书一样)</p>
<p>这个文件可能通过npm init 的方式来创建</p>
<p>通过npm安装jquery，并在package.json中添加dependencies信息</p>
<p><code>npm install jquery --save</code></p>
<p>如果已经存在package.json文件，并且node_modules删除了，使用<code>npm install</code> 就会自动把package.json中的dependencies中的所有依赖项下载回来。</p>
<h2 id="npm">npm</h2>
<p>node package manager</p>
<ul>
<li><p>查看版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm --version</span><br></pre></td></tr></table></figure></li>
<li><p>升级npm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --global npm</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常用命令">常用命令</h3>
<ul>
<li>npm init
<ul>
<li>npm init -y 可以跳过向导，快速生成</li>
</ul></li>
<li>npm install(npm i)
<ul>
<li>将dependencies中所有依赖项全部安装</li>
</ul></li>
<li>npm install 包名(npm i 包名)
<ul>
<li>仅下载</li>
</ul></li>
<li>npm install --save 包名(npm i -S 包名)
<ul>
<li>下载并保存依赖项(package.json文件中)</li>
</ul></li>
<li>npm uninstall 包名(npm un 包名)
<ul>
<li>只删除，如果有依赖项会依然保存</li>
</ul></li>
<li>npm unstall --save 包名(npm un -S 包名)
<ul>
<li>删除同时，依赖项信息也删除</li>
</ul></li>
<li>npm --help
<ul>
<li>查看使用帮助</li>
</ul></li>
<li>npm 命令 --help
<ul>
<li>查看指定命令的使用帮助</li>
</ul></li>
</ul>
<h2 id="express">Express</h2>
<h3 id="安装">安装</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i express --save</span><br></pre></td></tr></table></figure>
<h3 id="代码基本结构">代码基本结构</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 相当于http.createServer()</span></span><br><span class="line"> <span class="keyword">var</span> app = express()</span><br><span class="line"><span class="comment">// 响应get请求</span></span><br><span class="line"> app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">     res.send(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;Express app is running&#x27;</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="实现热更新">实现热更新</h3>
<p>使用一个第三方工具nodemon实现，nodemon是一个基于node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install nodemon -G</span><br></pre></td></tr></table></figure>
<p>安装完后，使用nodemon启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure>
<p>只要通过nodemon app.js启动服务，则它会监视文件变化，当文件发生变化时，会自动重启服务器</p>
<h3 id="静态服务">静态服务</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用静态资源</span></span><br><span class="line"><span class="comment">// 1. 推荐 使用http://127.0.0.1:3000/public/a.html访问</span></span><br><span class="line">app.use(<span class="string">&#x27;/public/&#x27;</span>,express.static(<span class="string">&#x27;./public/&#x27;</span>))</span><br><span class="line"><span class="comment">// 2. 使用http://127.0.0.1:3000/a.html访问</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./public/&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="express中使用art-template">Express中使用art-template</h3>
<h4 id="安装-1">安装</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install art-template --save</span><br><span class="line">npm install express-art-template --save</span><br></pre></td></tr></table></figure>
<h4 id="配置">配置</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 配置使用art-template模板引擎</span><br><span class="line"> // 第一个参数表示当渲染以.art结尾的文件时，使用art-template模板引擎</span><br><span class="line"> // express-art-template是专门用来在Express中把art-template整合到Express中</span><br><span class="line">app.engine(&#x27;art&#x27;,require(&#x27;express-art-template&#x27;))</span><br></pre></td></tr></table></figure>
<h4 id="使用">使用</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">&#x27;index.html&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Express 为Response对象提供了一个方法：render</span></span><br><span class="line"><span class="comment">// render方法默认是不可使用的，但如果配置了模板引擎就可以使用</span></span><br><span class="line"><span class="comment">// res.render(&#x27;html模板名&#x27;,&#123;模板数据&#125;)</span></span><br><span class="line"><span class="comment">// 第一个参数不能写路径，默认会去项目中的views目录查找该模板文件</span></span><br><span class="line"><span class="comment">// 也就是说Express有一个约定：开发人员把所有的视图文件都放在views目录中</span></span><br><span class="line"><span class="comment">// 如果要修改默认的views目录，则可以</span></span><br><span class="line"><span class="comment">// app.set(&#x27;views&#x27;,render函数的默认路径)</span></span><br></pre></td></tr></table></figure>
<h3 id="在express中获取表单post请求数据">在Express中获取表单POST请求数据</h3>
<p>在express中没有内置获取表单POST请求体的API，这里需要使用第三方包：body-parser</p>
<h4 id="安装-2">安装</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure>
<h4 id="配置-1">配置</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置body-parser</span></span><br><span class="line"><span class="comment">// 只要加入这个配置，则在req请求对象上会多出一个属性：body</span></span><br><span class="line"><span class="comment">// 即 可以直接通过req.body来获取表单POST请求数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure>
<h4 id="获取数据">获取数据</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/post&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 获取表单post请求体数据</span></span><br><span class="line">    <span class="comment">// req.query只能拿get请求参数</span></span><br><span class="line">    <span class="comment">// 使用第三方插件 body-parser</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body)</span><br><span class="line">    <span class="built_in">console</span>.log(req.body.content)</span><br><span class="line">    <span class="comment">// 2. 处理</span></span><br><span class="line">    <span class="comment">// 3. 发送响应</span></span><br><span class="line">    res.send(<span class="built_in">JSON</span>.stringify(req.body, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle</title>
    <url>/2020/02/12/Oracle/</url>
    <content><![CDATA[<h1 id="oracle">Oracle</h1>
<h2 id="创建表">创建表</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">	pid number(<span class="number">20</span>),</span><br><span class="line">    pname varchar2(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="修改表结构">修改表结构</h2>
<h3 id="添加一列">添加一列</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="keyword">add</span> (gender number(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<h3 id="修改列类型">修改列类型</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person modify gender <span class="type">char</span>(<span class="number">1</span>); <span class="comment">-- char类型固定长度，varchar2类型自动扩张</span></span><br></pre></td></tr></table></figure>
<h3 id="修改列名称">修改列名称</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person rename <span class="keyword">column</span> gender <span class="keyword">to</span> sex;</span><br></pre></td></tr></table></figure>
<h3 id="删除一列">删除一列</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="keyword">drop</span> <span class="keyword">column</span> sex;</span><br></pre></td></tr></table></figure>
<h2 id="数据的crud">数据的CRUD</h2>
<h3 id="查询表中记录">查询表中记录</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> person;</span><br></pre></td></tr></table></figure>
<h3 id="添加表中记录">添加表中记录</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person (pid,pname) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>; <span class="comment">-- oracle 事务默认不是自动提交的</span></span><br></pre></td></tr></table></figure>
<h3 id="修改表中记录">修改表中记录</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update person <span class="keyword">set</span> pname<span class="operator">=</span><span class="string">&#x27;李四&#x27;</span> <span class="keyword">where</span> pid <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h3 id="删除表中记录">删除表中记录</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> person;<span class="comment">-- 删除表中全部记录</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> person; <span class="comment">-- 删除表结构</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> person; <span class="comment">-- 先删除表，再创建表，效果相当于删除表中全部记录</span></span><br><span class="line"><span class="comment">-- 在数据量大的情况下，尤其在表中带有索引的情况下，该操作效率高</span></span><br><span class="line"><span class="comment">-- 索引可以提供查询效率，但会影响增删改效率</span></span><br></pre></td></tr></table></figure>
<h2 id="序列">序列</h2>
<p>默认从1开始，以此递增，主要用来给主键赋值使用</p>
<p>序列不真的属于任何一张表，但可以逻辑的和表做绑定</p>
<p>dual：虚表，只是为了补全语法，没有任何意义</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence s_person; <span class="comment">-- 创建序列</span></span><br><span class="line"><span class="keyword">select</span> s_pserson.nextval <span class="keyword">from</span> dual; <span class="comment">-- 获取下一值</span></span><br><span class="line"><span class="keyword">select</span> s_person.currval <span class="keyword">from</span>  dual; <span class="comment">-- 获取当前值，但是若不执行一次nextval则会报错</span></span><br></pre></td></tr></table></figure>
<p>添加一条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person (pid,pname) <span class="keyword">values</span>(s_person.nextval,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h2 id="scott用户">scott用户</h2>
<p>默认用户名：scott，密码：tiger</p>
<p>解锁scott用户：使用超级管理员执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 解锁scott用户</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> scott account unlock;</span><br><span class="line"><span class="comment">-- 解锁scott用户的密码[此名也可用来重围密码]</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> scott identified <span class="keyword">by</span> tiger;</span><br><span class="line"><span class="comment">-- 切换到scott用户下</span></span><br></pre></td></tr></table></figure>
<h2 id="函数">函数</h2>
<h3 id="单行函数">单行函数</h3>
<p>作用于一行，返回一个值</p>
<h4 id="字符函数">字符函数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;yes&#x27;</span>) <span class="keyword">from</span> dual; <span class="comment">-- YES 小写变大写</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;YES&#x27;</span>) <span class="keyword">from</span> dual; <span class="comment">--yes 大写变小写</span></span><br></pre></td></tr></table></figure>
<h4 id="数值函数">数值函数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="number">16.18</span>,<span class="number">1</span>) <span class="keyword">from</span> dual; <span class="comment">-- 四舍五入，后面的参数表示保留的位数，-1表示往前保留1位 16.2</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="number">56.16</span>,<span class="number">1</span>) <span class="keyword">from</span> dual; <span class="comment">-- 直接截取，不四舍五入 56.1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">10</span>,<span class="number">3</span>) <span class="keyword">from</span> dual; <span class="comment">--求余数</span></span><br></pre></td></tr></table></figure>
<h4 id="日期函数">日期函数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中所有员工入职距离现在几天</span></span><br><span class="line"><span class="keyword">select</span> sysdate<span class="operator">-</span>e.hiredate <span class="keyword">from</span> emp e;</span><br><span class="line"><span class="comment">-- 算出明天此刻</span></span><br><span class="line"><span class="keyword">select</span> sysdate<span class="operator">+</span><span class="number">1</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- 查询emp表中所有员工入职距离现在几个月</span></span><br><span class="line"><span class="keyword">select</span> months_between(sysdate,e.hiredate) <span class="keyword">from</span> emp e;</span><br><span class="line"><span class="comment">-- 查询emp表中所有员工入职距离现在几年</span></span><br><span class="line"><span class="keyword">select</span> months_between(sysdate,e.hiredate)<span class="operator">/</span><span class="number">12</span> <span class="keyword">from</span> emp e;</span><br><span class="line"><span class="comment">-- 查询emp表中所有员工入职距离现在几周</span></span><br><span class="line"><span class="keyword">select</span> (sysdate<span class="operator">-</span>e.hiredate)<span class="operator">/</span><span class="number">7</span> <span class="keyword">from</span> emp e;</span><br></pre></td></tr></table></figure>
<h4 id="转换函数">转换函数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 日期转字符串</span></span><br><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;fm yyyy-mm-dd hh24:mi:ss&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- 字符串转日期</span></span><br><span class="line"><span class="keyword">select</span> to_date(<span class="string">&#x27;2020-2-16 14:12:30&#x27;</span>,<span class="string">&#x27;fm yyyy-mm-ddhh24:mi:ss&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>
<h4 id="通用函数">通用函数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 算出emp表中所有员工的年薪</span></span><br><span class="line"><span class="comment">-- 奖金里面有null值，如果null值和任意数值算术运算，结果都是null</span></span><br><span class="line"><span class="keyword">select</span> e.sal<span class="operator">*</span><span class="number">12</span><span class="operator">+</span>nvl(e.comm,<span class="number">0</span>) <span class="keyword">from</span> emp e;</span><br></pre></td></tr></table></figure>
<h2 id="条件表达式">条件表达式</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给emp表中员工起中文名</span></span><br><span class="line"><span class="keyword">select</span> e.ename,</span><br><span class="line">	<span class="keyword">case</span> e.ename</span><br><span class="line">		<span class="keyword">when</span> <span class="string">&#x27;SMITH&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;史密斯&#x27;</span></span><br><span class="line">			<span class="keyword">when</span> <span class="string">&#x27;ALLEN&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">				(<span class="keyword">else</span> <span class="string">&#x27;无名&#x27;</span>) <span class="comment">-- 没有else则其它为null</span></span><br><span class="line">					<span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"><span class="comment">--- 判断emp表中员工工资，如果高于3000显示高收入，如果高于1500低于3000显示中等，其余显示低收入</span></span><br><span class="line"><span class="keyword">select</span> e.sal,</span><br><span class="line">	<span class="keyword">case</span></span><br><span class="line">		<span class="keyword">when</span> e.sal<span class="operator">&gt;</span><span class="number">3000</span> <span class="keyword">then</span> <span class="string">&#x27;高收入&#x27;</span></span><br><span class="line">			<span class="keyword">when</span> e.sal<span class="operator">&gt;</span><span class="number">1500</span> <span class="keyword">then</span> <span class="string">&#x27;中等收入&#x27;</span></span><br><span class="line">				<span class="keyword">else</span> <span class="string">&#x27;底收入&#x27;</span></span><br><span class="line">					<span class="keyword">end</span></span><br><span class="line"><span class="comment">-- oracle 专用条件表达式</span></span><br><span class="line"><span class="keyword">select</span> e.ename,</span><br><span class="line">	decode(e.ename,</span><br><span class="line">          <span class="string">&#x27;SMITH&#x27;</span>,<span class="string">&#x27;史密斯&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;ALLEN&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;无名&#x27;</span>) 中文名 <span class="comment">-- oracle 中除了起别名，都用单引号</span></span><br><span class="line"><span class="keyword">from</span> emp e;</span><br></pre></td></tr></table></figure>
<h3 id="多行函数聚合函数">多行函数[聚合函数]</h3>
<p>作用于多行，返回一个值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp; <span class="comment">-- 查询总数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp; <span class="comment">-- 工资总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> emp; <span class="comment">-- 最大工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp; <span class="comment">-- 最低工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp; <span class="comment">-- 平均工资</span></span><br></pre></td></tr></table></figure>
<h2 id="分组查询">分组查询</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询出每个部门的平均工资</span></span><br><span class="line"><span class="comment">-- 分组查询中出现在group by 后面的原始列，才能在select后面出现</span></span><br><span class="line"><span class="comment">-- 没有出现在group by 后面的列，想在select后面，必须加上聚合函数</span></span><br><span class="line"><span class="comment">-- 聚合函数有一个特性：可以把多行记录变成一个值</span></span><br><span class="line"><span class="keyword">select</span> e.deptno,<span class="built_in">avg</span>(e.sal)</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.deptno</span><br><span class="line"><span class="comment">-- 查询出平均工资高于2000的部门信息</span></span><br><span class="line"><span class="keyword">select</span> e.deptno,<span class="built_in">avg</span>(e.sal)</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.deptno</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(e.sal)<span class="operator">&gt;</span><span class="number">2000</span>; <span class="comment">-- 所有条件中都不能使用别名来判断</span></span><br><span class="line"><span class="comment">-- 查询出每个部门工资高于800的员工的平均工资</span></span><br><span class="line"><span class="keyword">select</span> e.deptno,<span class="built_in">avg</span>(e.sal)</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">where</span> e.sal<span class="operator">&gt;</span><span class="number">800</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.deptno;</span><br><span class="line"><span class="comment">-- where 是过滤分组前的数据，having是过滤分组后的数据</span></span><br><span class="line"><span class="comment">-- 表现形式：where必须在goup by 之前，having在group by 之后</span></span><br></pre></td></tr></table></figure>
<h2 id="多表查询">多表查询</h2>
<h3 id="笛卡尔积">笛卡尔积</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e,dept d;</span><br></pre></td></tr></table></figure>
<h3 id="等值连接">等值连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e,dept d <span class="keyword">where</span> e.deptno <span class="operator">=</span> d.deptno;<span class="comment">-- 推荐</span></span><br></pre></td></tr></table></figure>
<h3 id="内连接">内连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
<h3 id="外连接">外连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询出所有部门，以及部门下的员工信息(外连接)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="comment">-- 查询所有员工，以及员工所属部门</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="comment">-- oracle中专用外连接</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> emp e,dept d</span><br><span class="line"><span class="keyword">where</span> e.deptno(<span class="operator">+</span>)<span class="operator">=</span>d.deptno; <span class="comment">-- 右连接</span></span><br></pre></td></tr></table></figure>
<h3 id="自连接">自连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询出员工姓名，员工领导姓名（自连接）</span></span><br><span class="line"><span class="comment">-- 自连接：就是站在不同的角度将一张表看作多张表</span></span><br><span class="line"><span class="keyword">select</span> e1.ename,e2.ename</span><br><span class="line"><span class="keyword">from</span> emp e1,emp e2</span><br><span class="line"><span class="keyword">where</span> e1.mgr <span class="operator">=</span> e2.empno;</span><br><span class="line"><span class="comment">-- 查询出员工姓名，员工部门名称，员工领导姓名，员工领导部门名称</span></span><br><span class="line"><span class="keyword">select</span> e1.ename,d1.dname,e2.ename,d2.dname</span><br><span class="line"><span class="keyword">from</span> emp e1,emp e2,dept d1,dept d2</span><br><span class="line"><span class="keyword">where</span> e1.mgr <span class="operator">=</span> e2.empno</span><br><span class="line"><span class="keyword">and</span> e1.deptno<span class="operator">=</span>d1.deptno</span><br><span class="line"><span class="keyword">and</span> e2.deptno<span class="operator">=</span>d2.deptno;</span><br></pre></td></tr></table></figure>
<h3 id="子查询">子查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="comment">-- 子查询返回一个值</span></span><br><span class="line"><span class="comment">-- 查询出工资和SCOTT一样的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span>( <span class="comment">-- where 后不是主键，保险起见，使用in更好</span></span><br><span class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span>&quot;SCOTT&quot;) ; </span><br><span class="line"><span class="comment">-- 子查询返回一个集合</span></span><br><span class="line"><span class="comment">-- 查询出工资和10号部门任意员工一样的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno<span class="operator">=</span><span class="number">10</span>);</span><br><span class="line"><span class="comment">-- 子查询返回一张表</span></span><br><span class="line"><span class="comment">-- 查询出每个部门最低工资，和最低工资员工姓名，和该员工所在部门名称</span></span><br><span class="line"><span class="comment">-- 先查询出每个部门低工资</span></span><br><span class="line">	<span class="keyword">select</span> deptno,<span class="built_in">min</span>(sal) msal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="comment">-- 三表联查，得到结果</span></span><br><span class="line"><span class="keyword">select</span> t.deptno,t.msal,e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> deptno,<span class="built_in">min</span>(sal) msal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t,emp e,dept d</span><br><span class="line"><span class="keyword">where</span> t.deptno<span class="operator">=</span>e.deptno </span><br><span class="line"><span class="keyword">and</span> t.msal <span class="operator">=</span> e.sal </span><br><span class="line"><span class="keyword">and</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure>
<h3 id="分页">分页</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- oracle中的分页</span></span><br><span class="line"><span class="comment">-- rownum行号，当我们做select 操作时，</span></span><br><span class="line"><span class="comment">-- 每查询出一行记录，就会在该行上加上一个行号，</span></span><br><span class="line"><span class="comment">-- 行号从1开始，依次递增，不能跳着走</span></span><br><span class="line"><span class="comment">-- 排序操作会影响 rownum的顺序</span></span><br><span class="line"><span class="comment">-- 如果涉及到排序，但还要使用rownum，就可以使用嵌套查询</span></span><br><span class="line"><span class="keyword">select</span> rownum,t.<span class="operator">*</span> <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">order</span> <span class="keyword">by</span> e.sal <span class="keyword">desc</span>) t;</span><br><span class="line"><span class="comment">-- emp表工资倒序排列后，每页5条，查询第二页</span></span><br><span class="line"><span class="comment">-- rownum行号不能直接写上大于一个正数</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(</span><br><span class="line">	<span class="keyword">select</span> rownum rn,tt.<span class="operator">*</span> <span class="keyword">from</span>(</span><br><span class="line">		<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line">	) tt <span class="keyword">where</span> rownum<span class="operator">&lt;</span><span class="number">11</span></span><br><span class="line">) <span class="keyword">where</span> rn<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h2 id="视图">视图</h2>
<h3 id="概念">概念</h3>
<p>视图就是提供一个查询的窗口，所有数据来自于源表</p>
<h3 id="查询语句创建表">查询语句创建表</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> scott.emp;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<h3 id="创建视图必须有dba权限">创建视图[必须有dba权限]</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp <span class="keyword">as</span> <span class="keyword">select</span> ename,job <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<h3 id="查询视图">查询视图</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_emp;</span><br></pre></td></tr></table></figure>
<h3 id="修改视图不推荐">修改视图[不推荐]</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update v_emp <span class="keyword">set</span> job<span class="operator">=</span><span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;ALLEN&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h3 id="创建只读视图">创建只读视图</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp1 <span class="keyword">as</span> <span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">with</span> read <span class="keyword">only</span>;</span><br></pre></td></tr></table></figure>
<h3 id="视图的作用">视图的作用？</h3>
<blockquote>
<ol type="1">
<li>视图可以屏蔽掉一些敏感字段</li>
<li>保证总部和分部数据及时统一</li>
</ol>
</blockquote>
<h2 id="索引">索引</h2>
<h3 id="概念-1">概念</h3>
<p>索引就是在表的列上构建一个二叉树，达到大幅度提高查询效率的目的，但会影响增删改的效率</p>
<h3 id="单列索引">单列索引</h3>
<p>创建单列索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_ename <span class="keyword">on</span> emp(ename);</span><br></pre></td></tr></table></figure>
<p>单列索引触发规则，条件必须是索引列中的原始值，eg:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span></span><br></pre></td></tr></table></figure>
<p>单行函数、模糊查询都会影响索引的触发</p>
<h3 id="复合索引">复合索引</h3>
<p>创建复合索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_ename job <span class="keyword">on</span> emp(ename,job);</span><br></pre></td></tr></table></figure>
<p>复合索引中第一列为优先检索列</p>
<p>如果要触发复合索引，必须包含有优先检索列中的原始值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span> <span class="keyword">and</span> job <span class="operator">=</span> <span class="string">&#x27;xx&#x27;</span>; <span class="comment">-- 触发复合索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span> <span class="keyword">or</span> job<span class="operator">=</span><span class="string">&#x27;xx&#x27;</span>; <span class="comment">-- 不触发索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span>;<span class="comment">--触发单列索引</span></span><br></pre></td></tr></table></figure>
<h2 id="plsql编程语言">PL/SQL编程语言</h2>
<h3 id="概念-2">概念</h3>
<p>是对SQL语言的扩展，使SQL语言具有过程化编程的特性</p>
<p>比一般过程化编程语言，更加灵活高效</p>
<p>主要用来编写存储过程和存储函数等</p>
<h3 id="变量定义与赋值">变量定义与赋值</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 声明方法 </span><br><span class="line">-- 赋值操作可以使用:=也可以使用into查询语句赋值</span><br><span class="line">declare</span><br><span class="line">	i number(2) :=10; -- 定义与赋值</span><br><span class="line">	s varchar2(10) := &#x27;张三&#x27;;</span><br><span class="line">	ena emp.ename%type; -- 取ename的类型，引用型变量</span><br><span class="line">	emprow emp%rowtype; -- 记录型变量 </span><br><span class="line">begin</span><br><span class="line">	dbms_output.put_line(i); -- 输出</span><br><span class="line">	select ename into ena from emp where empno=7788;-- 赋值</span><br><span class="line">	select * into emprow from emp where empno=7788;</span><br><span class="line">	dbms_output.put_line(emprow.ename ||  &#x27;的工作为&#x27; ||emprow.job);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="if判断">IF判断</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 输入小于18的数字，输出未成年</span><br><span class="line">-- 输入大于18小于40的数字，输出中年人</span><br><span class="line">-- 输入大小40的数字，输出老年人</span><br><span class="line">declare</span><br><span class="line">	i number(3):=&amp;ii;</span><br><span class="line">begin</span><br><span class="line">	if i&lt;18 then</span><br><span class="line">		dbms_output.put_line(&#x27;未成年&#x27;);</span><br><span class="line">	elsif i&lt;40 then</span><br><span class="line">		dbms_output.put_line(&#x27;中年人&#x27;);</span><br><span class="line">	else</span><br><span class="line">		dbms_output.put_line(&#x27;老年人&#x27;);</span><br><span class="line">	end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="loop循环">loop循环</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- 用三种方式输出1到10</span><br><span class="line">-- while循环</span><br><span class="line">declare</span><br><span class="line">	i number(2) :=1;</span><br><span class="line">begin</span><br><span class="line">	while i&lt;11 loop</span><br><span class="line">		dbms_output.put_line(i);</span><br><span class="line">		i :=i+1;</span><br><span class="line">	end loop;</span><br><span class="line">end;</span><br><span class="line">-- exit循环</span><br><span class="line">declare</span><br><span class="line">	i number(2) :=1;</span><br><span class="line">begin</span><br><span class="line">	loop</span><br><span class="line">		exit when i&gt;10;</span><br><span class="line">		dbms_output.put_line(i);</span><br><span class="line">		i :=i+1;</span><br><span class="line">	end loop;</span><br><span class="line">end;</span><br><span class="line">-- for循环</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">	for i in 1..10 loop</span><br><span class="line">		dbms_output.put_line(i);</span><br><span class="line">	end loop;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="游标">游标</h3>
<p>可以存放多个对象，多行记录（类似集合）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 输出emp表中所有员工的姓名</span><br><span class="line">declare</span><br><span class="line">	cursor c1 is select * from emp;</span><br><span class="line">	emprow emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">	open c1;</span><br><span class="line">		loop</span><br><span class="line">			fetch c1 into emprow;</span><br><span class="line">			exit when c1%notfound;</span><br><span class="line">			dbms_output.putline(emprow.ename);</span><br><span class="line">		end loop;</span><br><span class="line">	close c1;</span><br><span class="line">end;</span><br><span class="line">-- 给指定部门员工涨工资</span><br><span class="line">declare</span><br><span class="line">	cursor c2(eno emp.deptno%type)</span><br><span class="line">    is select empno from emp where deptno=eno; -- 带参游标</span><br><span class="line">    en emp.empno%type;</span><br><span class="line">begin</span><br><span class="line">	open c2(10);</span><br><span class="line">		loop</span><br><span class="line">			fetch c2 into eno;</span><br><span class="line">			exit when c2%notfound;</span><br><span class="line">			update emp set sal = sal+100 where empno = en;</span><br><span class="line">			commit;</span><br><span class="line">		end loop;</span><br><span class="line">	close c2;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="存储过程">存储过程</h3>
<p>提前已经编译好的一段pl/sql语言，放置在数据库端可供人直接被调用，这一段pl/sql一般都是固定步骤的业务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 给指定员工涨100</span><br><span class="line">create or replace procedure p1(eno emp.empno%type) -- or replace 如果已经存在则修改</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">	update emp set sal=sal+100 where empno = eno;</span><br><span class="line">	commit;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">	p1(7788);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="存储函数">存储函数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 通过存储函数计算指定员工的年薪</span><br><span class="line">create or replace function f_yearsal(eno emp.empno%type) return number -- 返回值/参数 类型不能带长度</span><br><span class="line">is</span><br><span class="line">	s number(10);</span><br><span class="line">begin</span><br><span class="line">	select sal*12+nvl(comm,0) into s from emp where empno=eno;</span><br><span class="line">	return s;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">-- 存储函数在调用时，返回值需要接收</span><br><span class="line">declare</span><br><span class="line">	s number(10);</span><br><span class="line">begin</span><br><span class="line">	s := f_yaersal(7788);</span><br><span class="line">	dbms_output.put_line(s);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h3 id="out类型参数使用">out类型参数使用</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 使用存储过程来算年薪</span><br><span class="line">create or replace procedure p_yearsal(eno emp.empno%type,yearsal out number)</span><br><span class="line">is</span><br><span class="line">	s number(10); -- 存放薪水</span><br><span class="line">	c emp.comm%type; -- 存放奖金</span><br><span class="line">begin</span><br><span class="line">	select sal*12,nvl(comm,0) into s , c from emp where empno = eno;</span><br><span class="line">	yearsal := s+c;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">declare</span><br><span class="line">	ysearsal number(10);</span><br><span class="line">begin</span><br><span class="line">	p_yearsal(7788,yearsal);</span><br><span class="line">	dbms_output.put_line(yearsal);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>in和out类型参数的区别：</p>
<p>凡是涉及到into查询语句赋值或:=赋值操作的参数，都必须使用out来修饰</p>
</blockquote>
<blockquote>
<p>存储函数和存储过程的区别：</p>
<p>语法区别：关键字不一样，存储函数比存储过程多两个return</p>
<p>本质区别：存储函数有返回值，而存储过程没有返回值</p>
<p>如果存储过程想实现有返回值的业务，就必须使用out类型的参数</p>
<p>即便是存储过程使用了out类型的参数，也不是真的有了返回值，而是在存储过程内部给out类型参数赋值，在执行完毕后，我们拿到输出类型参数的值。</p>
<p>可以使用存储函数有返回值的特性来自定义函数，而存储过程不能用来自定义函数</p>
</blockquote>
<h3 id="触发器">触发器</h3>
<p>制定一个规则，在我们做增删改操作时，只要满足该规则，自动触发，无需调用</p>
<p>语句级触发器：不包含有for each row的</p>
<p>行级触发器：包含有for each row的</p>
<p>加for each row是为了使用:old或:new对象或一行记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 插入一条记录，输出一个新员工入职 语句级触发器</span><br><span class="line">create or replace trigger t1</span><br><span class="line">after</span><br><span class="line">insert</span><br><span class="line">on person</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">	dbms_output.put_line(&#x27;一个新员工入职&#x27;);</span><br><span class="line">end;</span><br><span class="line">-- 行级触发器</span><br><span class="line">-- 不能给员工降薪</span><br><span class="line">create or replace trigger t2</span><br><span class="line">before</span><br><span class="line">update</span><br><span class="line">on emp</span><br><span class="line">for each row</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">	if :old.sal&gt;:new.sal then</span><br><span class="line">		raise_application_error(-20001,&#x27;不能给员工降薪&#x27;); -- 抛出异常，只能在-20001～-20999之间</span><br><span class="line">	end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 使用触发器实现主键自增[行级触发器]</span><br><span class="line">-- 分析：在用户插入操作前，拿到即将插入操作的数据，给该数据中的主键列赋值</span><br><span class="line">create or replace trigger auid</span><br><span class="line">before</span><br><span class="line">insert</span><br><span class="line">on person</span><br><span class="line">for each row</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">	select s_person.nextval into :new.pid from dual;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-Kmeans和PCA练习</title>
    <url>/2021/07/18/Part1-Kmeans%E5%92%8CPCA%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-kmeans和pca练习">Part1-Kmeans和PCA练习</h1>
<h2 id="k-means">K-means</h2>
<h3 id="可视化数据">1.1 可视化数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = loadmat(<span class="string">&#x27;ex7data2.mat&#x27;</span>)</span><br><span class="line">data = pd.DataFrame(data[<span class="string">&#x27;X&#x27;</span>], columns=[<span class="string">&#x27;X1&#x27;</span>,<span class="string">&#x27;X2&#x27;</span>])</span><br><span class="line">data.plot(<span class="string">&#x27;X1&#x27;</span>,<span class="string">&#x27;X2&#x27;</span>,kind=<span class="string">&#x27;scatter&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718161006182.png" /></p>
</blockquote>
<h3 id="随机初始化">1.2 随机初始化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_init</span>(<span class="params">X, K</span>):</span></span><br><span class="line">  <span class="keyword">return</span> X.sample(K).values</span><br></pre></td></tr></table></figure>
<h3 id="寻找距离x最近的聚类中心">1.3 寻找距离X最近的聚类中心</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_closest_center</span>(<span class="params">X, u</span>):</span></span><br><span class="line">  m = X.shape[<span class="number">0</span>]</span><br><span class="line">  c = np.zeros(m)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    temp_x = X.iloc[i, :].values</span><br><span class="line">    min_distance = <span class="number">1e6</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(u)):</span><br><span class="line">      distance = np.<span class="built_in">sum</span>((temp_x-u[j, :])**<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">if</span> distance &lt; min_distance:</span><br><span class="line">        min_distance = distance</span><br><span class="line">        c[i] = j</span><br><span class="line">  <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure>
<h3 id="计算聚类中心">1.4 计算聚类中心</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_center</span>(<span class="params">X, c, k</span>):</span></span><br><span class="line">  m, n = X.shape</span><br><span class="line">  u = np.zeros((k, n))</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    cs = np.where(c==i)</span><br><span class="line">    u[i] = data.iloc[cs[<span class="number">0</span>], :].mean()</span><br><span class="line">  <span class="keyword">return</span> u</span><br></pre></td></tr></table></figure>
<h3 id="kmeans聚类">1.5 kmeans聚类</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span>(<span class="params">X, k, epoch=<span class="number">10</span></span>):</span></span><br><span class="line">  m = X.shape[<span class="number">0</span>]</span><br><span class="line">  u = random_init(X, k)</span><br><span class="line">  c = np.zeros(m)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    c = find_closest_center(X, u)</span><br><span class="line">    u = compute_center(X, c, k)</span><br><span class="line">  c = find_closest_center(X, u)</span><br><span class="line">  <span class="keyword">return</span> c, u  </span><br></pre></td></tr></table></figure>
<h3 id="结果可视化显示">1.6 结果可视化显示</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cluster1 = data[c==<span class="number">0</span>]</span><br><span class="line">cluster2 = data[c==<span class="number">1</span>]</span><br><span class="line">cluster3 = data[c==<span class="number">2</span>]</span><br><span class="line">_, ax = plt.subplots()</span><br><span class="line">ax.scatter(cluster1.iloc[:, <span class="number">0</span>], cluster1.iloc[:, <span class="number">1</span>], c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax.scatter(cluster2.iloc[:, <span class="number">0</span>], cluster2.iloc[:, <span class="number">1</span>], c=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">ax.scatter(cluster3.iloc[:, <span class="number">0</span>], cluster3.iloc[:, <span class="number">1</span>], c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718162026696.png" /></p>
</blockquote>
<h3 id="使用k-means进行图像压缩">使用K-means进行图像压缩</h3>
<h3 id="图像读取">2.1 图像读取</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io</span><br><span class="line">pic = io.imread(<span class="string">&#x27;bird_small.png&#x27;</span>)</span><br><span class="line">io.imshow(pic)</span><br><span class="line">io.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718164123418.png" /></p>
</blockquote>
<h3 id="图像压缩">2.2 图像压缩</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pic = pic / <span class="number">256</span> <span class="comment"># 需要标准化</span></span><br><span class="line">new_pic = pic.reshape(-<span class="number">1</span>, pic.shape[<span class="number">2</span>]) <span class="comment"># 调整形状</span></span><br><span class="line">c, u = kmeans(pd.DataFrame(new_pic), <span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<h3 id="图像恢复">2.3 图像恢复</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_recovered = u[c.astype(<span class="built_in">int</span>),:]</span><br><span class="line">pic_recovered = np.reshape(X_recovered, pic.shape)</span><br><span class="line">plt.imshow(pic_recovered)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718164354343.png" /></p>
</blockquote>
<h3 id="使用sklearn中的kmeans实现">2.4 使用sklearn中的KMeans实现</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pic = io.imread(<span class="string">&#x27;bird_small.png&#x27;</span>)</span><br><span class="line">io.imshow(pic)</span><br><span class="line">data = pic.reshape(-<span class="number">1</span>, <span class="number">3</span>)/<span class="number">255</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line">model = KMeans(n_clusters=<span class="number">16</span>, n_init=<span class="number">100</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">model.fit(data)</span><br><span class="line">center = model.cluster_centers_</span><br><span class="line">C = model.predict(data)</span><br><span class="line">pic_recovered = center[C].reshape(pic.shape)</span><br><span class="line">plt.imshow(pic_recovered)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h2 id="pca">PCA</h2>
<h3 id="数据可视化">3.1 数据可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = loadmat(<span class="string">&#x27;ex7data1.mat&#x27;</span>)</span><br><span class="line">plt.scatter(data[<span class="string">&#x27;X&#x27;</span>][:,<span class="number">0</span>], data[<span class="string">&#x27;X&#x27;</span>][:,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718171650675.png" /></p>
</blockquote>
<h3 id="pca算法数据压缩与还原">3.2 PCA算法数据压缩与还原</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pca</span>(<span class="params">X, k</span>):</span></span><br><span class="line">  m = X.shape[<span class="number">0</span>]</span><br><span class="line">  sigma = X.T@X/m</span><br><span class="line">  U,S,V = np.linalg.svd(sigma)</span><br><span class="line">  <span class="keyword">return</span> X@U[:,:k],U</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_from_pca</span>(<span class="params">Z, U, k</span>):</span></span><br><span class="line">  <span class="keyword">return</span> Z@U[:, :k].T</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = data[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">Z, U = pca(X, <span class="number">1</span>)</span><br><span class="line">X_recovered = recover_from_pca(Z, U, <span class="number">1</span>)</span><br><span class="line">plt.scatter(X_recovered[:,<span class="number">0</span>],X_recovered[:, <span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718172111697.png" /></p>
</blockquote>
<h2 id="pca人脸图片压缩与还原">PCA人脸图片压缩与还原</h2>
<h3 id="数据读取与可视化">4.1 数据读取与可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = loadmat(<span class="string">&#x27;ex7faces.mat&#x27;</span>)[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">plt.imshow(data[<span class="number">3</span>,:].reshape(<span class="number">32</span>, <span class="number">32</span>), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718173936279.png" /></p>
</blockquote>
<h3 id="pca压缩与恢复">4.2 PCA压缩与恢复</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = data</span><br><span class="line">Z, U = pca(X, <span class="number">100</span>)</span><br><span class="line">X_recovered = recover_from_pca(Z, U, <span class="number">100</span>)</span><br><span class="line">plt.imshow(X_recovered[<span class="number">3</span>,:].reshape(<span class="number">32</span>, <span class="number">32</span>), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718174018954.png" alt="image-20210718174018954" /><figcaption>image-20210718174018954</figcaption>
</figure>
</blockquote>
<h3 id="使用sklearn中的pca实现">4.3 使用sklearn中的PCA实现</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">data = loadmat(<span class="string">&#x27;ex7faces.mat&#x27;</span>)[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">sk_pca = PCA(n_components=<span class="number">100</span>)</span><br><span class="line">X = data</span><br><span class="line">Z = sk_pca.fit_transform(X)</span><br><span class="line">X_recover = sk_pca.inverse_transform(Z)</span><br><span class="line">plt.imshow(X_recovered[<span class="number">3</span>,:].reshape(<span class="number">32</span>, <span class="number">32</span>), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718174550916.png" /></p>
</blockquote>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-单参数线性回归</title>
    <url>/2021/07/04/Part1-%E5%8D%95%E5%8F%82%E6%95%B0%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h1 id="part1-单参数线性回归">Part1-单参数线性回归</h1>
<h2 id="模型描述">模型描述</h2>
<blockquote>
<p>如图是房屋价格预测问题，根据不同尺寸的房子对应不同售价组成的数据来画图，然后对新的房屋面积预测对应的价格</p>
</blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210703223847973.png" /></p>
<p>符号定义：</p>
<blockquote>
<p><strong>m</strong>=训练样本的数量</p>
<p><strong>x's</strong>=输入变量(输入特征)</p>
<p><strong>y's</strong>=输出变量(目标变量)</p>
<p>使用(x,y)来表示一个训练样本</p>
<p>使用<span class="math inline">\((x^{(i)},y^{(i)})\)</span>表示 第i个训练样本</p>
</blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210703230007596.png" /></p>
<p>如何表示"假设"h?</p>
<p><span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x\)</span></p>
<h2 id="代价函数">代价函数</h2>
<p>在线性回归中，有一个训练集如图所示，我们要做的就是得出假设中的<span class="math inline">\(\theta_0\)</span>和<span class="math inline">\(\theta_1\)</span>两个参数的值，来让假设函数表示的直线尽可能与这些数据点很好的拟合</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704092206187.png" /></p>
<p>如图，我们需要选择<span class="math inline">\(\theta_0\)</span>和<span class="math inline">\(\theta_1\)</span>，来使<span class="math inline">\(h_\theta(x)\)</span>接近对应的训练样本<span class="math inline">\((x,y)\)</span>中的<span class="math inline">\(y\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704092355745.png" /></p>
<p>在线性回归中，我们要解决的是一个最小化问题 <span class="math display">\[
minmize_{(\theta_0,\theta_1)} \frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2
\]</span> 其中<span class="math inline">\(\frac{1}{2m}\)</span>是为了在后续进行求导时抵消掉平方，便于计算，对于优化的结果并没有影响</p>
<p>改写这个函数，以定义一个代价函数： <span class="math display">\[
J(\theta_0,\theta_1)=\frac{1}{2m} \sum_{i=1}^{m}(h_\theta(x^{(i)})-y^{(i)})^2
\]</span> <span class="math inline">\(J(\theta_0,\theta_1)\)</span>也被称为平方误差函数</p>
<blockquote>
<p>损失函数和代价函数的区别？</p>
<p>损失函数(Loss function)：针对单个样本</p>
<p>代价函数(Cost function)：针对全部样本</p>
</blockquote>
<blockquote>
<p>总结：</p>
<p>上述问题中</p>
<p>假设：<span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x\)</span></p>
<p>参数：<span class="math inline">\(\theta_0,\theta_1\)</span></p>
<p>代价函数：<span class="math inline">\(J(\theta_0,\theta_1)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<p>目标：<span class="math inline">\(minimize_{(\theta_0,\theta_1)} J(\theta_0,\theta_1)\)</span></p>
</blockquote>
<h2 id="梯度下降">梯度下降</h2>
<p>梯度下降算法是可能用来使得代价函数J最小化的算法</p>
<p>问题综述：</p>
<blockquote>
<p>给定函数：<span class="math inline">\(J(\theta_0,\theta_1)\)</span>，可能是一个线性回归的代价函数，也可能是一个需要最小化的其它函数</p>
<p>目标：<span class="math inline">\(min_{(\theta_0,\theta_1) J(\theta_0,\theta_1)}\)</span></p>
</blockquote>
<p>梯度下降算法思路：</p>
<blockquote>
<ul>
<li><p>开始时，给定<span class="math inline">\(\theta_0\)</span>、<span class="math inline">\(\theta_1\)</span>的初始值，通常设为0</p></li>
<li><p>然后不断改变<span class="math inline">\(\theta_0\)</span>、<span class="math inline">\(\theta_1\)</span>来使<span class="math inline">\(J(\theta_0,\theta_1)\)</span>变小，直到找到<span class="math inline">\(J\)</span>的最小值或局部最小值</p></li>
</ul>
</blockquote>
<p>具体过程如图，可以想象成一个人站在山顶上，需要走到最低点，在梯度下降算法中，我们需要做的就是：查看周围一圈，观察如果要在某个方向上走一小步，来达到尽快下山的目的，需要向哪个方向迈步？然后向对应的方向迈步，在新的位置重复上述操作，直到达到最低点或局部最低点</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704091708344.png" /></p>
<p>算法定义：</p>
<p>重复以下过程直到收敛：</p>
<p><span class="math inline">\(\theta_j := \theta_j - \alpha \frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1) \space (for\ j =0 \ and \ j=1)\)</span></p>
<p>其中<span class="math inline">\(:=\)</span>表示<strong>赋值</strong>，<span class="math inline">\(\alpha\)</span>表示<strong>学习率</strong>(learning rate)，用来控制梯度下降时，迈出多大的步子，<span class="math inline">\(\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)\)</span>表示一个导数项，后面再讨论</p>
<p>对应这个表达式，需要<strong>同时</strong>更新<span class="math inline">\(\theta_0\)</span>和<span class="math inline">\(\theta_1\)</span></p>
<p><span class="math inline">\(temp_0 :=\theta_0-\alpha\frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)\)</span></p>
<p><span class="math inline">\(temp_1:=\theta_1-\alpha\frac{\partial}{\partial \theta_1}J(\theta_0,\theta_1)\)</span></p>
<p><span class="math inline">\(\theta_0:=temp_0\)</span></p>
<p><span class="math inline">\(\theta_1:=temp_1\)</span></p>
<p>如果先赋值<span class="math inline">\(temp_0\)</span>再赋值<span class="math inline">\(\theta_0\)</span>再赋值<span class="math inline">\(temp_1\)</span>再赋值<span class="math inline">\(\theta_1\)</span>就会导致与梯度下降所希望的不同的结果</p>
<p>对于上述表达式中的导数项，以一维为例，对于<span class="math inline">\(\theta_0 := \theta_0-\alpha\frac{d}{d\theta_0}J(\theta_0)\)</span></p>
<p>如图，如果当前位置在抛物线右边时，对应位置导数大于0，<span class="math inline">\(\theta_0\)</span>更新后变小，当前位置在左边时，对应位置导数小于0，<span class="math inline">\(\theta_0\)</span>更新后变大，对应的<span class="math inline">\(J(\theta_0)\)</span>总是趋向于最小值</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704094209936.png" /></p>
<p>同时对于表达式中的<span class="math inline">\(\alpha\)</span>而言，如果<span class="math inline">\(\alpha\)</span>太小，<span class="math inline">\(\theta\)</span>更新就会很慢，每次更新一点点；而如果<span class="math inline">\(\alpha\)</span>太大，<span class="math inline">\(\theta\)</span>就会更新幅度太大，导致更新过程反复横条。</p>
<p>在梯度下降法中，当接近局部最低点时，梯度下降法会自动采取更小的幅度，这是由于在接近局部最低点时，根据定义，在局部最低点时导数等于零，所以当接近局部最低时，导数值会变得越来越小，所以梯度下降会自动采取较小的幅度，所以不需要再另外减小<span class="math inline">\(\alpha\)</span></p>
<h2 id="线性回归中的梯度下降">线性回归中的梯度下降</h2>
<p><span class="math display">\[
\begin{split}
\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)&amp;=\frac{\partial}{\partial\theta_j}\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2 \\ 
&amp;=\frac{\partial}{\partial\theta_j}\frac{1}{2m}\sum_{i=1}^m(\theta_0+\theta_1x^{(i)}-y^{(i)})^2
\end{split}
\]</span></p>
<p><span class="math inline">\(\theta_0\ j=0:\)</span></p>
<p><span class="math inline">\(\frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1) = \frac{1}{2m} \cdot 2 \cdot \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})\cdot 1 =\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})\)</span></p>
<p><span class="math inline">\(\theta_1\ j=1:\)</span></p>
<p><span class="math inline">\(\frac{\partial}{\partial\theta_1}J(\theta_0,\theta_1) =\frac{1}{2m} \cdot 2 \cdot \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})\cdot x^{(i)} =\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x^{(i)}\)</span></p>
<p>批次梯度下降：</p>
<p>之前所说的梯度下降，都是<strong>批次梯度下降</strong>(Batch Gradient Descent),也就是使用全部的训练样本进行训练，后面会有不用全览整个训练集，而是每次只关注了小子集。</p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-多元线性回归</title>
    <url>/2021/07/04/Part1-%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h1 id="part1-多元线性回归">Part1-多元线性回归</h1>
<h2 id="多特征量">多特征量</h2>
<p>在之前研究的线性回归中，通常只有一个特征，如房屋价格预测中的房屋面积，得出假设<span class="math inline">\(h_\theta(x) = \theta_0+\theta_1x\)</span>，但实际上，影响房屋价格的因素往往不仅仅是房屋面积，还有一些其它特征可能也会影响房屋价格，如卧室数量、楼层、房屋使用时长等。</p>
<p>于是得出多特征数据集中的各个元素表示：</p>
<blockquote>
<p>n ：特征数量</p>
<p><span class="math inline">\(x^{(i)}\)</span>：输入的第i个训练样本</p>
<p><span class="math inline">\(x^{(i)}_j\)</span>：输入的第i个训练样本的第j个特征</p>
</blockquote>
<p>对应的假设：</p>
<p>之前的：<span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x\)</span></p>
<p>现在的：<span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_3+\theta_4x_4+\cdots + \theta_nx_n\)</span></p>
<p>并且定义额外的第0个特征向量(<span class="math inline">\(x^{(i)}_0=1\)</span>)，因此</p>
<p><span class="math inline">\(X=\left[ \begin{matrix} x_0 \\ x_1 \\ \cdots \\ x_n \end{matrix} \right] \in \mathbb R^{n+1}\)</span>，<span class="math inline">\(\Theta=\left[ \begin{matrix} \theta_0 \\ \theta_1 \\ \cdots \\ \theta_n \end{matrix} \right] \in \mathbb R^{n+1}\)</span></p>
<p><span class="math inline">\(\begin{aligned} h_\theta(x) &amp;= \theta_0x_0+\theta_1x_1+\cdots+\theta_nx_n \\ &amp;=\Theta^T X \end{aligned}\)</span></p>
<p>其中<span class="math inline">\(x_0=1\)</span>，<span class="math inline">\(\theta_0x_0\)</span>相当于<span class="math inline">\(\theta_0\)</span></p>
<h2 id="多元梯度下降法">多元梯度下降法</h2>
<p>总结上述多元线性回归：</p>
<blockquote>
<p>假设：<span class="math inline">\(h_\theta(x)=\theta^Tx=\theta_0x_0+\theta_1x_1+\cdots+\theta_nx_n \ (x_0=1)\)</span></p>
<p>参数：<span class="math inline">\(\theta_0,\theta_1,\cdots,\theta_n\)</span></p>
<p>代价函数：<span class="math inline">\(J(\theta_0,\theta_1,\cdots,\theta_n)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<p>梯度下降：<span class="math inline">\(\theta_j := \theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\cdots,\theta_n)\)</span>，对于每个<span class="math inline">\(j=0,\cdots,n\)</span>同步更新</p>
</blockquote>
<p>梯度下降：</p>
<p><span class="math inline">\(\theta_j:=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x^{(i)}_j\)</span></p>
<h2 id="梯度下降法的实用技巧">梯度下降法的实用技巧</h2>
<h3 id="特征缩放">特征缩放</h3>
<p>思想：确保所有特征具有相近的范围，这样梯度下降法能更快的收敛</p>
<p>以房价预测为例，对应的特征可能包含房屋面积<span class="math inline">\(x_1\)</span>(0<sub>2000)，房间数量<span class="math inline">\(x_2\)</span>(1</sub>5)，二者取值范围相差较大，画出来的<span class="math inline">\(J(\theta)\)</span>曲线如图，收敛就会非常慢</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704171115664.png" /></p>
<p>一种有效的方法就是进行特征缩放，具体来说：</p>
<p><span class="math inline">\(x_1=\frac{x_1}{2000} \\ x_2=\frac{x_2}{5}\)</span></p>
<p>则对应<span class="math inline">\(J(\theta)\)</span>的等值线如图，梯度下降法就会更快收敛</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704171747986.png" /></p>
<p>通常，我们执行特征缩放的目的是将特征值的取值约束到<span class="math inline">\([-1,1]\)</span></p>
<p><strong>均值归一化</strong>：</p>
<p>使用<span class="math inline">\(x_i-\mu_i\)</span>来替换<span class="math inline">\(x_i\)</span>，使得特征值的平均值为0(<span class="math inline">\(x_0\)</span>除外)</p>
<p><span class="math inline">\(x_1 = \frac{x_1-\mu_1}{s_1}\)</span>，其中<span class="math inline">\(\mu_1\)</span>是训练集中特征<span class="math inline">\(x_1\)</span>的平均值，<span class="math inline">\(s_1\)</span>是<span class="math inline">\(x_1\)</span>的标准差(或最大值 -最小值 )</p>
<p>同理得出<span class="math inline">\(x_2,x_3,\cdots,x_n\)</span></p>
<h3 id="学习率">学习率</h3>
<ol type="1">
<li><p>如何确保梯度下降工作正常？</p>
<p>在梯度下降算法运行时，绘制出代价函数<span class="math inline">\(J(\theta)\)</span>的值 ，如图，横坐标表示梯度下降法的迭代次数，纵坐标表示<span class="math inline">\(J(\theta)\)</span>，如果梯度下降法正常工作的话，每步迭代之后，<span class="math inline">\(J(\theta)\)</span>都应该下降</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704163820988.png" /></p></li>
<li><p>如何调整学习率</p>
<p>如果曲线如下图所示，则说明梯度下降法没有正常工作，此时对应的梯度下降过程就是之前以抛物线为例所说的学习率太大导致反复横跳，因此应该使用更小的学习率<span class="math inline">\(\alpha\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704164123738.png" /></p>
<p>如果曲线如下图所示，通常也需要选择更小的<span class="math inline">\(\alpha\)</span>值</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210704164447757.png" /></p></li>
</ol>
<blockquote>
<p>总结：</p>
<p>如果<span class="math inline">\(\alpha\)</span>太小，就会收敛很慢</p>
<p>如果<span class="math inline">\(\alpha\)</span>太大，<span class="math inline">\(J(\theta)\)</span>在每次迭代后或许不会下降，甚至可能不收敛</p>
<p>通常以如下形式选择<span class="math inline">\(\alpha\)</span>：</p>
<p><span class="math inline">\(\cdots,0.001, 0.003 , 0.01, 0.03 ,0.1,0.3 1,\cdots\)</span>（按照3的倍数）</p>
</blockquote>
<h3 id="特征和多项式回归">特征和多项式回归</h3>
<p>以预测房价为例，假设<span class="math inline">\(h_\theta(x)=\theta_0+\theta_1\times width+\theta_2\times depth\)</span></p>
<p>实际上可以创造面积(<span class="math inline">\(area=width*depth\)</span>)这一新特征，来将假设设为<span class="math inline">\(h_\theta=\theta_0+\theta_1area\)</span>，可能这样一个模型会更好</p>
<p>与选择特征的类似的这种想法，被称为多项式回归</p>
<p>如：对于房价预测案例中，假设给定的是房屋大小这一特征，可能会有很多的模型用于拟合，如<span class="math inline">\(\theta_0+\theta_1x\)</span>这样的模型，但直线可能并不能很好的拟合数据，因此可能会想到使用<span class="math inline">\(\theta_0+\theta_1x+\theta_2x^2\)</span>这样的二次模型去拟合，同样的，也可能会使用三次模型等更高次模型来继续</p>
<p>以三次模型为例： <span class="math display">\[
\begin{align}
h_\theta(x)&amp;=\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_3 \\
&amp;= \theta_0+\theta_1(size)+\theta_2(size)^2+\theta_3(size)^3
\end{align} \\
(x_1=(size),x_2=(size)^2,x_3=(size)^3)
\]</span></p>
<h2 id="正规方程normal-equation">正规方程(Normal equation)</h2>
<p>目前，对于代价函数的优化，我们都是采用梯度下降法进行的，通过每次迭代使得一步步逼近最优点。</p>
<p>相反地，使用<strong>正规方程</strong>方法，可以数学解法，直接一次性求出<span class="math inline">\(\theta\)</span>的最优值</p>
<p>假设有一个非常简单的代价函数<span class="math inline">\(J(\theta)=a\theta^2+b\theta+c(\theta \in \mathbb R)\)</span>，如何最小化它呢？</p>
<p>求导可得<span class="math inline">\(\frac{d}{d\theta}J(\theta)=2a\theta+b\)</span>令其为0，可直接求出<span class="math inline">\(\theta\)</span></p>
<p>类似的，假设<span class="math inline">\(\theta \in \mathbb R^{n+1}\)</span></p>
<p><span class="math inline">\(J(\theta_0,\theta_1,\cdots,\theta_m)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span>，</p>
<p>对于每个<span class="math inline">\(J，\frac{\partial}{\partial \theta_j}J(\theta)=\cdots令其=0\)</span></p>
<p>解出<span class="math inline">\(\theta_0,\theta_1,\cdots,\theta_n\)</span></p>
<p>对于<strong>矩阵</strong>计算而言，求最优<span class="math inline">\(\Theta\)</span>如下：</p>
<p>通常来说，m个样本<span class="math inline">\((x^{(1)},y^{(1)}),\cdots,(x^{(m)},y^{(m)})\)</span>，n个特征</p>
<p><span class="math inline">\(x^{(i)}=\left[ \begin{matrix} x_0^{(i)}\\x_1^{(i)}\\x_2^{(i)}\\ \cdots\\ x_n^{(i)} \end{matrix} \right] \in \mathbb R^{n+1}\)</span>，设计矩阵<span class="math inline">\(X=\left[ \begin{matrix} --(x^{(1)})^T-- \\ --(x^{(2)})^T-- \\ \cdots \\ -- (x^{(m)})^T--\end{matrix} \right]（m\times (n+1)）\)</span></p>
<p><span class="math inline">\(\Theta=(X^TX)^{-1}X^Ty\)</span></p>
<blockquote>
<p>如果使用正规方程，就不需要做特征缩放</p>
</blockquote>
<h3 id="梯度下降-vs-正规方程">梯度下降 vs 正规方程</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">梯度下降</th>
<th style="text-align: center;">正规方程</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">需要选择<span class="math inline">\(\alpha\)</span></td>
<td style="text-align: center;">不需要选择<span class="math inline">\(\alpha\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">需要多次迭代</td>
<td style="text-align: center;">不需要迭代</td>
</tr>
<tr class="odd">
<td style="text-align: center;">即使特征数量很大，也会正常运行</td>
<td style="text-align: center;">需要计算<span class="math inline">\((X^TX)^{-1}\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">当特征数量很大时，非常慢</td>
</tr>
<tr class="odd">
<td style="text-align: center;">如果特征数量&gt;10000</td>
<td style="text-align: center;">如果特征数量&lt;10000</td>
</tr>
</tbody>
</table>
<h3 id="正规方程与不可逆性选学">正规方程与不可逆性(选学)</h3>
<p>对于方程式<span class="math inline">\(\theta=(X^TX)^{-1}X^Ty\)</span></p>
<p>如果<span class="math inline">\(X^TX\)</span>是不可逆的话怎么办？</p>
<p>通常有两种常见的原因：</p>
<ol type="1">
<li><p><strong>冗余特征</strong></p>
<p>由于某些原因，学习问题包含了多余的特征，如在预测房价时，如果<span class="math inline">\(x_1\)</span>是以英尺为单位的房子面积，<span class="math inline">\(x_2\)</span>是以平方米为单位的房子面积，则两个特征始终满足<span class="math inline">\(x_1=(3.28)^2x_2\)</span>，这样的话，<span class="math inline">\(x_1\)</span>和<span class="math inline">\(x_2\)</span>是线性相关的，矩阵<span class="math inline">\(X^TX\)</span>将是不可逆的</p></li>
<li><p><strong>太多特征</strong></p>
<p>运行的学习算法有很多的特征，如<span class="math inline">\(m \le n\)</span>时，特征数量比样本数量还要多，有时可能会成功，但通常来样本数量是不够的，因此，这种情况下，通常需要删除某些特征或使用正则化</p></li>
</ol>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-多分类和神经网络练习</title>
    <url>/2021/07/10/Part1-%E5%A4%9A%E5%88%86%E7%B1%BB%E5%92%8C%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-多分类和神经网络练习">Part1-多分类和神经网络练习</h1>
<h2 id="多分类">多分类</h2>
<h3 id="数据读取">1.1 数据读取</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = loadmat(<span class="string">&#x27;ex3data1.mat&#x27;</span>) <span class="comment"># 使用scipy.io中的loadmat加载mat数据</span></span><br><span class="line">data</span><br></pre></td></tr></table></figure>
<blockquote>
<p>{'X': array([[0., 0., 0., ..., 0., 0., 0.],</p>
<p>​ [0., 0., 0., ..., 0., 0., 0.],</p>
<p>​ [0., 0., 0., ..., 0., 0., 0.],</p>
<p>​ ...,</p>
<p>​ [0., 0., 0., ..., 0., 0., 0.],</p>
<p>​ [0., 0., 0., ..., 0., 0., 0.],</p>
<p>​ [0., 0., 0., ..., 0., 0., 0.]]),</p>
<p>'__globals__': [],</p>
<p>'__header__': b'MATLAB 5.0 MAT-file, Platform: GLNXA64, Created on: Sun Oct 16 13:09:09 2011',</p>
<p>'__version__': '1.0',</p>
<p>'y': array([[10],</p>
<p>​ [10],</p>
<p>​ [10],</p>
<p>​ ...,</p>
<p>​ [ 9],</p>
<p>​ [ 9],</p>
<p>​ [ 9]], dtype=uint8)}</p>
</blockquote>
<h3 id="数据可视化">1.2 数据可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = data[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">i = <span class="number">1616</span></span><br><span class="line">image = X[i, :]</span><br><span class="line">plt.matshow(image.reshape((<span class="number">20</span>, <span class="number">20</span>)), cmap=<span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">y.flatten()[i]</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210710115703019.png" /></p>
</blockquote>
<h3 id="向量化逻辑回归">1.3 向量化逻辑回归</h3>
<h4 id="代价函数">1.3.1 代价函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmiod</span>(<span class="params">z</span>):</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">theta, X, y, lr</span>):</span></span><br><span class="line">  a = -y.T@np.log(sigmoid(X@theta.T))</span><br><span class="line">  b = (<span class="number">1</span>-y).T@np.log(<span class="number">1</span>-sigmoid(X@theta.T))</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">float</span>((a-b)/X.shape[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<h4 id="梯度计算">1.3.2 梯度计算</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span>(<span class="params">theta, X, y, lr</span>):</span> <span class="comment"># n*m @ m*1</span></span><br><span class="line">  theta = theta.reshape((<span class="number">1</span>, X.shape[<span class="number">1</span>]))</span><br><span class="line">  <span class="keyword">return</span> (X.T@(sigmoid(X@theta.T)-y)).T/X.shape[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h4 id="参数">1.3.3 参数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_vs_all</span>(<span class="params">X, y, num_labels, lr</span>):</span></span><br><span class="line">  X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">  all_theta = np.zeros((num_labels, X.shape[<span class="number">1</span>]))</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_labels+<span class="number">1</span>):</span><br><span class="line">    theta = np.zeros((<span class="number">1</span>, X.shape[<span class="number">1</span>]))</span><br><span class="line">    y_i = np.array([<span class="number">1</span> <span class="keyword">if</span> label==i <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> label <span class="keyword">in</span> y]).reshape(X.shape[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">    fmin = minimize(fun=cost, x0=theta, args=(X, y_i, lr), method=<span class="string">&#x27;TNC&#x27;</span>, jac=gradient)</span><br><span class="line">    all_theta[i-<span class="number">1</span>,:] = fmin.x</span><br><span class="line">  <span class="keyword">return</span> all_theta</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">all_theta = one_vs_all(X, y, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">all_theta</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([[-5.00990434e+00, 0.00000000e+00, 0.00000000e+00, ...,</p>
<p>​ 1.30011051e-02, 2.86538705e-07, 0.00000000e+00],</p>
<p>​ [-5.71350473e+00, 0.00000000e+00, 0.00000000e+00, ...,</p>
<p>​ 6.86412447e-02, -7.09121713e-03, 0.00000000e+00],</p>
<p>​ [-8.08044687e+00, 0.00000000e+00, 0.00000000e+00, ...,</p>
<p>​ -2.56458615e-04, -1.07383182e-06, 0.00000000e+00],</p>
<p>​ ...,</p>
<p>​ [-1.30853787e+01, 0.00000000e+00, 0.00000000e+00, ...,</p>
<p>​ -5.37387945e+00, 6.20602454e-01, 0.00000000e+00],</p>
<p>​ [-8.81420750e+00, 0.00000000e+00, 0.00000000e+00, ...,</p>
<p>​ -2.68709952e-01, 1.66652812e-02, 0.00000000e+00],</p>
<p>​ [-6.71877525e+00, 0.00000000e+00, 0.00000000e+00, ...,</p>
<p>​ 5.14661140e-04, 2.18877575e-05, 0.00000000e+00]])</p>
</blockquote>
<h4 id="结果评估">1.3.4 结果评估</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_all</span>(<span class="params">X, all_theta</span>):</span></span><br><span class="line">  X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">  h = sigmoid(X@all_theta.T)</span><br><span class="line">  h_argmax = np.argmax(h, axis=<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> h_argmax+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_pred = predict_all(X, all_theta)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;accuracy：<span class="subst">&#123;np.<span class="built_in">sum</span>(y_pred==y.flatten())/<span class="built_in">len</span>(y_pred)*<span class="number">100</span>&#125;</span>%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>accuracy：97.42%</p>
</blockquote>
<h2 id="神经网络">神经网络</h2>
<h3 id="前向传播">2.1 前向传播</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载训练好的权重 </span></span><br><span class="line">data = loadmat(<span class="string">&#x27;ex3weights.mat&#x27;</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>
<blockquote>
<p>{'Theta1':...</p>
<p>'Theta2':...</p>
<p>'__globals__': [],</p>
<p>'__header__': b'MATLAB 5.0 MAT-file, Platform: GLNXA64, Created on: Tue Oct 18 14:57:02 2011',</p>
<p>'__version__': '1.0'}</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列化和反序列化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize</span>(<span class="params">theta1, theta2</span>):</span></span><br><span class="line">  <span class="keyword">return</span> np.append(theta1.flatten(), theta2.flatten())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deserialize</span>(<span class="params">params</span>):</span></span><br><span class="line">  theta1 = params[:(input_size+<span class="number">1</span>)*hidden_size].reshape((hidden_size, -<span class="number">1</span>))</span><br><span class="line">  theta2 = params[(input_size+<span class="number">1</span>)*hidden_size:].reshape((out_size, -<span class="number">1</span>))</span><br><span class="line">  <span class="keyword">return</span> theta1, theta2</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">X, params</span>):</span></span><br><span class="line">  theta1, theta2 = deserialize(params)</span><br><span class="line">  a1 = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">  z2 = a1@(theta1.T)</span><br><span class="line">  a2 = sigmoid(z2)</span><br><span class="line">  a2 = np.insert(a2, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">  z3 = a2@theta2.T</span><br><span class="line">  h = sigmoid(z3)</span><br><span class="line">  <span class="keyword">return</span> a1, z2, a2, z3, h</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结果</span></span><br><span class="line">params = serialize(data[<span class="string">&#x27;Theta1&#x27;</span>],data[<span class="string">&#x27;Theta2&#x27;</span>])</span><br><span class="line">_,_,_,_,res = forward(X, params)</span><br><span class="line">y_pred = np.argmax(res, axis=<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;accuracy：<span class="subst">&#123;np.<span class="built_in">sum</span>(y_pred==y.flatten())/<span class="built_in">len</span>(y_pred)*<span class="number">100</span>&#125;</span>%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>accuracy：97.52%</p>
</blockquote>
<h3 id="反向传播">2.2 反向传播</h3>
<h4 id="代价函数-1">2.2.1 代价函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">params, X, Y</span>):</span></span><br><span class="line">  m = X.shape[<span class="number">0</span>]</span><br><span class="line">  a1, z2, a2, z3, h = forward(X, params)</span><br><span class="line">  a = -Y*np.log(h) <span class="comment"># 10*5000 * 5000*10</span></span><br><span class="line">  b = (<span class="number">1</span>-Y)*np.log(<span class="number">1</span>-h)</span><br><span class="line">  <span class="keyword">return</span> (a-b).<span class="built_in">sum</span>()/m</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正则化代价函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_cost</span>(<span class="params">params, X, Y, reg</span>):</span></span><br><span class="line">  r1 = np.<span class="built_in">sum</span>(np.power(theta1[:,<span class="number">1</span>:],<span class="number">2</span>))</span><br><span class="line">  r2 = np.<span class="built_in">sum</span>(np.power(theta2[:,<span class="number">1</span>:],<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">return</span> cost(params, X, Y) + reg*(r1+r2)/(<span class="number">2</span>*X.shape[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<h4 id="sigmoid梯度">2.2.2 Sigmoid梯度</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_grad</span>(<span class="params">z</span>):</span></span><br><span class="line">  s = sigmoid(z)</span><br><span class="line">  <span class="keyword">return</span> s*(<span class="number">1</span>-s)</span><br></pre></td></tr></table></figure>
<h4 id="随机初始化">2.2.3 随机初始化</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确定每层单元数</span></span><br><span class="line"><span class="comment"># 400+1 -&gt; 25+1 -&gt; 10</span></span><br><span class="line">epsilon_init = <span class="number">0.12</span></span><br><span class="line">input_size = <span class="number">400</span></span><br><span class="line">hidden_size = <span class="number">25</span></span><br><span class="line">out_size = <span class="number">10</span></span><br><span class="line">weight_num = (input_size+<span class="number">1</span>)*hidden_size+(hidden_size+<span class="number">1</span>)*out_size</span><br><span class="line">W = np.random.rand(weight_num)*<span class="number">2</span>*epsilon_init - epsilon_init</span><br><span class="line">Y = np.array([[<span class="number">1</span> <span class="keyword">if</span> y[i]==x <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y))])</span><br></pre></td></tr></table></figure>
<h4 id="反向传播-1">2.2.4 反向传播</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backprop</span>(<span class="params">params, X, Y</span>):</span></span><br><span class="line">  m = X.shape[<span class="number">0</span>]</span><br><span class="line">  a1, z2, a2, z3, h = forward(X, params)</span><br><span class="line">  delta1 = np.zeros(theta1.shape)</span><br><span class="line">  delta2 = np.zeros(theta2.shape)</span><br><span class="line">  J = cost(params, X, Y)</span><br><span class="line"></span><br><span class="line">  d3 = h-Y</span><br><span class="line">  d2 = d3@theta2[:,<span class="number">1</span>:]*sigmoid_grad(z2)</span><br><span class="line">  D2 = (d3.T@a2)/<span class="built_in">len</span>(X)</span><br><span class="line">  D1 = (d2.T@a1)/<span class="built_in">len</span>(X)</span><br><span class="line"></span><br><span class="line">  grad = serialize(D1, D2)</span><br><span class="line">  <span class="keyword">return</span> J, grad</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_backprop</span>(<span class="params">params, X, Y, reg</span>):</span></span><br><span class="line">  _,D = backprop(params, X, Y)</span><br><span class="line">  D1,D2 = deserialize(D)</span><br><span class="line">  D1[:, <span class="number">1</span>:]+= (reg*theta1[:,<span class="number">1</span>:])/<span class="built_in">len</span>(X)</span><br><span class="line">  D2[:, <span class="number">1</span>:]+= (reg*theta2[:,<span class="number">1</span>:])/<span class="built_in">len</span>(X)</span><br><span class="line">  J = reg_cost(params, X, Y, reg)</span><br><span class="line">  <span class="keyword">return</span> J,serialize(D1, D2)</span><br></pre></td></tr></table></figure>
<h4 id="计算参数">2.2.5 计算参数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line">fmin = minimize(fun=backprop, x0=W, args=(X, Y), method=<span class="string">&#x27;TNC&#x27;</span>, jac=<span class="literal">True</span>, options=&#123;<span class="string">&#x27;maxiter&#x27;</span>: <span class="number">250</span>&#125;)</span><br><span class="line">_,_,_,_,h = forward(X, fmin.x)</span><br><span class="line">y_pred = np.argmax(h, axis=<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;accuracy：<span class="subst">&#123;np.<span class="built_in">sum</span>(y_pred==y.flatten())/<span class="built_in">len</span>(y_pred)*<span class="number">100</span>&#125;</span>%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>accuracy：99.88%</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fmin = minimize(fun=reg_backprop, x0=W, args=(X, Y, <span class="number">1</span>), method=<span class="string">&#x27;TNC&#x27;</span>, jac=<span class="literal">True</span>, options=&#123;<span class="string">&#x27;maxiter&#x27;</span>: <span class="number">250</span>&#125;)</span><br><span class="line">_,_,_,_,h = forward(X, fmin.x)</span><br><span class="line">y_pred = np.argmax(h, axis=<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;accuracy：<span class="subst">&#123;np.<span class="built_in">sum</span>(y_pred==y.flatten())/<span class="built_in">len</span>(y_pred)*<span class="number">100</span>&#125;</span>%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>accuracy：95.72%</p>
</blockquote>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-大规模机器学习</title>
    <url>/2021/07/21/Part1-%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-大规模机器学习">Part1-大规模机器学习</h1>
<h2 id="大数据集学习">大数据集学习</h2>
<h3 id="机器学习和数据">机器学习和数据</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721091055998.png" /></p>
<blockquote>
<p>“赢的不是最好的算法，而是有最多数据的算法”</p>
</blockquote>
<h3 id="大数据集学习-1">大数据集学习</h3>
<p><span class="math inline">\(\theta_j:=\theta_j - \alpha \frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)})\)</span></p>
<p>假设<span class="math inline">\(m=100,000,000\)</span></p>
<p>在训练模型之前，我们应该自问一下，为什么不只用1000个样本？</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721091726239.png" /></p>
<p>如果绘图如上，则我们可以认为增加额外的训练用例能够提升效果</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721091821261.png" /></p>
<p>相反，如果绘制的学习曲线如上图，则可以增加额外的训练用例可能对于训练结果并没有太好的效果</p>
<h2 id="随机梯度下降stochastic-gradient-descentsgd">随机梯度下降(Stochastic gradient descent,SGD)</h2>
<h3 id="梯度下降训练线性回归">梯度下降训练线性回归</h3>
<p><span class="math inline">\(h_\theta(x) = \sum_{j=1}^n \theta_j x_j\)</span></p>
<p><span class="math inline">\(J_{train}(\theta)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<p><span class="math inline">\(\theta_j:=\theta_j-\alpha \frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\)</span></p>
<p>梯度下降过程大致可如图理解</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721092642120.png" /></p>
<p>这种梯度下降法也叫做<strong>批量梯度下降(Batch gradient descent)</strong>，批量(Batch)的指的是每次都要同时考虑所有的训练样本；当数据集非常大时，训练过程就会非常慢。</p>
<h3 id="随机梯度下降">随机梯度下降</h3>
<p><span class="math inline">\(cost(\theta,(x^{(i)},y^{(i)}))=\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<p><span class="math inline">\(J_{train}(\theta)=\frac{1}{m} \sum_{i=1}^m cost(\theta, (x^{(i)},y^{(i)})\)</span></p>
<p>SGD:</p>
<ol type="1">
<li><p>随机打乱所有数据</p></li>
<li><p>循环：</p>
<p>for i=1,<span class="math inline">\(\cdots\)</span>,m:</p>
<p>​ <span class="math inline">\(\theta_j := \theta_j - \alpha(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\)</span>(for j=0,<span class="math inline">\(\cdots\)</span>,n)</p></li>
</ol>
<p>由于没有求和操作，所有面对大量数据时，就不需要将数据遍历一遍了(此处遍历是指当数据量大时，不用每次因为求和而将数据依次加载到内存，再从内存中替换的过程)</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721094029226.png" /></p>
<p>如图，如果使用SGD，可能训练过程就如图中紫红色线</p>
<h2 id="mini-batch-梯度下降">Mini-batch 梯度下降</h2>
<h3 id="mini-batch梯度下降">Mini-batch梯度下降</h3>
<p><strong>批量梯度下降(Batch gradient descent)</strong>：在每次迭代中使用所有的m个样本</p>
<p><strong>随机梯度下降(Stochastic gradient descent)</strong>：在每次迭代中使用1个样本</p>
<p><strong>Mini-batch梯度下降</strong>：在每次迭代中使用b个样本</p>
<p>b：Mini-batch的大小，通常会选择b=10，(2~100)</p>
<p>即：</p>
<p>每次获取b(=10)个样本<span class="math inline">\((x^{(i)},y^{(i)}),\cdots,(x^{(i+9)},y^{(i+9)})\)</span></p>
<p>​ 循环：</p>
<p>​ <span class="math inline">\(\theta_j := \theta_j - \alpha \frac{1}{10}\sum_{k=i}^{i+9}(h_\theta(x^{(k)})-y^{(k)})x_j^{(k)}\)</span>(j=0,<span class="math inline">\(\cdots\)</span>,n)</p>
<p>​ <span class="math inline">\(i:=i+10\)</span></p>
<p>其比批量梯度下降更快，而与SGD相比，当有一个好的矢量化方式时，Mini-batch梯度下降的效果会更好。</p>
<p>而Mini-梯度下降算法的缺点之一是：有一个额外的参数b，需要确定Mini-batch的大小</p>
<h2 id="随机梯度下降收敛">随机梯度下降收敛</h2>
<h3 id="检查收敛">检查收敛</h3>
<p>批量梯度下降：</p>
<p>​ 绘制关于迭代次数的代价函数<span class="math inline">\(J_{train}(\theta)\)</span>变化</p>
<p>​ <span class="math inline">\(J_{train}(\theta)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<p>SGD：</p>
<p>​ <span class="math inline">\(cost(\theta,(x^{(i)},y^{(i)}))=\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<p>​ 当SGD进行学习时，在我们对某个样本进行训练前，在随机梯度下降中，我们要关注样本<span class="math inline">\((x^{(i)},y^{(i)})\)</span>，然后对样本进行小的更新，然后到下个样本</p>
<p>​ 所以，当这个算法刚好扫描到样本<span class="math inline">\((x^{(i)},y^{(i)})\)</span>时，在更新参数前，我们可以计算出这个样本对应的cost函数。</p>
<p>​ 最后，为了检查算法是否收敛，我们可以在每1000次迭代后，就画出前一步中所计算出的cost函数，将之前这1000个cost函数值的均值画出</p>
<p>例：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721105214937.png" /></p>
<p>如果如图上左图所示的结果，这个图有很多噪声，因为它只是对一小部分样本求均值，这是一个不错的下降过程，可以看出代价函数的值在下降，从某个点开始，图像变得平缓，表示算法已经收敛如果尝试用一个更小的学习率，结果可能如图中红色所示的结果</p>
<p>如果如图上右图所示的结果，看起来，算法大概已经收敛了，如果将计算1000个样本均值换成计算5000个样本均值，则会得到一条更平滑的曲线，如图中红色部分</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721105720292.png" /></p>
<p>如果如图上左图所示，看上去代价函数完全没有在减小，看起来算法没有进行学习，但如果增加计算均值的数量，来对更多样本进行求均值，则结果可能会观察到图中红色线对应的情况，能看出代价函数实际上是在下降的；而如果即使使用了更大数量的样本，曲线还是很平坦，如图中紫红色曲线，那就代表算法不知出于何种原因，没有进行学习，这里就需要调整学习速率或特征或算法等</p>
<p>如果如图上右图所示，这种情况就是算法发散的信号，这里就需要用一个更小的学习率<span class="math inline">\(\alpha\)</span></p>
<blockquote>
<p>注意：</p>
<p>我们已经知道，在SGD运行过程中，算法会从某个值开始，然后曲折到达最小值，但它不会完全收敛，而是在最小值附近一起徘徊，因此最终得到的参数只是一个全局最小值的近似值，而不是真正的全局最小值。</p>
<p>在大多数SGD的典型应用中，学习率<span class="math inline">\(\alpha\)</span>一般是一个不变的常数，如果想让SGD更好的收敛到全局最小值，可以让学习率<span class="math inline">\(\alpha\)</span>随时间变化逐渐减小，一种典型的方法就是<span class="math inline">\(\alpha = \frac{常数1}{迭代次数+常数2}\)</span>，但这样就又需要花费时间调整这两个常数参数的值。</p>
<p>由于调整两个参数需要更多额外的工作，并且通常情况得到的参数值它接近全局最小值的程度已经足够使我们满意了，因此我们很少采用这种逐渐减小<span class="math inline">\(\alpha\)</span>的值的方法，而是让<span class="math inline">\(\alpha\)</span>保持一个常数。</p>
</blockquote>
<h2 id="在线学习">在线学习</h2>
<p>假设我们需要提供运输服务，用户们来询问将包裹从A地运到B地的服务，同时假定有一个网站，用户们登录网站，提供包裹的寄出地址和目的地址，然后网站需要计算出服务价格，然后根据计算出的价格，用户可能会接受(y=1)，有时他们不会接受(y=0)。</p>
<p>假定我们想要一个学习算法来帮助我们优化我们想给用户开出的价格。具体来说：</p>
<p>假设我们获取了描述用户特点的特征<span class="math inline">\(x\)</span>，如：寄出地址、目的地址等。我们想学习<span class="math inline">\(p(y=1|x;\theta)\)</span>来优化价格。</p>
<p>考虑使用逻辑回归：</p>
<p>假定有一个连续运行的网站，则以下就是在线学习算法所做的：</p>
<p>循环：</p>
<p>​ 在某个时候，一个用户访问了这个网站，对应一个<span class="math inline">\((x,y)\)</span></p>
<p>​ 使用<span class="math inline">\((x,y)\)</span>更新参数<span class="math inline">\(\theta\)</span>：</p>
<p>​ <span class="math inline">\(\theta_j:=\theta_j - \alpha (h_\theta(x)-y)x_j\)</span>(j=0,<span class="math inline">\(\cdots\)</span>,n)</p>
<blockquote>
<p>如果真的有这样一个大型网站，网站有连续的用户流，那么，这种在线学习算法就非常适用；如果我们只有少量的用户，那么就最好不要用这种在线学习算法，而是将所有的数据保存在一个固定的数据集，然后对这个数据集使用某种算法，但是如果有连续的数据流，则在线学习算法会非常有效。</p>
<p>而这种在线学习算法会带来一个有趣的效果，就是它可以适应变化的用户偏好，如随着时间变化、经济环境变化，用户可能 对价格更加敏感或更加不敏感，则在线学习算法也会根据变化着的用户偏好进行调整。</p>
</blockquote>
<h3 id="其它在线学习例子">其它在线学习例子</h3>
<p>产品搜索(学习如何反馈给用户更好的搜索列表)：</p>
<p>如用户搜索："安卓手机 1080p摄像头"</p>
<p>假设商店中有100种手机，需要返回10部合适的手机，而学习算法就需要找到最合适的10部手机返回给用户。</p>
<p><span class="math inline">\(x\)</span>：手机的各种特征，它会体现用户的搜索与这部手机的类似程度有多高，还可能体现用户搜索词中有多个个词可以与这部手机相匹配等</p>
<p><span class="math inline">\(y\)</span>：如果用户点击了链接，则对应<span class="math inline">\(y=1\)</span>，否则 <span class="math inline">\(y=0\)</span></p>
<p>学习<span class="math inline">\(p(y=1|x;\theta)\)</span></p>
<p>然后用来选择10个用户最可能点击的手机进行显示</p>
<p>这类学习问题，也被称作点击率预测学习问题，即CTR预测(predicted CTR(click through rate))</p>
<h2 id="映射化简与数据并行">映射化简与数据并行</h2>
<h3 id="映射化简map-reduce">映射化简(Map-reduce)</h3>
<p>为书写方便，这里假定m=400(实际上并不大)</p>
<p>批量梯度下降：<span class="math inline">\(\theta_j:=\theta_j-\alpha \frac{1}{400}\sum_{i=1}^{400}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\)</span></p>
<p>Map-reduce：</p>
<p>​ 将训练集分割成不同的子集，在这个例子中，有4台机器并行处理数据，则将训练集分成4份</p>
<p>​ 机器1：使用前四分之一训练集<span class="math inline">\((x^{(1)},y^{(1)}),\cdots,(x^{(100)},y^{(100)})\)</span></p>
<p>​ <span class="math inline">\(temp_j^{(1)}=\sum_{i=1}^{100}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\)</span></p>
<p>​ 机器2：使用<span class="math inline">\((x^{(101)},y^{(101)}),\cdots,(x^{(200)},y^{(200)})\)</span></p>
<p>​ <span class="math inline">\(temp_j^{(2)}=\sum_{i=101}^{200}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\)</span></p>
<p>​ 机器3：使用<span class="math inline">\((x^{(201)},y^{(201)}),\cdots,(x^{(300)},y^{(300)})\)</span></p>
<p>​ <span class="math inline">\(temp_j^{(3)}=\sum_{i=201}^{300}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\)</span></p>
<p>​ 机器4：使用<span class="math inline">\((x^{(301)},y^{(301)}),\cdots,(x^{(400)},y^{(400)})\)</span></p>
<p>​ <span class="math inline">\(temp_j^{(4)}=\sum_{i=301}^{400}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\)</span></p>
<p>​ 整合并行处理的结果：</p>
<p>​ <span class="math inline">\(\theta_j := \theta_j -\alpha \frac{1}{400}(temp_j^{(1)}+temp_j^{(2)}+temp_j^{(3)}+temp_j^{(4)})\)</span>(j=0,<span class="math inline">\(\cdots\)</span>,n)</p>
<h3 id="map-reduce应用在学习算法上">Map-reduce应用在学习算法上</h3>
<p>需要考虑的一个问题是：学习算法是否可以表示成对训练集的一种求和，实际上，很多算法都可以表示成对训练集的函数求和，而在大数据集上运行，所消耗的计算量就在于需要对非常大的训练集进行求和，所以，只要学习算法可以表示对训练集的求和或算法的主要工作可以表示成对训练集的求和，就可以使用Map-reduce来将学习算法的适用范围扩展到非常非常大的数据集</p>
<p>例：对于一个逻辑回归的优化算法，需要：</p>
<p><span class="math inline">\(J_{train}(\theta)=-\frac{1}{m}\sum_{i=1}^m y^{(i)}\log h_\theta(x^{(i)})-(1-y^{(i)})\log(1-h_\theta(x^{(i)}))\)</span></p>
<p><span class="math inline">\(\frac{\partial}{\partial \theta_j}J_{train}(\theta)=\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\)</span></p>
<p>就可以通过Map-reduce将求和的部分分别交给不同的机器进行并行计算，来并行化学习算法</p>
<h3 id="多核机器">多核机器</h3>
<p>目前我们只讨论了运用Map-reduce算法在多台电脑上并行计算，可能是计算机集群中的多台电脑，或者是数据中心的多台电脑，但有时，也可以在单机上进行Map-Reduce计算，因为现在很多电脑可以有多个CPU，多个CPU又有多个核心。</p>
<p>同一台电脑运行Map-reduce也可以不用担心由于通信传输接发变量<span class="math inline">\(temp_j\)</span>时的网络延迟问题。</p>
<p>取决于不同的实现，如果有一个多核机器，然后有某些线性代数的库，实际上，有些线性代数库可以自动在一台机器的不同核心上进行并行运算，如果用的是这样的线性代数库，且学习算法有很好的向量化表示，就可以直接以向量化的形式应用标准学习算法，而不用担心并行，因为线性代数库会处理好的，所以不用再应用Map-reduce</p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-应用实例：照片OCR</title>
    <url>/2021/07/22/Part1-%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B%EF%BC%9A%E7%85%A7%E7%89%87OCR/</url>
    <content><![CDATA[<h1 id="part1-应用实例照片ocr">Part1-应用实例：照片OCR</h1>
<h2 id="问题描述和管道pipeline">问题描述和管道(pipeline)</h2>
<p>照片OCR全称是照片光学字符识别(Photo Optical Character Recognition)</p>
<p>它有如下几个步骤：</p>
<ol type="1">
<li>给定某张图片，将图像扫描一遍</li>
<li>找出照片中的文字信息</li>
<li>重点关注这些文字区域，并对区域中的文字进行识别</li>
<li>将这些文字内容显示并记录下来</li>
</ol>
<p>照片OCR管道：</p>
<ol type="1">
<li>文字检测(Text detection)</li>
<li>字符分割(Character segmentation)</li>
<li>字符分类(Character recognition)</li>
</ol>
<p>像这样一个系统，我们将它称为<strong>机器学习流水线(machine learning pipeline)</strong></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721180353871.png" /></p>
<h2 id="滑动窗口">滑动窗口</h2>
<p>OCR pipeline的第一步是文字检测，文字检测在计算机视觉中是一个比较难的问题，因为根据找到的文字区域，它们对应的矩形具有不同的长宽比例，所以为了说明如何在图片中检测它们，首先从一个简单的例子开始，即行人检测，之后我们再将做行人检测的思路应用到文字识别中去。</p>
<p>如图，在行人检测中，有一张类似这样的图片，我们要找出图片的各个行人，这个问题比文字检测简单的地方在于要识别的东西具有相似的长宽比，仅用一个固定长宽比的矩形就可以了。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721181416315.png" /></p>
<h3 id="行人检测监督学习">行人检测监督学习</h3>
<p>如将比例标准定为<span class="math inline">\(82\times 36\)</span>，当然也可以选择其它的相近的数字</p>
<p>我们要做的是从数据集中收集一些正样本和负样本如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721215322186.png" /></p>
<h3 id="滑动窗口-1">滑动窗口</h3>
<p>现在，假设我们得到一张新图，我们尝试在图片中找到一个行人，我们首先在图片中选取一个矩形块如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721215539119.png" /></p>
<p>将这个图块传递给分类器，来检测图块中是否有行人，这里，分类器得到的结果应该是<span class="math inline">\(y=0\)</span>，接下来，将这个绿色矩形稍微移动一点，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721215736342.png" /></p>
<p>然后，再将这个图块传递给分类器判断是否有行人，之后再移动绿色矩形框，以此类推</p>
<p>这个绿色矩形每次移动的距离是一个参数，一般称为步长，有时也被称为滑动参数，如果一次移动一个像素，则步长就为1，一般步长为1时表现最好，但计算成本较高，通常将步长设为4像素或8像素或更大的数是比较常见的。</p>
<p>目前，这个矩形是一个很小的矩形，且它只会检测某个特定大小的行人，接下来，我们需要使用更大的矩形，再如上所述在整个图片上进行滑动，然后将每个图块调整到<span class="math inline">\(82\times 36\)</span>的大小，然后输入到分类器中。</p>
<p>最后还可以使用更大的矩形，再如上进行操作。</p>
<p>最后得到如图结果：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721215624598.png" /></p>
<h3 id="文字检测">文字检测</h3>
<p>与行人检测类似，拿出一系列包含正样本和负样本的训练集，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721215751980.png" /></p>
<p>训练完成后，将其应用在新的测试集的图片上，假设在如图所示的图片上，使用一个固定比例的滑动窗口进行滑动，然后进行分类</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721215924183.png" /></p>
<p>结果如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721220033161.png" /></p>
<p>其中白色区域，表示文本检测系统发现了文本</p>
<p>然后更近一步，将这些分类器的输出应用到放大算子(expansion operator)上，它所做的是获取每个白色方块，然后将白色区域扩大，结果如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721220310736.png" /></p>
<p>其实就是对于原图每个像素判断其一定范围内是否存在白色的像素，如果存在，那么就在新图中将整个范围内的像素都变成白色。</p>
<p>可以用一个简单方法来排除那些比例奇怪的矩形，因为我们知道文本周围的框宽度应该远大于高度，所以如果我们忽略瘦高的矩形，然后在宽高比例正常的白色方块周围画上矩形，就会得到还不错的结果。</p>
<h3 id="字符分割">字符分割</h3>
<p>给定如图所示的图片，如何分割出图像中的单个字符?</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721221452133.png" /></p>
<p>我们要做的就是再次使用监督学习算法用一些正样本和一些负样本，观察这些样本，判断图块是是否存在文字分割的地方</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721221622920.png" /></p>
<p>然后和文字检测一样，使用滑动窗口在需要分割的图像上进行滑动，将每个图块输入到分类器中，然后进行分割。</p>
<h2 id="获取大量数据人工数据合成">获取大量数据：人工数据合成</h2>
<h3 id="字符识别">字符识别</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210721222329823.png" /></p>
<h3 id="人工合成数据">人工合成数据</h3>
<p>假设我们收集到了一个大的标签数据集如图所示：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210722125321288.png" /></p>
<p>我们如何才能得到一个更大的训练集呢？</p>
<p>现代计算机通常有一个庞大的字体库，如果有文字处理软件或通过网络下载，还能获得更多的字体，因此，如果想要更多的训练样本，一个方法是用不同的字符生成字符，然后将其置于任意不同的背景，得到人造数据集</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210722125748617.png" /></p>
<h3 id="通过引入失真合成数据">通过引入失真合成数据</h3>
<p>我们使用一个真实的样本，然后生成其它数据来扩充训练集。</p>
<p>如图，一个真实图像，我们在上面覆盖了网格线，只是为了便于说明。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210722130247953.png" /></p>
<p>接下来要做的就是对这张图进行人工拉伸或者说人工扭曲，这样就可以将该样本变成16个新的样本如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210722130429682.png" /></p>
<p>采用这种办法，就可以将一个小的标签训练集扩充为一个更大的训练集。</p>
<h3 id="通过引入失真合成数据语音识别">通过引入失真合成数据：语音识别</h3>
<p>对于语音识别而言，假设有一些音频片段，然后想从中学习来识别语音片段中出现的单词，假定有一个带标签的训练样本，它是某个人说的一些词，我们想尝试使用一个学习算法来识别那个人说的单词，那么，我们该如何扩充数据集呢？</p>
<p>我们能做的就是：引入额外的语音失真到数据集中。如：加入背景音(蜂鸣噪音、道路上的噪音、机器噪音等)</p>
<blockquote>
<p>注：在引入失真合成数据时，如果试图自己完成，则引入的失真应该具有代表性，这些噪音或扭曲是有可能出现在测试集中的，所以对于字符识别例子来说，我们引入的扭曲实际上是合理的。</p>
<p>如果只是随机的无意义的噪音加入到数据中，并没有什么帮助，如对于之前的图片A，将每个像素随机加入一些高斯噪音，即改变每个像素的亮度，如果只是随机的加入一些高斯噪音到每个像素中，就只是完全没有意义的噪音，因此除非觉得有可能在测试集中看到这种像素级的噪音，否则这种纯随机的无意义的噪音可能是无用的。</p>
</blockquote>
<h3 id="对于获取更多数据的讨论">对于获取更多数据的讨论</h3>
<ol type="1">
<li>在使用许多时间想办法生成人工训练样本之前，通常最好先确保分类器偏差较低，这样的话，更多的训练数据都会真正起作用，标签的做法是绘制一个学习曲线来确保有一个低偏差、高方差的分类器。而如果分类器偏差较高，则可以尝试持续增加分类器的特征数量或增加神经网络隐藏单元的数量，直到偏差降低，然后再花精力到生成大量的人工训练集上</li>
<li>在研究机器学习问题时，经常需要问如何获得我们当前拥有的数据的十倍的数据量，需要花费多少时间去实现？问题的答案通常是其实没有那么困难，可能最多花上几天的工作，就可以获取现有的十倍数据，并且通常如果能得到当前数据的十位数据，就可以使算法运行得更好
<ul>
<li>人工合成数据</li>
<li>自己收集数据或添加标签</li>
<li>“众包”（群众外包(Crowd Source))</li>
</ul></li>
</ol>
<h2 id="上限分析流水线的下一步工作">上限分析：流水线的下一步工作</h2>
<h3 id="根据每个组件进行误差分析上限分析">根据每个组件进行误差分析(上限分析)</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210722132919652.png" /></p>
<p>应该如何分配资源呢？哪一部分最值得我们投入精力去做或投入时间去心善效果？这便是上限分析要做的事，和其它机器学习系统的开发过程一样，为了决定如何开发这个系统，一个有效的方法是对学习系统使用一个数值评价量度。</p>
<p>假如我们使用字符准确度作为这个量度，给定一个测试样本，那么这个数值就表示我们地测试图像中的文本识别正确的比例，或者也可以选择其它评价量度值。最终可能得到整个系统目前的准确率为72%。</p>
<p>上限分析：</p>
<p>首先，我们关注这个机器学习工作流中的第一个模块：文本检测。然后遍历每个测试集样本，人为地告诉算法每个测试样本中文本的位置，换句话说，我们就是要仿真出如果是100%正确地检测出图片中的文本信息，应该是什么样的？</p>
<p>然后，我们继续运行完成接下来的模块，再用和之前一样的评价量度的指标进行评估，得到整个系统的总的准确率如89%</p>
<p>然后，进入到下一阶段，这时，我们不仅使用正确的文本检测结果，还同时使用标准的字符分割结果，再如上所述进行，最终得到系统准确率如90%</p>
<p>同理，使用正确的三个模块的输出结果，这样以后，理所当然得到100%准确率</p>
<p>然后，我们就知道了对每个模块进行改善后它们各自的上升空间是多大，根据上述过程，对文字样本改善上升空间为17%，对于文本分割上升空间为1%，对于字符检测上升空间为10%</p>
<p>然后根据各自的上升空间衡量需要先做什么或在哪一部分花费更多时间。</p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-异常检测</title>
    <url>/2021/07/19/Part1-%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="part1-异常检测">Part1-异常检测</h1>
<h2 id="问题动机">问题动机</h2>
<blockquote>
<p>例：假设你是一个飞机引擎制造商，当在生产线上生成飞机引擎时，需要进行质量控制测试，而作为这个测试的一部分，测量了飞机引擎的一些特征变量如：<span class="math inline">\(x_1\)</span>:引擎运转时产生的热量；<span class="math inline">\(x_2\)</span>:振动强度。于是就有了一个数据集：<span class="math inline">\(\{x^{(1)},x^{(2)},\cdots,x^{(m)} \}\)</span></p>
</blockquote>
<p>如果画图，可能如下：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719090702538.png" /></p>
<p>这样，异常检测问题可以定义如下：</p>
<p>假设有一个新的飞机引擎<span class="math inline">\(x_{test}\)</span>被生产出来，而所谓的异常检测问题就是我们希望知道这个新的飞机引擎是否有某种异常。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719091142320.png" /></p>
<p>如果更正式的定义异常检测问题，则：</p>
<p>数据集：<span class="math inline">\(\{x^{(1)},x^{(2)},\cdots,x^{(m)} \}\)</span></p>
<p>则<span class="math inline">\(x_{test}\)</span>是异常的么？</p>
<p>通常假定这m个样本都是正常的或者说是非异常的，然后我们需要一个算法来确定新的样本数据是否是异常的。</p>
<p>我们要采用的方法就是给定无标签的训练集，对数据建模得到模型：<span class="math inline">\(p(x)\)</span>，换句话说，我们将对<span class="math inline">\(x\)</span>的概率分布建模，则对于一个新的样本，如果<span class="math inline">\(p(x_{test}) &lt; \epsilon\)</span>，则将其标记为异常，如果<span class="math inline">\(p(x_{test})\ge \epsilon\)</span>，则将其标记为正常</p>
<blockquote>
<p>其它异常检测案例：</p>
<p>欺诈检测：</p>
<ul>
<li><span class="math inline">\(x^{(i)}\)</span>：用户<span class="math inline">\(i\)</span>的活动特征</li>
<li>从数据中构建模型<span class="math inline">\(p(x)\)</span></li>
<li>通过检查<span class="math inline">\(p(x)&lt;\epsilon\)</span>判断用户是否异常</li>
</ul>
</blockquote>
<h2 id="高斯分布">高斯分布</h2>
<p>假设<span class="math inline">\(x\in \mathbb R\)</span>，如果<span class="math inline">\(x\)</span>服从均值<span class="math inline">\(\mu\)</span>，方差<span class="math inline">\(\sigma^2\)</span>的高斯分布 ，记作：<span class="math inline">\(x\)</span>~$ N(, ^2) $</p>
<p><span class="math inline">\(p(x;\mu;\sigma^2)=\frac{1}{\sqrt{2\pi}\sigma}\exp(-\frac{(x-\mu)^2}{2\sigma^2})\)</span></p>
<h3 id="高斯分布例子">高斯分布例子</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719095216839.png" /></p>
<h3 id="参数估计">参数估计</h3>
<p>数据集：<span class="math inline">\(\{x^{(1)},x^{(2)},\cdots,x^{(m)} \} x^{(i)} \in \mathbb R\)</span></p>
<p>参数估计问题就是：假设我们猜测这些样本来自一个高斯分布的总体，假设我们猜测每个样本<span class="math inline">\(x^{(i)}\)</span>服从某个分布，这里猜测服从高斯分布(正态分布)，它由两个参数(<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\sigma^2\)</span>)决定，但并不知道这两个参数的值是多少，参数估计问题就是给定数据集，希望找到能估算出<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\sigma^2\)</span>的值。</p>
<p>估计<span class="math inline">\(\mu\)</span>的方法：<span class="math inline">\(\mu = \frac{1}{m}\sum_{i=1}^m x^{(i)}\)</span></p>
<p>估计<span class="math inline">\(\sigma^2\)</span>的方法：<span class="math inline">\(\sigma^2 = \frac{1}{m}\sum_{i=1}^m(x^{(i)}-\mu)^2\)</span></p>
<h2 id="异常检测算法">异常检测算法</h2>
<p>训练集：<span class="math inline">\(\{x^{(1)},\cdots,x^{(m)} \}\)</span></p>
<p>每个样本：<span class="math inline">\(x \in \mathbb R\)</span></p>
<p><span class="math inline">\(\begin{split} p(x) &amp;= p(x_1;\mu_1,\sigma_1^2)p(x_2;\mu_2,\sigma_2^2)\cdots p(x_n;\mu_n,\sigma_n^2) \\ &amp;=\prod_{j=1}^np(x_j;\mu_j,\sigma^2_j) \end{split}\)</span></p>
<p>整理：</p>
<ol type="1">
<li><p>选择认为在异常检测中有用的特征</p></li>
<li><p>拟合参数<span class="math inline">\(\mu1,\cdots,\mu_n,\sigma_1^2,\cdots,\sigma_n^2\)</span></p>
<p><span class="math inline">\(\mu_j=\frac{1}{m}\sum_{i=1}^m x_j^{(i)}\)</span></p>
<p><span class="math inline">\(\sigma_j^2 = \frac{1}{m} \sum_{i=1}^m(x_j^{(i)}-\mu_j)^2\)</span></p></li>
<li><p>给定新的样本<span class="math inline">\(x\)</span>，计算<span class="math inline">\(p(x)\)</span>：</p>
<p><span class="math inline">\(p(x)=\prod_{j=1}^n p(x_j;\mu_j,\sigma_j^2)=\prod_{j=1}^n\frac{1}{\sqrt(2\pi)\sigma_j}\exp(-\frac{(x_j-\mu_j)^2}{2\sigma^2_j})\)</span></p>
<p>如果<span class="math inline">\(p(x) &lt; \epsilon\)</span>为异常</p></li>
</ol>
<h2 id="开发和评估异常检测系统">开发和评估异常检测系统</h2>
<h3 id="实数评估的重要性">实数评估的重要性</h3>
<p>当我们为某个应用开发一个学习算法时，需要进行一系列的选择(如选择使用什么特征等)，如果有某种方法通过返回一个实数，来评估我们的算法，那么对这些选择作出决定往往会容易得多。</p>
<p>假设我们有一些异常的或正常的带标签的数据(如果正常则是<span class="math inline">\(y=0\)</span>，否则<span class="math inline">\(y=1\)</span>)</p>
<p>训练集：<span class="math inline">\(x^{(1)},x^{(2)},\cdots,x^{(m)}\)</span></p>
<p>交叉验证集：<span class="math inline">\((x_{cv}^{(1)},y_{cv}^{(1)}),\cdots,(x_{cv}^{m_{cv}},y_{cv}^{(m_{cv})})\)</span></p>
<p>测试集：<span class="math inline">\((x_{test}^{(1)},y_{test}^{(1)}),\cdots,(x_{test}^{(m_{test})},y_{test}^{(m_{test})})\)</span></p>
<blockquote>
<p>例：以飞机引擎为例，假设有10000个正常的引擎，20个异常的引擎</p>
<p>划分：</p>
<p>​ 训练集：6000个正常引擎</p>
<p>​ 交叉验证集：2000个正常引擎(y=0)，10个异常的(y=1)</p>
<p>​ 测试集：2000个正常引擎(y=0)，10个异常的(y=1)</p>
</blockquote>
<h3 id="算法评估">算法评估</h3>
<ul>
<li>在训练集<span class="math inline">\(\{x^{(1)},\cdots,x^{(m)}\}\)</span>上拟合模型<span class="math inline">\(p(x)\)</span></li>
<li>在交叉验证集或测试集上，预测<span class="math inline">\(\left\{ \begin{split} &amp;1，如果p(x) &lt; \epsilon(异常) \\ &amp;0，如果p(x) \ge \epsilon(正常\end{split} \right.\)</span></li>
<li>可能的评估度量
<ul>
<li>真阳性，假阳性，假阴性，真阴性</li>
<li>查准率/召回率</li>
<li><span class="math inline">\(F_1\)</span>值</li>
</ul></li>
<li>也可以使用交叉验证集来选择参数<span class="math inline">\(\epsilon\)</span>
<ul>
<li>选择能使<span class="math inline">\(F_1\)</span>值最大的<span class="math inline">\(\epsilon\)</span></li>
</ul></li>
</ul>
<h2 id="异常检测-vs.-监督学习">异常检测 VS. 监督学习</h2>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">异常检测</th>
<th style="text-align: center;">监督学习</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">非常少的异常样本，而正常样本很多</td>
<td style="text-align: center;">非常多的正负样本</td>
</tr>
<tr class="even">
<td style="text-align: center;">经常有许多不同类型的异常，则对于算法来说就很难去从小数量的异常样本中去学习异常是什么，尤其是未来可能出现的异常，看起来可能会与已有的截然不同</td>
<td style="text-align: center;">有足够的异常样本，或是一个已经能识别异常样本的算法，未来出现的异常可能与训练集中的某个异常样本类似</td>
</tr>
<tr class="odd">
<td style="text-align: center;">如：欺诈检测、制造业、数据中心的机器监视</td>
<td style="text-align: center;">如：垃圾邮件分类、天气预测、肿瘤分类</td>
</tr>
</tbody>
</table>
<h2 id="选择要使用的特征">选择要使用的特征</h2>
<p>如图，如果将对应特征画图，得出的直方图，符合高斯分布，则显然可以将其作为特征进行尝试：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719132416712.png" /></p>
<p>如果数据画出来，看上去不像一条钟型曲线，通常可以对数据进行一些不同的<strong>特征转换</strong><span class="math inline">\(如z = \log(x)\)</span>，使得它看上去更接近高斯分布，虽然即使不这样做，算法也能运行，但如果这样转换了，那么算法可能可以运行得更好</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719132637958.png" /></p>
<h3 id="异常检测的误差分析">异常检测的误差分析</h3>
<p>首先完整地训练一个算法，然后在一组交叉验证集上运行算法，然后找出那些预测错的样本，并观察能否找到一些其它特征来帮助学习算法，让那些在交叉验证集中判断出错的样本表现更好。</p>
<p>即在异常检测中，我们希望：</p>
<p><span class="math inline">\(p(x)\)</span>在正常样本的情况下比较大；在异常样本的情况下比较小</p>
<p>常见问题：</p>
<p>如果<span class="math inline">\(p(x)\)</span>是可比较的，当样本正常或异常时，<span class="math inline">\(p(x)\)</span>都比较大</p>
<h3 id="数据中心计算机监控案例">数据中心计算机监控案例</h3>
<p>通常选择那些既不会特别大，也不会特别小的特征</p>
<p>以监控数据中心计算机为例：</p>
<p><span class="math inline">\(x_1:\)</span>计算机内存使用</p>
<p><span class="math inline">\(x_2\)</span>：可使用硬盘数</p>
<p><span class="math inline">\(x_3\)</span>：CPU负载</p>
<p><span class="math inline">\(x_4\)</span>：网络流量</p>
<p>假设有一台计算机运行到一个死循环卡住了，导致CPU负载升高但网络流量没有升高，在这种情况下，要检测出异常，可以建立一个新特征<span class="math inline">\(x_5 = \frac{x_3}{x_4}\)</span>，这样如果有一台计算机CPU负载高而网络流量正常就会让<span class="math inline">\(x_5\)</span>的值非常大</p>
<h2 id="多变量高斯分布">多变量高斯分布</h2>
<blockquote>
<p>还是以数据中心计算机监控为例：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719134522352.png" /></p>
<p>如果将这两个特征变量<span class="math inline">\(x_1\)</span>和<span class="math inline">\(x_2\)</span>当做高斯分布来建模，如果用高斯分布来拟合，则结果如图中右部分</p>
<p>然后，对于测试集中的一个样本，假设其对应的<span class="math inline">\(x_1\approx 0.4,x_2 \approx 1.5\)</span>，从图中左部分的数据分布看，这个测试样本应该是异常的，而在异常检测算法来看，对于<span class="math inline">\(x_1\)</span>和<span class="math inline">\(x_2\)</span>分别代入图中右部分，会发现其对应的纵坐标都相对并不大也不是太小，所以<span class="math inline">\(p(x_1)\)</span>，<span class="math inline">\(p(x_2)\)</span>也会不大不小，因此，这个点看上去并不是属于异常的，所以这时，异常检测算法并不能正确预测。</p>
</blockquote>
<p>为了解决上述问题，我们需要使用一种改良的异常检测算法，要用到多元高斯分布</p>
<h3 id="多元高斯分布多元正态分布">多元高斯分布(多元正态分布)</h3>
<p><span class="math inline">\(x\in \mathbb R^n\)</span>，不要分别为<span class="math inline">\(p(x_1),p(x_2),\cdots\)</span>分别建模，而是建立一个整体的<span class="math inline">\(p(x)\)</span>模型</p>
<p>多元高斯分布的参数是：<span class="math inline">\(\mu\in \mathbb R^n,\Sigma \in \mathbb R^{n\times n}(协方差矩阵)\)</span> <span class="math display">\[
p(x;\mu,\Sigma)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{\frac{1}{2}}} \exp(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu)) \\
(|\Sigma|:\Sigma的行列式)
\]</span> 例：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719135946636.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719140216692.png" /></p>
<h2 id="使用多元高斯分布进行异常检测">使用多元高斯分布进行异常检测</h2>
<p>参数：<span class="math inline">\(\mu,\Sigma\)</span></p>
<p><span class="math inline">\(p(x;\mu,\Sigma)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{\frac{1}{2}}} \exp(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu))\)</span></p>
<p>参数拟合：</p>
<p>给定训练集：<span class="math inline">\(\{x^{(1)},x^{(2)},\cdots,x^{(m)} \}\)</span></p>
<p><span class="math inline">\(\mu = \frac{1}{m} \sum_{i=1}^mx^{(i)}\)</span></p>
<p><span class="math inline">\(\Sigma = \frac{1}{m} \sum_{i=1}^m (x^{(i)}-\mu)(x^{(i)}-\mu)^T\)</span></p>
<h3 id="多元高斯分布异常检测">多元高斯分布异常检测</h3>
<ol type="1">
<li>拟合模型，通过上述<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\Sigma\)</span>的计算公式</li>
<li>给定一个新的样本<span class="math inline">\(x\)</span>，计算<span class="math inline">\(p(x)\)</span>，如果<span class="math inline">\(p(x) &lt; \epsilon\)</span>，则对应标记为异常</li>
</ol>
<h3 id="多元高斯分布模型和原始模型的关系">多元高斯分布模型和原始模型的关系</h3>
<p>原始模型：<span class="math inline">\(p(x) = p(x_1;\mu_1,\sigma_1^2)\times p(x_2;\mu_2,\sigma_2^2)\times \cdots \times p(x_n;\mu_n,\sigma_n^2)\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210719141806227.png" /></p>
<p>如图，其轮廓都轴对称的</p>
<p>对比多元高斯模型：<span class="math inline">\(p(x;\mu,\Sigma)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{\frac{1}{2}}} \exp(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu))\)</span></p>
<p>而多元高斯模型则对应的轮框可以是非轴对称的，通过数据证明，其实可以发现原始模型实际上就是某种特殊情形下的多元高斯分布</p>
<p>这一特殊情形其实就是当多元高斯模型的<span class="math inline">\(\Sigma\)</span>在非对角线上都是0时，即<span class="math inline">\(\Sigma = \left[ \begin{matrix} \sigma_1^2 &amp; 0 &amp; 0&amp; 0 \\ 0 &amp; \sigma_2^2 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; \cdots &amp; 0 \\ 0 &amp; 0 &amp; 0&amp; \sigma_n^2 \end{matrix} \right]\)</span></p>
<h3 id="原始模型和多元高斯模型对比">原始模型和多元高斯模型对比</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">原始模型</th>
<th style="text-align: center;">多元高斯模型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(p(x) = p(x_1;\mu_1,\sigma_1^2)\times p(x_2;\mu_2,\sigma_2^2)\times \cdots \times p(x_n;\mu_n,\sigma_n^2)\)</span></td>
<td style="text-align: center;"><span class="math inline">\(p(x;\mu,\Sigma)=\frac{1}{(2\pi)^{n/2}|\Sigma|^{\frac{1}{2}}} \exp(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu))\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">当有一些特征<span class="math inline">\(x_1,x_2\)</span>等，想通过异常的组合值来捕捉异常样本，需要创建一个额外的特征</td>
<td style="text-align: center;">能自动捕捉这种不同特征之间的关系</td>
</tr>
<tr class="odd">
<td style="text-align: center;">计算成本低(适应巨大规模的特征)</td>
<td style="text-align: center;">计算成本高</td>
</tr>
<tr class="even">
<td style="text-align: center;">当训练样本数少时可以使用</td>
<td style="text-align: center;">样本数量必须大于特征数量(实际应用中，应该m &gt;&gt; n)，否则<span class="math inline">\(\Sigma\)</span>是不可逆</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：如果<span class="math inline">\(\Sigma\)</span>是不可逆的，则可能存在以下两种情况：</p>
<ol type="1">
<li>没有满足 m &gt; n</li>
<li>存在冗余特征(特征相同或特征存在线性相关)</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-异常检测和推荐系统练习</title>
    <url>/2021/07/23/Part1-%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E5%92%8C%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-异常检测和推荐系统练习">Part1-异常检测和推荐系统练习</h1>
<h2 id="异常检测">异常检测</h2>
<h3 id="数据可视化">1.1 数据可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line">data = loadmat(<span class="string">&#x27;ex8data1.mat&#x27;</span>)</span><br><span class="line">X = data[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210722143759546.png" /></p>
</blockquote>
<h3 id="高斯分布参数估计">1.2 高斯分布参数估计</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">len</span>(X)</span><br><span class="line">u = (np.<span class="built_in">sum</span>(X, axis=<span class="number">0</span>))/m</span><br><span class="line">sigma = (np.<span class="built_in">sum</span>((X-u)**<span class="number">2</span>, axis=<span class="number">0</span>))/m</span><br><span class="line">u, sigma</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(array([14.11222578, 14.99771051]), array([1.83263141, 1.70974533]))</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">25</span>, <span class="number">100</span>)</span><br><span class="line">y = np.linspace(<span class="number">0</span>, <span class="number">25</span>, <span class="number">100</span>)</span><br><span class="line">xx, yy = np.meshgrid(x, y)</span><br><span class="line">Z = np.exp(-((xx-u[<span class="number">0</span>])**<span class="number">2</span>/sigma[<span class="number">0</span>]+(yy-u[<span class="number">1</span>])**<span class="number">2</span>/sigma[<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">plt.contour(xx, yy, Z, [<span class="number">10</span>**-<span class="number">11</span>,<span class="number">10</span>**-<span class="number">7</span>,<span class="number">10</span>**-<span class="number">5</span>,<span class="number">10</span>**-<span class="number">3</span>,<span class="number">0.1</span>])</span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210722143955019.png" /></p>
</blockquote>
<h2 id="选择阈值">1.3 选择阈值</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p</span>(<span class="params">X,u,sigma</span>):</span></span><br><span class="line">  t = (np.exp(-(X-u)**<span class="number">2</span>/(<span class="number">2</span>*sigma)))/np.sqrt(<span class="number">2</span>*np.pi*sigma)</span><br><span class="line">  <span class="keyword">return</span> np.prod(t, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_epsilon</span>(<span class="params">pred, yval</span>):</span></span><br><span class="line">  best_epsilon = <span class="number">0</span></span><br><span class="line">  best_f1 = <span class="number">0</span></span><br><span class="line">  step = (pred.<span class="built_in">max</span>()-pred.<span class="built_in">min</span>())/<span class="number">1000</span></span><br><span class="line">  <span class="keyword">for</span> epsilon <span class="keyword">in</span> np.arange(pred.<span class="built_in">min</span>(), pred.<span class="built_in">max</span>(), step):</span><br><span class="line">    pred = pred &lt; epsilon</span><br><span class="line">    tp = np.<span class="built_in">sum</span>(np.logical_and(pred==<span class="number">1</span>, yval==<span class="number">1</span>))</span><br><span class="line">    fp = np.<span class="built_in">sum</span>(np.logical_and(pred==<span class="number">1</span>, yval==<span class="number">0</span>))</span><br><span class="line">    fn = np.<span class="built_in">sum</span>(np.logical_and(pred==<span class="number">0</span>, yval==<span class="number">1</span>))</span><br><span class="line">    precision = tp/(tp+fp)</span><br><span class="line">    recall = tp/(tp+fn)</span><br><span class="line">    f1 = (<span class="number">2</span>*precision*recall)/(precision+recall)</span><br><span class="line">    <span class="keyword">if</span> f1 &gt; best_f1:</span><br><span class="line">      best_f1 = f1</span><br><span class="line">      best_epsilon = epsilon</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> best_epsilon, best_f1</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pred = p(data[<span class="string">&#x27;Xval&#x27;</span>], u, sigma)</span><br><span class="line">epsilon, f1 = select_epsilon(pred, data[<span class="string">&#x27;yval&#x27;</span>])</span><br><span class="line">epsilon, f1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(8.990852779269493e-05, 0.056962025316455694)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = np.where(pred &lt; epsilon)</span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>], X[:,<span class="number">1</span>])</span><br><span class="line">plt.scatter(X[res[<span class="number">0</span>], <span class="number">0</span>], X[res[<span class="number">0</span>], <span class="number">1</span>], s=<span class="number">100</span>, color=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210722182446787.png" /></p>
</blockquote>
<h3 id="高维数据">1.4 高维数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">p = stats.multivariate_normal(data[<span class="string">&#x27;X&#x27;</span>].mean(axis=<span class="number">0</span>), np.cov(data[<span class="string">&#x27;X&#x27;</span>].T)).pdf(data[<span class="string">&#x27;X&#x27;</span>])</span><br><span class="line">pred = stats.multivariate_normal(data[<span class="string">&#x27;X&#x27;</span>].mean(axis=<span class="number">0</span>), np.cov(data[<span class="string">&#x27;X&#x27;</span>].T)).pdf(data[<span class="string">&#x27;Xval&#x27;</span>])</span><br><span class="line">epsilon, f1 = select_epsilon(pred, data[<span class="string">&#x27;yval&#x27;</span>])</span><br><span class="line">epsilon, f1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(1.7464996396712342e-18, 0.18181818181818182)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = np.where(p &lt; epsilon)</span><br><span class="line"><span class="built_in">len</span>(res[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>122</p>
</blockquote>
<p>检测结果显示有122个异常点</p>
<h2 id="推荐系统">推荐系统</h2>
<h3 id="加载数据">2.1 加载数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = loadmat(<span class="string">&#x27;ex8_movies.mat&#x27;</span>)</span><br><span class="line">data_param = loadmat(<span class="string">&#x27;ex8_movieParams.mat&#x27;</span>)</span><br><span class="line"><span class="comment"># Y是包含从1到5的等级评分，R是表示用户是否对电影进行评分</span></span><br><span class="line">R = data[<span class="string">&#x27;R&#x27;</span>]</span><br><span class="line">Y = data[<span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line">X = data_param[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">theta = data_param[<span class="string">&#x27;Theta&#x27;</span>]</span><br><span class="line">Y.shape,R.shape</span><br></pre></td></tr></table></figure>
<blockquote>
<p>((1682, 943), (1682, 943))</p>
</blockquote>
<h3 id="协同过滤代价函数">2.2 协同过滤代价函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize</span>(<span class="params">X, theta</span>):</span></span><br><span class="line">  <span class="keyword">return</span> np.concatenate((X.ravel(), theta.ravel()))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deserialize</span>(<span class="params">param, n_m, n_u, n</span>):</span></span><br><span class="line">  <span class="keyword">return</span> param[:n_m*n].reshape(n_m, n), param[n_m*n:].reshape(n_u, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">param, Y, R, n</span>):</span></span><br><span class="line">  n_m, n_u = Y.shape</span><br><span class="line">  X, theta = deserialize(param, n_m, n_u, n)</span><br><span class="line">  <span class="keyword">return</span> np.power((X@theta.T-Y)*R,<span class="number">2</span>).<span class="built_in">sum</span>()/<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="协同过滤梯度">2.3 协同过滤梯度</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span>(<span class="params">param, Y, R, n</span>):</span></span><br><span class="line">  n_m, n_u = Y.shape</span><br><span class="line">  X, theta = deserialize(param, n_m, n_u, n)</span><br><span class="line">  inner = (X@theta.T-Y)*R</span><br><span class="line">  X_grad = inner@theta</span><br><span class="line">  theta_grad = inner.T@X</span><br><span class="line">  <span class="keyword">return</span> serialize(X_grad, theta_grad)</span><br></pre></td></tr></table></figure>
<h3 id="正则化">2.3 正则化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_cost</span>(<span class="params">param, Y, R, n, lamb=<span class="number">1</span></span>):</span></span><br><span class="line">  reg_term = np.power(param, <span class="number">2</span>).<span class="built_in">sum</span>()*(lamb/<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> cost(param, Y, R, n)+reg_term</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_gradient</span>(<span class="params">param, Y, R, n, lamb=<span class="number">1</span></span>):</span></span><br><span class="line">  reg_term = <span class="number">1</span>*param</span><br><span class="line">  <span class="keyword">return</span> gradient(param, Y, R, n)+reg_term</span><br></pre></td></tr></table></figure>
<h3 id="预测电影评分">2.4 预测电影评分</h3>
<h4 id="读取数据">2.4.1 读取数据</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">movie_list = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;movie_id.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    movie_list.append(<span class="string">&#x27;&#x27;</span>.join(line.strip().split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>:]))</span><br><span class="line">movie_list</span><br></pre></td></tr></table></figure>
<h3 id="初始化自己对电影的评分">2.4.2 初始化自己对电影的评分</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ratings = np.zeros(<span class="number">1682</span>)</span><br><span class="line"></span><br><span class="line">ratings[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">ratings[<span class="number">6</span>] = <span class="number">3</span></span><br><span class="line">ratings[<span class="number">11</span>] = <span class="number">5</span></span><br><span class="line">ratings[<span class="number">53</span>] = <span class="number">4</span></span><br><span class="line">ratings[<span class="number">63</span>] = <span class="number">5</span></span><br><span class="line">ratings[<span class="number">65</span>] = <span class="number">3</span></span><br><span class="line">ratings[<span class="number">68</span>] = <span class="number">5</span></span><br><span class="line">ratings[<span class="number">97</span>] = <span class="number">2</span></span><br><span class="line">ratings[<span class="number">182</span>] = <span class="number">4</span></span><br><span class="line">ratings[<span class="number">225</span>] = <span class="number">5</span></span><br><span class="line">ratings[<span class="number">354</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="数据预处理">2.4.3 数据预处理</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Y = np.insert(Y, <span class="number">0</span>, ratings, axis=<span class="number">1</span>)</span><br><span class="line">R = np.insert(R, <span class="number">0</span>, ratings!=<span class="number">0</span>, axis=<span class="number">1</span>)</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">n_m, n_u = Y.shape</span><br><span class="line">X = np.random.standard_normal((n_m, n))</span><br><span class="line">theta = np.random.standard_normal((n_u, n))</span><br><span class="line">X.shape, theta.shape</span><br></pre></td></tr></table></figure>
<blockquote>
<p>((1682, 10), (944, 10))</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">param = serialize(X, theta)</span><br><span class="line">param.shape</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(26260,)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Y_norm = Y - Y.mean(axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">Y_norm.mean()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.600291296941337e-18</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt</span><br><span class="line">res = opt.minimize(fun = reg_cost, x0=param, args=(Y_norm, R, n, <span class="number">1</span>), method=<span class="string">&#x27;TNC&#x27;</span>, jac=reg_gradient)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_trained,theta_trained=deserialize(res.x,n_m,n_u,n)</span><br><span class="line">X_trained.shape,theta_trained.shape</span><br></pre></td></tr></table></figure>
<blockquote>
<p>((1682, 10), (944, 10))</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pred = X_trained@theta_trained.T</span><br><span class="line">p = pred[:, <span class="number">0</span>]+Y.mean()</span><br><span class="line">idx = np.argsort(p)[::-<span class="number">1</span>]</span><br><span class="line">idx.shape</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(1682,)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> movie_list[idx][:<span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>StarTrek:Generations(1994)</p>
<p>DieHard:WithaVengeance(1995)</p>
<p>LiveNudeGirls(1995)</p>
<p>PrivateParts(1997)</p>
<p>Sphere(1998)</p>
<p>HauntedWorldofEdwardD.WoodJr.,The(1995)</p>
<p>ThreeCaballeros,The(1945)</p>
<p>Michael(1996) Sneakers(1992)</p>
<p>WeddingSinger,The(1998)</p>
</blockquote>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-推荐系统</title>
    <url>/2021/07/20/Part1-%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="part1-推荐系统">Part1-推荐系统</h1>
<h2 id="问题综述">问题综述</h2>
<p>例：预测电影评分</p>
<blockquote>
<p>用户使用一到五分来对电影进行评分</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">电影</th>
<th style="text-align: center;">Alice</th>
<th style="text-align: center;">Bob</th>
<th style="text-align: center;">Carol</th>
<th style="text-align: center;">Dave</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Love at last</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">Romance forever</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Cute puppies of love</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">?</td>
</tr>
<tr class="even">
<td style="text-align: center;">Nonstop car chases</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Sword vs. karate</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">?</td>
</tr>
</tbody>
</table>
<p>注：</p>
<p><span class="math inline">\(n_u\)</span>：用户的数量</p>
<p><span class="math inline">\(n_m\)</span>：电影的数量</p>
<p><span class="math inline">\(r(i,j)\)</span>：如果用户<span class="math inline">\(j\)</span>给电影<span class="math inline">\(i\)</span>评分了，则对应值为1</p>
<p><span class="math inline">\(y^{(i,j)}\)</span>：只要<span class="math inline">\(r(i,j)\)</span>被定义时才有用，且表示用户<span class="math inline">\(j\)</span>给电影<span class="math inline">\(i\)</span>的评分值</p>
</blockquote>
<p>因此，推荐系统的问题就是，给出<span class="math inline">\(r(i,j)\)</span>和<span class="math inline">\(y^{(i,j)}\)</span>数据，然后去查找没有被评级的电影，并试图预测这些电影的评价星级</p>
<h2 id="基于内容的推荐算法">基于内容的推荐算法</h2>
<blockquote>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">电影</th>
<th style="text-align: center;">Alice</th>
<th style="text-align: center;">Bob</th>
<th style="text-align: center;">Carol</th>
<th style="text-align: center;">Dave</th>
<th style="text-align: center;"><span class="math inline">\(x_1\)</span><br />(romance)</th>
<th style="text-align: center;"><span class="math inline">\(x_2\)</span><br />(action)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Love at last</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0.9</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">Romance forever</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1.0</td>
<td style="text-align: center;">0.01</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Cute puppies of love</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">0.99</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">Nonstop car chases</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">0.1</td>
<td style="text-align: center;">1.0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Sword vs. karate</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0.9</td>
</tr>
</tbody>
</table>
</blockquote>
<p>如表，我们假设每个电影都有两个特征<span class="math inline">\(x_1,x_2\)</span>，其中<span class="math inline">\(x_1\)</span>衡量一部电影为爱情片的程度，<span class="math inline">\(x_2\)</span>衡量一部电影为动作片的程度。</p>
<p>对于任一用户<span class="math inline">\(j\)</span>，学习参数<span class="math inline">\(\theta^{(j)}\in \mathbb R^3\)</span>，使用<span class="math inline">\((\theta^{(j)})^Tx^{(i)}\)</span>预测用户<span class="math inline">\(j\)</span>对电影<span class="math inline">\(i\)</span>的评分</p>
<p><span class="math inline">\(x^{(i)} = \left[ \begin{matrix} 1\\ x_1^{(i)} \\ x_2^{(i)} \end{matrix} \right]\)</span></p>
<h3 id="综述">综述</h3>
<p><span class="math inline">\(r(i,j)\)</span>：如果用户<span class="math inline">\(j\)</span>给电影<span class="math inline">\(i\)</span>评分了，则对应值为1</p>
<p><span class="math inline">\(y^{(i,j)}\)</span>：只要<span class="math inline">\(r(i,j)\)</span>被定义时才有用，且表示用户<span class="math inline">\(j\)</span>给电影<span class="math inline">\(i\)</span>的评分值</p>
<p><span class="math inline">\(\theta^{(j)}\)</span>：用户<span class="math inline">\(j\)</span>对应的参数向量</p>
<p><span class="math inline">\(x^{(i)}\)</span>：电影<span class="math inline">\(i\)</span>对应的特征向量</p>
<p>对于用户<span class="math inline">\(j\)</span>和电影<span class="math inline">\(i\)</span>，预测评分：<span class="math inline">\((\theta^{(j)})^T(x^{(i)})\)</span></p>
<p><span class="math inline">\(m^{(j)}\)</span>：用户<span class="math inline">\(j\)</span>评分了的电影的数量</p>
<p>为了学习<span class="math inline">\(\theta^{(j)}\)</span>：</p>
<p><span class="math inline">\(\min_{\theta^{(j)}}\frac{1}{2m^{(j)}}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2m^{(i)}}\sum_{k=1}^n (\theta_k^{(j)})^2\)</span></p>
<p>相当于：</p>
<p><span class="math inline">\(\min_{\theta^{(j)}}\frac{1}{2}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{k=1}^n (\theta_k^{(j)})^2\)</span></p>
<h3 id="优化目标">优化目标</h3>
<p>为了学习<span class="math inline">\(\theta^{(j)}\)</span>(用户<span class="math inline">\(j\)</span>的参数)：</p>
<p><span class="math inline">\(\min_{\theta^{(j)}}\frac{1}{2}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{k=1}^n (\theta_k^{(j)})^2\)</span></p>
<p>为了学习<span class="math inline">\(\theta^{(1)},\theta^{(2)},\cdots,\theta^{(n_u)}\)</span>：</p>
<p><span class="math inline">\(\min_{(\theta^{(1)},\cdots,\theta^{(n_u)})} \frac{1}{2}\sum_{j=1}^{n_u}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^n(\theta_k^{(j)})^2\)</span></p>
<h3 id="优化算法">优化算法</h3>
<p><span class="math inline">\(\min_{(\theta^{(1)},\cdots,\theta^{(n_u)})} \frac{1}{2}\sum_{j=1}^{n_u}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^n(\theta_k^{(j)})^2\)</span></p>
<p>梯度下降： <span class="math display">\[
\theta_k^{(j)}:=\theta_k^{(j)}-\alpha\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})x_k^{(i)}(对于k=0) \\ 
\theta_k^{(j)}:=\theta_k^{(j)}-\alpha(\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})x_k^{(i)}+\lambda\theta_k^{(j)})(对于k \ne 0)
\]</span></p>
<h2 id="协同过滤">协同过滤</h2>
<h3 id="问题动机">问题动机</h3>
<p>对于上述问题，<span class="math inline">\(x_1\)</span>和<span class="math inline">\(x_2\)</span>这两个特征，并无法直接得到，而是需要人为去确定，耗时耗力。那么应该怎样更容易得到这些特征呢？</p>
<p>现在，我们稍稍改变一下这个假设，假设我们采访每位用户，得到他们对于爱情类电影的喜欢程度和对于动作类电影的喜欢程度，得到如下结果：</p>
<p><span class="math inline">\(\theta^{(1)} = \left[ \begin{matrix}0 \\ 5 \\ 0 \end{matrix} \right],\theta^{(2)}=\left[ \begin{matrix}0 \\ 5 \\ 0 \end{matrix} \right],\theta^{(3)}=\left[ \begin{matrix}0 \\ 0 \\ 5 \end{matrix} \right], \theta^{(4)} = \left[ \begin{matrix}0 \\ 0 \\ 5 \end{matrix} \right]\)</span>,其中第二个表示喜欢爱情类电影程度，第三个表示喜欢动作类电影程度</p>
<p>这样就可以通过 <span class="math display">\[
(\theta^{(1)})^Tx^{(1)} \approx 5 \\
(\theta^{(2)})^Tx^{(2)} \approx 5 \\
(\theta^{(3)})^Tx^{(3)} \approx 0 \\
(\theta^{(4)})^Tx^{(4)} \approx 0 
\]</span> 求出<span class="math inline">\(x^{(1)} = \left[ \begin{matrix}1 \\ 1.0 \\ 0.0 \end{matrix} \right]\)</span></p>
<h3 id="算法通用与优化">算法通用与优化</h3>
<p>给定<span class="math inline">\(\theta^{(1)},\cdots,\theta^{(n_u)}\)</span>，需要学习<span class="math inline">\(x^{(i)}\)</span>:</p>
<p><span class="math inline">\(\min_{x^{(i)}} \frac{1}{2} \sum_{j:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{k=1}^n(x_k^{(i)})^2\)</span></p>
<p>给定<span class="math inline">\(\theta^{(1)},\cdots,\theta^{(n_u)}\)</span>，需要学习<span class="math inline">\(x^{(1)},\cdots,x^{(n_m)}\)</span>:</p>
<p><span class="math inline">\(\min_{(x^{(1)},\cdots,x^{(n_m)})}\frac{1}{2}\sum_{i=1}^{n_m}\sum_{j:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{i=1}^{n_m}\sum_{k=1}^n(x_k^{(i)})^2\)</span></p>
<h3 id="协同过滤-1">协同过滤</h3>
<p>给定<span class="math inline">\(x^{(1)},\cdots,x^{(n_m)}(和电影评分)\)</span></p>
<p>​ 可以估计<span class="math inline">\(\theta^{(1)},\cdots,\theta^{(n_u)}\)</span></p>
<p>给定<span class="math inline">\(\theta^{(1)},\cdots,\theta^{(n_u)}\)</span></p>
<p>​ 可以估计<span class="math inline">\(x^{(1)},\cdots,x^{(n_m)}\)</span></p>
<p>即猜定<span class="math inline">\(\theta\)</span>，然后<span class="math inline">\(\theta \to x \to \theta \to x \to \theta \to x \to \cdots\)</span></p>
<h2 id="协同过滤算法">协同过滤算法</h2>
<h3 id="协同过滤优化目标">协同过滤优化目标</h3>
<p>给定<span class="math inline">\(x^{(1)},\cdots,x^{(n_m)}\)</span>，估计<span class="math inline">\(\theta^{(1)},\cdots,\theta^{(n_u)}\)</span>:</p>
<p>​ <span class="math inline">\(\min_{(x^{(1)},\cdots,x^{(n_m)})}\frac{1}{2}\sum_{i=1}^{n_m}\sum_{j:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{i=1}^{n_m}\sum_{k=1}^n(x_k^{(i)})^2\)</span></p>
<p>给定<span class="math inline">\(\theta^{(1)},\cdots,\theta^{(n_u)}\)</span>，估计<span class="math inline">\(x^{(1)},\cdots,x^{(n_m)}\)</span>：</p>
<p>​ <span class="math inline">\(\min_{(\theta^{(1)},\cdots,\theta^{(n_u)})} \frac{1}{2}\sum_{j=1}^{n_u}\sum_{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^n(\theta_k^{(j)})^2\)</span></p>
<p>将这两个合并成一个： <span class="math display">\[
J(x^{(1)},\cdots,x^{(n_m)},\theta^{(1)},\cdots,\theta^{(n_u)})=\frac{1}{2} \sum_{(i,j):r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{i=1}^{n_m}\sum_{k=1}^n(x_k^{(i)})^2+\frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^n(\theta_k^{(j)})^2
\]</span> <span class="math inline">\(\min_{(x^{(1)},\cdots,x^{(n_m)},\theta^{(1)},\cdots,\theta^{(n_u)})}J(x^{(1)},\cdots,x^{(n_m)},\theta^{(1)},\cdots,\theta^{(n_u)})\)</span></p>
<p>这里不再遵循<span class="math inline">\(x_0=1\)</span>，<span class="math inline">\(x\in \mathbb R^{(n+1)}\)</span>而是<span class="math inline">\(x \in \mathbb R^n\)</span>,<span class="math inline">\(\theta \in \mathbb R^n\)</span></p>
<h3 id="协同过滤算法-1">协同过滤算法</h3>
<ol type="1">
<li><p>初始化<span class="math inline">\(x^{(1)},\cdots,x^{(n_m)},\theta^{(1)},\cdots,\theta^{(n_u)}\)</span>为小的随机值(有点像神经网络训练中的初始化)</p></li>
<li><p>使用梯度下降来最小化<span class="math inline">\(J(x^{(1)},\cdots,x^{(n_m)},\theta^{(1)},\cdots,\theta^{(n_u)})\)</span> <span class="math display">\[
x_k^{(i)} := x_k^{(i)}-\alpha(\sum_{j:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})\theta_k^{(j)}+\lambda x_k^{(i)}) \\
\theta_k^{(j)} := \theta_k^{(j)}-\alpha(\sum_{j:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})x_k^{(i)}+\lambda \theta_k^{(j)}) \\
\]</span></p></li>
<li><p>给定一个具有参数<span class="math inline">\(\theta\)</span>的用户和一部具有特征<span class="math inline">\(x\)</span>的电影，就可以使用<span class="math inline">\(\theta^Tx\)</span>预测用户对电影的评分</p></li>
</ol>
<h2 id="矢量化低轶矩阵分解">矢量化低轶矩阵分解</h2>
<blockquote>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">电影</th>
<th style="text-align: center;">Alice</th>
<th style="text-align: center;">Bob</th>
<th style="text-align: center;">Carol</th>
<th style="text-align: center;">Dave</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Love at last</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">Romance forever</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Cute puppies of love</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">?</td>
</tr>
<tr class="even">
<td style="text-align: center;">Nonstop car chases</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Sword vs. karate</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">?</td>
</tr>
</tbody>
</table>
</blockquote>
<p><span class="math inline">\(Y=\left[ \begin{matrix} 5 &amp; 5 &amp; 0 &amp; 0 \\ 5 &amp; ? &amp; ? &amp; 0 \\ ? &amp; 4 &amp; 0 &amp; ? \\ 0 &amp; 0 &amp; 5 &amp; 4 \\ 0 &amp; 0 &amp; 5 &amp; ? \end{matrix} \right]\)</span></p>
<p>预测评分：<span class="math inline">\(\left[ \begin{matrix} (\theta^{(1)})^T(x^{(1)}) &amp; (\theta^{(2)})^T(x^{(1)}) &amp; \cdots &amp; (\theta^{(n_u)})^T(x^{(1)}) \\ (\theta^{(1)})^T(x^{(2)}) &amp; (\theta^{(2)})^T(x^{(2)}) &amp; \cdots &amp; (\theta^{(n_u)})^T(x^{(2)}) \\ \cdots &amp; \cdots &amp; \cdots &amp; \cdots \\ (\theta^{(1)})^T(x^{(n_m)}) &amp; (\theta^{(2)})^T(x^{(n_m)}) &amp; \cdots &amp; (\theta^{(n_u)})^T(x^{(n_m)}) \end{matrix} \right]\)</span></p>
<p><span class="math inline">\(X = \left[\begin{matrix}-(x^{(1)})^T- \\ -(x^{(2)})^T- \\ \cdots \\ -(x^{(n_m)})^T \end{matrix} \right]\)</span></p>
<p><span class="math inline">\(\Theta = \left[\begin{matrix}-(\theta^{(1)})^T- \\ -(\theta^{(2)})^T- \\ \cdots \\ -(\theta^{(n_u)})^T \end{matrix} \right]\)</span></p>
<p>则<span class="math inline">\(y_{predict} = X\Theta^T\)</span></p>
<p>这个协同过滤算法也叫做<strong>低秩矩阵分解(Low rank matrix factorvization)</strong></p>
<h3 id="找相关的电影">找相关的电影</h3>
<p>对于每个产品<span class="math inline">\(i\)</span>，我们学习一个特征向量<span class="math inline">\(x^{(i)} \in \mathbb R^n\)</span></p>
<p>如果找到与电影<span class="math inline">\(i\)</span>相关的电影<span class="math inline">\(j\)</span>？</p>
<p><span class="math inline">\(||x^{(i)}-x^{(j)}||\)</span>很小$<span class="math inline">\(电影\)</span>j<span class="math inline">\(和电影\)</span>i$相似</p>
<p>5个与电影<span class="math inline">\(i\)</span>最相似的电影：找5个有最小的距离<span class="math inline">\(||x^{(i)}-x^{(j)}||\)</span>的电影<span class="math inline">\(j\)</span></p>
<h3 id="实现细节均值规范化">实现细节：均值规范化</h3>
<p>例：假设有一个没有给任何电影评分的用户，加上之前所说的四个用户</p>
<p>那么，协同过滤算法会对这个没评分的用户做什么？</p>
<p><span class="math inline">\(\min_{(x^{(1)},\cdots,x^{(n_m)},\theta^{(1)},\cdots,\theta^{(n_u)})}\frac{1}{2} \sum_{(i,j):r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{i=1}^{n_m}\sum_{k=1}^n(x_k^{(i)})^2+\frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^n(\theta_k^{(j)})^2\)</span></p>
<p>假设<span class="math inline">\(n=2\)</span>，即我们需要学习两个特征变量</p>
<p><span class="math inline">\(\theta^{(5)} \in \mathbb R^2\)</span></p>
<p>由于该用户没有评分，所以：<span class="math inline">\(\frac{1}{2} \sum_{(i,j):r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2=0\)</span></p>
<p>因此，<span class="math inline">\(\frac{\lambda}{2}\sum_{j=1}^{n_u}\sum_{k=1}^n(\theta_k^{(j)})^2\)</span>是影响<span class="math inline">\(\theta^{(5)}\)</span>的唯一项，也就是说，我们需要找一个<span class="math inline">\(\theta^{(5)}\)</span>来使该项尽可能小</p>
<p>即：<span class="math inline">\(\frac{\lambda}{2}((\theta_1^{(5)})^2+(\theta_2^{(5)})^2)\)</span></p>
<p>这样得到的就会是<span class="math inline">\(\theta^{(5)} = \left[ \begin{matrix} 0 \\ 0 \end{matrix} \right]\)</span>，进而预测的结果都会是0，所以这种结果不太好</p>
<h3 id="均值规范化">均值规范化</h3>
<p>均值规范化可以用来解决上述问题</p>
<p><span class="math inline">\(Y=\left[ \begin{matrix} 5 &amp; 5 &amp; 0 &amp; 0 &amp;? \\ 5 &amp; ? &amp; ? &amp; 0 &amp;? \\ ? &amp; 4 &amp; 0 &amp; ? &amp;? \\ 0 &amp; 0 &amp; 5 &amp; 4 &amp;? \\ 0 &amp; 0 &amp; 5 &amp; ? &amp;? \end{matrix} \right]\)</span></p>
<p>计算每个电影评分的均值：<span class="math inline">\(\mu = \left[ \begin{matrix} 2.5 \\ 2.5 \\ 2 \\ 2.25 \\ 1.25 \end{matrix} \right]\)</span></p>
<p>则减去均分后：<span class="math inline">\(Y=\left[ \begin{matrix} 2.5 &amp; 2.5 &amp; -2.5 &amp; -2.5 &amp;?\\ 2.5 &amp; ? &amp; ? &amp; -2.5 &amp;? \\ ? &amp; 2 &amp; -2 &amp; ? &amp;? \\ -2.25 &amp; -2.25 &amp; 2.75 &amp; 1.75 &amp;? \\ -1.25 &amp; -1.25 &amp; 3.75 &amp; ? &amp;? \end{matrix} \right]\)</span></p>
<p>当进行电影评分预测时，步骤如下：</p>
<p>对于用户<span class="math inline">\(j\)</span>，在电影<span class="math inline">\(i\)</span>上评分预测：</p>
<p><span class="math inline">\((\theta^{(j)})^T(X^{(i)})+\mu_i\)</span></p>
<p>对于用户5，则：</p>
<p><span class="math inline">\(\theta^{(5)} = \left[ \begin{matrix} 0 \\ 0 \end{matrix} \right]\)</span>，<span class="math inline">\(y_{predict}=(\theta^{(j)})^T(X^{(i)})+\mu_i\)</span></p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-支持向量机练习</title>
    <url>/2021/07/16/Part1-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-支持向量机练习">Part1-支持向量机练习</h1>
<h2 id="支持向量机">支持向量机</h2>
<h3 id="数据可视化">1.1 数据可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = loadmat(<span class="string">&#x27;ex6data1.mat&#x27;</span>)</span><br><span class="line">data = pd.DataFrame(data, columns=[<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>,<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">X_0 = data[data.y==<span class="number">0</span>]</span><br><span class="line">X_1 = data[data.y==<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(X_0[<span class="string">&#x27;x1&#x27;</span>],X_0[<span class="string">&#x27;x2&#x27;</span>],c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(X_1[<span class="string">&#x27;x1&#x27;</span>],X_1[<span class="string">&#x27;x2&#x27;</span>],marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210716140212745.png" /></p>
</blockquote>
<h3 id="尝试c1">1.2 尝试<span class="math inline">\(C=1\)</span></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.svm</span><br><span class="line">svc1 = sklearn.svm.LinearSVC(C=<span class="number">1</span>, loss=<span class="string">&#x27;hinge&#x27;</span>)</span><br><span class="line">svc1.fit(data.iloc[:,:<span class="number">2</span>], data[<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">svc1.score(data.iloc[:,:<span class="number">2</span>], data[<span class="string">&#x27;y&#x27;</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.9803921568627451</p>
</blockquote>
<p>画出决策边界</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(X_0[<span class="string">&#x27;x1&#x27;</span>],X_0[<span class="string">&#x27;x2&#x27;</span>],c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(X_1[<span class="string">&#x27;x1&#x27;</span>],X_1[<span class="string">&#x27;x2&#x27;</span>],marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">x1 = np.linspace(-<span class="number">0.5</span>, <span class="number">4.5</span>, <span class="number">500</span>)</span><br><span class="line">x2 = np.linspace(<span class="number">1.3</span>, <span class="number">5</span>, <span class="number">500</span>)</span><br><span class="line">xx1,xx2 = np.meshgrid(x1, x2)</span><br><span class="line">y = svc1.predict(np.c_[xx1.ravel(), xx2.ravel()])</span><br><span class="line">y = y.reshape(xx1.shape)</span><br><span class="line">plt.contour(xx1, xx2, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210716140453450.png" /></p>
</blockquote>
<h2 id="高斯核svm">高斯核SVM</h2>
<p>###　2.1 数据可视化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = loadmat(<span class="string">&#x27;ex6data2.mat&#x27;</span>)</span><br><span class="line">data = pd.DataFrame(np.concatenate((data[<span class="string">&#x27;X&#x27;</span>], data[<span class="string">&#x27;y&#x27;</span>]), axis=<span class="number">1</span>), columns=[<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>,<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">X_0 = data[data[<span class="string">&#x27;y&#x27;</span>]==<span class="number">0</span>]</span><br><span class="line">X_1 = data[data[<span class="string">&#x27;y&#x27;</span>]==<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(X_0[<span class="string">&#x27;x1&#x27;</span>], X_0[<span class="string">&#x27;x2&#x27;</span>], c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(X_1[<span class="string">&#x27;x1&#x27;</span>], X_1[<span class="string">&#x27;x2&#x27;</span>], marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210716140426254.png" /></p>
</blockquote>
<h3 id="预测分类">2.2 预测分类</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.svm</span><br><span class="line">svc = sklearn.svm.SVC(C=<span class="number">100</span>, kernel=<span class="string">&#x27;rbf&#x27;</span>, gamma=<span class="number">10</span>, probability=<span class="literal">True</span>)</span><br><span class="line">svc.fit(data.iloc[:, :<span class="number">2</span>], data[<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">svc.score(data.iloc[:, :<span class="number">2</span>], data[<span class="string">&#x27;y&#x27;</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = np.linspace(<span class="number">0</span>, <span class="number">1.1</span>, <span class="number">500</span>)</span><br><span class="line">x2 = np.linspace(<span class="number">0.4</span>, <span class="number">0.9</span>, <span class="number">500</span>)</span><br><span class="line">xx1, xx2 = np.meshgrid(x1, x2)</span><br><span class="line">y = svc.predict(np.c_[xx1.ravel(), xx2.ravel()])</span><br><span class="line">y = y.reshape(xx1.shape)</span><br><span class="line">plt.scatter(X_0[<span class="string">&#x27;x1&#x27;</span>], X_0[<span class="string">&#x27;x2&#x27;</span>], c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(X_1[<span class="string">&#x27;x1&#x27;</span>], X_1[<span class="string">&#x27;x2&#x27;</span>], marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.contour(xx1, xx2, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210716142102465.png" /></p>
</blockquote>
<h2 id="寻找最优参数">寻找最优参数</h2>
<h3 id="数据可视化-1">3.1 数据可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_val = pd.DataFrame(np.concatenate((data[<span class="string">&#x27;Xval&#x27;</span>], data[<span class="string">&#x27;yval&#x27;</span>]), axis=<span class="number">1</span>), columns=[<span class="string">&#x27;xval1&#x27;</span>,<span class="string">&#x27;xval2&#x27;</span>,<span class="string">&#x27;yval&#x27;</span>])</span><br><span class="line">data = loadmat(<span class="string">&#x27;ex6data3.mat&#x27;</span>)</span><br><span class="line">data = pd.DataFrame(np.concatenate((data[<span class="string">&#x27;X&#x27;</span>], data[<span class="string">&#x27;y&#x27;</span>]), axis=<span class="number">1</span>), columns=[<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>,<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">X_0 = data[data[<span class="string">&#x27;y&#x27;</span>]==<span class="number">0</span>]</span><br><span class="line">X_1 = data[data[<span class="string">&#x27;y&#x27;</span>]==<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(X_0[<span class="string">&#x27;x1&#x27;</span>], X_0[<span class="string">&#x27;x2&#x27;</span>], c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(X_1[<span class="string">&#x27;x1&#x27;</span>], X_1[<span class="string">&#x27;x2&#x27;</span>], marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210716145907518.png" /></p>
</blockquote>
<h3 id="寻找最佳参数">3.2 寻找最佳参数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">candidate = [<span class="number">0.01</span>, <span class="number">0.03</span>, <span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">100</span>]</span><br><span class="line">c_and_gamma = [(C, gamma) <span class="keyword">for</span> C <span class="keyword">in</span> candidate <span class="keyword">for</span> gamma <span class="keyword">in</span> candidate]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> C, gamma <span class="keyword">in</span> c_and_gamma:</span><br><span class="line">  svc = sklearn.svm.SVC(C=C,gamma=gamma)</span><br><span class="line">  svc.fit(data.iloc[:, :<span class="number">2</span>], data[<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">  res.append(svc.score(data_val.iloc[:, :<span class="number">2</span>], data_val[<span class="string">&#x27;yval&#x27;</span>]))</span><br><span class="line">best_idx = np.argmax(res)</span><br><span class="line">best_res = res[best_idx]</span><br><span class="line">best_param = c_and_gamma[best_idx]</span><br><span class="line">best_res, best_param</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(0.965, (0.3, 100))</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">svc = sklearn.svm.SVC(C=best_param[<span class="number">0</span>], kernel=<span class="string">&#x27;rbf&#x27;</span>, gamma=best_param[<span class="number">1</span>], probability=<span class="literal">True</span>)</span><br><span class="line">svc.fit(data.iloc[:, :<span class="number">2</span>], data[<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">x1 = np.linspace(-<span class="number">0.6</span>, <span class="number">0.3</span>, <span class="number">500</span>)</span><br><span class="line">x2 = np.linspace(-<span class="number">0.7</span>, <span class="number">0.6</span>, <span class="number">500</span>)</span><br><span class="line">xx1, xx2 = np.meshgrid(x1, x2)</span><br><span class="line">y = svc.predict(np.c_[xx1.ravel(), xx2.ravel()])</span><br><span class="line">y = y.reshape(xx1.shape)</span><br><span class="line">plt.scatter(X_0[<span class="string">&#x27;x1&#x27;</span>], X_0[<span class="string">&#x27;x2&#x27;</span>], c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(X_1[<span class="string">&#x27;x1&#x27;</span>], X_1[<span class="string">&#x27;x2&#x27;</span>], marker=<span class="string">&#x27;+&#x27;</span>, c=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.contour(xx1, xx2, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210716150627461.png" /></p>
</blockquote>
<h2 id="垃圾邮件分类">垃圾邮件分类</h2>
<h3 id="读取数据">4.1 读取数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = loadmat(<span class="string">&#x27;spamTrain.mat&#x27;</span>)</span><br><span class="line">X, y= data[<span class="string">&#x27;X&#x27;</span>], data[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">data_test = loadmat(<span class="string">&#x27;spamTest.mat&#x27;</span>)</span><br><span class="line">X_test, y_test = data_test[<span class="string">&#x27;Xtest&#x27;</span>], data_test[<span class="string">&#x27;ytest&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="预测分类-1">4.2 预测分类</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.svm <span class="keyword">as</span> svm</span><br><span class="line">svc = svm.SVC()</span><br><span class="line">svc.fit(X, y)</span><br><span class="line">svc.score(X_test, y_test)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.987</p>
</blockquote>
<h3 id="再用逻辑回归试试">4.3 再用逻辑回归试试</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">logit = LogisticRegression()</span><br><span class="line">logit.fit(X, y)</span><br><span class="line">logit.score(X_test, y_test)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.994</p>
</blockquote>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-机器学习介绍</title>
    <url>/2021/07/03/Part1-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="part1-机器学习介绍">Part1-机器学习介绍</h1>
<h2 id="什么是机器学习">什么是机器学习？</h2>
<ol type="1">
<li><p>机器学习的定义：</p>
<p>Arthur Samuel对机器学习的定义：<strong>在没有明确设置的情况下，使计算机具有学习能力的研究领域</strong></p>
<p>Tom Mitchell对机器学习的定义：一个适当的学习问题定义如下：计算机程序从经验E中学习解决某一任务T进行某一性能度量P，通过P测定在T上的表现因经验E而提高，简言之，就是<strong>一个计算机程序可以通过经验E使得其在处理任务T时获得了更好的效果(这个效果的好坏用P来衡量)</strong></p></li>
<li><p>机器学习的分类：</p>
<p>主要两类是：</p>
<ul>
<li>监督学习</li>
<li>无监督学习</li>
</ul>
<p>其它：强化学习、推荐系统等</p></li>
</ol>
<h2 id="监督学习">监督学习</h2>
<p>举例：</p>
<blockquote>
<p>假设想要预测房价，根据一些统计的房屋的面积和价格对应信息，预测一个新的房屋面积对应的价格</p>
</blockquote>
<p>定义：给定算法一个数据集，其中包含了正确答案，算法的目的就是给出更多的正确答案</p>
<p>上述房价预测实际上是一个<strong>回归问题</strong>，回归指的是预测连续的数值输出</p>
<p>其它监督学习例子：</p>
<blockquote>
<p>乳腺癌肿瘤预测，根据一些统计的肿瘤大小和对应肿瘤是良性或恶性，预测一个新的尺寸肿瘤对应的性质</p>
</blockquote>
<p>上述肿瘤预测实际上是一个<strong>分类问题</strong>，分类指的是预测一个离散值的输出</p>
<h2 id="无监督学习">无监督学习</h2>
<p>举例：</p>
<blockquote>
<p>以上述肿瘤预测为例，根据一些统计的肿瘤属性如大小等，但没有任何标签，不知道要用来干什么，也不知道每个每个数据点是什么，能在其中找到某种结构吗？</p>
</blockquote>
<p>上述肿瘤问题中，最终可能会将数据分成两簇，对应两类，这就是一个<strong>聚类问题</strong></p>
<p>定义：根据类别未知(没有被标记)的训练样本解决模式识别中的各种问题，称之为无监督学习。</p>
<p>对应其它应用：组织计算机集群、社交网络分析、市场细分、天文数据分析</p>
<p>无监督学习对应有一个经典问题：就是鸡尾酒会问题，即在酒会上会有多种声音，将其作为数据进行无监督学习，进而对声音进行分离，解决问题只需要： <span class="math display">\[
[W,s,v] = svd((repmat(sum(x.*x,1),size(x,1),1).*x)*x&#39;)
\]</span></p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-机器学习应用中的建议</title>
    <url>/2021/07/12/Part1-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E5%BB%BA%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="part1-机器学习应用中的建议">Part1-机器学习应用中的建议</h1>
<h2 id="决定下一步该做什么">决定下一步该做什么</h2>
<h3 id="调试学习算法">调试学习算法</h3>
<blockquote>
<p>假设对于房价预测模型中，已经完成了正则化线性回归，也就是完成了最小化代价函数<span class="math inline">\(J\)</span>的值 <span class="math inline">\(J(\theta)=\frac{1}{2m}[\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2+\lambda\sum_{j=1}^m\theta_j^2]\)</span></p>
<p>然而，当在新的房屋数据上进行测试时，产生了巨大的误差，则接下来应该怎么办？</p>
</blockquote>
<ul>
<li>获取更多了训练样本</li>
<li>尝试更小的特征集</li>
<li>尝试更多的特征</li>
<li>尝试增加多项式特征</li>
<li>尝试减小<span class="math inline">\(\lambda\)</span></li>
<li>尝试增大<span class="math inline">\(\lambda\)</span></li>
</ul>
<h3 id="机器学习诊断法">机器学习诊断法</h3>
<p>诊断法：是一种测试方法，可以这种测试方法来了解算法哪里出了问题，这通常指导出如何最好地改进算法效果</p>
<p>这种诊断法的执行和实现需要花费时间，但这时间花的是非常值得的。</p>
<h2 id="评估假设">评估假设</h2>
<p>当我们确定学习算法的参数时，我们考虑的是选择参数，来使训练误差最小化，有人认为，得到一个很小的训练误差一定是一件好事，但我们已经知道，仅仅是因为这个假设具有很小的训练误差，并不能说明它一定是一个好的假设，比如过拟合的情况，那么，如何判断一个假设是否是过拟合呢？</p>
<p>对于简单的模型，我们可以直接画出假设函数，然后观察，但通常情况下，特征其实并不止一个，当特征多的时候，通常画假设函数来观察，就变得很难甚至不可能了。因为需要其它方法。</p>
<p>对于一组数据集，我们需要将数据分成两部分，第一部分将成为训练集，第二部分将成为测试集，按照7:3的比例，假定训练集数量为<span class="math inline">\(m\)</span>，而测试集数量为<span class="math inline">\(m_{test}\)</span>，但如果数据不是随机排列的，最好还是打乱顺序，或者使用一种随机的顺序构建新数据。</p>
<h3 id="训练测试过程">训练/测试过程</h3>
<p>对于线性回归</p>
<ul>
<li>对训练集进行学习得到参数<span class="math inline">\(\theta\)</span>（最小化训练误差<span class="math inline">\(J(\theta)\)</span>）</li>
<li>计算测试集误差<span class="math inline">\(J_{test}(\theta) =\frac{1}{2m_{test}}\sum_{i=1}^{m_{test}}(h_\theta(x_{test}^{(i)})-y_{test}^{(i)})^2\)</span></li>
</ul>
<p>同理，对于逻辑回归：</p>
<ul>
<li><p>从训练集训练参数<span class="math inline">\(\theta\)</span></p></li>
<li><p>计算测试集误差<span class="math inline">\(J_{test}(\theta)=-\frac{1}{m_{test}}\sum_{i=1}^{m_{test}}y_{test}^{(i)}\log h_\theta(x_{test}^{(i)})+(1-y_{test}^{(i)})\log (1-h_\theta(x_{test}^{(i)}))\)</span></p></li>
<li><p>另一种形式的测试度量，叫做错误分类(也被称为0/1分类错误)</p>
<p><span class="math inline">\(err(h_\theta(x),y)=\left\{ \begin{aligned} &amp;1 \ ,(h_\theta(x) \ge 0.5,y=0 或h_\theta&lt;0.5,y=1) \\ &amp;0 \ ,(其它) \end{aligned} \right.\)</span></p>
<p><span class="math inline">\(test\ error=\frac{1}{m_{test}}\sum_{i=1}^{m_{test}}err(h_\theta(x_{test}^{(i)}),y^{(i)})\)</span></p></li>
</ul>
<h2 id="模型选择和训练验证测试集">模型选择和训练/验证/测试集</h2>
<p>模型选择：对于一个数据集最合适的多项式次数、怎样选用正确的特征来构造学习算法、如何选择学习算法中的正则化参数<span class="math inline">\(\lambda\)</span>等，这类问题叫做模型选择问题</p>
<h3 id="模型选择">模型选择：</h3>
<p>1.<span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x\)</span> (d=1)</p>
<p>2.<span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2\)</span> (d=2)</p>
<p>3.<span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x+\cdots+\theta_3x^3\)</span> (d=3)</p>
<p><span class="math inline">\(\cdots\)</span> (<span class="math inline">\(\cdots\)</span>)</p>
<p>10.<span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x+\cdots+\theta_{10}x^{10}\)</span> (d=10)</p>
<p>(d = 多项式次数(dgree of polynomial))</p>
<p>具体地说，比如想要选择一个模型，就是选择一个多项式次数，从这10个模型中选择一个，拟合这个模型并估计这个模型对新样本的泛化能力，则可以：</p>
<p>首先选择第一个模型，然后最小化训练误差，这样就会得到一个参数向量<span class="math inline">\(\theta^{(1)}\)</span>，然后选择第二个模型，最小化训练误差，再得到一个参数向量<span class="math inline">\(\theta^{(2)}\)</span>，依次类推，直到<span class="math inline">\(\theta^{(10)}\)</span>，再求得<span class="math inline">\(J_{test}(\theta^{(1)})\)</span>，<span class="math inline">\(J_{test}^{(2)}\)</span>，<span class="math inline">\(\cdots\)</span>，<span class="math inline">\(J_{test}^{(10)}\)</span>，从这些模型中选出最好的一个，假设d=5时最好，则：</p>
<p>选择<span class="math inline">\(\theta_0+\cdots+\theta_5x^5\)</span></p>
<p>那么，该如何评估这个模型的泛化能力？可以用<span class="math inline">\(J_{test}(\theta^{(5)})\)</span></p>
<p>但这样也会有一个问题：因为对于参数<span class="math inline">\(d\)</span>，我们是在测试集上拟合得出，同时也是在测试集上进行评估，这样就不公平了(就好比测试集在一场比赛中，既当选手，又当裁判)。</p>
<h3 id="假设评估">假设评估</h3>
<p>为了解决模型选择出现的问题？我们通常会采用如下的方法来评估一个假设：</p>
<p>给定一个数据集，不再将它分成训练集和测试集，而是把它分为三个部分，第一部分和之前一样，作为训练集，然后第二部分称为交叉验证集(Cross validation set(cv)， 最后一部分称为测试集，这三部分比例是：<span class="math inline">\(m:m_{cv}:m_{test}=6:2:2\)</span>，这些比值可以稍微调整，但这种分法是最典型的比例。</p>
<h3 id="训练验证测试错误">训练/验证/测试错误</h3>
<p>训练错误：<span class="math inline">\(J_{train}(\theta)=\frac{1}{2m} \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<p>交叉验证错误：<span class="math inline">\(J_{cv}(\theta)=\frac{1}{2m_{cv}}\sum_{i=1}^{m_{cv}}(h_\theta(x_{cv}^{(i)})-y_{cv}^{(i)})^2\)</span></p>
<p>测试错误：<span class="math inline">\(J_{test}(\theta)=\frac{1}{2m_{test}}\sum_{i=1}^{m_{test}}(h_\theta(x_{test}^{(i)})-y_{test}^{(i)})^2\)</span></p>
<hr />
<p>再针对上述的模型选择问题，我们要做的是，用验证集或者说是交叉验证集来选择模型，而不是用原来的测试集，具体来说，首先，我们要选择第一个模型，然后最小化代价函数，得到对应的参数<span class="math inline">\(\theta^{(1)}\)</span>，同理计算出<span class="math inline">\(\theta^{(2)},\cdots,\theta^{(10)}\)</span>，然后在交叉验证集来测试，然后计算出<span class="math inline">\(J_{cv}(\theta^{(1)}),J(\theta^{(2)}),\cdots,J(\theta^{(10)})\)</span>，根据在交叉验证集上的误差，选择最佳模型，假设四次多项式对应的误差验证误差最小(d=4)，那么在这种情况下，然后再用<span class="math inline">\(J_{test}(\theta^{(4)})\)</span>来估计模型的泛化误差。</p>
<h2 id="诊断偏差和方差">诊断偏差和方差</h2>
<h3 id="偏差方差">偏差/方差</h3>
<p>如图，对于几种拟合情况，分别对应偏差和方差情况如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712103646559.png" /></p>
<p>具体来说，我们沿用之前所使用的训练误差和验证误差的定义 ,绘制出误差随<span class="math inline">\(d\)</span>的变化曲线如图</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712144938421.png" /></p>
<p>对于训练误差，随着<span class="math inline">\(d\)</span>的增加，是趋于下降的；</p>
<p>对于验证误差，随着<span class="math inline">\(d\)</span>的增加，是先减少后增大的</p>
<p>具体来说，假设我们得出了一个学习算法，但这个算法并没有表现的像我们希望的那么好，则应该如何判断出现的是高偏差问题还是高方差问题。</p>
<p>对应于上图中，如果是拐点左边的，<span class="math inline">\(d\)</span>较小时，则属于高偏差问题；如果是拐点右边的，<span class="math inline">\(d\)</span>较大，则属于高方差问题</p>
<blockquote>
<p>偏差(欠拟合)：<span class="math inline">\(J_{train}(\theta)\)</span>较大，<span class="math inline">\(J_{vc}(\theta)\)</span>也大</p>
<p>方差(过拟合)：<span class="math inline">\(J_{train}(\theta)\)</span>较小，<span class="math inline">\(J_{vc}(\theta)\)</span>较大</p>
</blockquote>
<h2 id="正则化和偏差方差">正则化和偏差/方差</h2>
<p>对于正则化线性回归中，假设：</p>
<p><span class="math inline">\(h_\theta(x)=\theta_0+\theta_1x+\theta_2x^2+\theta_3x^3+\theta_4x^4\)</span></p>
<p><span class="math inline">\(J(\theta)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2+\frac{\lambda}{2m}\sum_{j=1}^n\theta_j^2\)</span></p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712151243248.png" alt="image-20210712151243248" /><figcaption>image-20210712151243248</figcaption>
</figure>
<h3 id="选择正则化参数lambda">选择正则化参数<span class="math inline">\(\lambda\)</span></h3>
<blockquote>
<p>假设在使用正则化的情形中，定义<span class="math inline">\(J_{train}(\theta)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span>为另一种不同的形式，与此类似，定义<span class="math inline">\(J_{cv}(\theta),J_{test}(\theta)\)</span></p>
</blockquote>
<p>然后：</p>
<p>1.尝试<span class="math inline">\(\lambda=0\)</span>，然后求出<span class="math inline">\(\min J(\theta)\)</span>对应的<span class="math inline">\(\theta^{(1)}\)</span>，然后使用交叉验证集来进行评价</p>
<p>2.尝试<span class="math inline">\(\lambda=0.01\)</span>，同理</p>
<p>3.尝试<span class="math inline">\(\lambda=0.02，同理\)</span></p>
<p>4.尝试<span class="math inline">\(\lambda=0.04\)</span>，同理</p>
<p>5.尝试<span class="math inline">\(\lambda=0.08\)</span>，同理</p>
<p><span class="math inline">\(\cdots\)</span></p>
<p>12.尝试<span class="math inline">\(\lambda=10(10.24 \approx10)\)</span>，同理</p>
<p>然后选择最佳<span class="math inline">\(J_cv(\theta^{(i)})\)</span>对应的<span class="math inline">\(\theta^{(i)}\)</span></p>
<p>最后，计算它在测试集上的表现<span class="math inline">\(J_{test}(\theta^{(i)})\)</span></p>
<p>对于各种误差随<span class="math inline">\(\lambda\)</span>变化关系，如下图</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712152457547.png" /></p>
<h2 id="学习曲线">学习曲线</h2>
<p>为了绘制一条学习曲线，我们通常先绘制出<span class="math inline">\(J_{train}\)</span>或<span class="math inline">\(J_{cv}\)</span>，要将其绘制一个关于参数<span class="math inline">\(m\)</span>的函数。</p>
<p>如图，假设只有一个训练样本，并且假设用二次函数来拟合，由于只有一个样本，拟合的结果明显会很好，只要用二次函数拟合，对于一个目标训练样本，其误差一定为0，如果有两个样本，二次也能很好的拟合，如果三个样本，也一样，当样本数据更大，如四个时，二次函数就不能很好的拟合了，当样本起来越多时，拟合效果也会渐渐变差。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712153949282.png" /></p>
<p>总结一下，当训练样本容量m很小的时候，训练误差也会很小，随着训练集容量的增大，平均训练误差也在增大。如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712154134912.png" /></p>
<p>而对于交叉验证集的情况，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712170019613.png" /></p>
<h3 id="高偏差">高偏差</h3>
<p>假如假设出现了<strong>高偏差</strong>问题，则当训练样本逐渐增大时，误差变化可能如图所示：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712170812719.png" /></p>
<p>对于交叉验证集误差，随着样本数量增加，误差减小，当样本数量增大到某个值时，就会找到那条最有可能拟合数据的线，并且即使再增加样本数量，效果还是相差不大；</p>
<p>对于训练集误差，在高偏差情况下，训练误差会逐渐增大，最后接近交叉验证误差，这是因为参数比较少，又有很多数据，当样本数量较大时，二种误差就会非常接近</p>
<blockquote>
<p>结论：如果一个学习算法有高偏差，则随着我们增加训练样本，交叉验证误差不会明显下降了，基本变成平的了，如果处于高偏差情况下，则选用更多的训练数据对于改善算法表现无益。</p>
</blockquote>
<h3 id="高方差">高方差</h3>
<p>当学习算法出现<strong>高方差</strong>时，则当训练样本逐渐增大时，误差变化可能如图所示：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210712171513404.png" /></p>
<p>对于训练误差，随着训练集数据增加，可能仍然会过拟合，但对数据的拟合变得更加困难了，所以随着训练集样本容量的增大，误差也会随之增大，但总的来说，还是相对较小的；</p>
<p>对于交叉验证误差，在高方差情况下，由于函数的过拟合，因此交叉验证误差会一直都很大，</p>
<blockquote>
<p>总结：如果一个算法有高方差，则随着我们增大训练集的样本数，训练误差会越来越大，验证误差会越来越小，因此，使用更多的训练数据，对于高方差情况下，对改进算法是有帮助的，同样对于知道算法是否处理高方差情况下，也是有用的。</p>
</blockquote>
<h2 id="决定接下来做什么">决定接下来做什么</h2>
<p>回到最开始的调试机器学习算法中，如何判断对于各个方法的选择，哪些是有效的呢？</p>
<ul>
<li>获取更多了训练样本 （可用于解决高方差问题）</li>
<li>尝试更小的特征集 （可用于解决高方差问题）</li>
<li>尝试更多的特征 （可用于解决高偏差问题）</li>
<li>尝试增加多项式特征 （可用于解决高偏差问题）</li>
<li>尝试减小<span class="math inline">\(\lambda\)</span> （可用于解决高偏差问题）</li>
<li>尝试增大<span class="math inline">\(\lambda\)</span> （可用于解决高方差问题）</li>
</ul>
<h3 id="神经网络和过拟合">神经网络和过拟合</h3>
<p>对于小的、简单的神经网络(参数更少，更容易欠拟合)，计算量较小</p>
<p>对于大的、复杂的神经网络(参数更多，更容易过拟合)，计算量很大，使用正则化项<span class="math inline">\(\lambda\)</span>来解决过拟合</p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-机器学习系统设计</title>
    <url>/2021/07/14/Part1-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="part1-机器学习系统设计">Part1-机器学习系统设计</h1>
<h2 id="确定执行的优先级">确定执行的优先级</h2>
<p>假定需要搭建一个垃圾邮件分类器，它是一个监督学习，输入x是邮件的特征，y是1(垃圾邮件)或0(非垃圾邮件)</p>
<h3 id="对于邮件特征如何选取呢">对于邮件特征如何选取呢？</h3>
<p>可以选择100个可以表示垃圾或非垃圾邮件的单词</p>
<blockquote>
<p>如：选择的单词是：deal,buy,discont,now,...</p>
<p>则对于邮件内容为Deal of the week! Buy now!对应的x可能是：</p>
<p><span class="math inline">\(x=\left[ \begin{matrix} 0\\ 1 \\ 1 \\ \cdots \\ 1 \\ \cdots \end{matrix} \right]\begin{matrix} discont\\ buy \\ deal \\ \cdots \\ now \\ \cdots \end{matrix}，\ x\in \mathbb R^{100}\)</span></p>
<p>即：<span class="math inline">\(x_j = \left\{ \begin{align} &amp;1,如果x_j出现在邮件中 \\ &amp;0,如果x_j没有出现在邮件中 \end{align} \right.\)</span></p>
</blockquote>
<blockquote>
<p>注：在实际工作中，普遍的做法是在训练集中选出出现频率最多的n个单词(n通常在10000到50000之间)，然后将它们作为特征向。</p>
</blockquote>
<h3 id="如何在有限时间下尽可能降低错误率呢">如何在有限时间下，尽可能降低错误率呢？</h3>
<ul>
<li>收集大量的数据</li>
<li>使用更加复杂的特征(如：邮件头信息、邮件主体信息、检测拼写错误)</li>
</ul>
<h2 id="误差分析">误差分析</h2>
<p>推荐方法：</p>
<ul>
<li>通过一个简单的算法来快速实现它，然后在交叉验证集上验证</li>
<li>画出学习曲线来检测出高偏差问题或高方差问题，然后判断是否使用更多数据或特征</li>
<li>误差分析：说明当前系统的优缺点，指导我们想出办法来改进。如实现垃圾邮件分类器时，观察交叉验证集的情况，然后看看那些被错误分类的文件，观察它们共同的特征和规律，进而设计新特征</li>
</ul>
<p>例：</p>
<blockquote>
<p>假设我们正在做一个垃圾邮件分类器，<span class="math inline">\(m_{cv}=500\)</span>，假设结果有较高的错误率，错误分类了100个交叉验证集样本，现在，我们要做的是手动核查这100个错误，然后手工为它们分类，同时考虑：</p>
<ol type="1">
<li>这些邮件是什么类型的邮件（如：卖药的、卖假货的、钓鱼的等）</li>
<li>有什么线索或特征能帮助正确地进行分类（如：拼写错误、奇怪的邮件头、奇怪标点等）</li>
</ol>
</blockquote>
<h3 id="数值估计的重要性">数值估计的重要性</h3>
<p>对学习算法要有一种数值估计的方法，意思就是当改进学习算法时，如果算法能够返回一个数值评价指标，来估计算法执行的效果，将会很有帮助。</p>
<p>如：决定是否应该将 discount/discounts/discounted/discounting 视为同一个单词？</p>
<p>可以使用词干提取软件</p>
<p>误差分析或许无法帮助决定它对于算法结果是否有效果，唯一的做法就是尝试它，其后看它在实际中是否有用。而如果要这样做的话，通过数值估计来评估算法的效果将会非常有用，如：</p>
<p>在不使用词干提取时，错误率为5%；在使用词干提取时，错误率为3%，则可以很快判断出使用词干提取是一个有效方法。</p>
<p>在这个特征问题下，这是很自然的单一规则的数值评价指标，就叫做交叉验证错误率，但也有一些其它带有数值评价指标的例子，还需要进行一些处理。</p>
<blockquote>
<p>注：通常推荐在交叉验证集上进行误差分析</p>
</blockquote>
<h2 id="不对称性分类的误差评估">不对称性分类的误差评估</h2>
<p>例：</p>
<blockquote>
<p>以癌症分类为例，我们拥有病人的特征变量，我们希望知道他们是否患有癌症。则：</p>
<p>训练逻辑回归模型<span class="math inline">\(h_\theta(x)\)</span> （y=1表现患有癌症，y=0表示没有）</p>
</blockquote>
<p>假设我们在测试集上测试，发现错误率只有1%，有99%的正确诊断，看起来不错，但是假如我们发现在测试集中只有0.5%的患者真正得了癌症，因此在我们的筛选程序中，有0.5%的患者患了癌症。</p>
<p>因此，在这个例子中，1%的错误率就不再显得那么好了，因为：</p>
<blockquote>
<p>假设我们的算法所有的输出都<span class="math inline">\(y=0\)</span>，则意味着，其实错误率只有0.5%，这甚至比上述例子更好，这是一个非机器学习算法。</p>
</blockquote>
<p>这种情况发生正例和负例的比率非常接近于一个极端情况，我们把这种情况称为<strong>不对称性分类</strong>，这种情况下，使用分类误差或分类精确度来作为评估度量就可能会产生如下问题：如有一个算法的精确度是99.2%，即误差只有0.8%，假设对算法进行了一些改变，结果精确度变成了99.5%，这样到底是否是算法的提升呢？使用数值对误差进行评估是调整算法非常有用的一种方法，而如果有一个不对称分类的话，用分类精确度就并不能很好地衡量算法，此时就需要一个不同的误差度量值或者不同的评估度量值。</p>
<h3 id="查准率召回率">查准率/召回率</h3>
<p>假设我们正在使用测试集来评估一个分类模型，对于测试集中的样本，假设是一个二分类问题，则每个结果都会为0或1，我们的学习算法要做的就是值的预测，并且学习算法会为每个测试集中的实例做出预测，预测值也是0或1，即如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714135707833.png" /></p>
<p>这样，我们就有另一种方式来评估算法的表现，我们要计算两个数字，<strong>查准率</strong>和<strong>召回率</strong></p>
<p>查准率：(对于所有我们预测患有癌症的病人中有多大比率的病人是真正患有癌症的？)</p>
<p><span class="math inline">\(查准率=\frac{True\ positive}{\#predicted\ positive}=\frac{True\ positive}{True\ positive+False\ positive}\)</span></p>
<p>召回率：(如果所有测试集或验证集中的病人，确实得了癌症，有多大比例我们正确预测他们得了癌症，召回：可以理解为挽救了多少病人)</p>
<p><span class="math inline">\(召回率=\frac{True\ positive}{\#actual\ positive}=\frac{True\ positive}{True\ positive+False\ negative}\)</span></p>
<p>这样，对于上述的预测值总是<span class="math inline">\(y=0\)</span>的，则召回率就是0，这样就能轻易发现算法的问题。</p>
<blockquote>
<p>总之，如果一个分类模型，具有较高的查准率和召回率，则可以确信地说这个算法表现很好</p>
</blockquote>
<h2 id="查准率和召回率的权衡">查准率和召回率的权衡</h2>
<p>假设还是以上述癌症预测为例，我们使用逻辑回归预测<span class="math inline">\(0 \le h_\theta(x) \le 1\)</span>，则如果<span class="math inline">\(h_\theta(x) \ge 0.5,y=1\)</span>；<span class="math inline">\(h_\theta(x)&lt;0.5,y=0\)</span>，假设我们想要能非常自信地说明<span class="math inline">\(y=1\)</span>的情况，由于癌症对于人的影响是较大，所以在有较高准确性前，不能随意判断。</p>
<p>这样，一种方法是调整阈值，即：<span class="math inline">\(h_\theta(x) \ge 0.7,y=1;h_\theta(x)&lt;0.7,y=0\)</span>，这样就会有较高的查准率，而召回率则会降低。</p>
<p>同样的，假设我们希望避免遗漏掉患有癌症的人，由于如果一个人患有癌症，但我们并没有告诉他，则这可能造成严重后果，这种情况下，我们就需要将阈值设置得较低，如0.3，这样就会有较高的召回率，而查准率则会降低。</p>
<p>对应地，可能画出它们之间的关系曲线，如图(也有可能是其它样式的)：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714143121914.png" /></p>
<h3 id="f_1值-f值"><span class="math inline">\(F_1\)</span>值 (F值)</h3>
<p>如何比较不同的查准率和召回率？具体地，如果我们有如图三个算法对应不同的查准率和召回率，如何进行比较？</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714143401135.png" /></p>
<p>可能可以使用平均值：<span class="math inline">\(Average=\frac{P+R}{2}\)</span>，但这可能并不是一个很好的解决办法，因为其对于极端情况处理不好</p>
<p>使用<span class="math inline">\(F_1\)</span> Score：<span class="math inline">\(F_1=2\frac{PR}{P+R}\)</span></p>
<p>通过<span class="math inline">\(F_1\)</span>值计算，可以得出三个算法对应的值分别是：0.444,0.175,0.0392；可以看出，算法1相对较好</p>
<p><span class="math inline">\(P=0或R=0 \Rightarrow F=0\)</span></p>
<p><span class="math inline">\(P=1且R=1 \Rightarrow F=1\)</span></p>
<h2 id="机器学习数据">机器学习数据</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714145222500.png" /></p>
<p>如图，大多情况下，随着数据集的增大，算法表现会越来越好</p>
<h3 id="大数据原理">大数据原理</h3>
<ul>
<li><p>假设特征<span class="math inline">\(x\in \mathbb R^{n+1}\)</span>包含足够的信息来正确地<span class="math inline">\(y\)</span></p>
<p>如对于房价预测中，只给定房屋面积，而没有其它信息，即使数据再多，可能预测结果也不是那么准确。</p>
<p>或者说：给定这个输入x，如果是人类专家，能准确地预测出y么？</p></li>
<li><p>使用一个具有很多参数的学习算法(如：有许多特征的逻辑回归或线性回归、有很多隐藏单元的神经网络)(本身就是低偏差、高方差的模型)</p></li>
<li><p>使用非常大的数据集</p></li>
</ul>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-正则化</title>
    <url>/2021/07/08/Part1-%E6%AD%A3%E5%88%99%E5%8C%96/</url>
    <content><![CDATA[<h1 id="part1-正则化">Part1-正则化</h1>
<h2 id="过拟合问题">过拟合问题</h2>
<blockquote>
<p>到现在为止，我们已经学习了线性回归和逻辑回归，它们能够有效地解决许多问题，但当将它们应用到某些特定的机器学习应用时，会遇到过拟合问题，导致它们表现欠佳。</p>
</blockquote>
<p>什么是过拟合？</p>
<p>例：</p>
<blockquote>
<p>对于房价预测问题，输入是房屋面积，输出是房屋价格</p>
</blockquote>
<p>如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708094246022.png" /></p>
<p>当使用一次函数来拟合数据时，画出的直线对于有的训练数据拟合并不好，这并不是一个很好的模型，因此，将这个问题称为欠拟合，另一个说法是这个算法具有高偏差(High bias)。</p>
<p>在图中第二个图对应的，加入一个二次项，用二次函数来拟合数据集，画出的线拟合效果很好。</p>
<p>另一个极端情况是，如果拟合一个四阶多项式，对应的有四个参数，拟合出的曲线可以拟合所有的训练样本，这看似很好地拟合了训练集，因为它通过了所有的数据点，但这是一条扭曲的曲线，它不停地上下波动，实际上，它并不是一个预测房价的好模型，这个问题，也被称为<strong>过拟合</strong>，另一个说法是这个算法具有高方差(Hight variance)。</p>
<blockquote>
<p>概括地说，过拟合问题，将会在变量过多时出现，这里训练出的假设能很好地拟合训练集，因此，代价函数实际上可能非常接近于0或恰好等于0，这样训练的结果，千方百计地拟合训练样本，导致它无法<strong>泛化</strong>到新的样本中，无法预测新样本的价格。</p>
</blockquote>
<p>同样的，在逻辑回归中，欠拟合和过拟合的表现如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708094952754.png" /></p>
<p>解决过拟合：</p>
<ol type="1">
<li><p>在特征数量较少时， 如上述，可以采用画图的方式来观察曲线，确定多项式次数</p></li>
<li><p>降低特征数量</p>
<ul>
<li>人工决策，挑选更加重要的特征保留下来，而将一些不重要的特征舍弃</li>
<li>模型选择算法(PCA......)</li>
</ul></li>
<li><p>正则化</p>
<ul>
<li>保留所有特征，但是减少量级或参数大小</li>
<li>如果有许多特征，且每个特征都会对预测<span class="math inline">\(y\)</span>有一点点作用，则使用正则化会表现很好</li>
</ul></li>
</ol>
<h2 id="代价函数">代价函数</h2>
<p>对于上述的过拟合例子中，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708095729902.png" /></p>
<p>对于这个过拟合的函数，它的泛化性不够好，不妨在函数中加入惩罚项，来使得参数<span class="math inline">\(\theta_3\)</span>和<span class="math inline">\(\theta_4\)</span>都非常小</p>
<p>因此，对于<span class="math inline">\(\min_\theta \frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span>需要改为：</p>
<p><span class="math inline">\(\min_\theta \frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2+1000\theta_3^2+1000\theta_4^2\)</span>(此处1000只是表示一个较大的数，不固定)</p>
<p>为了达到最小的目的，则需要<span class="math inline">\(\theta_4\)</span>和<span class="math inline">\(\theta_4\)</span>要尽可能小，即需要<span class="math inline">\(\theta_3 \rightarrow 0,\theta_4 \rightarrow 0\)</span></p>
<p>这样，就好像我们将函数中的<span class="math inline">\(\theta_3x^3+\theta_4x^4\)</span>直接去掉一样，这样的话，这个函数就还是相当于二次函数。</p>
<p><strong>正则化</strong>：</p>
<p>正则化的思想就是：</p>
<p>如果我们的参数值较小，则意味着：一个更加简单的假设模型；更不容易出现过拟合问题</p>
<blockquote>
<p>还是以房价预测为例，如果房屋特征为：<span class="math inline">\(x_1,x_2,\cdots,x_100\)</span>，对应的参数为<span class="math inline">\(\theta_0,\theta_1,\theta_2,\cdots,\theta_100\)</span></p>
</blockquote>
<p>和之前不同的是，我们不知道<span class="math inline">\(\theta_3\)</span>和<span class="math inline">\(\theta_4\)</span>是高阶项，也就是不知道因为选出哪些参数来进行惩罚</p>
<p>因此我们需要做的就是修改代价函数，来缩小所有的参数，因为我们不知道应该选择哪些参数去缩小</p>
<p><span class="math inline">\(J(\theta)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<p><span class="math inline">\(J(\theta)=\frac{1}{2m}[\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2+\lambda \sum_{j=1}^n \theta_j^2]\)</span></p>
<h2 id="正则化线性回归">正则化线性回归</h2>
<p><span class="math inline">\(J(\theta)=\frac{1}{2m}[\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2+\lambda \sum_{j=1}^n \theta_j^2]\)</span></p>
<p><span class="math inline">\(\min_\theta J(\theta)\)</span></p>
<p>梯度下降：</p>
<blockquote>
<p>之前：</p>
<p><span class="math inline">\(Repeat \{ \\ \theta_j := \theta_j-\alpha\ \frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)} (j=0,1,2,3,\cdots,n) \\\}\)</span></p>
</blockquote>
<p>正则化：</p>
<p><span class="math inline">\(Repeat \{ \\ \theta_0:=\theta_0-\alpha \frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)}) -y^{(i)})x_0^{(i)} \\ \theta_j := \theta_j-\alpha\ [\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}+\frac{\lambda}{m}\theta_j] \ (j=1,2,3,\cdots,n) \\ (\Rightarrow \theta_j:=\theta_j(1-\alpha \frac{\lambda}{m})-\alpha \frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)} ) \\ \}\)</span></p>
<p>正规方程：</p>
<blockquote>
<p><span class="math inline">\(X=\left[ \begin{matrix} (x^{(1)})^T \\ \dots \\ (x^{(m)})^T \end{matrix} \right]；y=\left[ \begin{matrix} y^{(1)} \\ \dots \\ y^{(m)} \end{matrix} \right]\)</span></p>
<p>之前：</p>
<p><span class="math inline">\(\theta=(X^TX)^{-1}X^Ty\)</span></p>
</blockquote>
<p>正则化：</p>
<p><span class="math inline">\(如果 \lambda &gt; 0,\\ \theta=(X^TX + \lambda \left[ \begin{matrix} 0 &amp; &amp; &amp; \\ &amp; 1 &amp; &amp; \\ &amp; &amp; \cdots &amp; \\ &amp; &amp; &amp; 1 \end{matrix} \right])^{-1}X^Ty\)</span></p>
<p>其中的矩阵是<span class="math inline">\((n+1)\times (n+1)\)</span>矩阵(n是特征数量 )</p>
<h2 id="正则化逻辑回归">正则化逻辑回归</h2>
<p><span class="math inline">\(J(\theta)=-[\frac{1}{m}\sum_{i=1}^my^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log (1-h_\theta(x^{(i)}))]\)</span></p>
<p>正则化：</p>
<p><span class="math inline">\(J(\theta)=-[\frac{1}{m}\sum_{i=1}^m y^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log (1-h_\theta(x^{(i)}))+\frac{\lambda}{2m}\sum_{j=1}^n\theta_j^2]\)</span></p>
<p>梯度下降：</p>
<blockquote>
<p>之前：</p>
<p><span class="math inline">\(Repeat\{ \\ \theta_j:=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}(j=0,1,2,3,\cdots,n) \\ \}\)</span></p>
</blockquote>
<p>正则化：</p>
<p><span class="math inline">\(Repeat\{ \\ \theta_0:=\theta_0-\alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_0^{(i)} \\ \theta_j:=\theta_j-\alpha[\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}+\frac{\lambda}{m}\theta_j](j=1,2,3,\cdots,n) \\ \}\)</span></p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-正则化线性回归和偏差方差练习</title>
    <url>/2021/07/13/Part1-%E6%AD%A3%E5%88%99%E5%8C%96%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%92%8C%E5%81%8F%E5%B7%AE%E6%96%B9%E5%B7%AE%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-正则化线性回归和偏差方差练习">Part1-正则化线性回归和偏差方差练习</h1>
<h2 id="正则化线性回归">正则化线性回归</h2>
<h3 id="数据可视化">1.1 数据可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line">data = loadmat(<span class="string">&#x27;ex5data1.mat&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X, y, Xval, yval, Xtest, ytest = <span class="built_in">map</span>(np.ravel, [data[<span class="string">&#x27;X&#x27;</span>], data[<span class="string">&#x27;y&#x27;</span>], data[<span class="string">&#x27;Xval&#x27;</span>], data[<span class="string">&#x27;yval&#x27;</span>], data[<span class="string">&#x27;Xtest&#x27;</span>], data[<span class="string">&#x27;ytest&#x27;</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.scatter(X, y, marker=<span class="string">&#x27;x&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713100548859.png" /></p>
</blockquote>
<h3 id="正则化线性回归代价函数">1.2 正则化线性回归代价函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = X.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">theta = np.ones(X.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_cost</span>(<span class="params">theta, X, y, lamb</span>):</span></span><br><span class="line">  m = X.shape[<span class="number">0</span>]</span><br><span class="line">  t = X@theta-y <span class="comment"># m*n@n*1</span></span><br><span class="line">  cost = (t.T@t)/(<span class="number">2</span>*m)</span><br><span class="line">  reg = lamb/(<span class="number">2</span>*m)*np.<span class="built_in">sum</span>(theta[<span class="number">1</span>:]**<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> cost+reg</span><br></pre></td></tr></table></figure>
<h3 id="正则化线性回归梯度计算">1.3 正则化线性回归梯度计算</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_gradient</span>(<span class="params">theta, X, y, lamb</span>):</span></span><br><span class="line">  m = <span class="built_in">len</span>(X)</span><br><span class="line">  grad = (X.T@(X@theta-y))/m</span><br><span class="line">  reg = lamb/m*theta <span class="comment"># 1*2</span></span><br><span class="line">  reg[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> grad + reg</span><br></pre></td></tr></table></figure>
<h3 id="拟合线性回归">1.4 拟合线性回归</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt </span><br><span class="line">res = opt.minimize(fun=reg_cost, x0=theta, args=(X, y, <span class="number">0</span>), method=<span class="string">&#x27;TNC&#x27;</span>, jac=reg_gradient)</span><br><span class="line">res</span><br></pre></td></tr></table></figure>
<blockquote>
<p>​ fun: 22.373906495108926 ​ jac: array([ 1.52549682e-07, -7.76071267e-09])</p>
<p>message: 'Converged (|f_n-f_(n-1)| ~= 0)' nfev: 9 nit: 4 status: 1 success: True x: array([13.08790367, 0.36777923])</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(data[<span class="string">&#x27;X&#x27;</span>], y)</span><br><span class="line">temp_X = np.arange(-<span class="number">50</span>,<span class="number">40</span>)</span><br><span class="line">plt.plot(temp_X, res.x[<span class="number">0</span>]+temp_X*res.x[<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713120549969.png" /></p>
</blockquote>
<h2 id="偏差和方差">偏差和方差</h2>
<h3 id="学习曲线">2.1 学习曲线</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = X.shape[<span class="number">0</span>]</span><br><span class="line">Xval = Xval.reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">Xval = np.insert(Xval, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_cost = []</span><br><span class="line">cv_cost = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">  res = opt.minimize(fun=reg_cost, x0=np.ones(X.shape[<span class="number">1</span>]), args=(X[:i], y[:i], <span class="number">1</span>), method=<span class="string">&#x27;TNC&#x27;</span>, jac=reg_gradient)</span><br><span class="line">  <span class="comment"># c = opt.minimize(fun=reg_cost, x0=theta, args=(X[0:i], y[0:i], 0), method=&#x27;TNC&#x27;, jac=reg_gradient).fun</span></span><br><span class="line">  train_cost.append(reg_cost(res.x, X[:i], y[:i], <span class="number">0</span>))</span><br><span class="line">  <span class="comment"># c = opt.minimize(fun=reg_cost, x0=theta, args=(Xval[0:i], yval[0:i], 0), method=&#x27;TNC&#x27;, jac=reg_gradient).fun</span></span><br><span class="line">  cv_cost.append(reg_cost(res.x, Xval, yval, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(np.arange(<span class="number">1</span>,m+<span class="number">1</span>), cv_cost, label=<span class="string">&#x27;cv cost&#x27;</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">1</span>,m+<span class="number">1</span>), train_cost, label=<span class="string">&#x27;train cost&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713134216504.png" /></p>
</blockquote>
<p>可以看出，这个模型的拟合并不好，<strong>欠拟合</strong>了</p>
<h2 id="多项式回归">多项式回归</h2>
<h3 id="多项式特征">3.1 多项式特征</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新获取数据</span></span><br><span class="line">X, y, Xval, yval, Xtest, ytest = <span class="built_in">map</span>(np.ravel, [data[<span class="string">&#x27;X&#x27;</span>], data[<span class="string">&#x27;y&#x27;</span>], data[<span class="string">&#x27;Xval&#x27;</span>], data[<span class="string">&#x27;yval&#x27;</span>], data[<span class="string">&#x27;Xtest&#x27;</span>], data[<span class="string">&#x27;ytest&#x27;</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poly_features</span>(<span class="params">X, power</span>):</span></span><br><span class="line">  data = &#123;<span class="string">f&#x27;f<span class="subst">&#123;i&#125;</span>&#x27;</span>:np.power(X, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, power+<span class="number">1</span>)&#125;</span><br><span class="line">  <span class="keyword">return</span> pd.DataFrame(data)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poly_features(X, <span class="number">3</span>).head() <span class="comment"># 测试</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713133651448.png" /></p>
</blockquote>
<h3 id="构建多项式数据">3.2 构建多项式数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归一化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_feature</span>(<span class="params">df</span>):</span></span><br><span class="line">  <span class="keyword">return</span> df.apply(<span class="keyword">lambda</span> c: (c-c.mean())/c.std())</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建多项式数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_poly_data</span>(<span class="params">*args, power</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">prepare</span>(<span class="params">X</span>):</span></span><br><span class="line">    df = poly_features(X, power)</span><br><span class="line">    t = normalize_feature(df).values</span><br><span class="line">    <span class="keyword">return</span> np.insert(t, <span class="number">0</span>, <span class="number">1</span>,axis=<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> [prepare(x) <span class="keyword">for</span> x <span class="keyword">in</span> args]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_poly, Xval_poly, Xtest_poly = prepare_poly_data(X, Xval, Xtest, power=<span class="number">8</span>)</span><br><span class="line">X_poly[:<span class="number">3</span>,:] <span class="comment"># 测试</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713133817072.png" /></p>
</blockquote>
<h3 id="多项式回归-1">3.2 多项式回归</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 画学习曲线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span>(<span class="params">X, y, Xval, yval, lamb</span>):</span></span><br><span class="line">  train_cost, cv_cost = [], []</span><br><span class="line">  m = X.shape[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">    res = opt.minimize(fun=reg_cost, x0=np.ones(X.shape[<span class="number">1</span>]), args=(X[:i], y[:i], lamb), method=<span class="string">&#x27;TNC&#x27;</span>, jac=reg_gradient)</span><br><span class="line">    <span class="comment"># c = opt.minimize(fun=reg_cost, x0=theta, args=(X[0:i], y[0:i], 0), method=&#x27;TNC&#x27;, jac=reg_gradient).fun</span></span><br><span class="line">    train_cost.append(reg_cost(res.x, X[:i], y[:i], lamb))</span><br><span class="line">    <span class="comment"># c = opt.minimize(fun=reg_cost, x0=theta, args=(Xval[0:i], yval[0:i], 0), method=&#x27;TNC&#x27;, jac=reg_gradient).fun</span></span><br><span class="line">    cv_cost.append(reg_cost(res.x, Xval, yval, lamb))</span><br><span class="line">  plt.plot(np.arange(<span class="number">1</span>,m+<span class="number">1</span>), cv_cost, label=<span class="string">&#x27;cv cost&#x27;</span>)</span><br><span class="line">  plt.plot(np.arange(<span class="number">1</span>,m+<span class="number">1</span>), train_cost, label=<span class="string">&#x27;train cost&#x27;</span>)</span><br><span class="line">  plt.legend()</span><br><span class="line">  plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_learning_curve(X_poly, y, Xval_poly, yval, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713134333408.png" /></p>
<p>可以看出，训练误差一直很低且为0，验证误差逐渐减小，这是<strong>过拟合</strong>的表现</p>
</blockquote>
<h3 id="调整正则化参数">3.3 调整正则化参数</h3>
<p>当<span class="math inline">\(\lambda=1\)</span>时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_learning_curve(X_poly, y, Xval_poly, yval, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713134611557.png" /></p>
<p>可以看出，训练误差还是很小，但不再是一起为0了，因此这是减轻后的<strong>过拟合</strong></p>
</blockquote>
<p>当<span class="math inline">\(\lambda=100\)</span>时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_learning_curve(X_poly, y, Xval_poly, yval, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713134739463.png" /></p>
<p>正则化太严重，<strong>欠拟合</strong>了</p>
</blockquote>
<p>找到最佳的<span class="math inline">\(\lambda\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lamb_candidate = [(<span class="number">2</span>**t)*<span class="number">0.01</span> <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">lamb_candidate.insert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">train_cost,cv_cost = [], []</span><br><span class="line"><span class="keyword">for</span> lamb <span class="keyword">in</span> lamb_candidate:</span><br><span class="line">  res = opt.minimize(fun=reg_cost, x0=np.ones(X_poly.shape[<span class="number">1</span>]), args=(X_poly, y, lamb), method=<span class="string">&#x27;TNC&#x27;</span>, jac=reg_gradient)</span><br><span class="line">  train = reg_cost(res.x, X_poly, y, lamb)</span><br><span class="line">  cv = reg_cost(res.x, Xval_poly, yval, lamb)</span><br><span class="line">  train_cost.append(train)</span><br><span class="line">  cv_cost.append(cv)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(lamb_candidate, train_cost, label=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">plt.plot(lamb_candidate, cv_cost, label=<span class="string">&#x27;cv&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlabel(<span class="string">&#x27;lambda&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210713135933419.png" /></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求出最佳lamb</span></span><br><span class="line">lamb_candidate[np.argmin(cv_cost)]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.32</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试集上测试</span></span><br><span class="line"><span class="keyword">for</span> lamb <span class="keyword">in</span> lamb_candidate:</span><br><span class="line">  res = opt.minimize(fun=reg_cost, x0=np.ones(X_poly.shape[<span class="number">1</span>]), args=(X_poly, y, lamb), method=<span class="string">&#x27;TNC&#x27;</span>, jac=reg_gradient)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;test cost(l=<span class="subst">&#123;lamb&#125;</span>)=<span class="subst">&#123;reg_cost(res.x, Xtest_poly, ytest, lamb)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>test cost(lamb=0)=9.982275423899827</p>
<p>test cost(lamb=0.01)=10.973543277025396</p>
<p>test cost(lamb=0.02)=10.548120143946353</p>
<p>test cost(lamb=0.04)=10.007174745468829</p>
<p>test cost(lamb=0.08)=9.392941014843759</p>
<p>test cost(lamb=0.16)=8.820134306044448</p>
<p>test cost(lamb=0.32)=8.587713795685527</p>
<p>test cost(lamb=0.64)=9.228251765308313</p>
<p>test cost(lamb=1.28)=11.470274383762167</p>
<p>test cost(lamb=2.56)=16.3078760577592</p>
<p>test cost(lamb=5.12)=24.97737418682823</p>
<p>test cost(lamb=10.24)=38.10335942580261</p>
</blockquote>
<p>可以确定，最佳]<span class="math inline">\(\lambda\)</span>为0.32</p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-神经网络</title>
    <url>/2021/07/09/Part1-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="part1-神经网络">Part1-神经网络</h1>
<h2 id="非线性假设">非线性假设</h2>
<p>既然我们已经学习了线性回归和逻辑回归，那么为什么还需要学习神经网络？</p>
<p>例：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708165019152.png" /></p>
<p>如图，对于一个非线性分类问题，当特征数量较多，如达到100个时，对应的特征映射：</p>
<p>只考虑二次项有：<span class="math inline">\(x_1^2,x_1x_2,x_1x_3,x_1x_4,\cdots,x_1x_{100},x_2^2,x_2x_3,\cdots\)</span>，就有大约5000个特征，大约以<span class="math inline">\(n^2\)</span>量级增长，即<span class="math inline">\(O(n^2)\)</span></p>
<p>也可以考虑上述二次项的子集如：<span class="math inline">\(x_1^2,x_2^2,\cdots,x_{100}^2\)</span>，这样数量会减少到只有100个二次项，但由于忽略了太多相关项，在处理类似例中数据时，无法得到理想的结果</p>
<p>再假设，如果考虑三次项则有：<span class="math inline">\(x_1x_2x_3,x_1^2x_2,\cdots\)</span>，则会更多，约170000个，对应<span class="math inline">\(O(n^3)\)</span></p>
<blockquote>
<p>因此，当初始特征个数n很大时，将这些高阶多项式项数包括到特征里人会使特征空间急剧膨胀，当n很大时，增加特征来建立非线性分类器并不是一个好做法。</p>
</blockquote>
<h2 id="神经元和大脑">神经元和大脑</h2>
<blockquote>
<p>神经网络是一个比较老的算法了，它最初产生的目的是制造能模拟大脑的机器</p>
<p>但实际上，神经网络能很好地解决不同的机器学习问题。</p>
</blockquote>
<h3 id="神经网络">神经网络</h3>
<p>起源：是人们想尝试设计出模仿大脑的算法</p>
<p>理念：如果我们想建立学习系统，那为什么不去模仿我们所认识的最神奇的学习机器，人类的大脑呢？</p>
<p>神经网络逐渐兴起于二十世纪八九十年代，应用得非常广泛，但由于各种原因，在九十年代后期应用减少了，但近年，神经网络又变火了，原因之一就是神经网络的计算量较大，到了近些年，计算机的运行速度越来越快，才足以运行大规模的神经网络。</p>
<h3 id="一次学习算法假设">”一次学习算法“假设</h3>
<p>假设大脑所做的学会去处理图像、学会听声音、学习数学等并不是用上千个不同的程序去实习的，而是只需要一个学习算法就可以了。</p>
<h2 id="模型展示">模型展示</h2>
<p>如图，是大脑中的神经元</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708211018950.png" /></p>
<p>其中，有很多的输入通道，叫做树突，有一条输出通道，叫做轴突。</p>
<p>神经元是一个计算单元，它从输入通道接受一定数目的信息，并做一些计算，然后将结果通过轴突传送到其它节点。</p>
<p>神经元模型：逻辑单元</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708211459908.png" /> <span class="math display">\[
x = \left[ \begin{matrix} x_0\\ x_1\\ x_2\\ x_3 \end{matrix} \right]\ \ 
\theta = \left[ \begin{matrix} \theta_0\\ \theta_1\\ \theta_2\\ \theta_3 \end{matrix} \right]\\
h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}
\]</span> 图中未画出的<span class="math inline">\(x_0\)</span>节点通常被称作偏置单元或偏置神经元</p>
<p>对应的橙色部分，被称为激活函数，<span class="math inline">\(g(z)=\frac{1}{1+e^{-z}}\)</span></p>
<p>在神经网络中术语中，激活函数是指代非线性函数</p>
<p>此外，我们一起称<span class="math inline">\(\theta\)</span>为模型的参数，但在一些关于神经网络的文献中，有时会称之为<strong>模型的权重(weights)</strong></p>
<h3 id="神经网络-1">神经网络</h3>
<p>上述代表的是单个神经元，而神经网络其实就是一组神经元连接在一起的集合，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708213044944.png" /></p>
<p>具体的计算步骤：</p>
<blockquote>
<p>符号解释：</p>
<p><span class="math inline">\(a_i^{(j)}\)</span>：第<span class="math inline">\(j\)</span>层第<span class="math inline">\(i\)</span>个单元的激活项</p>
<p><span class="math inline">\(\theta^{(j)}\)</span>：控制从第<span class="math inline">\(j\)</span>层到第<span class="math inline">\(j+1\)</span>层函数映射的权重矩阵</p>
</blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708213509568.png" /></p>
<p>如图，对应的计算方法：</p>
<p><span class="math inline">\(a_1^{(2)}=g(\Theta_{10}^{(1)}x_0+\Theta_{11}^{(1)}x_1+\Theta_{12}^{(1)}x_2+\Theta_{13}^{(1)}x_3)\)</span></p>
<p><span class="math inline">\(a_2^{(2)}=g(\Theta_{20}^{(1)}x_0+\Theta_{21}^{(1)}x_1+\Theta_{22}^{(1)}x_2+\Theta_{23}^{(1)}x_3)\)</span></p>
<p><span class="math inline">\(a_3^{(2)}=g(\Theta_{30}^{(1)}x_0+\Theta_{31}^{(1)}x_1+\Theta_{32}^{(1)}x_2+\Theta_{33}^{(1)}x_3)\)</span></p>
<p><span class="math inline">\(h_\Theta(x)=a_1^{(3)}=g(\Theta_{10}^{(2)}a_0^{(2)}+\Theta_{11}^{(2)}a_1^{(2)}+\Theta_{12}^{(2)}a_2^{(2)}+\Theta_{13}^{(2)}a_3^{(2)})\)</span></p>
<p>如果一个网络在第<span class="math inline">\(j\)</span>层有<span class="math inline">\(s_j\)</span>个单元，在<span class="math inline">\(j+1\)</span>有<span class="math inline">\(s_{j+1}\)</span>个单元，则矩阵<span class="math inline">\(\Theta^{(j)}\)</span>即控制第<span class="math inline">\(j\)</span>层到第<span class="math inline">\(j+1\)</span>层映射的矩阵，它的维度是<span class="math inline">\(s_{j+1}\times (s_j+1)\)</span></p>
<h3 id="前向传播向量化实现">前向传播：向量化实现</h3>
<blockquote>
<p>$x=  z^{(2)}=$</p>
</blockquote>
<p><span class="math inline">\(z^{(2)}=\Theta^{(1)}x\)</span></p>
<p><span class="math inline">\(a^{(2)}=g(z^{(2)})\)</span> ( <span class="math inline">\(a^{(2)}\)</span>是一个三维向量；<span class="math inline">\(z^{(2)}\)</span>也是一个三维向量)</p>
<p>加上 <span class="math inline">\(a_0^{(2)}=1\)</span>， (<span class="math inline">\(a^{(2)}\)</span>是四维向量)</p>
<p><span class="math inline">\(z^{(3)}=\Theta^{(2)}a^{(2)}\)</span></p>
<p><span class="math inline">\(h_\Theta(x)=a^{(3)}=g(z^{(3)})\)</span></p>
<h3 id="神经网络学习它自己的特征">神经网络学习它自己的特征</h3>
<p>如图，这看起来非常像标准的逻辑回归模型，但输入的逻辑回归的特征是通过隐藏层计算这些数值，即这个神经网络所做的事就像是逻辑回归，但它不是使用原本的<span class="math inline">\(x_1,x_2,x_3\)</span>作为特征，而是用<span class="math inline">\(a_1,a_2,a_3\)</span>作为新的特征：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708221417031.png" /></p>
<p>然后，特征项<span class="math inline">\(a_1,a_2,a_3\)</span>是学习得到的函数输入值，具体来说，就是从第一层映射到第二层的函数，这个函数由其它参数<span class="math inline">\(\Theta^{(1)}\)</span>决定</p>
<h3 id="其它网络框架">其它网络框架</h3>
<p>例：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708222514409.png" /></p>
<h2 id="例子与直觉理解">例子与直觉理解</h2>
<p>例：</p>
<p>如图，<span class="math inline">\(x_1,x_2\)</span>是十分类(0 或 1)，将右边图对应进行简化，可看作是左边的图，以便说明问题</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709124231095.png" /></p>
<p>具体地，我们需要计算目标函数</p>
<p><span class="math inline">\(y=x_1\ XOR\ x_2\)</span>(异或)</p>
<p>或<span class="math inline">\(y=x_1 \ XNOR\ x_2\)</span>(<span class="math inline">\(XNOR：NOT(x_1\ XOR\ x_2)\)</span>) (异或非)</p>
<p>那么，我们能否构建一个神经网络，来拟合这样一个<strong>异或</strong>运算呢？</p>
<p>先从简单的入手：</p>
<blockquote>
<p>假设有两个二进制输入<span class="math inline">\(x_1,x_2 \in \{0,1\}\)</span></p>
<p><span class="math inline">\(y = x_1 \ AND\ x_2\)</span></p>
</blockquote>
<p>则可以构建如图的神经网络进行实现：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709125118790.png" /></p>
<p>假设<span class="math inline">\(\Theta_{10}^{(1)}=-30,\Theta_{11}^{(1)}=20,\Theta_{12}^{(1)}=20\)</span></p>
<p><span class="math inline">\(h_\Theta(x)=g(-30+20x_1+20x_2)\)</span></p>
<p>则：<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709130541312.png" /></p>
<p><span class="math inline">\(h_\Theta(x) \approx x_1\ AND\ x_2\)</span></p>
<p>例：</p>
<blockquote>
<p>假设有两个二进制输入<span class="math inline">\(x_1,x_2 \in \{0,1\}\)</span></p>
<p><span class="math inline">\(y = x_1 \ OR\ x_2\)</span></p>
</blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709125118790.png" /></p>
<p>假设<span class="math inline">\(\Theta_{10}^{(1)}=-10,\Theta_{11}^{(1)}=20,\Theta_{12}^{(1)}=20\)</span></p>
<p><span class="math inline">\(h_\Theta(x)=g(-10+20x_1+20x_2)\)</span></p>
<p>则：<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709160020213.png" alt="image-20210709160020213" /></p>
<p><span class="math inline">\(h_\Theta(x) \approx x_1\ OR\ x_2\)</span></p>
<p>例：</p>
<blockquote>
<p>假设有两个二进制输入<span class="math inline">\(x_1,x_2 \in \{0,1\}\)</span></p>
<p><span class="math inline">\(y = NOT\ x_1\)</span></p>
</blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709162022773.png" /></p>
<p>假设<span class="math inline">\(\Theta_{10}^{(1)}=10,\Theta_{11}^{(1)}=-20\)</span></p>
<p><span class="math inline">\(h_\Theta(x)=g(10-20x_1)\)</span></p>
<p>则：<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709155629284.png" /></p>
<p><span class="math inline">\(h_\Theta(x) \approx NOT\ x_1\)</span></p>
<p>例：</p>
<blockquote>
<p>假设有两个二进制输入<span class="math inline">\(x_1,x_2 \in \{0,1\}\)</span></p>
<p><span class="math inline">\(y = x_1\ XNOR\ x_2\)</span></p>
</blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709161012638.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709161033775.png" /></p>
<p><span class="math inline">\(h_\Theta(x) \approx x_1\ XNOR\ x_2\)</span>$</p>
<h3 id="多分类">多分类</h3>
<p>在神经网络中实现多分类的方法，本质上就是<strong>一对多</strong>的拓展</p>
<p>假设有一个图片分类，需要对图片进行四分类如：行人、汽车、摩托车、货车</p>
<p>构建一个有四个输出单元的神经网络：<span class="math inline">\(h_\Theta(x) \in \R^4\)</span></p>
<p>则对于行人，输出<span class="math inline">\(h_\Theta(x) = \left[ \begin{matrix} 1\\ 0\\ 0\\ 0 \end{matrix} \right]\)</span>；</p>
<p>对于汽车，输出<span class="math inline">\(h_\Theta(x) = \left[ \begin{matrix} 0\\ 1\\ 0\\ 0 \end{matrix} \right]\)</span></p>
<p>以此类推</p>
<p>换句话说，对于神经网络中的多分类而言：</p>
<p>训练集：<span class="math inline">\((x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),\cdots,(x^{(m)},y^{(m)})\)</span></p>
<p><span class="math inline">\(y^{(i)}\)</span>是以下四个中的一个：</p>
<p><span class="math inline">\(\left[ \begin{matrix} 1\\ 0\\ 0\\ 0 \end{matrix} \right]\)</span>,<span class="math inline">\(\left[ \begin{matrix} 0\\ 1\\ 0\\ 0 \end{matrix} \right]\)</span>,<span class="math inline">\(\left[ \begin{matrix} 0\\ 0\\ 1\\ 0 \end{matrix} \right]\)</span>,<span class="math inline">\(\left[ \begin{matrix} 0\\ 0\\ 0\\ 1 \end{matrix} \right]\)</span></p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-神经网络学习</title>
    <url>/2021/07/09/Part1-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-神经网络学习">Part1-神经网络学习</h1>
<h2 id="代价函数">代价函数</h2>
<blockquote>
<p>假设我们有一个与图片有类似的神经网络结构</p>
<p>训练集为：<span class="math inline">\(\{(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),\cdots,(x^{(m)},y^{(m)}) \}\)</span></p>
<p>符号表示：</p>
<p>L：网络层数</p>
<p><span class="math inline">\(s_l\)</span>：第L层的单元数(不包括偏置单元数)</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709171207282.png" /></p>
</blockquote>
<p>对于二分类问题：</p>
<p><span class="math inline">\(y=0或1\)</span></p>
<p>有一个输出单元：</p>
<p><span class="math inline">\(h_\Theta(x) \in \mathbb R\)</span></p>
<p><span class="math inline">\(S_L=1简化为：K=1\)</span></p>
<p>对于多分类问题(K类)：</p>
<p><span class="math inline">\(y\in \mathbb R^K\)</span></p>
<p>有K个输出单元</p>
<p><span class="math inline">\(h_\Theta(x) \in \mathbb R^k\)</span></p>
<p><span class="math inline">\(S_L=K \ (K\ge 3)\)</span></p>
<h3 id="代价函数-1">代价函数</h3>
<p>逻辑回归中代价函数：</p>
<p><span class="math inline">\(J(\theta) = -\frac{1}{m}[\sum_{i=1}^my^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log(1-h_\theta(x^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2\)</span></p>
<p>在神经网络中：</p>
<p><span class="math inline">\(h_\Theta(x)\in \mathbb R^K \ (h_\Theta(x))_i=第i个输出\)</span></p>
<p><span class="math inline">\(\begin{split} J(\Theta) &amp;=-\frac{1}{m}[\sum_{i=1}^m\sum_{k=1}^Ky_k^{(i)}\log(h_\Theta(x^{(i)}))_k+(1-y^{(i)}_k)\log(1-(h_\Theta(x^{(i)}))_k)] \\ &amp;+\frac{\lambda}{2m}\sum_{l=1}^{L-1}\sum_{i=1}^{S_l}\sum_{j=1}^{S_l+1}(\Theta_{ji}^{(l)})^2 \end{split}\)</span></p>
<h2 id="反向传播算法">反向传播算法</h2>
<p><span class="math inline">\(\begin{split} J(\Theta) &amp;=-\frac{1}{m}[\sum_{i=1}^m\sum_{k=1}^Ky_k^{(i)}\log(h_\Theta(x^{(i)}))_k+(1-y^{(i)}_k)\log(1-(h_\Theta(x^{(i)}))_k)] \\ &amp;+\frac{\lambda}{2m}\sum_{l=1}^{L-1}\sum_{i=1}^{S_l}\sum_{j=1}^{S_l+1}(\Theta_{ji}^{(l)})^2 \end{split}\)</span></p>
<p>要使得<span class="math inline">\(\min_\Theta J(\Theta)\)</span></p>
<p>则需要计算：</p>
<ul>
<li><p><span class="math inline">\(J(\Theta)\)</span></p></li>
<li><p><span class="math inline">\(\frac{\partial}{\partial\Theta_{ij}^{(l)}}J(\Theta)\)</span> <span class="math inline">\((\Theta_{ij}^{(l)}\in \mathbb R)\)</span></p></li>
</ul>
<h3 id="梯度计算">梯度计算</h3>
<p>假设给定训练样本<span class="math inline">\((x,y)\)</span>，神经网络结果如图，则：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709172905721.png" /></p>
<p>前向传播(向量化形式)： <span class="math display">\[
\begin{split}
a^{(1)} &amp;= x\\
z^{(2)} &amp;= \Theta^{(1)}a^{(1)}\\
a^{(2)} &amp;= g(z^{(2)}) \ \ (加上a_0^{(2)})\\
z^{(3)} &amp;= \Theta^{(2)}a^{(2)}\\
a^{(3)} &amp;= g(z^{(3)}) \ \ (加上a_0^{(3)})\\
z^{(4)} &amp;= \Theta^{(3)}a^{(3)}\\
a^{(4)} &amp;= h_\Theta(x)=g(z^{(4)})
\end{split}
\]</span> 反向传播：</p>
<p>反向传播的直观解释：对每个结点计算：<span class="math inline">\(\delta_j^{(l)}\)</span>：表示第<span class="math inline">\(l\)</span>层第<span class="math inline">\(j\)</span>个结点的误差</p>
<p>对于每个输出单元(L=4)：</p>
<p><span class="math inline">\(\delta_j^{(4)}=a_j^{(4)}-y_j\)</span> <span class="math inline">\((a_j^{(4)} \Leftrightarrow (h_\Theta(x))_j)\)</span></p>
<p>也就是：<span class="math inline">\(\delta^{(4)}=a^{(4)}-y(每个都是向量，并且向量维数等于输出单元的数目)\)</span></p>
<p><span class="math inline">\(\delta^{(3)}=(\Theta^{(3)})^T\delta^{(4)}.*g&#39;(z^{(3)})\)</span></p>
<p><span class="math inline">\(\delta^{(2)}=(\Theta^{(2)})^T\delta^{(3)}.*g&#39;(z^{(2)})\)</span></p>
<p><span class="math inline">\((其中.*表示点乘)\)</span></p>
<p>而<span class="math inline">\(g&#39;(z^{(i)})=a^{(i)}.*(1-a^{(i)})(表示求导)\)</span></p>
<blockquote>
<p>其中，没有<span class="math inline">\(\delta^{(1)}\)</span>，因为第一层对应输入层</p>
</blockquote>
<p><span class="math inline">\(\frac{\partial}{\partial\Theta_{ij}^{(l)}}J(\Theta)=a_j^{(l)}\delta_i^{(l+1)}(忽视标准化项，即\lambda=0)\)</span></p>
<h3 id="反向传播算法总结">反向传播算法总结</h3>
<blockquote>
<p>训练集：<span class="math inline">\(\{(x^{(1)},y^{(1)}),\cdots,(x^{(m)},y^{(m)}) \}\)</span></p>
</blockquote>
<ol type="1">
<li><p>设置<span class="math inline">\(\Delta_{ij}^{l}=0 \ (对于所有的l,i,j)\)</span> (用来计算偏导项：<span class="math inline">\(\frac{\partial}{\partial \Theta_{ij}^{(l)}}J(\Theta)\)</span>)</p></li>
<li><p>遍历：</p>
<p>对于<span class="math inline">\(i\)</span>从1到m：</p>
<p>​ 设置：<span class="math inline">\(a^{(1)}=x^{(i)}\)</span></p>
<p>​ 对于<span class="math inline">\(l=2,3,\cdots,L\)</span>，前向传播计算每层(不包括输入层)的激活值<span class="math inline">\(a^{(l)}\)</span></p></li>
</ol>
<p>​ 使用<span class="math inline">\(y^{(i)}\)</span>，计算<span class="math inline">\(\delta^{(L)}=a^{(L)}-y^{(i)}\)</span></p>
<p>​ 计算<span class="math inline">\(\delta^{(L-1)},\delta^{(L-2)},\cdots,\delta^{(2)}\)</span></p>
<p>​ <span class="math inline">\(\Delta_{ij}^{(l)}:=\Delta_{ij}^{(l)}+a_j^{(l)}\delta_i^{(l+1)}(向量化：\Delta^{(l)}:=\Delta^{(l)}+\delta^{(l+1)}(a^{(l)})^T)\)</span></p>
<p>​ 如果<span class="math inline">\(j \ne 0\)</span>，<span class="math inline">\(D_{ij}^{(l)}:=\frac{1}{m}\Delta_{ij}^{(l)}+\lambda\Theta_{ij}^{(l)}\)</span></p>
<p>​ 如果<span class="math inline">\(j=0\)</span>，<span class="math inline">\(D_{ij}^{(l)}:=\frac{1}{m}\Delta_{ij}^{(l)}\)</span></p>
<p>​ <span class="math inline">\(\frac{\partial}{\partial\Theta_{ij}^{(l)}}J(\Theta)=D_{ij}^{(l)}\)</span></p>
<h2 id="理解反向传播">理解反向传播</h2>
<p>如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709194811584.png" /></p>
<p>在进行前向传播时，我们将样本<span class="math inline">\((x^{(i)},y^{(i)})\)</span>输入到网络中，将<span class="math inline">\(x^{(i)}\)</span>传到输入层中，因此可以将它们表示成<span class="math inline">\(x_1^{(i)},x_2^{(i)}\)</span>，对其进行正向传播，传播到第一个隐藏层时，我们计算出<span class="math inline">\(z^{(2)}_1\)</span>和<span class="math inline">\(z_2^{(2)}\)</span>，然后通过激活函数计算出<span class="math inline">\(a_1^{(2)}\)</span>和<span class="math inline">\(a_2^{(2)}\)</span>，然后继续前向传播，计算出<span class="math inline">\(z_1^{(3)}\)</span>和<span class="math inline">\(z_2^{(3)}\)</span>，再通过激函数计算出<span class="math inline">\(a_1^{(2)}\)</span>和<span class="math inline">\(a_2^{(2)}\)</span>，同理计算出<span class="math inline">\(z_1^{(4)}\)</span>和<span class="math inline">\(a_1^{(4)}\)</span></p>
<p>将图中一些权重标注出来，如<span class="math inline">\(\Theta_{10}^{(2)},\Theta_{11}^{(2)},\Theta_{12}^{(2)}\)</span>(<span class="math inline">\(\Theta_{10}^{(2)}：(2)：表示第2层；1：表示下一列的第1个；0：表示这一列的第0个\)</span>)</p>
<p>则<span class="math inline">\(z_1^{(3)}=\Theta_{10}^{(2)}\times1+\Theta_{11}^{(2)}a_1^{(2)}+\Theta_{12}^{(2)}a_1^{(2)}\)</span>，<span class="math inline">\(a_1^{(3)}=g(z_1^{(3)})\)</span></p>
<hr />
<p>如图：</p>
<blockquote>
<p>注明：</p>
<p><span class="math inline">\(\begin{split} J(\Theta) &amp;=-\frac{1}{m}[\sum_{i=1}^m\sum_{k=1}^Ky_k^{(i)}\log(h_\Theta(x^{(i)}))_k+(1-y^{(i)}_k)\log(1-(h_\Theta(x^{(i)}))_k)] \\ &amp;+\frac{\lambda}{2m}\sum_{l=1}^{L-1}\sum_{i=1}^{S_l}\sum_{j=1}^{S_l+1}(\Theta_{ji}^{(l)})^2 \end{split}\)</span></p>
<p>对于某个样本，1个输出单元，并且忽略正则项<span class="math inline">\((\lambda=0)\)</span>则：</p>
<p><span class="math inline">\(cost(i)=y^{(i)} \log h_\Theta(x^{(i)})+(1-y^{(i)})\log(1-h_\Theta(x^{(i)}))\)</span></p>
<p><span class="math inline">\(\delta_j^{(l)}=\frac{\partial}{\partial z^{(l)}_j}cost(i)\)</span></p>
</blockquote>
<p>在进行反向传播时</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709200905474.png" /></p>
<p>计算<span class="math inline">\(\delta_1^{(4)}=a_1^{(4)} - y^{(i)}\)</span>，然后反向传播计算出前一层的<span class="math inline">\(\delta_1^{(3)},\delta_2^{(3)}\)</span>，同理计算出<span class="math inline">\(\delta_1^{(2)},\delta_2^{(2)}\)</span>，而具体计算以<span class="math inline">\(\delta_2^{(3)}\)</span>为例，过程如下：标定参数<span class="math inline">\(\Theta^{(2)}_{12}，\Theta_{22}^{(2)}\)</span>，则<span class="math inline">\(\delta_2^{(2)}=\Theta_{12}^{(2)}\delta_1^{(3)}+\Theta_{22}^{(2)}\delta_2^{(3)}\)</span>，同理<span class="math inline">\(\delta_2^{(3)}=\Theta_{12}^{(3)}\delta_1^{(4)}\)</span>，但整个过程中实际上是省略了一部分的，因为按照前面所学的，<span class="math inline">\(\delta\)</span>的计算过程应当是：<span class="math inline">\(\delta^{(l)}=(\Theta^{(l)})^T\delta^{(l+1)}.*g&#39;(z^{(l)})\)</span></p>
<h2 id="梯度检测">梯度检测</h2>
<h3 id="梯度的数值估计">梯度的数值估计</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709194815761.png" /></p>
<p>假设有一个代价函数<span class="math inline">\(J(\Theta)\)</span>，对应的有一个<span class="math inline">\(\theta \in \mathbb R\)</span>，如果想估计<span class="math inline">\(\theta\)</span>在函数上对应的导数，则该导数就是函数在该点切线的斜率，从数值上来求近似导数则首先需要计算<span class="math inline">\(\theta+\epsilon\)</span>，然后计算<span class="math inline">\(\theta-\epsilon\)</span>，然后需要将这两个值对应的点用直线连起来，则连线的斜率就是所求的该点导数的近似值，而这个连线的斜率就是该段的垂直高度除以该段的水平宽度，则高度差为<span class="math inline">\(J(\Theta+\epsilon)-J(\Theta-\epsilon)\)</span>，而宽度差为<span class="math inline">\(2\epsilon\)</span>，所以<span class="math inline">\(\frac{d}{d\Theta}J(\Theta) \approx \frac{J(\Theta+\epsilon)-J(\Theta-\epsilon)}{2\epsilon}\)</span>，<span class="math inline">\(\epsilon=10^{-4}\)</span></p>
<p>对于参数向量<span class="math inline">\(\theta\)</span>，<span class="math inline">\(\theta \in \mathbb R^{n}，\theta=[\theta_1,\theta_2,\cdots,\theta_n]\)</span> <span class="math display">\[
\frac{\partial}{\partial \theta_1}J(\theta)\approx\frac{J(\theta_1+\epsilon,\theta_2,\cdots,\theta_n)-J(\theta_1-\epsilon,\theta_2,\cdots,\theta_n)}{2\epsilon} \\ \frac{\partial}{\partial \theta_2}J(\theta)\approx\frac{J(\theta_1,\theta_2+\epsilon,\cdots,\theta_n)-J(\theta_1,\theta_2-\epsilon,\cdots,\theta_n)}{2\epsilon} \\ \cdots \\
\frac{\partial}{\partial \theta_n}J(\theta)\approx\frac{J(\theta_1,\theta_2,\cdots,\theta_n+\epsilon)-J(\theta_1,\theta_2,\cdots,\theta_n-\epsilon)}{2\epsilon}
\]</span> 最后检查是否有：<span class="math inline">\(导数值\approx反向传播计算出的导数值\)</span></p>
<blockquote>
<p>总结：</p>
<ul>
<li>使用反向传播计算DVec(展开后就是<span class="math inline">\(D^{(1)},D^{(2)},D^{(3)}\)</span>)</li>
<li>使用梯度检验来计算gradApprox</li>
<li>确保DVec和gradApprox都能得出相似的值</li>
<li>在进行正式的反向传播学习前，关闭梯度检验（因为其计算量很大，耗时）</li>
</ul>
</blockquote>
<h2 id="随机初始化">随机初始化</h2>
<p>初始化<span class="math inline">\(\Theta\)</span>的值，考虑梯度下降：</p>
<p>一种初始化方法是将其全部设为0，尽管在逻辑回归中这样做是可以的，但实际上在训练网络时，将所有参数初始化为0是不可行的。</p>
<p>如图，以图中对应的神经网络为例：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709201923841.png" /></p>
<p>如果将所有参数都初始化为0，这就意味着所有参数一样，也就会导致<span class="math inline">\(a_1^{(2)}\)</span>和<span class="math inline">\(a_2^{(2)}\)</span>都是以同一输入函数来计算，于是，对于所有训练样本，总会得到<span class="math inline">\(a_1^{(2)}=a_2^{(2)}\)</span>，也会得到<span class="math inline">\(\delta_1^{(2)}=\delta_2^{(2)}\)</span>，同时也会使得<span class="math inline">\(\frac{\partial}{\partial \Theta_{01}^{(1)}}J(\Theta)=\frac{\partial}{\partial \Theta_{03}^{(1)}}J(\Theta)\)</span>，这样，即使更新参数后，也会有<span class="math inline">\(\Theta_{01}^{(1)}=\Theta_{02}^{(1)}\)</span></p>
<p>所以，每次更新后，这两个隐藏单元的每个参数输入都是相等的，也就是每个输入单元输出的两条线对应的权重仍然相等，这就意味着即使梯度下降进行了一次迭代，仍然有<span class="math inline">\(a_1^{(2)}=a_2^{(2)}\)</span>，这也就意味着这个神经网络得不出比较有用的函数。</p>
<p>以上问题也被称为<strong>对称权重问题</strong>，也就是所有的权重都是一样的。</p>
<p>因此，在神经网络模型中，在对参数进行初始化时，需要使用<strong>随机初始化</strong>思想。</p>
<h2 id="整合">整合</h2>
<h3 id="训练一个神经网络">训练一个神经网络</h3>
<p>在训练一个神经网络时，我们要做的第一件事，就是选择一种网络架构 ，这个架构指的是神经元之间的连接模式，如图，可能是以下几种架构中的一种：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210709203201111.png" /></p>
<p>那么，我们该如何进行选择呢？</p>
<ol type="1">
<li>定义输入单元的数量：即特征的维度<span class="math inline">\(x^{(i)}\)</span></li>
<li>定义输出单元的数量：如果是多分类问题，则就是对应的类别数量</li>
<li>对于隐藏层单元个数和隐藏层的数目，一个合理的默认选项是只使用单个隐藏层，或者如果使用不上一个隐藏层的话，则默认每个隐藏层通常都应有相同的单元数，而对于隐藏单元的个数，通常是越多越好的，但多了也会导致计算量增大。并且通常来说，每个隐藏层的单元数量应该与输入x的维度相匹配，即和特征数目相匹配</li>
</ol>
<h3 id="训练的实现步骤">训练的实现步骤</h3>
<ol type="1">
<li><p>随机初始化权重，通常初始化为很小的接近于零的值</p></li>
<li><p>实现前向传播算法，计算对于任一<span class="math inline">\(x^{(i)}\)</span>的<span class="math inline">\(h_\Theta(x^{(i)})\)</span></p></li>
<li><p>代码实现计算代价函数<span class="math inline">\(J(\Theta)\)</span></p></li>
<li><p>实现反向传播算法来计算偏导项<span class="math inline">\(\frac{\partial}{\partial\Theta_{jk}^{(l)}}J(\Theta)\)</span></p></li>
<li><p>使用梯度检查来比较使用反向传播计算的<span class="math inline">\(\frac{\partial}{\partial\Theta_{jk}^{(l)}}J(\Theta)\)</span>和使用梯度数值估计求出的<span class="math inline">\(J(\Theta)\)</span>对应的偏导数值</p>
<p>关闭梯度检查</p></li>
<li><p>使用梯度下降或其它优化算法和反向传播算法结合，计算<span class="math inline">\(J(\Theta)\)</span>最小时对应的参数<span class="math inline">\(\Theta\)</span></p></li>
</ol>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-线性代数复习</title>
    <url>/2021/07/04/Part1-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-线性代数复习">Part1-线性代数复习</h1>
<h2 id="矩阵和向量">矩阵和向量</h2>
<h3 id="矩阵">矩阵</h3>
<p>矩阵：由数字组成的矩形阵列，并写在方括号内</p>
<p>例： <span class="math display">\[
\left[\begin{matrix}
1402 &amp; 191 \\
1371 &amp; 821 \\
949 &amp; 1437 \\
147 &amp; 1448
\end{matrix}\right ]
\]</span> 矩阵的维度：矩阵的行数<span class="math inline">\(\times\)</span>列数，如上述例子就是<span class="math inline">\(4\times2\)</span>的矩阵，也可写成<span class="math inline">\(\mathbb R^{4\times2}\)</span></p>
<p>矩阵的元素：使用<span class="math inline">\(A_{ij}\)</span>表示矩阵中第<span class="math inline">\(i\)</span>行，第<span class="math inline">\(j\)</span>列的元素，如<span class="math inline">\(A_{32}=1437\)</span></p>
<h3 id="向量">向量</h3>
<p>向量：一种特殊的矩阵，是只有一列的矩阵即<span class="math inline">\(n\times1\)</span></p>
<p>例： <span class="math display">\[
y=\left[
\begin{matrix}
460 \\
232 \\
315 \\
178
\end{matrix}
\right]
\]</span> 这是一个四维的向量，也可以用<span class="math inline">\(\mathbb R^4\)</span>表示</p>
<p>元素表示：<span class="math inline">\(y_i\)</span>表示第<span class="math inline">\(i\)</span>个元素，如<span class="math inline">\(y_3=315\)</span></p>
<blockquote>
<p>注：通常使用大写字母A、B、C、D来表示矩阵，使用小写字母a,b,x,y来表示数字或标量或向量</p>
</blockquote>
<h2 id="矩阵加减法和标量乘法">矩阵加减法和标量乘法</h2>
<h3 id="矩阵加减法">矩阵加减法</h3>
<p>加(减)法：矩阵每个元素对应相加(减)，三个矩阵维度相同 <span class="math display">\[
\left[\begin{matrix}
1 &amp; 0 \\
2 &amp; 5 \\
3 &amp; 1
\end{matrix}\right ] + 
\left[\begin{matrix}
4 &amp; 0.5 \\
2 &amp; 5 \\
0 &amp; 1
\end{matrix}\right ] = 
\left[\begin{matrix}
5 &amp; 0.5 \\
4 &amp; 10 \\
3 &amp; 2
\end{matrix}\right ]
\]</span></p>
<h3 id="标量乘法">标量乘法</h3>
<p>标量乘法：矩阵每个元素分别与数字相乘，得到矩阵与式中矩阵维度相同 <span class="math display">\[
3 \times
\left[\begin{matrix}
1 &amp; 0 \\
2 &amp; 5 \\
3 &amp; 1
\end{matrix}\right ]=
\left[\begin{matrix}
3 &amp; 0 \\
6 &amp; 15 \\
9 &amp; 3
\end{matrix}\right ]=
\left[\begin{matrix}
1 &amp; 0 \\
2 &amp; 5 \\
3 &amp; 1
\end{matrix}\right ] \times 3
\]</span> 标量除法：矩阵每个元素分别与数字相除，结果与矩阵维度相同 <span class="math display">\[
\left[\begin{matrix}
4 &amp; 0 \\
6 &amp; 3 
\end{matrix}\right ]/4=
\frac{1}{4}\left[\begin{matrix}
4 &amp; 0 \\
6 &amp; 3 
\end{matrix}\right ]=
\left[\begin{matrix}
1 &amp; 0 \\
\frac{3}{2} &amp; \frac{3}{4} \\
\end{matrix}\right ]
\]</span></p>
<h2 id="矩阵乘法">矩阵乘法</h2>
<p>矩阵与向量相乘：取矩阵的每行与向量的一列分别相乘再相加，得到一个结果，最终组成一个向量</p>
<p>维度：<span class="math inline">\(\mathbb R^{m \times n} \mathbb R^n = \mathbb R^{m \times 1}\)</span></p>
<p>例： <span class="math display">\[
\left[\begin{matrix}
1 &amp; 3 \\
4 &amp; 0 \\
2 &amp; 1
\end{matrix}\right ]
\left[\begin{matrix}
1 \\
5
\end{matrix}\right ]=
\left[\begin{matrix}
16 \\
4 \\
7
\end{matrix}\right ]
\]</span> 矩阵和矩阵相乘</p>
<p>维度：<span class="math inline">\(\mathbb R^{m \times n} \mathbb R^{n\times o} = \mathbb R^{m \times o}\)</span></p>
<p>例： <span class="math display">\[
\left[\begin{matrix}
1 &amp; 3 &amp; 2 \\
4 &amp; 0 &amp; 1\\
\end{matrix}\right ]
\left[\begin{matrix}
1 &amp; 3 \\
0 &amp; 1 \\
5 &amp; 2
\end{matrix}\right ]=
\left[\begin{matrix}
11 &amp; 10 \\
9 &amp; 14 \\
\end{matrix}\right ] \\
具体可理解为多次与向量相乘如：\\
\left[\begin{matrix}
1 &amp; 3 &amp; 2 \\
4 &amp; 0 &amp; 1\\
\end{matrix}\right ]
\left[\begin{matrix}
1 \\ 0 \\ 5
\end{matrix}\right ]=
\left[\begin{matrix}
11 \\ 9
\end{matrix}\right ] \\
\left[\begin{matrix}
1 &amp; 3 &amp; 2 \\
4 &amp; 0 &amp; 1\\
\end{matrix}\right ]
\left[\begin{matrix}
3 \\ 1 \\ 2
\end{matrix}\right ]=
\left[\begin{matrix}
10 \\ 14
\end{matrix}\right ] \\
拼接后得到结果：\left[\begin{matrix}
11 &amp; 10 \\
9 &amp; 14 \\
\end{matrix}\right ]
\]</span></p>
<h2 id="矩阵乘法的特性">矩阵乘法的特性</h2>
<ol type="1">
<li><p><span class="math inline">\(A\times B \ne B\times A\)</span></p></li>
<li><p><span class="math inline">\(A\times B\times C=A\times(B\times C)=(A\times B)\times C\)</span></p></li>
<li><p>特殊矩阵：单位矩阵<span class="math inline">\(I\)</span>或<span class="math inline">\(I_{n\times n}\)</span>，即对角线上为1的正方形矩阵。对于任何矩阵，其乘以单位矩阵，结果仍是它自己，<span class="math inline">\(A\cdot I=I\cdot A=A\)</span></p>
<p>如：<span class="math inline">\(\left[\begin{matrix} 1 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1\end{matrix}\right ]\)</span></p></li>
</ol>
<h2 id="矩阵的逆和转置">矩阵的逆和转置</h2>
<h3 id="逆矩阵">逆矩阵</h3>
<p>在实数空间中，1 = "单位"，对于每个实数(0除外)，都有一个倒数，即<span class="math inline">\(x(x^{-1}=1)\)</span></p>
<p>对于矩阵来说，如果<span class="math inline">\(A\)</span>是一个<span class="math inline">\(m\times m\)</span>的矩阵，并且如果它有逆矩阵，则<span class="math inline">\(AA^{-1}=A^{-1}A=I\)</span></p>
<p>用术语来说，不存在逆矩阵的矩阵被称为<strong>奇异矩阵</strong>或<strong>退化矩阵</strong></p>
<h3 id="矩阵的转置">矩阵的转置</h3>
<p>矩阵的转置用<span class="math inline">\(A^T\)</span>来表示，对于一个<span class="math inline">\(m \times n\)</span>的矩阵A，对于它的转置<span class="math inline">\(B=A^T\)</span>有<span class="math inline">\(B_{ij}=A_{ji}\)</span>，且B为<span class="math inline">\(n \times m\)</span>的矩阵</p>
<p>例：<span class="math inline">\(A=\left[\begin{matrix} 1 &amp; 2 &amp; 0 \\ 3 &amp; 5 &amp; 9 \end{matrix}\right ]\)</span>则<span class="math inline">\(A^T=\left[\begin{matrix} 1 &amp; 3 \\ 2 &amp; 5 \\ 0 &amp; 9\end{matrix}\right ]\)</span></p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-线性回归课后练习</title>
    <url>/2021/07/05/Part1-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-线性回归课后练习">Part1-线性回归课后练习</h1>
<h2 id="简单的函数">1、简单的函数</h2>
<p>获得一个<span class="math inline">\(5\times 5\)</span>的单位矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.eye(<span class="number">5</span>)</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([[1., 0., 0., 0., 0.],</p>
<p>​ [0., 1., 0., 0., 0.],</p>
<p>​ [0., 0., 1., 0., 0.],</p>
<p>​ [0., 0., 0., 1., 0.],</p>
<p>​ [0., 0., 0., 0., 1.]])</p>
</blockquote>
<h2 id="单变量线性回归">2、单变量线性回归</h2>
<h3 id="绘制数据">2.1 绘制数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;ex1data1.txt&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, header=<span class="literal">None</span>)</span><br><span class="line">data.columns = [<span class="string">&#x27;Population&#x27;</span>,<span class="string">&#x27;Profit&#x27;</span>]</span><br><span class="line">data.plot(x=<span class="string">&#x27;Population&#x27;</span>, y=<span class="string">&#x27;Profit&#x27;</span>, c=<span class="string">&#x27;r&#x27;</span>, kind=<span class="string">&#x27;scatter&#x27;</span>,marker=<span class="string">&#x27;x&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210705132158761.png" /></p>
</blockquote>
<h3 id="梯度下降">2.2 梯度下降</h3>
<p>2.2.1 数据处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一列 “1”，乘以参数后作为偏置参数</span></span><br><span class="line">data.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>,np.ones(<span class="built_in">len</span>(data)))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 观察数据</span></span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210705132613969.png" /></p>
</blockquote>
<p>2.2.3 提取X和y</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = X.values</span><br><span class="line">y = Y.values.reshape(<span class="built_in">len</span>(Y),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>2.2.4 定义代价函数</p>
<p><span class="math inline">\(J(\theta) = \frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost</span>(<span class="params">X, y, theta</span>):</span></span><br><span class="line">  t = np.power(((X@theta.T)-y),<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> np.<span class="built_in">sum</span>(t)/(<span class="number">2</span>*<span class="built_in">len</span>(X))</span><br></pre></td></tr></table></figure>
<p>2.2.5 梯度下降法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 梯度下降</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">X, y, theta, alpha=<span class="number">0.003</span>, epoch=<span class="number">1000</span></span>):</span></span><br><span class="line">  temp = np.zeros(theta.shape)</span><br><span class="line">  cost = np.zeros(epoch)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    temp = theta - alpha*((X@theta.T-y).T@X)/<span class="built_in">len</span>(X)</span><br><span class="line">    theta = temp</span><br><span class="line">    cost[i] = compute_cost(X,y,theta)</span><br><span class="line">  <span class="keyword">return</span> theta, cost</span><br></pre></td></tr></table></figure>
<p>2.2.6 绘制结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grad_theta, cost = gradient_descent(X, y, np.zeros((<span class="number">1</span>,<span class="number">2</span>)), epoch=<span class="number">10000</span>, alpha=<span class="number">0.003</span>)</span><br><span class="line">x = data.iloc[:,<span class="number">1</span>].values <span class="comment"># 原始x，即Populations值</span></span><br><span class="line">plt.plot(x, X@grad_theta.T)</span><br><span class="line">plt.scatter(x,Y,c=<span class="string">&#x27;r&#x27;</span>,marker=<span class="string">&#x27;x&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210705133219827.png" /></p>
</blockquote>
<p>2.2.7 绘制代价函数变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(np.arange(<span class="built_in">len</span>(cost)), cost, <span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210705133608504.png" /></p>
</blockquote>
<h3 id="采用正规方程解">2.3 采用正规方程解</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># theta_normal = np.linalg.inv(X.T@X)@X.T@y</span></span><br><span class="line"><span class="comment"># theta_normal</span></span><br><span class="line">m = np.matrix(X.T@X).I</span><br><span class="line">m*np.matrix(X.T)*np.matrix(y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>matrix([[-3.89578088],</p>
<p>​ [ 1.19303364]])</p>
</blockquote>
<h2 id="多元线性回归">3、多元线性回归</h2>
<h3 id="特征缩放">3.1 特征缩放</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;ex1data2.txt&#x27;</span>, names=[<span class="string">&#x27;square&#x27;</span>, <span class="string">&#x27;bedrooms&#x27;</span>, <span class="string">&#x27;price&#x27;</span>])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210705164919588.png" /></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = data.apply(<span class="keyword">lambda</span> column: (column - column.mean())/column.std())</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210705164943878.png" /></p>
</blockquote>
<h3 id="多元梯度下降">3.2 多元梯度下降</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, np.ones(<span class="built_in">len</span>(data)))</span><br><span class="line">X = data.iloc[:,:<span class="number">3</span>].values</span><br><span class="line">y = data.iloc[:,<span class="number">3</span>].values.reshape(<span class="built_in">len</span>(X),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost</span>(<span class="params">X, y, theta</span>):</span></span><br><span class="line">  <span class="keyword">return</span> ((X@theta.T-y).T)@(X@theta.T-y)/(<span class="number">2</span>*X.shape[<span class="number">0</span>]) <span class="comment"># m*3 3,1 m*1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">X, y, theta, epoch=<span class="number">10000</span>, alpha=<span class="number">0.003</span></span>):</span></span><br><span class="line">  cost = np.zeros(epoch)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    grad = (X@theta.T-y).T@X/X.shape[<span class="number">0</span>]</span><br><span class="line">    theta -= alpha*grad</span><br><span class="line">    cost[i] = compute_cost(X,y,theta)</span><br><span class="line">  <span class="keyword">return</span> theta,cost</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta_grad, cost = gradient_descent(X, y, np.zeros((<span class="number">1</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(np.arange(<span class="built_in">len</span>(cost)),cost)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210705172335664.png" /></p>
</blockquote>
<h3 id="采用正规方程解-1">3.3 采用正规方程解</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = np.linalg.inv(X.T@X)@X.T@y</span><br><span class="line">theta</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([[-1.11022302e-16],</p>
<p>​ [ 8.84765988e-01],</p>
<p>​ [-5.31788197e-02]])</p>
</blockquote>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-聚类</title>
    <url>/2021/07/17/Part1-%E8%81%9A%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="part1-聚类">Part1-聚类</h1>
<h2 id="无监督学习">无监督学习</h2>
<blockquote>
<p>监督学习：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717100331314.png" /></p>
<p>训练集：<span class="math inline">\(\{(x^{(1)}.y^{(1)}),(x^{(2)},y^{(2)}), \cdots,(x^{(m)},y^{(m)}) \}\)</span></p>
<p>如图，是一个典型的监督学习，即具有一个带标签的训练集，而我们的目标则是找到一条能够区分正样本和负样本的决策边界。</p>
<p>监督学习就是我们有一系列的标签，然后用假设函数去拟合它。</p>
</blockquote>
<p>而在无监督学习中，我们的数据并不带有任何标签，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717100702075.png" /></p>
<p>训练集：<span class="math inline">\(\{x^{(1)},x^{(2)},x^{(3)},\cdots,x^{(m)} \}\)</span></p>
<p>在无监督学习中，我们要做的就是要将些无标签的数据输入到算法中，然后让算法找到一些隐含在数据中的结构，通过图中这些数据，我们能通过算法找到的一个结构就是数据集中的点可以分成两组分开的点集(簇(Cluster))，像这样能够找出这些簇的算法，被称为<strong>聚类算法</strong>。</p>
<h2 id="k-means算法">K-means算法</h2>
<p>在聚类问题中，我们会给定一组未加标签的数据集，同时希望有一个算法，能够自动地将这些数据分成有紧密关系的子集或是簇。K均值(K-means)算法是比较流行的一种聚类算法。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717103209225.png" /></p>
<p>如图，有一个无标签的数据集，并且想要将其分为两个簇，现在进行K-means算法如下：</p>
<ol type="1">
<li><p>随机生成两个点，这两个点也叫做<strong>聚类中心</strong>，选择两个点的原因是我们想将数据聚成两类</p>
<p>K-means是一个迭代算法，它会做两件事情，第一个是簇分配，第二个是移动聚类中心</p></li>
<li><p>内循环：</p>
<ol type="1">
<li><p>簇分配；即遍历每个样本，然后根据每个点是与图中红色聚类中心更近，还是和蓝色聚类中心更近，来将每个数据点分配给两个聚类中心之一，可以理解成如图所示的，将每个点染成红色或蓝色</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717103343240.png" /></p></li>
<li><p>移动聚类中心；计算出所有蓝点的均值和所有红点的均值，然后移动两个聚类中心</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717103901723.png" /></p></li>
<li><p>循环进行</p></li>
</ol></li>
</ol>
<p>使用更规范的格式，如下：</p>
<p>输入：</p>
<ul>
<li>K(簇的个数)</li>
<li>训练集<span class="math inline">\(\{x^{(1)},x^{(2)},\cdots,x^{(m)} \}\)</span> $x^{(i)} R^n <span class="math inline">\((删除\)</span>x_0=1$的惯例)</li>
</ul>
<p>K-means：</p>
<ul>
<li><p>随机初始化K个聚类中心，记作<span class="math inline">\(\mu_1,\mu_2,\cdots,\mu_K \in \mathbb R^n\)</span></p></li>
<li><p>循环：<span class="math inline">\(\}\)</span></p>
<p>$ for i=1 to m: $</p>
<p><span class="math inline">\(c^{(i)}:=最接近x^{(i)}的聚类中心\)</span></p>
<p><span class="math inline">\(for\ k=1\ to\ K:\)</span></p>
<p><span class="math inline">\(\mu_k:=分配给第k簇的点(x)的均值\)</span></p>
<p><span class="math inline">\(\}\)</span></p></li>
</ul>
<blockquote>
<p>假设<span class="math inline">\(\mu_k\)</span>是某个簇的均值，那么如果存在一个没有点的聚类中心会怎样？</p>
<p>这里，最常见的做法就是直接移除那个聚类中心，这样的话，最终会得到K-1个簇而不是K个簇；然而，有时确实需要K个簇，这时就可以随机初始化这个聚类中心。</p>
</blockquote>
<p>K-means另一个常见的应用就是可以用来解决分离不佳的簇的问题：</p>
<p>如图，对于人们不同的身高、体重，现在需要给T恤设计三种不同的大小(小号、中号和大号)，则小号应该设计多大？中号多大？大号多大？</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717105942083.png" /></p>
<p>有一个方法就是对这些数据执行K-means聚类算法，虽然这些数据不像之前的例子能够明确分为三簇，但K-means还是能将这些数据分为几个簇</p>
<h2 id="优化目标">优化目标</h2>
<blockquote>
<p><span class="math inline">\(c^{(i)}=样本x^{(i)}当前所属的簇的索引\)</span></p>
<p><span class="math inline">\(\mu_k=第k个聚类中心\)</span></p>
<p><span class="math inline">\(\mu_{c^{(i)}=x^{(i)}}所属的那个簇的聚类中心\)</span></p>
</blockquote>
<p>优化目标：</p>
<p><span class="math inline">\(J(c^{(1)},\cdots,c^{(m)},\mu_1,\cdots,\mu_K)=\frac{1}{m}\sum_{i=1}^m||x^{(i)}-\mu_{c^{(i)}}||^2\)</span></p>
<p><span class="math inline">\(\min_{(c^{(1)},\cdots,c^{(m)},\mu_1,\cdots,\mu_K)}J(c^{(1)},\cdots,c^{(m)},\mu,\cdots,\mu_K)\)</span></p>
<p>这个代价函数，有时也叫<strong>失真代价函数(Distortion cost function)</strong></p>
<h2 id="随机初始化">随机初始化</h2>
<p>如何初始化聚类中心？</p>
<p>通常，效果最好的如下：</p>
<p>应该设计K小于样本数量ｍ，然后随机挑选K个训练样本，然后设定<span class="math inline">\(\mu_1,\cdots,\mu_K\)</span>等于这K个样本</p>
<p>局部最优问题：</p>
<p>如图，给定这样一个数据集</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717112745612.png" /></p>
<p>它看起来好像有3个簇，如果运行K-means算法，如图，假设它最后得到一个比较好的局部最优，事实上，它应该是全局最优了，可能会得到图中这样的聚类结果</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717113012380.png" /></p>
<p>但如果随机初始化得到的结果不好，就可能会得到不同的局部最优值，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717113044255.png" /></p>
<p>因此，如果担心K-means算法落到局部最优，如果相让K-means找到最有可能的聚类，我们可以尝试<strong>多次随机初始化</strong>，而不是仅仅初始化一次。</p>
<p>具体的，我们可以这样：</p>
<p><span class="math inline">\(for\ i\ to\ 100:\{\)</span></p>
<p><span class="math inline">\(随机初始化K-means\)</span></p>
<p><span class="math inline">\(运行K-means，得到c^{(1)},\cdots,c^{(m)},\mu_1,\cdots,\mu_K\)</span></p>
<p><span class="math inline">\(计算代价函数J(c^{(1)},\cdots,c^{(m)},\mu_1,\cdots,\mu_K)\)</span></p>
<p><span class="math inline">\(\}\)</span></p>
<p>最后，选择代价函数最小的聚类结果。</p>
<p>然而，实际上，当K=2~10时，多次随机初始化是有用的，而当K太大时，多次随机初始化就并没有太大改善了。</p>
<h2 id="选取聚类数量">选取聚类数量</h2>
<p>对于一个数据集，对应的K可能有多个答案，而并没有完全正确的答案。</p>
<p>选择K的值：</p>
<p><strong>肘部法则</strong>：</p>
<p>我们需要使用不同的K，然后计算代价函数，画出类似如下图的图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717114408894.png" /></p>
<p>观察这条曲线，可以发现它有一个"肘部"，大致对应于<span class="math inline">\(K=3\)</span>的位置，这样，则我们就可以选择<span class="math inline">\(K=3\)</span></p>
<p>然而，在实际操作过程中，大多时候，这个"肘部"其实并不明显，我们并不能准确确定拐点最合适的位置。</p>
<p>另一种选择K值的思路：</p>
<p>通常人们选择K-means聚类是为了得到聚类用于后面的目的，也许想用K均值聚类来做市场分割就像之前说的T恤的例子等，如果后续目的如市场分割能给定一个评估标准，则决定K值的更好的方式是看哪个K值能更好地应用于后续目的。</p>
<blockquote>
<p>如，还是以上述T恤的为例，可能有3种尺寸(S,M,L)或5种尺寸(XS,S,M,L,XL)，</p>
</blockquote>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-逻辑回归</title>
    <url>/2021/07/06/Part1-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h1 id="part1-逻辑回归">Part1-逻辑回归</h1>
<blockquote>
<p>由于编程没有使用Octave，所以关于Octave语言部分跳过</p>
</blockquote>
<h2 id="分类">分类</h2>
<p>例：</p>
<blockquote>
<p>垃圾邮件分类、欺诈分类、肿瘤分类等</p>
</blockquote>
<p>在以上这些例子中，我们所预测的结果y，都是可以有两个取值的变量，0或1，通常使用”0“来表示负类，用”1“来表示正类，因此，这也被称为<strong>二分类问题</strong></p>
<p>类似的，结果y可以选取多个值的情况，被称为<strong>多分类问题</strong></p>
<p>那么，如何设计一个分类算法呢？</p>
<p>以肿瘤分类为例，如图所示，我们可以将我们学过的线性回归算法应用到这个数据集，用直线对数据进行拟合， 如果想做出预测，可以将分类器输出的阈值设为0.5，即：</p>
<p>如果<span class="math inline">\(h_\theta(x) \ge 0.5\)</span>，则<span class="math inline">\(y=1\)</span></p>
<p>如果<span class="math inline">\(h_\theta(x) &lt; 0.5\)</span>，则<span class="math inline">\(y=0\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706135907227.png" /></p>
<p>但是，这种方法，如果对于样本数据有一个新增异常的话，则会得到不一样的结果，如图，就会将一些不应该分类为"0"的数据分类为"0"</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706140812323.png" /></p>
<p>此外，对于线性回归的结果，是可以大于1或小于0的，而分类问题的标签通常都是"0"或"1"</p>
<p>综上所述，<strong>将线性回归用于分类问题并不是一个较好的方法</strong></p>
<h2 id="假设陈述">假设陈述</h2>
<p>逻辑回归模型：</p>
<blockquote>
<p>期望：<span class="math inline">\(0 \le h_\theta(x) \le 1\)</span></p>
<p>对于线性回归，假设：<span class="math inline">\(h_\theta(x)=\theta^Tx\)</span></p>
<p>对于逻辑回归，<span class="math inline">\(h_\theta(x)=g(\theta^Tx)\)</span>，并且定义函数g：<span class="math inline">\(g(z)=\frac{1}{1+e^{-z}}\)</span>，g也被称为激活函数或logistic 函数</p>
<p>即：<span class="math inline">\(h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}\)</span></p>
</blockquote>
<p>激活函数<span class="math inline">\(g(z)\)</span>如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706150107422.png" /></p>
<p>假设输出的解释：</p>
<blockquote>
<p><span class="math inline">\(h_\theta(x)\)</span>=对于输入<span class="math inline">\(x\)</span>，输出<span class="math inline">\(y=1\)</span>的概率</p>
</blockquote>
<p>例如：</p>
<blockquote>
<p>对于肿瘤预测问题中，如果<span class="math inline">\(x=\left[ \begin{matrix} x_0 \\ x_1 \end{matrix} \right]=\left[ \begin{matrix} 1 \\ tumorSize \end{matrix} \right]\)</span>，输出<span class="math inline">\(h_\theta(x)=0.7\)</span>，说明对应肿瘤有70%可能是恶性</p>
</blockquote>
<p>即：<span class="math inline">\(h_\theta(x) = P(y=1|x;\theta)\)</span>（条件概率：即在给定输入<span class="math inline">\(x\)</span>和参数<span class="math inline">\(\theta\)</span>的条件下，输出<span class="math inline">\(y=1\)</span>的概率）</p>
<p><span class="math inline">\(P(y=0|x;\theta)+P(y=1|x;\theta)=1 \\ \Rightarrow P(y=0|x;\theta)=1-P(y=1|x;\theta)\)</span></p>
<h2 id="决策边界">决策边界</h2>
<blockquote>
<p>逻辑回归：</p>
<p><span class="math inline">\(h_\theta=g(\theta^Tx)=P(y=1|x;\theta)\)</span></p>
<p><span class="math inline">\(g(z) = \frac{1}{1+e^{-z}}\)</span></p>
<p>如果<span class="math inline">\(h_\theta(x) \ge 0.5\)</span>，<span class="math inline">\(y=1\)</span>，</p>
<p>如果<span class="math inline">\(h_\theta(x)&lt;0.5\)</span>，<span class="math inline">\(y=0\)</span></p>
</blockquote>
<p>观察<span class="math inline">\(g(z)\)</span>函数曲线，可以发现，当<span class="math inline">\(z\ge0\)</span>时，<span class="math inline">\(g(z) \ge 0.5\)</span>，又<span class="math inline">\(z=\theta^Tx\)</span>，因此，只要<span class="math inline">\(\theta^Tx \ge 0\)</span>时，<span class="math inline">\(h_\theta(x) \ge 0.5\)</span></p>
<p>如图，假设对于图上这些点逻辑回归的结果为<span class="math inline">\(h_\theta(x)=g(\theta_0+\theta_1x_1+\theta_2x_2)，\theta=\left[ \begin{matrix} -3 \\ 1 \\ 1 \end{matrix} \right]\)</span>，画出一条直线<span class="math inline">\(-3+x_1+x_2 = 0\)</span>，这条线被称为<strong>决策边界</strong></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706152951457.png" /></p>
<blockquote>
<p><strong>决策边界</strong>不是数据集的属性</p>
</blockquote>
<p>非线性决策边界：</p>
<p>对于如图的训练数据，假设<span class="math inline">\(h_\theta(x)=g(\theta_0,\theta_1x_1+\theta_2x_2+\theta_3x_1^2+\theta_4x_2^2)，\theta=\left[ \begin{matrix} -1 \\ 0 \\ 0 \\1 \\ 1 \end{matrix} \right]\)</span>，则绘制的就是一个非线性决策边界</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706153422408.png" /></p>
<h2 id="代价函数">代价函数</h2>
<blockquote>
<p>训练集：<span class="math inline">\(\{(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)},\cdots,(x^{(m)},y^{(m)})\}\)</span></p>
<p>共m个样本，<span class="math inline">\(x\in\left[ \begin{matrix} x_0 \\ x_1 \\ \cdots \\ x_n \end{matrix} \right]，x_0=1，y\in\{0,1\}\)</span></p>
<p><span class="math inline">\(h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}\)</span></p>
</blockquote>
<p>如何选择参数<span class="math inline">\(\theta\)</span>？</p>
<p>代价函数：</p>
<blockquote>
<p>线性回归模型中：<span class="math inline">\(J(\theta)=\frac{1}{m}\sum_{i=1}^m\frac{1}{2}(h_\theta(x^{(i)})-y^{(i)})^2=\frac{1}{m}\sum_{i=1}^mCost(h_\theta(x^{(i)}),y^{(i)})\)</span></p>
<p><span class="math inline">\(Cost(h_\theta(x),y)=\frac{1}{2}(h_\theta(x)-y)^2\)</span></p>
</blockquote>
<p>类似的，如果在逻辑回归中使用这样的代价函数，则<span class="math inline">\(J(\theta)\)</span>关于<span class="math inline">\(\theta\)</span>绘制出的曲线会是一个非凸函数，如图所示，如果将梯度下降法应用于这样的函数上，则不能保证它一定能收敛到全局最小值</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706163632142.png" /></p>
<p>因此，在逻辑回归中，我们需要另外找一个不同的代价函数，它是凸函数，使得我们可以很好的使用梯度下降法，而且能找到全局最小值，对应的函数如下： <span class="math display">\[
Cost(h_\theta(x),y)=\left\{\begin{matrix}-\log(h_\theta(x))，y=1\\-\log(1-h_\theta(x))，y=0 \end{matrix}\right.
\]</span> <span class="math inline">\(y=1\)</span>时，对应的函数图像如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706164910160.png" /></p>
<blockquote>
<p>原因：<span class="math inline">\(y=-\log z\)</span>的函数图如下：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706165147066.png" /></p>
<p>而<span class="math inline">\(g(z)=\frac{1}{1+e^{-z}}\)</span>的值域在[0,1]，所以最终图如图</p>
</blockquote>
<p>对于这个<span class="math inline">\(Cost(h_\theta(x),y)\)</span>，当<span class="math inline">\(y=1，\)</span><span class="math inline">\(h_\theta(x)=1\)</span>时，<span class="math inline">\(Cost=0\)</span></p>
<p>当<span class="math inline">\(h_\theta(x)\rightarrow 0\)</span>时，<span class="math inline">\(Cost\rightarrow \infty\)</span></p>
<p>同理，对于<span class="math inline">\(y=0\)</span>的情况，绘制的图如下：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706165753518.png" /></p>
<p>总而言之，预测的值与实际值差距越大，对应的代价越大</p>
<h2 id="简化代价函数和梯度下降">简化代价函数和梯度下降</h2>
<blockquote>
<p>逻辑回归代价函数：</p>
<p><span class="math inline">\(J(\theta)=\frac{1}{m}\sum_{i=1}^{m}Cost(h_\theta(x^{(i)}),y^{(i)})\)</span></p>
<p><span class="math inline">\(Cost(h_\theta(x),y)=\left\{\begin{matrix}-\log(h_\theta(x))，y=1\\-\log(1-h_\theta(x))，y=0 \end{matrix}\right.\)</span></p>
<p>注：<span class="math inline">\(y\)</span>总是为0或1</p>
</blockquote>
<p>简化：</p>
<p><span class="math inline">\(Cost(h_\theta(x),y)=-ylog(h_\theta(x))-(1-y)log(1-h_\theta(x))\)</span></p>
<p>进而代价函数：</p>
<p><span class="math inline">\(J(\theta)=\frac{1}{m}Cost(h_\theta(x^{(i)}),y^{(i)})=-\frac{1}{m}[\sum_{i=1}^my^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log(1-h_\theta(x^{(i)}))]\)</span></p>
<p>为了拟合参数<span class="math inline">\(\theta\)</span>，我们需要:</p>
<p><span class="math inline">\(min_{(\theta)} J(\theta)\)</span></p>
<p>梯度下降：</p>
<p><span class="math inline">\(J(\theta)=-\frac{1}{m}[\sum_{i=1}^my^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log(1-h_\theta(x^{(i)}))]\)</span></p>
<p>想要<span class="math inline">\(min_{(\theta)} J(\theta)\)</span>，就需要重复<span class="math inline">\(\theta_j := \theta_j-\alpha \frac{\partial}{\partial \theta_j }J(\theta)\)</span>，同步更新<span class="math inline">\(\theta_j\)</span></p>
<p>其中导数项：<span class="math inline">\(\frac{\partial}{\partial \theta_j}J(\theta)=\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x^{(i)}_j\)</span></p>
<p>代入后：<span class="math inline">\(\theta_j := \theta_j -\alpha \sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})x^{(i)}_j\)</span></p>
<h2 id="高级优化">高级优化</h2>
<p>算法优化：</p>
<p>换个角度看梯度下降法，对于函数<span class="math inline">\(J(\theta)\)</span>，想要<span class="math inline">\(min_{(\theta)}J(\theta)\)</span>，那么我们需要做的是：</p>
<p>给定<span class="math inline">\(\theta\)</span>，可以计算<span class="math inline">\(J(\theta)\)</span>和<span class="math inline">\(\frac{\partial}{\partial \theta_j}J(\theta) \ for(j=0,1,\cdots,n)\)</span>，然后将导数代入梯度下降公式中：<span class="math inline">\(\theta_j := \theta_j-\alpha\frac{\partial}{\partial \theta_j}J(\theta)\)</span></p>
<p>但是，梯度下降法并不是唯一的优化算法，还有的优化算法：</p>
<ul>
<li>共轭梯度法</li>
<li>BFGS</li>
<li>L-BFGS</li>
</ul>
<p>这三种算法的优点：</p>
<ul>
<li>不需要手动选择<span class="math inline">\(\alpha\)</span></li>
<li>通常比梯度下降更快</li>
</ul>
<p>缺点：</p>
<ul>
<li>更加复杂</li>
</ul>
<h2 id="多分类">多分类</h2>
<p>例：</p>
<blockquote>
<p>对于邮件文件夹，可能可以分为以下几个标签：工作、好友、家人、兴趣等</p>
<p>对于天气，可以分为：晴、多云、雨、雪等</p>
</blockquote>
<p>对于以上这些，y可以取一些离散值，且数量大于2个的，就是多分类问题</p>
<p>对于多分类问题，可以采用<strong>一对多</strong>思想，同样将二分类应用在多分类问题上</p>
<p><strong>一对多</strong>，也可以称为<strong>一对余</strong>，顾名思义：</p>
<p>假设我们有一个训练集，包含三个类别，我们就可以将这个训练集转换为三个独立的二分类问题，大致过程如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706175003124.png" /></p>
<p>然后，就有三个二分类器：<span class="math inline">\(h_\theta^{(i)}(x)=P(y=i|x;\theta) \ (i=1,2,3)\)</span></p>
<p>最后，对于一个新输入的<span class="math inline">\(x\)</span>，则对应的预测为对应类别概率最大的结果，即：<span class="math inline">\(max_{(i)}h_\theta^{(i)}(x)\)</span></p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-逻辑回归练习</title>
    <url>/2021/07/08/Part1-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="part1-逻辑回归练习">Part1-逻辑回归练习</h1>
<h2 id="逻辑回归">逻辑回归</h2>
<h3 id="可视化数据">1.1 可视化数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;ex2data1.txt&#x27;</span>, names=[<span class="string">&#x27;Exam1 score&#x27;</span>,<span class="string">&#x27;Exam2 score&#x27;</span>,<span class="string">&#x27;Class&#x27;</span>])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707212315487.png" /></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_class0 = data[data.Class==<span class="number">0</span>]</span><br><span class="line">data_class1 = data[data.Class==<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">_, ax = plt.subplots()</span><br><span class="line">ax.scatter(data_class0[<span class="string">&#x27;Exam1 score&#x27;</span>],y=data_class0[<span class="string">&#x27;Exam2 score&#x27;</span>], c=<span class="string">&#x27;yellow&#x27;</span>, edgecolors=<span class="string">&#x27;black&#x27;</span>, label=<span class="string">&#x27;No admitted&#x27;</span>)</span><br><span class="line">ax.scatter(data_class1[<span class="string">&#x27;Exam1 score&#x27;</span>],y=data_class1[<span class="string">&#x27;Exam2 score&#x27;</span>], c=<span class="string">&#x27;black&#x27;</span>, marker=<span class="string">&#x27;+&#x27;</span>, label=<span class="string">&#x27;Admitted&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Exam1 score&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Exam2 score&#x27;</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707210801462.png" alt="image-20210707210801462" /><figcaption>image-20210707210801462</figcaption>
</figure>
</blockquote>
<h3 id="sigmoid函数">1.2 sigmoid函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">z</span>):</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">plt.plot(np.arange(-<span class="number">10</span>,<span class="number">10</span>,step=<span class="number">0.5</span>),sigmoid(np.arange(-<span class="number">10</span>,<span class="number">10</span>,step=<span class="number">0.5</span>)))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707213340609.png" /></p>
</blockquote>
<h3 id="代价函数和梯度">1.3 代价函数和梯度</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>/X.shape[<span class="number">0</span>]*np.<span class="built_in">sum</span>(-y*np.log(sigmoid(X@theta))-(<span class="number">1</span>-y)*np.log(<span class="number">1</span>-sigmoid(X@theta)))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = data.iloc[:,:<span class="number">2</span>]</span><br><span class="line">X.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, np.ones(X.shape[<span class="number">0</span>]))</span><br><span class="line">X = X.values</span><br><span class="line">y = data.iloc[:, <span class="number">2</span>].values</span><br><span class="line">theta = np.zeros(X.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">compute_cost(theta, X, y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.6931471805599453</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_grad</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">  <span class="keyword">return</span> X.T@(sigmoid(X@theta)-y)/X.shape[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">compute_grad(X, y, theta)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([ -0.1 , -12.00921659, -11.26284221])</p>
</blockquote>
<h3 id="使用fminunc学习参数">1.4 使用fminunc学习参数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt</span><br><span class="line">result = opt.fmin_tnc(func=compute_cost, x0=theta, fprime=compute_grad, args=(X, y))</span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(array([-25.16131878, 0.20623159, 0.20147149]), 36, 0)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">compute_cost(result[<span class="number">0</span>], X, y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.20349770158947394</p>
</blockquote>
<h3 id="评估">1.5 评估</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">theta, X</span>):</span></span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span> <span class="keyword">if</span> x&gt;=<span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> sigmoid(X@theta)]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pre = predict(result[<span class="number">0</span>],X)</span><br><span class="line">acc = np.<span class="built_in">sum</span>(pre==y)/X.shape[<span class="number">0</span>]</span><br><span class="line"><span class="string">f&#x27;acc=<span class="subst">&#123;acc*<span class="number">100</span>&#125;</span>%&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>acc=89.0%</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">_, ax = plt.subplots()</span><br><span class="line">ax.scatter(data_class0[<span class="string">&#x27;Exam1 score&#x27;</span>],y=data_class0[<span class="string">&#x27;Exam2 score&#x27;</span>], c=<span class="string">&#x27;yellow&#x27;</span>, edgecolors=<span class="string">&#x27;black&#x27;</span>, label=<span class="string">&#x27;No admitted&#x27;</span>)</span><br><span class="line">ax.scatter(data_class1[<span class="string">&#x27;Exam1 score&#x27;</span>],y=data_class1[<span class="string">&#x27;Exam2 score&#x27;</span>], c=<span class="string">&#x27;black&#x27;</span>, marker=<span class="string">&#x27;+&#x27;</span>, label=<span class="string">&#x27;Admitted&#x27;</span>)</span><br><span class="line"><span class="comment"># theta0+theta1*x+theta2y=0</span></span><br><span class="line"><span class="comment"># y = (theta0+theta1*x)/theta2</span></span><br><span class="line">ax.plot(np.arange(<span class="number">30</span>,<span class="number">100</span>), -(result[<span class="number">0</span>][<span class="number">0</span>]+np.arange(<span class="number">30</span>,<span class="number">100</span>)*result[<span class="number">0</span>][<span class="number">1</span>])/result[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Exam1 score&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Exam2 score&#x27;</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707223240008.png" /></p>
</blockquote>
<h2 id="正则化逻辑回归">正则化逻辑回归</h2>
<h3 id="数据可视化">2.1 数据可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;ex2data.txt&#x27;</span>, names=[<span class="string">&#x27;Microchip Test1&#x27;</span>,<span class="string">&#x27;Microchip Test2&#x27;</span>, <span class="string">&#x27;Class&#x27;</span>])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707224835324.png" /></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_class1 = data[data.Class==<span class="number">1</span>]</span><br><span class="line">data_class0 = data[data.Class==<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">_, ax = plt.subplots()</span><br><span class="line">ax.scatter(data_class0[<span class="string">&#x27;Microchip Test1&#x27;</span>],data_class0[<span class="string">&#x27;Microchip Test2&#x27;</span>],c=<span class="string">&#x27;yellow&#x27;</span>, edgecolors=<span class="string">&#x27;black&#x27;</span>, label=<span class="string">&#x27;y=0&#x27;</span>)</span><br><span class="line">ax.scatter(data_class1[<span class="string">&#x27;Microchip Test1&#x27;</span>],data_class1[<span class="string">&#x27;Microchip Test2&#x27;</span>],c=<span class="string">&#x27;black&#x27;</span>, marker=<span class="string">&#x27;+&#x27;</span> , label=<span class="string">&#x27;y=1&#x27;</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707224923077.png" /></p>
</blockquote>
<h3 id="特征映射">2.2 特征映射</h3>
<p><span class="math inline">\(mapFeature(x)=\left[\begin{matrix} 1 \\ x_1 \\ x_2 \\ x_1^2 \\ x_1x_2 \\ x_2^2 \\ \cdots \\ x_1x_2^5 \\ x_2^6 \end{matrix} \right]\)</span></p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feature_map</span>(<span class="params">x1, x2, power=<span class="number">6</span></span>):</span></span><br><span class="line">  new_data = &#123;&#125;</span><br><span class="line">  <span class="comment"># new_data[&#x27;Ones&#x27;] = np.ones(x1.shape[0])</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(power+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> np.arange(i+<span class="number">1</span>):</span><br><span class="line">      new_data[<span class="string">f&#x27;F<span class="subst">&#123;i-p&#125;</span><span class="subst">&#123;p&#125;</span>&#x27;</span>] = np.power(x1, i-p)*np.power(x2, p)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pd.DataFrame(new_data)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = data[<span class="string">&#x27;Microchip Test1&#x27;</span>]</span><br><span class="line">x2 = data[<span class="string">&#x27;Microchip Test2&#x27;</span>]</span><br><span class="line">X = feature_map(x1, x2).values</span><br><span class="line">y = data.Class.values</span><br><span class="line">theta = np.zeros(X.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h3 id="计算损失和梯度">2.3 计算损失和梯度</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost</span>(<span class="params">theta, X, y, param_lambda</span>):</span> <span class="comment"># m*n n*1</span></span><br><span class="line">  cost = np.<span class="built_in">sum</span>(-y*np.log(sigmoid(X@theta))-(<span class="number">1</span>-y)*np.log(<span class="number">1</span>-sigmoid(X@theta)))/X.shape[<span class="number">0</span>]</span><br><span class="line">  reg = param_lambda*theta[<span class="number">1</span>:]@theta[<span class="number">1</span>:]/(<span class="number">2</span>*X.shape[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">return</span> cost + reg</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_grad</span>(<span class="params">theta, X, y, param_lambda</span>):</span></span><br><span class="line">  grad = X.T@(sigmoid(X@theta)-y)/X.shape[<span class="number">0</span>]</span><br><span class="line">  reg = (param_lambda*theta)/X.shape[<span class="number">0</span>]</span><br><span class="line">  reg[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> grad + reg</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">compute_cost(theta, X, y, param_lambda=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.6931471805599454</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">compute_grad(theta, X, y, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([8.47457627e-03, 1.87880932e-02, 7.77711864e-05, 5.03446395e-02, 1.15013308e-02, 3.76648474e-02, 1.83559872e-02, 7.32393391e-03, 8.19244468e-03, 2.34764889e-02, 3.93486234e-02, 2.23923907e-03, 1.28600503e-02, 3.09593720e-03, 3.93028171e-02, 1.99707467e-02, 4.32983232e-03, 3.38643902e-03, 5.83822078e-03, 4.47629067e-03, 3.10079849e-02, 3.10312442e-02, 1.09740238e-03, 6.31570797e-03, 4.08503006e-04, 7.26504316e-03, 1.37646175e-03, 3.87936363e-02])</p>
</blockquote>
<h3 id="学习参数">2.4 学习参数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.optimize <span class="keyword">as</span> opt</span><br><span class="line">result = opt.fmin_tnc(func=compute_cost, x0=theta, fprime=compute_grad, args=(X,y,<span class="number">1</span>))</span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(array([ 1.27271026, 0.62529965, 1.18111686, -2.01987399, -0.91743189, -1.43166928, 0.12393227, -0.36553118, -0.35725404, -0.17516292, -1.45817009, -0.05098418, -0.61558556, -0.27469165, -1.19271299, -0.24217841, -0.206033 , -0.04466178, -0.27778949, -0.29539513, -0.45645981, -1.04319155, 0.02779373, -0.29244867, 0.0155576 , -0.32742405, -0.1438915 , -0.92467488]), 32, 1)</p>
</blockquote>
<h3 id="结果评估">2.5 结果评估</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pre = predict(result[<span class="number">0</span>],X)</span><br><span class="line">acc = np.<span class="built_in">sum</span>(pre==y)/X.shape[<span class="number">0</span>]</span><br><span class="line"><span class="string">f&#x27;acc=<span class="subst">&#123;acc*<span class="number">100</span>&#125;</span>%&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>acc=83.05084745762711%</p>
</blockquote>
<p>整个过程其实还可以使用高级Python库来解决：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line">model = linear_model.LogisticRegression(penalty=<span class="string">&#x27;l2&#x27;</span>, C=<span class="number">1.0</span>)</span><br><span class="line">model.fit(X, y.ravel())</span><br><span class="line">model.score(X, y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>0.8305084745762712</p>
</blockquote>
<h3 id="结果可视化">2.6 结果可视化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">250</span>)</span><br><span class="line">xx, yy = np.meshgrid(x, x)</span><br><span class="line"></span><br><span class="line">z = feature_map(xx.ravel(), yy.ravel(), <span class="number">6</span>)</span><br><span class="line">z = z @ result[<span class="number">0</span>]</span><br><span class="line">z = z.to_numpy().reshape(xx.shape)</span><br><span class="line"></span><br><span class="line">_, ax = plt.subplots()</span><br><span class="line">ax.scatter(data_class0[<span class="string">&#x27;Microchip Test1&#x27;</span>],data_class0[<span class="string">&#x27;Microchip Test2&#x27;</span>],c=<span class="string">&#x27;yellow&#x27;</span>, edgecolors=<span class="string">&#x27;black&#x27;</span>, label=<span class="string">&#x27;y=0&#x27;</span>)</span><br><span class="line">ax.scatter(data_class1[<span class="string">&#x27;Microchip Test1&#x27;</span>],data_class1[<span class="string">&#x27;Microchip Test2&#x27;</span>],c=<span class="string">&#x27;black&#x27;</span>, marker=<span class="string">&#x27;+&#x27;</span> , label=<span class="string">&#x27;y=1&#x27;</span>)</span><br><span class="line">ax.legend()</span><br><span class="line">plt.contour(xx, yy, z, <span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210708134613334.png" /></p>
</blockquote>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-降维</title>
    <url>/2021/07/18/Part1-%E9%99%8D%E7%BB%B4/</url>
    <content><![CDATA[<h1 id="part1-降维">Part1-降维</h1>
<h2 id="目标1数据压缩">目标1：数据压缩</h2>
<h3 id="二维降为一维">二维降为一维</h3>
<p>如图，假设我们收集了这样一个数据集，它有很多特征，图中画出了其中两个，其对应的是同一物体的英寸长度和厘米长度，它们都表示基本长度，因此我们可能需要把数据减少到一维。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717160626878.png" /></p>
<h3 id="三维降到二维">三维降到二维</h3>
<p>如图，降维方法就是把所有数据都投影到一个二维平面上</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717161339375.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717161629930.png" /></p>
<h2 id="目标2数据可视化">目标2：数据可视化</h2>
<p>假设我们收集了许多统计数据的大数据集，如图是全世界各个国家的情况。假设有这样一个巨大数据集，每个国家有50个特征，<span class="math inline">\(x\in \mathbb R^{50}\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717162949049.png" /></p>
<p>那么，有什么方法可以让我们更好地理解这些数据呢？如何可视化这些数据？</p>
<p>为了将数据在平面上进行展示， 就需要将数据从50维降低到2维，这样就可以画一个二维图来表示它</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717164541000.png" /></p>
<h2 id="主成分分析问题陈述">主成分分析问题陈述</h2>
<p>对于降维问题，目前较流行、常用的算法是主成分分析方法(Principal components analysis, PCA)</p>
<p>PCA问题的公式描述，换句话说，我们会试着用公式准确地表述PCA的用途。</p>
<p>如图，假设有一个像这样的数据集</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717164949381.png" /></p>
<p>这是一个<span class="math inline">\(x \in \mathbb R^2\)</span>数据集，假如我们想对数据进行降维，从二维降到一维，也就是找一条好的投影这些数据的直线，在应用PCA之前，常规的做法是对于每个点到这条直线的距离，先进行均值归一化和特征规范化，使得各特征量均值为0，并且在其数值可比较的范围内。而PCA就是用来找一条这样的让每个点到其距离和最小的直线。</p>
<p>正式的说，就是：我们要试着找一个向量，假设是向量<span class="math inline">\(u^{(i)} \in \mathbb R^n\)</span>，要找一个数据投影后能够最小化投影误差的方向。</p>
<p>更通常的，我们会有N维数据，并且想将其降到K维：找k个向量<span class="math inline">\(u^{(1)},u^{(2)},\cdots,u^{(k)}\)</span>，然后将这些数据投影到这k个向量展开的线性子空间上，然后最小化投影误差</p>
<blockquote>
<p>注：PCA不是线性回归，尽管它们看上去有一些相似。但我们处理线性回归时，当给定某个输入特征量x时，用来预测出变量y的值，因此，在线性回归中，我们要做的是拟合一条直线来最小化点和直线之间的平方误差，所以要最小化的是图中的蓝线之和的平方。而在处理PCA中，要最小化的是图中绿色线长度和的平方，它们是正交距离。</p>
<p>此外，线性回归需要用一些特征去预测一个结果，而PCA是同等对待所有特征</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210717171628542.png" /></p>
</blockquote>
<h2 id="pca算法">PCA算法</h2>
<h3 id="数据预处理">数据预处理</h3>
<p>训练集：<span class="math inline">\(x^{(1)},x^{(2)},\cdots,x^{(m)}\)</span></p>
<p>预处理（特征绽放/均值标准化）：</p>
<p><span class="math inline">\(\mu_j = \frac{1}{m}\sum_{i=1}^m x_j^{(i)}\)</span></p>
<p>使用<span class="math inline">\(x_j-\mu_j\)</span>代替每个<span class="math inline">\(x_j^{(i)}\)</span></p>
<p>如果不同特征尺度有较大的不同，则需要对每个特征进行缩放<span class="math inline">\(x_j^{(i)}:=\frac{x_j^{(i)}-\mu_j}{s_j}\)</span>(<span class="math inline">\(s_j\)</span>是特征j的标准偏差)</p>
<h3 id="pca算法-1">PCA算法</h3>
<ul>
<li><p>将数据从n维降低到k维</p></li>
<li><p>计算协方差：<span class="math inline">\(\Sigma = \frac{1}{m} \sum_{i=1}^n (x^{(i)})(x^{(i)})^T\)</span></p></li>
<li><p>计算矩阵<span class="math inline">\(\Sigma\)</span>的特征向量：<span class="math inline">\([U,S,V]=svd(\Sigma)\)</span></p>
<p><span class="math inline">\(svd\)</span>代表奇异值分解(Singular value decomposition)，这是一个更加高级的分解算法，也是一个高级的线性代数的应用。</p>
<p><span class="math inline">\(\Sigma\)</span>是一个<span class="math inline">\(n \times n\)</span>的矩阵，三个输出<span class="math inline">\(U,S,V\)</span>，通常需要的是<span class="math inline">\(U\)</span>，这个<span class="math inline">\(U\)</span>矩阵也是一个<span class="math inline">\(n\times n\)</span>的矩阵</p>
<p><span class="math inline">\(U = \left[ \begin{matrix} | &amp; | &amp; \cdots &amp;| \\ u^{(1)} &amp; u^{(2)} &amp; \cdots &amp; u^{(n)} \\ | &amp; | &amp; \cdots &amp; |\end{matrix} \right]\)</span></p></li>
<li><p>如果想降维到k维，则我们需要取得<span class="math inline">\(u^{(1)}\)</span>到<span class="math inline">\(u^{(k)}\)</span>向量作为投影数据的方向</p></li>
<li><p><span class="math inline">\(z=\left[ \begin{matrix} | &amp; | &amp; \cdots &amp;| \\ u^{(1)} &amp; u^{(2)} &amp; \cdots &amp; u^{(k)} \\ | &amp; | &amp; \cdots &amp; |\end{matrix} \right]^TX\)</span></p>
<p><span class="math inline">\(z\in R^{k\times 1}\)</span></p></li>
</ul>
<h3 id="总结">总结</h3>
<p>为了确保每个特征都是均值为0的，我们需要进行均值标准化，在均值标准化后，任选特征缩放，预处理完成后，我们计算协方差：</p>
<p><span class="math inline">\(\Sigma = \frac{1}{m} \sum_{i=1}^m (x^{(i)})(x^{(i)})^T\)</span></p>
<p><span class="math inline">\([U,S,V]=svd(\Sigma)\)</span></p>
<p><span class="math inline">\(U_{reduce}=U[:, 1:k]\)</span></p>
<p><span class="math inline">\(z=U_{reduce}^Tx\)</span></p>
<h2 id="压缩重构">压缩重构</h2>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718101843413.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210718101906830.png" /></p>
<p><span class="math inline">\(z=U_{reduce}^Tx\)</span></p>
<p>而如果给定一个<span class="math inline">\(z^{(i)}\)</span>，我们怎么回到原来的二维空间？</p>
<p><span class="math inline">\(z\in \mathbb R \rightarrow x\in \mathbb R^2\)</span></p>
<p><span class="math inline">\(X_{approx}=U_{reduce}\cdot z\)</span></p>
<p><span class="math inline">\(X \approx X_{approx}\)</span></p>
<h2 id="选择主成分的数量">选择主成分的数量</h2>
<blockquote>
<p><span class="math inline">\(均方投影误差:\frac{1}{m}\sum_{i=1}^m||x^{(i)}-x^{(i)}_{approx}||^2\)</span></p>
<p><span class="math inline">\(数据总差异:\frac{1}{m}\sum_{i=1}^m ||x^{(i)}||^2\)</span></p>
</blockquote>
<p>通常，选择使得下式成立的最小<span class="math inline">\(k\)</span></p>
<p><span class="math inline">\(\frac{\frac{1}{m}\sum_{i=1}^m||x^{(i)}-x_{approx}^{(i)}||^2}{\frac{1}{m}\sum_{i=1}^m||x^{(i)}||^2} \le 0.01\ (1\%)\)</span></p>
<p>或者说是99%的方差被保留下来了</p>
<p>算法：</p>
<p>尝试<span class="math inline">\(k=1\)</span>的PCA</p>
<p>计算：<span class="math inline">\(U_{reduce},z^{(1)},z^{(2)},\cdots,z^{(m)},x_{approx}^{(1)},\cdots,x_{approx}^{(2)}\)</span></p>
<p>检查：<span class="math inline">\(\frac{\frac{1}{m}\sum_{i=1}^m||x^{(i)}-x_{approx}^{(i)}||^2}{\frac{1}{m}\sum_{i=1}^m||x^{(i)}||^2} \le 0.01?\)</span></p>
<p>如果不成立，则换<span class="math inline">\(k=2\)</span>，如此继续，找到使不等式成立的最小k</p>
<p>但是，显然，这个算法效率并不高，好在SVD已经给了我们更容易计算的数值：</p>
<p><span class="math inline">\([U,S,V]=svd(\Sigma)\)</span></p>
<p>其中的S是一个对角矩阵：<span class="math inline">\(S = \left[ \begin{matrix} s_{11} &amp; &amp; &amp; \\ &amp; s_{22} &amp; &amp; \\ &amp; &amp; \cdots &amp; \\ &amp; &amp; &amp; s_{nn} \end{matrix} \right]\)</span></p>
<p>然后，对于给定的k，就可以这样写不等式：</p>
<p><span class="math inline">\(1-\frac{\sum_{i=1}^k S_{ii}}{\sum_{i=1}^nS_{ii}} \le 0.01 \Leftrightarrow \frac{\sum_{i=1}^k S_{ii}}{\sum_{i=1}^nS_{ii}} \ge 0.99\)</span></p>
<blockquote>
<p>总结：</p>
<ul>
<li><span class="math inline">\([U,S,V]=svd(\Sigma)\)</span></li>
<li>选择使如下不等式成立的最小<span class="math inline">\(k\)</span>值：<span class="math inline">\(\frac{\sum_{i=1}^k S_{ii}}{\sum_{i=1}^nS_{ii}} \ge 0.99\)</span></li>
</ul>
</blockquote>
<h2 id="pca应用中的建议">PCA应用中的建议</h2>
<h3 id="加速监督学习">加速监督学习</h3>
<p>我们经常使用PCA对监督学习进行加速，假设有一个监督学习问题，如下：</p>
<blockquote>
<p><span class="math inline">\((x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),\cdots,(x^{(m)},y^{(m)})\)</span></p>
</blockquote>
<p>假设其中的<span class="math inline">\(x^{(i)}\)</span>具有很高的维度，则可以使用PCA减少数据的维度，从而使得算法运行更加高效：</p>
<p>抽取输入<span class="math inline">\(x\)</span>得到：</p>
<p>​ 未标签数据集：<span class="math inline">\(x^{(1)},x^{(2)},\cdots,x^{(m)} \in \mathbb R^{10000}\)</span></p>
<p>经过PCA算法后得到：</p>
<p>​ 数据的低维表示：<span class="math inline">\(z^{(1)},z^{(2)},\cdots,z^{(m)} \in \mathbb R^{1000}\)</span></p>
<p>新的训练集：</p>
<p>​ <span class="math inline">\((z^{(1)},y^{(1)}),(z^{(2)},y^{(2)}),\cdots,(z^{(m)},y^{(m)})\)</span></p>
<blockquote>
<p>注：映射<span class="math inline">\(x^{(i)} \to z^{(i)}\)</span>只能通过在训练集上运行PCA来定义，而通过学习PCA得到的参数，我们应该只在训练集上拟合，而不是在交叉验证集或测试集上，而定义后的映射，则可以应用到交叉验证集和测试集上</p>
</blockquote>
<h3 id="pca的应用">PCA的应用</h3>
<ul>
<li>压缩
<ul>
<li>降低存储数据所需内存或硬盘空间</li>
<li>加速算法学习</li>
</ul></li>
<li>可视化</li>
</ul>
<h3 id="pca的错误使用预防过拟合">PCA的错误使用：预防过拟合</h3>
<blockquote>
<p>使用<span class="math inline">\(z^{(i)}\)</span>代替<span class="math inline">\(x^{(i)}\)</span>来降低特征数量<span class="math inline">\(k&lt;n\)</span></p>
<p>因此，更少的特征，更少可能的过拟合</p>
</blockquote>
<p>这样，或许表现上看是有用的，但是它并不是一个好的解决过拟合的方法</p>
<p>相反，如果想解决过拟合，还是使用正则化来处理更好。</p>
<h3 id="pca有时会被滥用">PCA有时会被滥用</h3>
<blockquote>
<p>机器学习系统的设计：</p>
<ul>
<li>获得训练集</li>
<li>运行PCA</li>
<li>尝试逻辑回归</li>
<li>测试测试集</li>
</ul>
</blockquote>
<p>然而，在写下这样一个包含PCA的项目计划之前，应该先问一问，如果不使用PCA而是直接去进行会怎样？</p>
<p>在实现PCA之前 ，应该首先直接做我们想做的事首先考虑使用最原始的数据<span class="math inline">\(x^{(i)}\)</span>，只要这么做不能达到目的时才考虑使用PCA和<span class="math inline">\(z^{(i)}\)</span>，不要一开始就花大量时间去应用PCA。</p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-如何上传你的第一篇博客</title>
    <url>/2018/11/04/Post-name/</url>
    <content><![CDATA[<h1 id="hexo-如何上传你的第一篇博客">Hexo-如何上传你的第一篇博客</h1>
<hr />
<p>当你的Hexo博客搭建好后，你就可以着手开始上传你的第一篇博客了。<br />
上传前，你需要在自己电脑上先写好，具体步骤如下：</p>
<h2 id="建立一个.md文件">建立一个.md文件</h2>
<p>  如图所示,“ ”中的是文件名 <img src="/img/1.png" alt="新建" /></p>
<h2 id="编辑你的.md文件">编辑你的.md文件</h2>
<p>找到你的电脑中你的文章所在的位置，例如我的博客放在blog文件夹，然后我的就是blog/source&gt;_posts文件中，找到Post-name.md文件，用markdown编辑器打开，如果没有markdown编辑器可以去下载一个或者直接用记事本也能打开，打开之后会自动帮你生成一些关于文章的信息，不用管，直接在下面继续写就行了，具体的markdown的一些规范与教程不会的可以自行百度。这里主要说一下网上教程可能不适用的方法，比如插入图片、引用。</p>
<ul>
<li>上传图片</li>
</ul>
<p>  比如你要插入一个图片在此处<br />
<img src="/img/eg.png" alt="当图片无法加载时显示的内容" /><br />
  首先你需要将图片放入你的电脑中的一下位置:以我的为例就是blog</p>
<p>  然后可以用如下代码</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">当图片无法加载时显示的内容</span>](<span class="link">/img/eg.png</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>引用的话，之接用&gt; 空格+内容就行了，如果失败，可能是主题的原因，比如hexo刚建立时默认的主题landscape用引用就是会失败的如图</li>
</ul>
<figure>
<img src="/img/use.png" alt="引用错误" /><figcaption>引用错误</figcaption>
</figure>
<p>  这样的话就需要更换主题了</p>
<h2 id="上传你的文件">上传你的文件</h2>
<p>最后就简单了，上传你的修改就行了</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<figure>
<img src="/img/upload.png" alt="上传" /><figcaption>上传</figcaption>
</figure>
<p>至此，就成功上传一篇你的博客了</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Django</title>
    <url>/2020/10/16/Python-Django/</url>
    <content><![CDATA[<h1 id="django">Django</h1>
<h2 id="shell相关">Shell相关</h2>
<h3 id="创建项目">创建项目</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure>
<h3 id="运行服务器">运行服务器</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行在指定端口</span></span><br><span class="line">python manage.py runserver 8080</span><br></pre></td></tr></table></figure>
<h3 id="创建一个新的应用">创建一个新的应用</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py startapp myapp</span><br></pre></td></tr></table></figure>
<p>应用结构：</p>
<ul>
<li><p>_ _ init _ _</p></li>
<li><p>views：视图函数</p></li>
<li><p>models：模型</p></li>
<li><p>admin：后台管理</p></li>
<li><p>apps：应用配置</p></li>
<li><p>tests：单元测试</p></li>
<li><p>migrations：迁移目录</p></li>
</ul>
<h3 id="数据库迁移">数据库迁移</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<h3 id="通过models.py生成migrations中的文件">通过models.py生成migrations中的文件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations myapp</span><br></pre></td></tr></table></figure>
<p>使用后，一般再执行一遍数据库迁移命令</p>
<h2 id="实现请求与响应">实现请求与响应</h2>
<h3 id="在myappmodels.py下创建模型">1. 在myapp/models.py下创建模型</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&#x27;date published&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="在myappviews.py下编写视图">2. 在myapp/views.py下编写视图</h3>
<ul>
<li>视图函数中，第一个参数是request</li>
<li>永远记得返回Response</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 使用模型</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello wrold&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="修改mysitesettings.py激活模型">3. 修改mysite/settings.py，激活模型</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># 安装myapp(具体名称在myapp/apps.py中查看)</span></span><br><span class="line">    <span class="string">&#x27;myapp.apps.MyappConfig&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="如果需要使用模型使用shell进行数据库迁移">4. 如果需要使用模型，使用shell进行数据库迁移</h3>
<h3 id="配置url">5. 配置url</h3>
<h4 id="如果是需要综合配置的则在mysiteurls.py中配置即可">5.1 如果是需要综合配置的，则在mysite/urls.py中配置即可</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="如果是复杂的则可在mysiteurls.py中配置对应的url文件">5.2 如果是复杂的，则可在mysite/urls.py中配置对应的url文件</h4>
<ul>
<li><p>mysite/urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;myapp/&#x27;</span>, include(<span class="string">&#x27;myapp.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>myapp/urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="对视图返回值进行改良">对视图返回值进行改良</h2>
<h3 id="直接返回html内容">1. 直接返回HTML内容</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="使用template模板">2. 使用template模板</h3>
<h4 id="新建myapptemplatesmyappindex.html">2.1 新建myapp/templates/myapp/index.html</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    Hello world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="修改myappviews.py">2.2 修改myapp/views.py</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    template = loader.get_template(<span class="string">&#x27;myapp/index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render())</span><br></pre></td></tr></table></figure>
<h3 id="使用template模板并传值">3. 使用template模板并传值</h3>
<h4 id="修改myappviews.py-1">3.1 修改myapp/views.py</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    template = loader.get_template(<span class="string">&#x27;myapp/index.html&#x27;</span>)</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;latest_question_list&#x27;</span>: latest_question_list</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br></pre></td></tr></table></figure>
<p>可简写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;myapp/index.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;latest_question_list&#x27;</span>: latest_question_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="修改myapptemplatesmyappindex.html使用传入的值">3.2 修改myapp/templates/myapp/index.html,使用传入的值</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    Hello world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">&#123;% for question in latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="model的数据操作">Model的数据操作</h2>
<h3 id="crud在myappviews.py中">CRUD(在myapp/views.py中)</h3>
<h4 id="增加">1. 增加</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_user</span>(<span class="params">request</span>):</span></span><br><span class="line">    user = User()</span><br><span class="line">    user.username = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">    user.age = <span class="number">20</span></span><br><span class="line">    user.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Add user&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="删除">2. 删除</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_user</span>(<span class="params">request</span>):</span></span><br><span class="line">    user = User()</span><br><span class="line">    user.<span class="built_in">id</span> = <span class="number">1</span></span><br><span class="line">    user.delete()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Delete User&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="修改">3. 修改</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod_user</span>(<span class="params">request</span>):</span></span><br><span class="line">    user = User.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">    user.username = <span class="string">&#x27;Jerry&#x27;</span> <span class="comment"># 修改id为1的username为Jerry</span></span><br><span class="line">    user.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;User modify&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="查找">4. 查找</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找全部</span></span><br><span class="line">users = User.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 根据id查找</span></span><br><span class="line">user = User.objects.get(pk=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="过滤查找">5. 过滤查找</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = User.objects.<span class="built_in">filter</span>(age__gt=<span class="number">10</span>).<span class="built_in">filter</span>(age__lt=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<h4 id="使用聚合函数">6. 使用聚合函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">User.objects.aggregate(Max(<span class="string">&#x27;age&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="更换数据库为mysql">更换数据库为MySQL</h2>
<h3 id="新建mysql数据库">1. 新建mysql数据库</h3>
<h3 id="修改mysitesettings.py">2. 修改mysite/settings.py</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span></span><br><span class="line">        <span class="comment"># &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;DjangoDB&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安装mysql驱动">3. 安装MySQL驱动</h3>
<ul>
<li>mysqlclient
<ul>
<li>python2、python3都能直接使用</li>
<li>缺点：对mysql安装位置有要求，必须指定位置存在配置文件</li>
</ul></li>
<li>python-mysql
<ul>
<li>python2 支持好，但不支持python3</li>
</ul></li>
<li>pymysql
<ul>
<li>python2、python3都支持</li>
<li>可伪装成前两个库</li>
</ul></li>
</ul>
<ol type="1">
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure></li>
<li><p>伪装， 写在mysite/_ _ init _ _.py中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 指定版本</span></span><br><span class="line">pymysql.version_info = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="string">&quot;final&quot;</span>, <span class="number">0</span>)</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li>
<li><p>数据库迁移<code>python manage.py migrate</code></p></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的numpy中的各种乘积</title>
    <url>/2021/09/06/Python%E7%9A%84numpy%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E4%B9%98%E7%A7%AF/</url>
    <content><![CDATA[<h1 id="python的numpy中的各种乘积">Python的numpy中的各种乘积</h1>
<h2 id="np.dot">1. np.dot()</h2>
<p>如果参与运算的是两个<strong>一维数组(或向量)</strong>，则结果就是两个数组的<strong>内积(inner product)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>]) <span class="comment"># shape:(2,)</span></span><br><span class="line">b = np.array([<span class="number">1</span>, <span class="number">2</span>]) <span class="comment"># shape:(2,)</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(a,b))</span><br><span class="line">&gt;&gt; <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>如果参与运算的是两个二维数组(或形式上的矩阵)，则结果就是两个<strong>矩阵乘积</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]) <span class="comment"># shape:(2,3)</span></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]]) <span class="comment"># shape:(3,2)</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(a,b))</span><br><span class="line">&gt;&gt; [[<span class="number">22</span> <span class="number">28</span>]</span><br><span class="line">   	[<span class="number">49</span> <span class="number">64</span>]]</span><br></pre></td></tr></table></figure>
<h2 id="np.multiply-和">2. np.multiply() 和 *</h2>
<p><code>*</code>和np.multiply()方法针对的是<strong>标量</strong>的运算，当参与运算的是两个数组时，结果是两个数组对应位置的乘积</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(a*b)</span><br><span class="line"><span class="built_in">print</span>(np.multiply(a,b))</span><br><span class="line">&gt;&gt; [<span class="number">1</span> <span class="number">4</span> <span class="number">9</span>]</span><br><span class="line">&gt;&gt; [<span class="number">1</span> <span class="number">4</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<h2 id="np.matmul-和">3. np.matmul() 和 @</h2>
<p>matmul是matrix multiply的缩写，是专门用于矩阵乘法的函数，<code>@</code>是np.matmul()的简化写法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(a@b)</span><br><span class="line"><span class="built_in">print</span>(np.matmul(a,b))</span><br><span class="line">&gt;&gt; [[<span class="number">7</span> <span class="number">10</span>]</span><br><span class="line">    [<span class="number">15</span> <span class="number">22</span>]]</span><br><span class="line">&gt;&gt; [[<span class="number">7</span> <span class="number">10</span>]</span><br><span class="line">    [<span class="number">15</span> <span class="number">22</span>]]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch中的autograd</title>
    <url>/2021/10/04/Pytorch%E4%B8%AD%E7%9A%84autograd/</url>
    <content><![CDATA[<h1 id="pytorch中的autograd">Pytorch中的autograd</h1>
<blockquote>
<ul>
<li>在整个Pytorch框架中，所有的神经网络本质上都是一个autograd packge(自动求导工具包)</li>
<li>autograd package 提供了一个对Tensors上所有的操作进行自动微分的功能</li>
</ul>
</blockquote>
<h2 id="关于torch.tensor">关于torch.Tensor</h2>
<ul>
<li>torch.Tensor是整个package中的核心类，如果将属性<code>.requires_grad</code>这设备为<code>True</code>，它将追踪在这个类上定义的所有操作。当代码要进行反向传播时，直接调用.backward()就可以自动计算所有的梯度。在这个Tensor上的所有梯度将被累加进属性<code>.grad</code>中</li>
<li>如果想终止一个Tensor在计算图中的追踪回溯，只需要执行<code>.detach()</code>就可以将该Tensor从计算图中撤下，在未来的回溯计算中也不会再计算该Tensor</li>
<li>除了<code>.detach()</code>，如果想终止对计算图的回溯，也就是不再进行方向传播求导数的过程，也可以采用代码块的方式<code>with torch.no_grad():</code>，这种方式非常适用于对模型进行预测的时候，因为预测阶段不再需要对梯度进行计算</li>
</ul>
<h2 id="关于torch.function">关于torch.Function</h2>
<ul>
<li>Function类是和Tensor类同等重要的一个核心类，它和Tensor共同构建了一个完整的类，每个Tensor拥有一个<code>.grad_fn</code>属性，代表引用了哪个具体的Function创建了该Tensor</li>
<li>如果某个张量Tensor是用户自定义的，则其对应的<code>grad_fn</code>是None</li>
</ul>
<h2 id="关于tensor的操作">关于Tensor的操作</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = torch.ones(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x1)</span><br><span class="line">x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[1., 1., 1.],</p>
<p>​ [1., 1., 1.],</p>
<p>​ [1., 1., 1.]])</p>
<p>tensor([[1., 1.],</p>
<p>​ [1., 1.]], requires_grad=True)</p>
</blockquote>
<h3 id="在具有requires_gradtrue上的tensor上执行一个加法操作">在具有requires_grad=True上的Tensor上执行一个加法操作</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = x + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[3., 3.],</p>
<p>​ [3., 3.]], grad_fn=<AddBackward0>)</p>
</blockquote>
<h3 id="打印tensor的grad_fn属性">打印Tensor的grad_fn属性</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.grad_fn)</span><br><span class="line"><span class="built_in">print</span>(y.grad_fn)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>None</p>
<p>&lt;AddBackward0 object at 0x7f57cf678090&gt;</p>
</blockquote>
<h3 id="在tensor上执行更复杂的操作">在Tensor上执行更复杂的操作</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = y*y*<span class="number">3</span></span><br><span class="line">out = z.mean()</span><br><span class="line"><span class="built_in">print</span>(z, out)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[27., 27.],</p>
<p>​ [27., 27.]], grad_fn=<MulBackward0>) tensor(27., grad_fn=<MeanBackward0>)</p>
</blockquote>
<h3 id="使用.requires_grad_">使用<code>.requires_grad_()</code></h3>
<blockquote>
<p><code>.requires_grad()</code>可以原地改变Tensor的属性<code>.requires_grad</code>的值，如果没有主动设定，默认是False</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">a = ((a*<span class="number">3</span>)/(a-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(a.requires_grad)</span><br><span class="line">a.requires_grad_(<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(a.requires_grad)</span><br><span class="line">b = (a*a).<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(b.grad_fn)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>False</p>
<p>True</p>
<p>&lt;SumBackward0 object at 0x7f57cf5d66d0&gt;</p>
</blockquote>
<h2 id="关于梯度gradients">关于梯度Gradients</h2>
<h3 id="在pytorch中反向传播是依靠.backward实现的">在Pytorch中，反向传播是依靠<code>.backward()</code>实现的</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out.backward()</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[4.5000, 4.5000],</p>
<p>​ [4.5000, 4.5000]])</p>
</blockquote>
<h3 id="关于自动求导">关于自动求导</h3>
<blockquote>
<p>关于自动求导的属性设置，可以通过设置<code>.require_grad=True</code>来执行自动求导，也可以通过代码块的限制来停止自动求导</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.requires_grad)</span><br><span class="line"><span class="built_in">print</span>((x**<span class="number">2</span>).requires_grad)</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">  <span class="built_in">print</span>((x**<span class="number">2</span>).requires_grad)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>True</p>
<p>True</p>
<p>False</p>
</blockquote>
<blockquote>
<p>可以通过<code>.detach()</code>获得一个新的Tensor，拥有相同的内容但不会自动求导</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.requires_grad)</span><br><span class="line">y = x.detach()</span><br><span class="line"><span class="built_in">print</span>(y.requires_grad)</span><br><span class="line"><span class="built_in">print</span>(x.eq(y).<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>True</p>
<p>False</p>
<p>tensor(True)</p>
</blockquote>
]]></content>
      <categories>
        <category>Pytorch</category>
      </categories>
      <tags>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch初步应用</title>
    <url>/2021/10/04/Pytorch%E5%88%9D%E6%AD%A5%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="pytorch初步应用">Pytorch初步应用</h1>
<h2 id="使用pytorch构建一个神经网络">使用Pytorch构建一个神经网络</h2>
<h3 id="关于torch.nn">关于torch.nn</h3>
<ul>
<li>使用Pytorch来构建神经网络，主要的工具都在torch.nn包中</li>
<li>nn依赖于autograd来定义模型，并对其自动求导</li>
</ul>
<h3 id="构建神经网络的典型流程">构建神经网络的典型流程</h3>
<ul>
<li>定义一个拥有可学习参数的神经网络</li>
<li>遍历训练数据集</li>
<li>处理输入数据使其流经神经网络</li>
<li>计算损失值</li>
<li>将网络参数的梯度进行反向传播</li>
<li>以一定的规则更新网络的权重</li>
</ul>
<h3 id="定义一个pytorch实现的神经网络">定义一个Pytorch实现的神经网络</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个简单的网络类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">    <span class="comment"># 定义第一层卷积神经网络，输入通道维度=1，输出=6，卷积核大小3*3</span></span><br><span class="line">    self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>)</span><br><span class="line">    self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">3</span>)</span><br><span class="line">    self.fc1 = nn.Linear(<span class="number">16</span>*<span class="number">6</span>*<span class="number">6</span>, <span class="number">120</span>)</span><br><span class="line">    self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">    self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">    x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">    x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">    x = x.view(-<span class="number">1</span>, self.num_flat_features(x))</span><br><span class="line">    x = F.relu(self.fc1(x))</span><br><span class="line">    x = F.relu(self.fc2(x))</span><br><span class="line">    x = self.fc3(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">num_flat_features</span>(<span class="params">self, x</span>):</span></span><br><span class="line">    size = x.size()[<span class="number">1</span>:]</span><br><span class="line">    num_features = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">      num_features *= s</span><br><span class="line">    <span class="keyword">return</span> num_features</span><br><span class="line">net = Net()</span><br><span class="line"><span class="built_in">print</span>(net)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Net(</p>
<p>(conv1): Conv2d(1, 6, kernel_size=(3, 3), stride=(1, 1))</p>
<p>(conv2): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1))</p>
<p>(fc1): Linear(in_features=576, out_features=120, bias=True)</p>
<p>(fc2): Linear(in_features=120, out_features=84, bias=True)</p>
<p>(fc3): Linear(in_features=84, out_features=10, bias=True)</p>
<p>)</p>
</blockquote>
<blockquote>
<p>注意：</p>
<ul>
<li>模型中所有可训练的参数可以通过<code>net.parameters()</code>来获得</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params = <span class="built_in">list</span>(net.parameters())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(params))</span><br><span class="line"><span class="built_in">print</span>(params[<span class="number">0</span>].size())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>10</p>
<p>torch.Size([6, 1, 3, 3])</p>
</blockquote>
<h3 id="输出测试">输出测试</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">out = net(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"><span class="built_in">print</span>(out.size())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[ 0.0089, -0.0182, -0.1752, -0.1430, -0.0278, 0.1290, -0.1476, 0.1454,-0.0877, -0.0579]], grad_fn=<AddmmBackward>)</p>
<p>torch.Size([1, 10])</p>
</blockquote>
<blockquote>
<p>有了输出张量，就可以执行梯度归零和反向传播的操作了</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.zero_grad()</span><br><span class="line">out.backward(torch.randn(<span class="number">1</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>torch.nn构建的神经网络只支持mini-batches的输入，不支持单一样本的输入</li>
<li>如：<code>nn.Conv2d</code>需要一个4D Tensor，形状为<code>(nSamples, nChannels, Height, Width)</code>，如果输入只有单一样本的形式，则需要执行<code>input.unsqueeze(0)</code>主动将3D Tensor扩充为4D Tensor</li>
</ul>
</blockquote>
<h3 id="损失函数">损失函数</h3>
<blockquote>
<ul>
<li>损失函数的输入是一个输入的<code>pair:(output, target)</code>，然后计算出一个数值来评估output和target之间的差距大小</li>
<li>在torch.nn中有若干不同的损失函数可供使用，比如<code>nn.MSELoss</code>就是通过计算均方差损失来评估输入和目标值之间的差距</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">target = torch.randn(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 改变target的形状为二维张量，为了和output匹配</span></span><br><span class="line">target = target.view(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line">loss = criterion(output, target)</span><br><span class="line"><span class="built_in">print</span>(loss)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor(0.8665, grad_fn=<MseLossBackward>)</p>
</blockquote>
<ul>
<li>关于反向传播的链：如果我们跟踪loss反向传播的方向，使用<code>.grad_fn</code>属性打印，可以看到计算图如下，箭头反向就是反向传播了：</li>
</ul>
<blockquote>
<p>input -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; view -&gt; linear -&gt; relu -&gt; linear -&gt; relu -&gt; linear -&gt; MSELoss -&gt; loss</p>
</blockquote>
<ul>
<li>当调用<code>loss.backward()</code>时，整张计算图将对loss进行自动求导，所有属性<code>requires_grad=True</code>的Tensors都将参与梯度求导的运算，并将梯度累加到Tensors中的<code>.grad</code>属性中</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(loss.grad_fn) <span class="comment"># MSELoss</span></span><br><span class="line"><span class="built_in">print</span>(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment"># Linear</span></span><br><span class="line"><span class="built_in">print</span>(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment"># ReLU</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>&lt;MseLossBackward object at 0x7fefb0264390&gt;</p>
<p>&lt;AddmmBackward object at 0x7fefb027f350&gt;</p>
<p>&lt;AccumulateGrad object at 0x7fefb027f950&gt;</p>
</blockquote>
<h3 id="反向传播">反向传播</h3>
<ul>
<li>在Pytorch中执行反向传播非常简便，全部的操作就是loss.backward()</li>
<li><strong>在执行反向传播之前，要先将梯度清零，否则梯度会在不同的批次数据之间被累加</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 梯度清零</span></span><br><span class="line">net.zero_grad()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;conv1.bias.grad before backward&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(net.conv1.bias.grad)</span><br><span class="line">loss.backward() <span class="comment"># 反向传播</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;conv1.bias.grad after backward&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(net.conv1.bias.grad)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>conv1.bias.grad before backward</p>
<p>None</p>
<p>conv1.bias.grad before backward</p>
<p>tensor([ 0.0051, 0.0086, 0.0177, -0.0007, -0.0182, 0.0006])</p>
</blockquote>
<h3 id="更新网络参数">更新网络参数</h3>
<ul>
<li>更新参数最简单的算法就是SGD(随机梯度下降)</li>
<li>具体的算法公式表达式为：<span class="math inline">\(weight = weight - learning_rate*gradient\)</span></li>
</ul>
<h3 id="传统的python代码实现sgd">传统的Python代码实现SGD</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> net.parameters():</span><br><span class="line">  f.data.sub_(f.grad.data * learning_rate)</span><br></pre></td></tr></table></figure>
<h3 id="使用pytorch官方推荐的标准代码">使用Pytorch官方推荐的标准代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="comment"># 通过optim创建优化器对象</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"><span class="comment"># 将优化器执行梯度清零的操作</span></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line">output = net(<span class="built_in">input</span>)</span><br><span class="line">loss = criterion(output, target)</span><br><span class="line"><span class="comment"># 对损失值进行反向传播的操作</span></span><br><span class="line">loss.backward()</span><br><span class="line"><span class="comment"># 参数更新通过一行标准代码来执行</span></span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure>
<h2 id="使用pytorch构建一个分类器">使用Pytorch构建一个分类器</h2>
<h3 id="分类器任务和数据介绍">分类器任务和数据介绍</h3>
<ul>
<li>构造一个将不同图像进行分类的神经网络分类器，对输入的图片进行判别并完成分类</li>
<li>本案例采用CIFAR10数据集作为原始图片数据</li>
</ul>
<blockquote>
<ul>
<li>CIFAR10数据集介绍：数据集中每张图片的尺寸是3 * 32 * 32</li>
<li>CIFAR10数据集总共有10种不同的分类，分别是</li>
</ul>
</blockquote>
<p>样例：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/CIFAR10.png" /></p>
<h3 id="训练分类器的步骤">训练分类器的步骤</h3>
<ol type="1">
<li>使用torchvision下载CIFAR10数据集</li>
<li>定义卷积神经网络</li>
<li>定义损失函数</li>
<li>在训练集上训练模型</li>
<li>在测试集上测试模型</li>
</ol>
<h3 id="使用torchvision下载cifar10数据集">使用torchvision下载CIFAR10数据集</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入torchvision包</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载数据集并对图片进行调整，因为torchvision数据集的输出是PILImage格式，</span></span><br><span class="line"><span class="comment"># 数据域在[0,1]，我们将其转换为标准数据域[-1,1]的张量格式</span></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))]</span><br><span class="line">)</span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=<span class="number">4</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=<span class="number">4</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&quot;airplane&quot;</span>, <span class="string">&quot;automobile&quot;</span>, <span class="string">&quot;bird&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;deer&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;frog&quot;</span>, <span class="string">&quot;horse&quot;</span>, <span class="string">&quot;ship&quot;</span>, <span class="string">&quot;truck&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="展示部分图片">展示部分图片</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 构建展示图片的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imshow</span>(<span class="params">img</span>):</span></span><br><span class="line">  img = img / <span class="number">2</span> + <span class="number">0.5</span></span><br><span class="line">  npimg = img.numpy() <span class="comment"># Tensor转numpy</span></span><br><span class="line">  plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))<span class="comment"># 维度转换</span></span><br><span class="line">  plt.show()</span><br><span class="line"><span class="comment"># 从数据迭代器中读取一张图片</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(trainloader)</span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"><span class="comment"># 展示图片</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="comment"># 打印标签</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%10s&#x27;</span>%classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211004154926410.png" /></p>
</blockquote>
<h3 id="构建卷积神经网络">构建卷积神经网络</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">    self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">    self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">    self.fc1 = nn.Linear(<span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">    self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">    self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">    x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">    x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">    x = x.view(-<span class="number">1</span>, <span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>)</span><br><span class="line">    x = F.relu(self.fc1(x))</span><br><span class="line">    x = F.relu(self.fc2(x))</span><br><span class="line">    x = self.fc3(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net()</span><br></pre></td></tr></table></figure>
<h3 id="定义损失函数">定义损失函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line">criterion = nn.CrossEntropyLoss() <span class="comment"># 交叉熵损失</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)<span class="comment"># 随机梯度下降优化器</span></span><br></pre></td></tr></table></figure>
<h3 id="在训练集上训练模型">在训练集上训练模型</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">  running_loss = <span class="number">0.0</span></span><br><span class="line">  <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(trainloader, <span class="number">0</span>):</span><br><span class="line">    inputs, labels = data</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    outputs = net(inputs)</span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    loss = criterion(outputs, labels)</span><br><span class="line">    <span class="comment"># 反向传播+参数更新</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印轮次和损失值 </span></span><br><span class="line">    running_loss += loss.item()</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">2000</span> == <span class="number">0</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;[%d, %5d] loss: %.3f&#x27;</span>%(epoch+<span class="number">1</span>, i+<span class="number">1</span>, running_loss/<span class="number">2000</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished Training&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[1, 2000] loss: 2.239</p>
<p>[1, 4000] loss: 4.129</p>
<p>[1, 6000] loss: 5.800</p>
<p>[1, 8000] loss: 7.396</p>
<p>[1, 10000] loss: 8.933</p>
<p>[1, 12000] loss: 10.440</p>
<p>[2, 2000] loss: 1.436</p>
<p>[2, 4000] loss: 2.850</p>
<p>[2, 6000] loss: 4.255</p>
<p>[2, 8000] loss: 5.605</p>
<p>[2, 10000] loss: 6.959</p>
<p>[2, 12000] loss: 8.272</p>
<p>Finished Training</p>
</blockquote>
<h3 id="保存模型">保存模型</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PATH = <span class="string">&#x27;./cifar_net.pth&#x27;</span></span><br><span class="line"><span class="comment"># 保存模型的状态字典</span></span><br><span class="line">torch.save(net.state_dict(), PATH)</span><br></pre></td></tr></table></figure>
<h3 id="在测试集上测试模型">在测试集上测试模型</h3>
<h4 id="展示测试集若干图片">展示测试集若干图片</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataiter = <span class="built_in">iter</span>(testloader)</span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"><span class="comment"># 打印原始图片</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="comment"># 打印真实标签</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;GroundTruth: &quot;</span>, <span class="string">&quot; &quot;</span>.join(<span class="string">&quot;%5s&quot;</span>%classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211004161345682.png" /></p>
</blockquote>
<h4 id="加载模型并对测试图片进行预测">加载模型并对测试图片进行预测</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例化模型的类对象</span></span><br><span class="line">net = Net()</span><br><span class="line"><span class="comment"># 加载保存的模型字典</span></span><br><span class="line">net.load_state_dict(torch.load(PATH))</span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">outputs = net(images)</span><br><span class="line"><span class="comment"># 共有10个类别，采用模型计算出的概率最大的作为预测类别</span></span><br><span class="line">_, predicted = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Predicted:&quot;</span>, <span class="string">&quot; &quot;</span>.join(<span class="string">&quot;%5s&quot;</span>%classes[predicted[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Predicted: cat automobile automobile airplane</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">correct = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">  <span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">    images, labels = data</span><br><span class="line">    outputs = net(images)</span><br><span class="line">    _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">    total += labels.size(<span class="number">0</span>)</span><br><span class="line">    correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy of the network on the 10000 test images: %d %%&quot;</span> % (<span class="number">100</span> * correct/total))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Accuracy of the network on the 10000 test images: 52 %</p>
</blockquote>
<h4 id="分析结果">分析结果</h4>
<p>对于拥有10个类别的数据集，随机猜测的准确率是10%，模型达到了52%，说明模型学到了真实的东西</p>
<h4 id="对各个类别上预测的准确率进行计算">对各个类别上预测的准确率进行计算</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_correct = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">class_total = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">  <span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">    images, labels = data</span><br><span class="line">    outputs = net(images)</span><br><span class="line">    _, predicted = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line">    c = (predicted == labels).squeeze()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">      label = labels[i]</span><br><span class="line">      class_correct[label] += c[i].item()</span><br><span class="line">      class_total[label] += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Accuracy of %5s: %2d %%&quot;</span> % (classes[i], <span class="number">100</span>*class_correct[i] / class_total[i]))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Accuracy of airplane: 60 %</p>
<p>Accuracy of automobile: 85 %</p>
<p>Accuracy of bird: 47 %</p>
<p>Accuracy of cat: 24 %</p>
<p>Accuracy of deer: 58 %</p>
<p>Accuracy of dog: 38 %</p>
<p>Accuracy of frog: 59 %</p>
<p>Accuracy of horse: 51 %</p>
<p>Accuracy of ship: 53 %</p>
<p>Accuracy of truck: 45 %</p>
</blockquote>
<h3 id="在gpu上训练模型">在GPU上训练模型</h3>
<ul>
<li>为了真正利用Pytorch中Tensor的优秀属性，加速模型的训练，我们可以将训练过程转移到GPU上进行</li>
</ul>
<h4 id="定义设备如果cuda可用则定义成gpu否则为cpu">定义设备，如果CUDA可用，则定义成GPU，否则为CPU</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>cuda:0</p>
</blockquote>
<h4 id="当训练模型时只需要将模型转移到gpu上同时将输入的图片和标签转移到gpu上即可">当训练模型时，只需要将模型转移到GPU上，同时将输入的图片和标签转移到GPU上即可</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.to(device)</span><br><span class="line">inputs, labels = data[<span class="number">0</span>].to(device), data[<span class="number">1</span>].to(device)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pytorch</category>
      </categories>
      <tags>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch基础</title>
    <url>/2021/10/04/Pytorch%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="pytorch-基本语法">Pytorch-基本语法</h1>
<h2 id="导入">导入</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加上后，即使是python2也能使用print()而不是 print xxx</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function </span><br><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure>
<h2 id="基本元素操作">基本元素操作</h2>
<h3 id="创建矩阵">创建矩阵</h3>
<h3 id="创建空矩阵">创建空矩阵</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[-1.1210e-14, 3.0767e-41, 3.3631e-44],</p>
<p>​ [ 0.0000e+00, nan, 6.4460e-44],</p>
<p>​ [ 1.1578e+27, 1.1362e+30, 7.1547e+22],</p>
<p>​ [ 4.5828e+30, 1.2121e+04, 7.1846e+22],</p>
<p>​ [ 9.2198e-39, 7.0374e+22, 0.0000e+00]])</p>
</blockquote>
<h3 id="创建一个随机初始化的矩阵">创建一个随机初始化的矩阵</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[0.0465, 0.3854, 0.8354],</p>
<p>​ [0.5556, 0.2372, 0.0594],</p>
<p>​ [0.5800, 0.0649, 0.2107],</p>
<p>​ [0.1946, 0.7404, 0.8338],</p>
<p>​ [0.2988, 0.4238, 0.3945]])</p>
</blockquote>
<h3 id="创建一个全零矩阵并指定数据元素的类型为long">创建一个全零矩阵，并指定数据元素的类型为long</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.zeros(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.long)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[0, 0, 0],</p>
<p>​ [0, 0, 0],</p>
<p>​ [0, 0, 0],</p>
<p>​ [0, 0, 0],</p>
<p>​ [0, 0, 0]])</p>
</blockquote>
<h3 id="直接通过数据创建张量">直接通过数据创建张量</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">2.5</span>, <span class="number">3.5</span>])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([2.5000, 3.5000])</p>
</blockquote>
<h3 id="通过一个已有的张量创建相同尺寸的新张量">通过一个已有的张量创建相同尺寸的新张量</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = x.new_ones(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.double)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">y = torch.randn_like(x, dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[1., 1., 1.],</p>
<p>​ [1., 1., 1.],</p>
<p>​ [1., 1., 1.],</p>
<p>​ [1., 1., 1.],</p>
<p>​ [1., 1., 1.]], dtype=torch.float64)</p>
<p>tensor([[-0.0495, -1.1731, 0.3187],</p>
<p>​ [ 0.9321, -0.5554, -1.7926],</p>
<p>​ [ 0.0627, 1.7919, 1.4413],</p>
<p>​ [-0.8785, -0.9865, -1.0847],</p>
<p>​ [-0.8606, -1.4447, -1.7759]])</p>
</blockquote>
<h3 id="得到张量尺寸">得到张量尺寸</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.size())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>torch.Size([5, 3])</p>
</blockquote>
<h2 id="pytorch-基本运算操作">Pytorch-基本运算操作</h2>
<h3 id="加法操作">加法操作</h3>
<p>第一种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = x.new_ones(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x+y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[1.7637, 1.4502, 1.5603],</p>
<p>​ [1.9027, 1.6812, 1.0642],</p>
<p>​ [1.1892, 1.8056, 1.2032],</p>
<p>​ [1.7226, 1.7720, 1.8164],</p>
<p>​ [1.9689, 1.1140, 1.1994]], dtype=torch.float64)</p>
</blockquote>
<p>第二种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.add(x, y)</span><br></pre></td></tr></table></figure>
<p>第三种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">torch.add(x, y, out=result)</span><br></pre></td></tr></table></figure>
<p>第四种(原地置换)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y.add_(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>
<p>对于减法(sub)、乘法(mul)、除法(div)等也是类似</p>
<h3 id="用类似于numpy的方式对张量进行操作">用类似于Numpy的方式对张量进行操作</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x[:, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([1., 1., 1., 1., 1.], dtype=torch.float64)</p>
</blockquote>
<h3 id="改变张量的形状">改变张量的形状</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">y = x.view(<span class="number">16</span>)</span><br><span class="line">z = x.view(-<span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(x.size(), y.size(), z.size())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>torch.Size([4, 4]) torch.Size([16]) torch.Size([2, 8])</p>
</blockquote>
<h3 id="如果张量中只有一个元素可以用.item将值取出">如果张量中只有一个元素，可以用.item()将值取出</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(x.item())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([-0.8954]) -0.8954272270202637</p>
</blockquote>
<h2 id="torch-tensor-和-numpy-array之间的相互转换">Torch Tensor 和 Numpy array之间的相互转换</h2>
<h3 id="torch-tensor和numpy-array共享底层的内存空间因此改变其中一个值另一个也会随之被改变">Torch Tensor和Numpy array共享底层的内存空间，因此改变其中一个值，另一个也会随之被改变</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.ones(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([1., 1., 1., 1., 1.])</p>
</blockquote>
<h3 id="将torch-tensor转换为numpy-array">将Torch Tensor转换为Numpy array</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = a.numpy()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[1. 1. 1. 1. 1.]</p>
</blockquote>
<h3 id="对其中一个进行加法操作另一个也会改变">对其中一个进行加法操作，另一个也会改变</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.add_(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([2., 2., 2., 2., 2.])</p>
<p>[2. 2. 2. 2. 2.]</p>
</blockquote>
<h3 id="将numpy-array-转换为torch-tensor">将Numpy array 转换为Torch Tensor</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line">np.add(a, <span class="number">1</span>, out=a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[2. 2. 2. 2. 2.]</p>
<p>tensor([2., 2., 2., 2., 2.], dtype=torch.float64)</p>
</blockquote>
<h3 id="cuda-tensortensors可以用.to将其移动到任意设备上">Cuda Tensor：Tensors可以用.to()将其移动到任意设备上</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果有GPU和CUDA</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">  <span class="comment">#　定义一个设备对象，这里指定成CUDA，即使用GPU</span></span><br><span class="line">  device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">  <span class="comment"># 直接在GPU上创建一个Tensor</span></span><br><span class="line">  y = torch.ones_like(x, device=device)</span><br><span class="line">  <span class="comment"># 将在CPU上的张量移动到GPU</span></span><br><span class="line">  x = x.to(device)</span><br><span class="line">  <span class="comment"># x和y都在GPU上，才能支持加法运算</span></span><br><span class="line">  z = x + y</span><br><span class="line">  <span class="built_in">print</span>(z)</span><br><span class="line">  <span class="comment"># 也可以将z移动到CPU上</span></span><br><span class="line">  <span class="built_in">print</span>(z.to(<span class="string">&quot;cpu&quot;</span>, torch.double))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([0.8778], device='cuda:0')</p>
<p>tensor([0.8778], dtype=torch.float64)</p>
</blockquote>
]]></content>
      <categories>
        <category>Pytorch</category>
      </categories>
      <tags>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>RNN架构解析</title>
    <url>/2021/10/10/RNN%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="rnn架构解析">RNN架构解析</h1>
<h2 id="认识rnn模型">认识RNN模型</h2>
<h3 id="什么是rnn模型">什么是RNN模型</h3>
<ul>
<li>RNN(Recurrent Neural Network)，中文称为循环神经网络，它一般以序列数据为输入，通过网络内部的结构设计有效捕捉序列之间的关系特征，一般也是以序列形式进行输出。</li>
</ul>
<h3 id="一般单层神经网络结构">一般单层神经网络结构</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211008145848096.png" /></p>
<h3 id="rnn单层网络结构">RNN单层网络结构</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN2.gif" /></p>
<h3 id="以时间步对rnn进行展开后的单层网络结构">以时间步对RNN进行展开后的单层网络结构</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN1.gif" /></p>
<ul>
<li>RNN的循环机制使模型隐层上一时间步产生的结果，能够作为当下时间步输入的一部分(当下时间步的输入除了正常的输入外还包括上一步的隐层输出)对当下时间步的输出产生影响</li>
</ul>
<h3 id="rnn模型的作用">RNN模型的作用</h3>
<ul>
<li><p>因为RNN结构能够很好利用序列之间的关系，因此针对自然界具有连续性的输入序列，如人类的语言、语音等进行很好的处理，广泛应用于NLP领域的各项任务，如文本分类、情感分析、意图识别、机器翻译等。</p></li>
<li><p>用户意图识别的例子：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN3.gif" /></p>
<ol type="1">
<li><p>用户输入了"What time is it?"，首先需要对它进行基本的分词，因为RNN是按照顺序工作的，每次只接收一个单词进行处理</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN6.gif" /></p></li>
<li><p>首先将单词"What"输送给RNN，它将产生一个输出O1</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN4.gif" /></p></li>
<li><p>继续将单词"time"输送给RNN，但此时RNN不仅利用"time"来产生输出O2，还会使用来自上一层输出O1作为输入信息</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN7.gif" /></p></li>
<li><p>重复这样的步骤，直到处理完所有的单词</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN8.gif" /></p></li>
<li><p>最后，将最终的隐层输出O5进行处理来解析用户意图</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN9.gif" /></p></li>
</ol></li>
</ul>
<h3 id="rnn模型分类">RNN模型分类</h3>
<ul>
<li>从两个角度对RNN模型进行分类。第一个角度是输入和输出的结构，第二个角度是RNN的内部构造</li>
</ul>
<h4 id="按照输入和输出的结构进行分类">按照输入和输出的结构进行分类</h4>
<ul>
<li>N vs N - RNN</li>
<li>N vs 1 - RNN</li>
<li>1 vs N - RNN</li>
<li>N vs M - RNN</li>
</ul>
<h4 id="按照rnn的内部构造进行分类">按照RNN的内部构造进行分类</h4>
<ul>
<li>传统RNN</li>
<li>LSTM</li>
<li>Bi-LSTM</li>
<li>GRU</li>
<li>Bi-GRU</li>
</ul>
<h4 id="n-vs-n---rnn">N vs N - RNN</h4>
<ul>
<li><p>它是RNN最基础的结构形式，最大的特点就是：输入和输出序列是等长的，由于这个限制的存在，使其适用范围比较小，可用于生成等长度的合辙诗句</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211008153208015.png" /></p></li>
</ul>
<h4 id="n-vs-1---rnn">N vs 1 - RNN</h4>
<ul>
<li><p>有时候要处理的问题输入是一个序列，而要求输出是一个单独的值而不是序列，应该如何建模呢？只需要在最后一个隐层输出h上进行线性变换就可以了，大部分情况下，为了更好的明确结果，还要使用sigmoid或softmax进行处理。这种结构经常被应用在文本分类问题上</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211008153444256.png" /></p></li>
</ul>
<h4 id="vs-n---rnn">1 vs N - RNN</h4>
<ul>
<li><p>如果输入序列而输出为序列的情况如何处理？最常用的一种方式就是使用该输入作用于每次输出之上。这种结构可用于将图片生成文字任务等</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211008153722486.png" /></p></li>
</ul>
<h4 id="n-vs-m---rnn">N vs M - RNN</h4>
<ul>
<li><p>这是一种不限输入输出长度的RNN结构，它由编码器和解码器两部分组成，两者的内部结构都是某类RNN，它也被称为seq2seq架构，输入数据首先通过解码器，最终输出一个隐含变量c，之后最常用的做法是使用这个隐含变量c作用在解码器进行解码的每一步上，以保证输入信息被有效利用</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211008154041164.png" /></p></li>
<li><p>seq2seq架构最早被提出应用于机器翻译，因为其输入输出不受限制，如今也是应用最广的RNN模型结构。在机器翻译、阅读理解、文本摘要等众多领域都进行了非常多的应用实践</p></li>
</ul>
<h2 id="传统rnn模型">传统RNN模型</h2>
<h3 id="传统rnn的内部结构图">传统RNN的内部结构图</h3>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211008161259005.png" /></p>
<p>结构解释：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211008161535216.png" /></p>
<blockquote>
<p>内部结构分析：</p>
<ul>
<li><p>将目光集中在中间的方块部分，它的输入有两部分，分别是h(t-1)以及x(t)，代表上一时间步的隐层输出，以及此时间步的输入，它们进入RNN结构体后，会”融合”到一起，这种融合我们根据结构解释可知，是将二者进行拼接，形成新的张量[x(t), h(t-1)]，之后这个新的张量将通过一个全连接层(线性层)，该层使用tanh作为激活函数，最终得到该时间步的输出h(t)，它将作为下一个时间步的输入和x(t+1)一起进入结构体，以此类推。</p></li>
<li><p>内部结构过程演示：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN21.gif" /></p></li>
<li><p>根据结构分析得出内部计算公式：</p>
<p><span class="math inline">\(h_t = tanh(W_t[X_t, h_{t-1}]+b_t)\)</span></p></li>
<li><p>激活函数tanh的作用：</p>
<ul>
<li><p>用于帮助调节流神经网络的值，tanh函数将值压缩在-1和1之间</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/RNN22.gif" /></p></li>
</ul></li>
</ul>
</blockquote>
<h3 id="pytorch-中传统rnn工具的使用">Pytorch 中传统RNN工具的使用</h3>
<ul>
<li>位置：在torch.nn工具包中，通过torch.nn.RNN可调用</li>
</ul>
<h4 id="nn.rnn类初始化主要参数">nn.RNN类初始化主要参数</h4>
<ul>
<li>input_size：输入张量x中特征维度的大小</li>
<li>hidden_size：隐层张量h中的特征维度的大小</li>
<li>num_layers：隐含层的数量</li>
<li>nonlinearity：激活函数的选择，默认是tanh</li>
</ul>
<h4 id="nn.rnn类实例化对象主要参数解释">nn.RNN类实例化对象主要参数解释</h4>
<ul>
<li>input：输入张量x</li>
<li>h0：初始化的隐层张量h</li>
</ul>
<h4 id="nn.rnn使用示例">nn.RNN使用示例</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="comment"># 5:输入维度; 6:隐层神经元个数; 1:隐层数量</span></span><br><span class="line">rnn = nn.RNN(<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 1:序列长度; 3:批次数量; 5:输入维度</span></span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 1:隐层数量; 3:批次数量; 6:隐层神经元个数</span></span><br><span class="line">h0 = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">output, hn = rnn(<span class="built_in">input</span>, h0)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="built_in">print</span>(hn)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[[ 0.9708, -0.7598, 0.3379, -0.3241, -0.6467, -0.9129],</p>
<p>[ 0.5139, -0.6625, -0.0972, -0.3982, -0.1671, -0.1925],</p>
<p>[ 0.4847, -0.3489, 0.7641, 0.8466, 0.7624, 0.8629]]], grad_fn=<StackBackward>)</p>
<p>tensor([[[ 0.9708, -0.7598, 0.3379, -0.3241, -0.6467, -0.9129],</p>
<p>[0.5139, -0.6625, -0.0972, -0.3982, -0.1671, -0.1925],</p>
<p>[ 0.4847, -0.3489, 0.7641, 0.8466, 0.7624, 0.8629]]], grad_fn=<StackBackward>)</p>
</blockquote>
<h3 id="传统rnn的优势">传统RNN的优势</h3>
<ul>
<li>由于内部结构简单，对计算资源要求低，相比之后要学习的RNN变体：LSTM和GRU模型参数总量少了很多，在短序列任务上性能和效果都表现优异</li>
</ul>
<h3 id="传统rnn的缺点">传统RNN的缺点</h3>
<ul>
<li>传统RNN在解决长序列之间的关联时，通过实践，证明经典RNN表现很差，原因是在进行反向传播时，过长的序列导致梯度的计算异常，发生梯度消失或爆炸</li>
</ul>
<h3 id="什么是梯度消失或爆炸">什么是梯度消失或爆炸？</h3>
<ul>
<li><p>根据反向传播算法和链式法则，梯度的计算可以简化为：</p>
<p><span class="math inline">\(D_n = \sigma&#39;(z_1)w_1 \cdot \sigma&#39;(z_2)w_2\cdots \sigma&#39;(z_n)w_n\)</span></p></li>
<li><p>其中<span class="math inline">\(\sigma\)</span>的导数值域是固定的，在[0, 0.25]之间，而一旦公式中的<span class="math inline">\(w\)</span>也小于1，则通过这样的公式连乘后，最终的梯度就会变得非常小，这种现象称为<strong>梯度消失</strong>。反之，如果人为的增大w的值，使其大于1，则连乘就可能造成梯度过大，称为<strong>梯度爆炸</strong></p></li>
</ul>
<h3 id="梯度消失或爆炸的危害">梯度消失或爆炸的危害</h3>
<ul>
<li>如果在训练过程中发生了梯度消失，权重无法更新，最终会导致训练失败；梯度爆炸所带来的梯度过大，则会大幅度更新网络参数，在极端情况下，结果会溢出(NaN值)</li>
</ul>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Scoop 使用教程</title>
    <url>/2021/09/24/Scoop-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="scoop-使用教程">Scoop 使用教程</h1>
<h2 id="前言">前言</h2>
<blockquote>
<p>用过Mac或Linux类系统的朋友们再用Windows系统通常都会很不习惯，其中一个原因就是安装软件、配置环境什么的太麻烦了，而实际上，Windows也是有<code>包管理工具</code>的，比如微软的官方的winget(相对新，但很多软件没有)、还有Chocolate(无法修改软件安装路径)、还有就是本次推荐的scoop</p>
</blockquote>
<h2 id="安装">安装</h2>
<p>在安装前，所有以下命令，如果运行出错的，大概率是由于网络问题，那么就需要挂代理，而代理后，仍然出错，通常就是因为控制台没有代理，这里就需要使用以下命令来代理控制台：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">env:HTTP_PROXY=<span class="string">&quot;http://127.0.0.1:7890&quot;</span>  <span class="comment"># 我这里使用的clash代理，如果是SSR，就要将端口换成1080或者自己设置的端口</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:HTTPS_PROXY=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>也可以像我一样，将这个命令编成快捷方式，后面就可以直接使用proxy来执行这两条命令了：</p>
<p>首先打开配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">notepad $profile</span><br></pre></td></tr></table></figure>
<p>然后复制粘贴以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function proxy &#123;</span><br><span class="line"><span class="meta">	$</span><span class="bash">env:HTTP_PROXY=<span class="string">&quot;http://127.0.0.1:7890&quot;</span> <span class="comment"># 我这里使用的clash代理，如果是SSR，就要将端口换成1080或者自己设置的端口</span></span></span><br><span class="line"><span class="meta">	$</span><span class="bash">env:HTTPS_PROXY=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210924195911641.png" /></p>
<p>正式安装scoop：打开PowerShell，运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置scoop的安装位置为D:\Scoop，可以自行更改</span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:SCOOP=<span class="string">&#x27;D:\Scoop&#x27;</span></span></span><br><span class="line">[Environment]::SetEnvironmentVariable(&#x27;SCOOP&#x27;, $env:SCOOP, &#x27;User&#x27;)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置使用scoop安装软件的位置为D:\ScoopApps，可以自行更改</span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:SCOOP_GLOBAL=<span class="string">&#x27;D:\ScoopApps&#x27;</span></span></span><br><span class="line">[Environment]::SetEnvironmentVariable(&#x27;SCOOP_GLOBAL&#x27;, $env:SCOOP_GLOBAL, &#x27;Machine&#x27;)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装scoop</span></span><br><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&#x27;https://get.scoop.sh&#x27;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iwr -useb get.scoop.sh | iex</span></span><br></pre></td></tr></table></figure>
<p>安装安scoop后，进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop --help</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210924193653018.png" /></p>
<h2 id="使用scoop-添加bucket">使用scoop-添加bucket</h2>
<blockquote>
<p>scoop是有很多桶(bucket，类似于软件库)的，它的官方bucket只包含一些命令行类型的工具，而没有那些带有界面GUI的工具，因此，有一些开源自制bucket，包含各种工具，我们可以将这些bucket添加进去</p>
</blockquote>
<p>添加bucket的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop bucket add bucketname</span><br></pre></td></tr></table></figure>
<p>常用的bucket:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">main         # 默认的bucket，大多数常用软件 </span><br><span class="line">extras		 # 一些不符合main规则的常用软件</span><br><span class="line">versions	 # 一些软件的旧版本，比如mysql5.6</span><br><span class="line">nirsoft		 # 比较老的nirsoft(类似于软件合集)中的app</span><br><span class="line">php 		 # php相关</span><br><span class="line">nerd-fonts	 # 字体应用(可能需要UAC(用户账户控制))</span><br><span class="line">nonportable	 # 非便携式</span><br><span class="line">java		 # java JDK</span><br><span class="line">games		 # 开源/免费 游戏和游戏相关工具</span><br><span class="line">jetbrains	 # jetbrains公司的所有软件</span><br></pre></td></tr></table></figure>
<p>对于一些非官方bucket，需要使用以下命令添加:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop bucket add dorado https://github.com/chawyehsu/dorado	# dorado是中国常用软件集合，包括微信，QQ，钉钉等</span><br></pre></td></tr></table></figure>
<h2 id="使用scoop-安装aria2并配置">使用scoop-安装aria2并配置</h2>
<p>scoop 可以使用aria2来加速软件下载，方法如下：</p>
<p>首先安装aria2：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop install aria2</span><br></pre></td></tr></table></figure>
<p>然后进行常用配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop config aria2-max-connection-per-server 16 # 设置最大连接数，默认最高线程数就是16</span><br><span class="line">scoop config aria2-split 16	# 设置下载软件的分割数量</span><br><span class="line">scoop config aria2-min-split-size 1M	# 设置最小划分大小</span><br></pre></td></tr></table></figure>
<p>还有一些其它的可选配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aria2-enabled (默认值: true)</span><br><span class="line">aria2-retry-wait (默认值: 2)</span><br><span class="line">aria2-split (默认值: 5)</span><br><span class="line">aria2-max-connection-per-server (默认值: 5)</span><br><span class="line">aria2-min-split-size (默认值: 5M)</span><br></pre></td></tr></table></figure>
<h2 id="使用scoop-安装软件">使用scoop-安装软件</h2>
<p>以常用的Markdown工具typora为例，使用以下命令搜索和安装(proxy命令是我自己配的，不需要输入)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop search typora</span><br><span class="line">scoop install typora</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/20210924193451.png" /></p>
<p>然后就可以从开始菜单打开Typora了</p>
<h2 id="使用scoop-卸载软件">使用scoop-卸载软件</h2>
<p>如果不需要对应的软件了，可以使用如下命令进行卸载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop uninstall typora</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>scoop是Windows平台下的，非常好用的一个包管理工具，只要学会使用，它还是非常强大的，而且它还支持自己配置bucket，自己管理自己常用的软件。这样，再也不用担心安装软件时装到C盘或卸载软件时无法卸载了。</p>
]]></content>
      <categories>
        <category>工具使用教程</category>
      </categories>
      <tags>
        <tag>工具使用教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet-复习</title>
    <url>/2020/02/04/Servlet-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="servlet复习">Servlet复习</h1>
<h2 id="概念">概念</h2>
<p>运行在服务器端的小程序</p>
<ul>
<li>servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则</li>
<li>使用时自定义一个类，实现Servlet接口，复写方法</li>
</ul>
<h2 id="快速入门">快速入门</h2>
<ol type="1">
<li><p>创建JavaEE项目</p></li>
<li><p>定义一个类，实现Servlet接口</p>
<p>public class Test implements Servlet</p></li>
<li><p>实现接口中的抽象方法</p></li>
<li><p>配置Servlet，在web.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zephon.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="servlet执行原理">Servlet执行原理</h2>
<ol type="1">
<li>遍历web.xml中的url-pattern，找到url对应的servlet-name，并以此找到对应的servlet-class</li>
<li>tomcat将servlet-calss中的全类名对应的字节码文件加载进内存(Class.forName())</li>
<li>创建对象，cls.newInstance()</li>
<li>调用方法，service()，即servlet接口对应的service方法</li>
</ol>
<h2 id="servlet-生命周期">Servlet 生命周期</h2>
<ol type="1">
<li><p>被创建：执行init方法，只执行一次</p>
<ul>
<li><p>什么时候被创建？</p>
<ul>
<li><p>默认情况下，第一次被访问时Servlet被创建</p></li>
<li><p>可以配置执行Servlet的创建时机</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--        指定servlet创建时机--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--        第一次被访问时创建(load-on-startup&lt;0)--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--        在服务器启动时创建(load-on-startup&gt;=0)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，说明Servlet是单例的</p>
<ul>
<li>多个用户同时访问时，可能存在线程安全问题</li>
<li>解决：尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要修改值。</li>
</ul></li>
</ul></li>
<li><p>提供服务：执行service方法，可执行多次</p>
<ul>
<li>每次访问Servlet时，service方法都会被调用一次</li>
</ul></li>
<li><p>被销毁：执行destroy方法，只执行一次</p>
<ul>
<li>Servlet被销毁时执行，服务器关闭时，Servlet被销毁</li>
<li>只有服务器正常关闭时，才会执行destroy方法</li>
<li>在servlet被销毁之前执行，一般用于释放资源</li>
</ul></li>
</ol>
<h2 id="servlet3.0">Servlet3.0</h2>
<ul>
<li>好处：
<ul>
<li>支持注解配置。可以不需要web.xml</li>
</ul></li>
<li>步骤
<ol type="1">
<li>创建JavaEE项目，选择Servlet3.0以上版本，可不创建Web.xml</li>
<li>定义一个类，实现Servlet接口</li>
<li>复写方法</li>
<li>在类上使用@WebServlet注解进行配置</li>
<li><span class="citation" data-cites="WebServlet">@WebServlet</span>("资源路径")</li>
</ol></li>
</ul>
<h2 id="servlet体系结构">Servlet体系结构</h2>
<ul>
<li>Servlet接口对应的两个抽象类
<ul>
<li>GenericServlet：将servlet接口中的其它方法做了默认空实现，只将service方法作为抽象方法，再定义servlet类时可继承GenericServlet，实现service方法即可</li>
<li>HttpServlet：对Http协议的一种封装，简化操作
<ul>
<li>定义类继承HttpServlet</li>
<li>复写doGet/doPost方法</li>
</ul></li>
</ul></li>
</ul>
<h2 id="servlet-相关配置">Servlet 相关配置</h2>
<ul>
<li>url-patten：Servlet访问路径
<ol type="1">
<li>一个Servlet可定义多个访问路径：<span class="citation" data-cites="WebServlet">@WebServlet</span>({"/a","/aa",})</li>
<li>路径定义规则
<ol type="1">
<li>/xxx：路径匹配</li>
<li>/xxx/xxx：多层路径，目录结构</li>
<li>*.do：扩展名匹配(注意：没有/)</li>
</ol></li>
</ol></li>
</ul>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-入门</title>
    <url>/2020/02/16/Spring%20Boot-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="spring-boot-入门">Spring Boot-入门</h1>
<h2 id="spring-boot简介">Spring Boot简介</h2>
<ul>
<li><p>简化Spring应用开发的一个框架</p></li>
<li><p>整个Spring技术栈的一个大整合</p></li>
<li><p>J2EE开发的一站式解决方案</p></li>
</ul>
<h2 id="微服务">微服务</h2>
<p>2014年，martin fowler在博客中提出</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可通过HTTP的方式进行互通</p>
<p>每一个功能元素最终都是一个可独立替换和独立升级的软件单元</p>
<h2 id="spring-boot-helloworld">Spring Boot HelloWorld</h2>
<p>一个功能：</p>
<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串</p>
<ol type="1">
<li><p>创建一个maven工程</p></li>
<li><p>导入spring boot相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个主程序，启动Spring Boot应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordMainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Spring 应用启动</span></span><br><span class="line">        SpringApplication.run(HelloWordMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写相关Controller、Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行主程序</p></li>
<li><p>简化部署</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    这个插件，可以将应用打包成一个可执行jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>直接使用<code>java -jar</code>命令执行</p></li>
</ol>
<h2 id="hello-world探究">Hello World探究</h2>
<ol type="1">
<li><p>POM文件</p>
<ol type="1">
<li><p>父项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它的父项目是：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用来真正管理Spring Boot应用里面的所有依赖版本--&gt;</span></span><br></pre></td></tr></table></figure>
<p>Spring Boot的版本仲裁中心：</p>
<p>以后导入依赖默认是不需要写版本的(没有在dependencies里面管理的依赖自然需要声明版本)</p></li>
<li><p>导入的启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring-boot-starter-web：</p>
<ul>
<li>spring-boot-starter：spring-boot场景启动器，导入了web模块正常运行所依赖的组件</li>
</ul>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个starters(启动器)，只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。需要什么功能就导入什么场景的启动器</p></li>
</ol></li>
<li><p>主程序类/主入口类</p>
<ul>
<li><p><strong><span class="citation" data-cites="SpringBootApplication">@SpringBootApplication</span></strong>：Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用</p>
<ul>
<li><p><strong><span class="citation" data-cites="SpringBootConfiguration">@SpringBootConfiguration</span></strong>：SpringBoot的配置类，标注在某个类上，表示这是一个SpringBoot的配置类</p>
<ul>
<li><p><strong><span class="citation" data-cites="Configuration">@Configuration</span></strong>：配置类上来标注这个注解</p>
<blockquote>
<p>配置类---配置文件；</p>
<p>配置类也是容器中的一个组件@Component</p>
</blockquote></li>
</ul></li>
<li><p><strong><span class="citation" data-cites="EnableAutoConfiguration">@EnableAutoConfiguration</span></strong>：开启自动配置功能</p>
<blockquote>
<p>需要配置的部分，Spring Boot自动配置，使用@EnableAutoConfiguration才能生效</p>
</blockquote>
<ul>
<li><strong><span class="citation" data-cites="AutoConfigurationPackage">@AutoConfigurationPackage</span></strong>：自动配置包
<ul>
<li><strong><span class="citation" data-cites="Import">@Import</span>({Registrar.class})</strong>：Spring的底层注解@import，给容器中导入一个组件；将主配置类(<span class="citation" data-cites="SpringBootApplication标注的类">@SpringBootApplication标注的类</span>)的所在包及下面所有子包里面的所有组件扫描到Spring容器</li>
</ul></li>
<li><strong><span class="citation" data-cites="Import">@Import</span>({AutoConfigurationImportSelector.class})</strong>：给容器中导入组件
<ul>
<li><strong>AutoConfigurationImportSelector</strong>：导入哪些组件的选择器；将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中；会给容器中导入非常多的自动配置类；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；有了自动配置类，就免去了手动编写配置注入功能组件等工作</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ol>
<h2 id="使用spring-initializer快速创建springboot项目">使用Spring Initializer快速创建SpringBoot项目</h2>
<ol type="1">
<li>选择我们需要的模块，向导会联网创建Spring Boot项目</li>
<li>默认生成的Spring Boot项目
<ul>
<li>主程序已经生成好了，我们只需要编写我们自己的逻辑代码</li>
<li>resources文件夹目录结构
<ul>
<li>static：保存所有的静态资源：js、css、images</li>
<li>templates：保存所有的模板页面：Spring Boot默认jar包使用嵌入式的tomcat，默认不支持jsp页面，可以使用模板引擎(freemarker、thymeleaf)</li>
<li>application.properties：Spring Boot应用配置文件 ，可以修改一些默认设置</li>
</ul></li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Web开发</title>
    <url>/2020/02/18/SpringBoot-Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="springboot-web开发">SpringBoot-Web开发</h1>
<h2 id="使用springboot">1、使用SpringBoot</h2>
<ol type="1">
<li>创建SpringBoot应用，选中需要的模块</li>
<li>SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行</li>
<li>自己编写业务代码</li>
</ol>
<h2 id="springboot对静态资源的映射规则">2、SpringBoot对静态资源的映射规则</h2>
<ol type="1">
<li><p>所有/webjars/**，都去classpath::/META-INF/resources/webjars/找资源</p>
<p>webjars：以jar包的方式引入静态资源</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        引入jquery-webjar</span></span><br><span class="line"><span class="comment">	在访问时，只需要写webjars下面的资源名称即可</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>"/**"，访问当前项目的任何资源(静态资源文件夹)</p>
<blockquote>
<p>"classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/" "/"：当前项目的根路径</p>
</blockquote>
<p>即：</p>
<blockquote>
<p>src-&gt;main-&gt;resources-&gt;public/resources/static</p>
<p>访问路径：localhost:8080/xxx</p>
</blockquote></li>
<li><p>欢迎页；静态资源文件夹下的所有index.html页面，被"/**"映射</p>
<p>localhost:8080/找到index页面</p></li>
<li><p>所有的**/favicon.ico都是在静态资源文件夹下找</p></li>
</ol>
<h2 id="模板引擎">3、模板引擎</h2>
<p>JSP、Velocity、Freemarker、Thymeleaf</p>
<p>SpringBoot推荐Thymeleaf：语法更简单，功能更强大</p>
<h3 id="thymeleaf使用">Thymeleaf使用</h3>
<ol type="1">
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>只需要把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染</p></li>
<li><p>引入<code>&lt;html xmlns:th="http://www.thymeleaf.org"&gt;</code></p></li>
</ol>
<h3 id="thymeleaf语法">Thymeleaf语法</h3>
<ol type="1">
<li><p>th:text：改变当前元素里面的文本内容</p>
<p>th:任意html属性；来替换原生属性的值</p>
<table>
<colgroup>
<col style="width: 4%" />
<col style="width: 27%" />
<col style="width: 37%" />
<col style="width: 30%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Order</th>
<th style="text-align: left;">Feature</th>
<th style="text-align: left;">Attributes</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: left;">Fragment inclusion</td>
<td style="text-align: left;"><code>th:insert</code> <code>th:replace</code></td>
<td>片断包含：jsp:include</td>
</tr>
<tr class="even">
<td style="text-align: left;">2</td>
<td style="text-align: left;">Fragment iteration</td>
<td style="text-align: left;"><code>th:each</code></td>
<td>遍历:c:forEach</td>
</tr>
<tr class="odd">
<td style="text-align: left;">3</td>
<td style="text-align: left;">Conditional evaluation</td>
<td style="text-align: left;"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td>
<td>条件判断c:if</td>
</tr>
<tr class="even">
<td style="text-align: left;">4</td>
<td style="text-align: left;">Local variable definition</td>
<td style="text-align: left;"><code>th:object</code> <code>th:with</code></td>
<td>声明变量：c:set</td>
</tr>
<tr class="odd">
<td style="text-align: left;">5</td>
<td style="text-align: left;">General attribute modification</td>
<td style="text-align: left;"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td>
<td>任意属性修改，支持前后追加</td>
</tr>
<tr class="even">
<td style="text-align: left;">6</td>
<td style="text-align: left;">Specific attribute modification</td>
<td style="text-align: left;"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td>
<td>修改指定属性默认值</td>
</tr>
<tr class="odd">
<td style="text-align: left;">7</td>
<td style="text-align: left;">Text (tag body modification)</td>
<td style="text-align: left;"><code>th:text</code> <code>th:utext</code></td>
<td>修改标签体内容，utext不转义特殊字符</td>
</tr>
<tr class="even">
<td style="text-align: left;">8</td>
<td style="text-align: left;">Fragment specification</td>
<td style="text-align: left;"><code>th:fragment</code></td>
<td>声明片断</td>
</tr>
<tr class="odd">
<td style="text-align: left;">9</td>
<td style="text-align: left;">Fragment removal</td>
<td style="text-align: left;"><code>th:remove</code></td>
<td>移除片断</td>
</tr>
</tbody>
</table></li>
<li><p>表达式</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions: (表达式语法)</span></span><br><span class="line">    <span class="attr">Variable</span> <span class="string">Expressions: $&#123;...&#125;：获取变量值：OGNL</span></span><br><span class="line">    							<span class="attr">1）、获取对象属性、调用方法</span></span><br><span class="line">    							<span class="attr">2）、使用内置的基本对象</span></span><br><span class="line"><span class="comment">    										#ctx: the context object.</span></span><br><span class="line"><span class="comment">                                            #vars: the context variables.</span></span><br><span class="line"><span class="comment">                                            #locale: the context locale.</span></span><br><span class="line"><span class="comment">                                            #request: (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line"><span class="comment">                                            #response: (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line"><span class="comment">                                            #session: (only in Web Contexts) the HttpSession object.</span></span><br><span class="line"><span class="comment">                                            #servletContext: (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">                               <span class="attr">3）、内置的一些工具对象：</span></span><br><span class="line"><span class="comment">                               #execInfo: information about the template being processed.</span></span><br><span class="line"><span class="comment">                                #messages: methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span></span><br><span class="line"><span class="comment">                                #uris: methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">                                #conversions: methods for executing the configured conversion service (if any).</span></span><br><span class="line"><span class="comment">                                #dates: methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line"><span class="comment">                                #calendars: analogous to #dates, but for java.util.Calendar objects.</span></span><br><span class="line"><span class="comment">                                #numbers: methods for formatting numeric objects.</span></span><br><span class="line"><span class="comment">                                #strings: methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line"><span class="comment">                                #objects: methods for objects in general.</span></span><br><span class="line"><span class="comment">                                #bools: methods for boolean evaluation.</span></span><br><span class="line"><span class="comment">                                #arrays: methods for arrays.</span></span><br><span class="line"><span class="comment">                                #lists: methods for lists.</span></span><br><span class="line"><span class="comment">                                #sets: methods for sets.</span></span><br><span class="line"><span class="comment">                                #maps: methods for maps.</span></span><br><span class="line"><span class="comment">                                #aggregates: methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="comment">                                #ids: methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line">    <span class="attr">Selection</span> <span class="string">Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样的</span></span><br><span class="line">    		<span class="meta">补充：配合th</span>:<span class="string">object=&quot;$&#123;&#125;使用</span></span><br><span class="line">    <span class="attr">Message</span> <span class="string">Expressions: #&#123;...&#125;：获取国际化内容</span></span><br><span class="line">    <span class="attr">Link</span> <span class="string">URL Expressions: @&#123;...&#125;：定义URL</span></span><br><span class="line">    		<span class="meta">@&#123;/order/process(execId</span>=<span class="string">$&#123;execId&#125;;execType=&#x27;FAST&#x27;)&#125;</span></span><br><span class="line">    <span class="attr">Fragment</span> <span class="string">Expressions: ~&#123;...&#125;：片断引用表达式</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">Literals（字面量）</span></span><br><span class="line">    <span class="attr">Text</span> <span class="string">literals: &#x27;one text&#x27;, &#x27;Another one!&#x27;,…</span></span><br><span class="line">    <span class="attr">Number</span> <span class="string">literals: 0, 34, 3.0, 12.3,…</span></span><br><span class="line">    <span class="attr">Boolean</span> <span class="string">literals: true, false</span></span><br><span class="line">    <span class="attr">Null</span> <span class="string">literal: null</span></span><br><span class="line">    <span class="attr">Literal</span> <span class="string">tokens: one, sometext, main,…</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">Text</span> <span class="string">operations:（文本操作）</span></span><br><span class="line">    <span class="attr">String</span> <span class="string">concatenation: +</span></span><br><span class="line">    <span class="attr">Literal</span> <span class="string">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class="line">    </span><br><span class="line"> <span class="attr">Arithmetic</span> <span class="string">operations:（数学运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: +, -, *, /, %</span></span><br><span class="line">    <span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br><span class="line">    </span><br><span class="line"> <span class="attr">Boolean</span> <span class="string">operations:（布尔运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: and, or</span></span><br><span class="line">    <span class="attr">Boolean</span> <span class="string">negation (unary operator): !, not</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">Comparisons</span> <span class="string">and equality:（比较运算）</span></span><br><span class="line">    <span class="attr">Comparators</span>: <span class="string">&gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</span></span><br><span class="line">    <span class="attr">Equality</span> <span class="string">operators: ==, != (eq, ne)</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">Conditional</span> <span class="string">operators:（条件运算）</span></span><br><span class="line">    <span class="meta">If-then</span>: <span class="string">(if) ? (then)</span></span><br><span class="line">    <span class="meta">If-then-else</span>: <span class="string">(if) ? (then) : (else)</span></span><br><span class="line">    <span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br><span class="line"><span class="attr">Special</span> <span class="string">tokens:（特殊）</span></span><br><span class="line">    <span class="meta">No-Operation</span>: <span class="string">_</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="restfulcrud">4、RestfulCRUD</h2>
<ol type="1">
<li><p>默认访问首页</p></li>
<li><p>国际化</p>
<p>步骤：</p>
<ol type="1">
<li><p>编写国际化配置文件，抽取页面需要显示的国际化消息</p></li>
<li><p>SpringBoot自动配置好了管理国际化资源文件的组件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#&#123;login.username&#125;</span><br></pre></td></tr></table></figure>
<p>效果：根据浏览器语言设置的信息切换国际化</p>
<p>原理：国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）,默认就是根据请求头带来的区域信息获取Locale进行国际化</p></li>
<li><p>点击链接切换国际化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        String l = httpServletRequest.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] s = l.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(s[<span class="number">0</span>], s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>登录</p>
<p>开发期间模板引擎页面修改后要实时生效</p>
<ul>
<li><p>禁用模板引擎的缓存</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure></li>
<li><p>页面修改后，ctrl+f9，重新编译</p></li>
<li><p>登录错误消息的显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>拦截器进行登录检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/webjars/**&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>CRUD-员工列表</p>
<ol type="1">
<li><p>RestfulCRUD：CRUD满足Rest风格</p>
<p>URI：/资源名称/资源标识 HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>普通CRUD(uri来区分操作)</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>查询</td>
<td>getEmp</td>
<td>emp---GET</td>
</tr>
<tr class="even">
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp---POST</td>
</tr>
<tr class="odd">
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}---PUT</td>
</tr>
<tr class="even">
<td>删除</td>
<td>deleteEmp?id=xx</td>
<td>emp/{id}---DELETE</td>
</tr>
</tbody>
</table></li>
<li><p>请求架构</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr class="even">
<td>查询某个员工</td>
<td>emp/{id}</td>
<td>GET</td>
</tr>
<tr class="odd">
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr class="even">
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr class="odd">
<td>来到修改页面(查出员工进行信息回显)</td>
<td>emp/{id}</td>
<td>GET</td>
</tr>
<tr class="even">
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr class="odd">
<td>删除员工</td>
<td>emp/{id}</td>
<td>DELETE</td>
</tr>
</tbody>
</table></li>
<li><p>员工列表</p>
<ul>
<li><p>thymeleaf公共页面元素抽取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、抽取公共片断--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2、引入公共片断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~footer::copy&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125;：模板名：选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;：模板名：片断名</span><br><span class="line"></span><br><span class="line">默认效果：</span><br><span class="line">insert的公共片段在div标签中</span><br><span class="line">如果使用th:insert等属性进行引入，可以不定~&#123;&#125;</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]</span><br></pre></td></tr></table></figure>
<p>三种引入公共片断的th属性：</p>
<blockquote>
<p>th:insert：将公共片断整个插入到声明引入的元素</p>
<p>th:replace：将声明引入的元素替换为公共片断</p>
<p>th:include：将被引入的片断的内容包含进这个标签中</p>
</blockquote>
<p>引入片断的时候传入参数：</p></li>
</ul></li>
<li></li>
</ol></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-任务</title>
    <url>/2020/02/22/SpringBoot-%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="springboot-任务">SpringBoot-任务</h1>
<h2 id="异步任务">1、异步任务</h2>
<ol type="1">
<li><p>在Application上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableAsync</span>：开启异步注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br></pre></td></tr></table></figure></li>
<li><p>异步处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 告诉Spring这是一个异步的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理数据中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="定时任务">2、定时任务</h2>
<ol type="1">
<li><p>在Application上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableScheduling</span>：开启定时任务注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br></pre></td></tr></table></figure></li>
<li><p>定时任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduredService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cron</span></span><br><span class="line"><span class="comment">     * 秒,分,时,日,月,周</span></span><br><span class="line"><span class="comment">     * 0 * * * * MON-FRI(从周一到周五任意时刻整秒启动)</span></span><br><span class="line"><span class="comment">     * [0 0/5 14,18 * * ?]每天14点整和18点整，每隔5分钟执行一次</span></span><br><span class="line"><span class="comment">     * [0 15 10 ? * 1-6]每个月的周一至周六10：15分执行一次</span></span><br><span class="line"><span class="comment">     * [0 0 2 ? * 6L]每个月的最后一个周六凌晨2点执行一次</span></span><br><span class="line"><span class="comment">     * [0 0 2 LW * ?]每个月的最后一个工作日凌晨2点执行一次</span></span><br><span class="line"><span class="comment">     * [0 0 2-4 ? * 1#1]每个月的第一个周一凌晨2点到4点期间，每个整点执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0 * * * * MON-SAT&quot;)</span></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0,1,2,3,4 * * * * MON-SAT&quot;)</span></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0-4 * * * * MON-SAT&quot;)</span></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0/4 * * * * MON-SAT&quot;) // 每4秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * MON-SAT&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cron表达式：</p>
<table>
<thead>
<tr class="header">
<th>字段</th>
<th>允许值</th>
<th>--</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>秒</td>
<td>0-59</td>
<td>,-*/</td>
</tr>
<tr class="even">
<td>分</td>
<td>0-59</td>
<td>,-*/</td>
</tr>
<tr class="odd">
<td>小时</td>
<td>0-23</td>
<td>,-*/</td>
</tr>
<tr class="even">
<td>日期</td>
<td>1-31</td>
<td>,-*?/LWC</td>
</tr>
<tr class="odd">
<td>月份</td>
<td>1-12</td>
<td>,-*/</td>
</tr>
<tr class="even">
<td>星期</td>
<td>0-7或SUN-SAT 0,7是SUN</td>
<td>,-*?/LC#</td>
</tr>
</tbody>
</table>
<blockquote>
<p>,：枚举</p>
<p>-：区间</p>
<p>*：任意</p>
<p>/：步长</p>
<p>?：日/星期冲突匹配</p>
<p>L：最后</p>
<p>W：工作日</p>
<p>C：和calendar联系后计算过的值</p>
<p>#：星期，4#2,第2个星期四</p>
</blockquote></li>
</ol>
<h2 id="邮件任务">3、邮件任务</h2>
<ol type="1">
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">email@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">?????????</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot04TaskApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl mailSender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setSubject(<span class="string">&quot;主题&quot;</span>);</span><br><span class="line">        message.setText(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line"><span class="comment">//        message.setTo(&quot;目标@qq.com&quot;);</span></span><br><span class="line"><span class="comment">//        message.setFrom(&quot;来源@qq.com&quot;);</span></span><br><span class="line">        message.setTo(<span class="string">&quot;qq1528498238@gmail.com&quot;</span>);</span><br><span class="line">        message.setFrom(<span class="string">&quot;1528498238@qq.com&quot;</span>);</span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test0</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个复杂的消息邮件</span></span><br><span class="line">        MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage,<span class="keyword">true</span>);</span><br><span class="line">        mimeMessageHelper.setSubject(<span class="string">&quot;主题&quot;</span>);</span><br><span class="line">        mimeMessageHelper.setText(<span class="string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;红色&lt;/b&gt;&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 上传文件</span></span><br><span class="line">        mimeMessageHelper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;/home/zephon/Pictures/1.jpg&quot;</span>));</span><br><span class="line">        mimeMessageHelper.setTo(<span class="string">&quot;qq1528498238@gmail.com&quot;</span>);</span><br><span class="line">        mimeMessageHelper.setFrom(<span class="string">&quot;1528498238@qq.com&quot;</span>);</span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-数据访问</title>
    <url>/2020/02/20/SpringBoot-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="springboot-数据访问">SpringBoot-数据访问</h1>
<h2 id="jdbc">1、JDBC</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/jdbc</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<h2 id="druid">2、Druid</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yml</p>
<p>其它配置见<a href="https://github.com/drtrang/druid-spring-boot">Druid</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/jdbc</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure>
<h2 id="mybatis">3、MyBatis</h2>
<p>步骤：</p>
<ol type="1">
<li>配置数据源相关属性</li>
<li>给数据库建表</li>
<li>创建JavaBean</li>
</ol>
<h3 id="注解版">注解版</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>作用：指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回影响多少行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当添加操作需要返回自增主键时可以使用<span class="doctag">@Options</span>注释。</span></span><br><span class="line"><span class="comment">     * 添加属性useGeneratedKeys = true和keyProperty = &quot;id&quot;即可在数据添加后获取添加数据的ID值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(username) values(#&#123;username&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启驼峰命名匹配规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">	<span class="attr">configuration:</span></span><br><span class="line">		<span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>可在Application上使用@MapperScan(value="com.zephon.mapper")进行批量扫描，避免写太多的@Mapper</p>
<h3 id="配置文件版">配置文件版</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment"># 指定全局配置文件的位置</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line"><span class="comment"># 指定SQL映射文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 驼峰命名法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserMapper --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zephon.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zephon.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into user(username) values(#&#123;username&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="springdata-jpa">4、SpringData JPA</h2>
<h3 id="特点">特点</h3>
<p>SpringData为我们提供使用统一的API来对数据访问层进行操作，这主要是Spring Data Commons项目来实现的。Spring Data Commons让我们在使用关系型或者非关系型数据访问技术时基于Spring提供的统一标准，标准包含了CRUD、查询、排序和分页的相关操作</p>
<h3 id="步骤">步骤</h3>
<ol type="1">
<li><p>编写一个实体类(bean)和数据表进行映射，并且配置好映射关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用JPA注解配置映射关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span>：告诉JPA这是一个实体类(和数据表映射的类)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Table</span>(name=&quot;tbl_user&quot;)：指定和哪个数据表对应，</span></span><br><span class="line"><span class="comment"> * 如果省略默认表名是类名首字母小写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;tbl_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Id</span>：标明主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)：自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@Column</span>表明这是与表中某列对应</span></span><br><span class="line"><span class="comment">     * name注明表中对应列名，默认是属性名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name=&quot;user_name&quot;,length = 50)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写一个Dao接口来操作实体类对应的数据表(Repository)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="comment"> * 泛型中，分别是实体类和实体类对应的主键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>基本的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="comment"># jpa 配置</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment"># 更新或创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment"># 控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>在Controller中直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">        User user = userRepository.findById(id).get();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insetUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        User save = userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-日志</title>
    <url>/2020/02/19/SpringBoot-%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="springboot-日志">SpringBoot-日志</h1>
<h2 id="市面上的日志框架">市面上的日志框架</h2>
<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j...</p>
<table>
<colgroup>
<col style="width: 56%" />
<col style="width: 43%" />
</colgroup>
<thead>
<tr class="header">
<th>日志门面(日志的抽象层)</th>
<th>日志实现</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><del>JCL(Jakarta Commons Logging)</del>、SLF4j(Simple Logging Facade for java)、<del>jboss-logging</del></td>
<td>Log4j、JUL(java.util.logging)、Log4j2、Logback</td>
</tr>
</tbody>
</table>
<p>左边选一个门面(抽象层)、右边来选一个实现</p>
<p>日志门面：SLF4J</p>
<p>日志实现：Logback</p>
<p>SpringBoot：底层是Spring框架，默认用JCL，SpringBoot选用SLF4J和logback</p>
<h2 id="slf4j使用">SLF4j使用</h2>
<h2 id="如何在系统中使用slf4j">1、如何在系统中使用SLF4j</h2>
<p>开发时，日志记录方法的调用，不应该直接调用日志的实现类，而是调用日志抽象层里面的方法</p>
<p>给系统里面导入slf4j的jar和logback的实现jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(Stirng[] args)</span></span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">        logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件；</p>
<h2 id="遗留问题">2、遗留问题</h2>
<p>a（slf4j+logback）：Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis</p>
<p>统一日志记录，即使是别的框架一起统一使用slf4j进行输出</p>
<p>如何让系统中所有的日志都统一到slf4j？</p>
<ol type="1">
<li>将系统中其它日志框架先排除出去</li>
<li>用中间包来替换原有的日志框架</li>
<li>导入slf4j其它的实现</li>
</ol>
<h2 id="springboot日志关系">3、SpringBoot日志关系</h2>
<ol type="1">
<li><p>SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p></li>
<li><p>SpringBoot也把其它的日志都替换成了slf4j</p></li>
<li><p>中间替换包</p></li>
<li><p>如果我们要引入其它框架，一定要把这个框架的默认日志依赖移除掉</p>
<p>Spring框架用的是commons-logging</p>
<p>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其它框架时，只需要把这个框架依赖的日志框架排除掉</p></li>
</ol>
<p>## 4、日志使用</p>
<h3 id="默认配置">1、 默认配置</h3>
<p>SpringBoot默认配置好了日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//日志的级别：</span></span><br><span class="line">        <span class="comment">// 由低到高：trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">        <span class="comment">// 可以调整输出的日志级别</span></span><br><span class="line">        <span class="comment">// 默认使用的是info级别</span></span><br><span class="line">        <span class="comment">// 可以使用logging.lever.com.zephon=trace 调整级别为trace级别</span></span><br><span class="line">        logger.trace(<span class="string">&quot;trace...&quot;</span>);</span><br><span class="line">        logger.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;info...&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;warn...&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment"># 可以指定完整的路径</span></span><br><span class="line"><span class="meta">logging.file</span>=<span class="string">springboot.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; -%msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; -%msg%n</span></span><br></pre></td></tr></table></figure>
<h3 id="指定配置">2、指定配置</h3>
<p>给类路径下放上每个日志框架自己的配置文件，则SpringBoot就不使用默认配置</p>
<table>
<colgroup>
<col style="width: 26%" />
<col style="width: 73%" />
</colgroup>
<thead>
<tr class="header">
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Logback</td>
<td><code>logback-spring.xml</code>,<code>logback-spring.groovy</code>,<code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr class="even">
<td>Log4j</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr class="odd">
<td>JDK(Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody>
</table>
<p>logback.xml：直接被日志框架识别</p>
<p>logback-spring.xml：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<h2 id="切换日志框架">5、切换日志框架</h2>
<p>对pom.xml中的依赖进行修改，从而改变日志框架，一般不建议。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-缓存</title>
    <url>/2020/02/21/SpringBoot-%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="springboot-缓存">SpringBoot-缓存</h1>
<h2 id="几个重要概念缓存注解">几个重要概念&amp;缓存注解</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">专业术语</th>
<th style="text-align: left;">解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Cache</td>
<td style="text-align: left;">缓存接口，定义缓存操作，实现有RedisCache、EhCacheCache、ConcurrentMapCache等</td>
</tr>
<tr class="even">
<td style="text-align: left;">CacheManager</td>
<td style="text-align: left;">缓存管理器，管理各种缓存(Cache)组件</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><span class="citation" data-cites="Cacheable">@Cacheable</span></td>
<td style="text-align: left;">主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td>
</tr>
<tr class="even">
<td style="text-align: left;"><span class="citation" data-cites="CacheEvict">@CacheEvict</span></td>
<td style="text-align: left;">清空缓存</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><span class="citation" data-cites="CachePut">@CachePut</span></td>
<td style="text-align: left;">更新缓存，保证方法被调用，又希望结果被缓存</td>
</tr>
<tr class="even">
<td style="text-align: left;"><span class="citation" data-cites="EnableCaching">@EnableCaching</span></td>
<td style="text-align: left;">开启基于注解的缓存</td>
</tr>
<tr class="odd">
<td style="text-align: left;">keyGenerator</td>
<td style="text-align: left;">缓存数据时key生成策略</td>
</tr>
<tr class="even">
<td style="text-align: left;">serialize</td>
<td style="text-align: left;">缓存数据时value序列化策略</td>
</tr>
</tbody>
</table>
<h2 id="缓存使用">缓存使用</h2>
<h3 id="启动文件配置">1、启动文件配置</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * 一、搭建基本环境</span></span><br><span class="line"><span class="comment"> * 1. 导入数据文件，创建表</span></span><br><span class="line"><span class="comment"> * 2. 创建javabean封装数据</span></span><br><span class="line"><span class="comment"> * 3. 整合mybatis操作数据库</span></span><br><span class="line"><span class="comment"> *      1.配置数据源信息</span></span><br><span class="line"><span class="comment"> *      2.使用注解版mybatis</span></span><br><span class="line"><span class="comment"> *          1）使用<span class="doctag">@Mapperscan</span>指定mapper接口所在的包</span></span><br><span class="line"><span class="comment"> * 二、快速使用缓存</span></span><br><span class="line"><span class="comment"> *      步骤：</span></span><br><span class="line"><span class="comment"> *          1.开启基于注解的缓存</span></span><br><span class="line"><span class="comment"> *          2.瓢缓存注解即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 使用@EnableCaching开启缓存</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.zephon.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01CacheApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springboot01CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="service配置">2、service配置</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @CacheConfig： 定义公共缓存配置</span></span><br><span class="line"><span class="comment">//@CacheConfig(cacheNames = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将方法运行结果进行缓存</span></span><br><span class="line"><span class="comment">     * 以后再要相同的数据，直接从缓存从获取，不用调用方法</span></span><br><span class="line"><span class="comment">     * CacheManager管理多个Cache组件，对缓存的真正CRUD操作在Cache组件中，</span></span><br><span class="line"><span class="comment">     * 每一个缓存组件有自己唯一的名字</span></span><br><span class="line"><span class="comment">     * 几个属性：</span></span><br><span class="line"><span class="comment">     * cacheNames/value：指定缓存组件的名字</span></span><br><span class="line"><span class="comment">     * key：缓存数据时使用的key,值可以使用SpEL表达式</span></span><br><span class="line"><span class="comment">     * keyGenerator：key生成器，可以自己指定key的生成器的组件的id</span></span><br><span class="line"><span class="comment">     * key和keyGenerator二选一使用</span></span><br><span class="line"><span class="comment">     * cacheManager：指定缓存管理器</span></span><br><span class="line"><span class="comment">     * condition：指定符合条件的情况下缓存</span></span><br><span class="line"><span class="comment">     * unless：否定缓存;当unless指定的条件为true，方法返回值就不会缓存,可以获取结果进行判断</span></span><br><span class="line"><span class="comment">     * sync：是否使用异步模式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Cacheable(cacheNames = &quot;user&quot;,condition = &quot;#id&gt;0&quot;,unless = &quot;#result==null&quot;)</span></span><br><span class="line">    <span class="comment">//@Cacheable(cacheNames = &quot;user&quot;,key = &quot;#root.methodName+&#x27;[&#x27;+#id+&#x27;]&#x27;&quot;)</span></span><br><span class="line"><span class="comment">//    @Cacheable(cacheNames = &quot;user&quot;,keyGenerator = &quot;myKeyGenerator&quot;)</span></span><br><span class="line">    <span class="meta">@Cacheable(cacheNames = &quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询&quot;</span> + id + <span class="string">&quot;员工&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CachePut</span>：既调用方法，又更新缓存数据,同步更新缓存 修改了数据库的某个数据，同时更新缓存</span></span><br><span class="line"><span class="comment">     * 运行时机：</span></span><br><span class="line"><span class="comment">     * 1、先调用目标方法</span></span><br><span class="line"><span class="comment">     * 2、将目标方法的结果缓存</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 测试步骤：</span></span><br><span class="line"><span class="comment">     * 1. 查询1号用户，查到的结果会放到缓存中：</span></span><br><span class="line"><span class="comment">     * key:1 value:username:原值</span></span><br><span class="line"><span class="comment">     * 2. 以后查询还是之前的结果</span></span><br><span class="line"><span class="comment">     * 3. 更新1号员工：[username:新值]</span></span><br><span class="line"><span class="comment">     * 将方法的返回值放进缓存</span></span><br><span class="line"><span class="comment">     * key:传入的user对象，值:返回的user对象</span></span><br><span class="line"><span class="comment">     * 4. 查询1号用户</span></span><br><span class="line"><span class="comment">     * 应该是更新后的用户</span></span><br><span class="line"><span class="comment">     * key=&quot;#user.id&quot;:使用传入参数的员工的id</span></span><br><span class="line"><span class="comment">     * key=&quot;#result.id&quot;：使用返回后的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Cacheable</span>的key是不能使用result的 为什么是没更新前的？[1号员工没有在缓存中更新]</span></span><br><span class="line"><span class="comment">     * 解决:使用对应的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @CachePut(value = &quot;user&quot;)</span></span><br><span class="line">    <span class="meta">@CachePut(value = &quot;user&quot;, key = &quot;#result.id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新&quot;</span> + user.getId() + <span class="string">&quot;员工&quot;</span>);</span><br><span class="line">        userMapper.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CacheEvict</span>：缓存清除 key:指定要清除的数据</span></span><br><span class="line"><span class="comment">     * allEntries = true:指定清除缓存中所有数据</span></span><br><span class="line"><span class="comment">     * beforeInvocation = true,默认是false：缓存的清除是否在方法之前执行</span></span><br><span class="line"><span class="comment">     * 默认代表在方法执行之后执行，如果出现异常缓存就不清除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CacheEvict(value = &quot;user&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除&quot;</span> + id);</span><br><span class="line"><span class="comment">//        userMapper.deleteUser(id);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Caching：定义复杂缓存规则</span></span><br><span class="line">    <span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">            cacheable = &#123;</span></span><br><span class="line"><span class="meta">                    @Cacheable(value=&quot;user&quot;,key = &quot;#username&quot;)</span></span><br><span class="line"><span class="meta">            &#125;,</span></span><br><span class="line"><span class="meta">            put = &#123;</span></span><br><span class="line"><span class="meta">                    // 意思是通过用户名查询出对应的用户后，</span></span><br><span class="line"><span class="meta">                    // 会在缓存中放入另一组将id作为key的值</span></span><br><span class="line"><span class="meta">                    // 再根据id查询时就会直接从缓存中取值</span></span><br><span class="line"><span class="meta">                    @CachePut(value = &quot;user&quot;,key = &quot;#result.id&quot;),</span></span><br><span class="line"><span class="meta">                    //@CachePut(value = &quot;user&quot;,key=&quot;#result.password&quot;)</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中可以自己写keyGenerator，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCacheConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;myKeyGenerator&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> method.getName()+<span class="string">&quot;[&quot;</span>+ Arrays.asList(params).toString()+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>缓存注解中使用的SpEL表达式</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 16%" />
<col style="width: 54%" />
<col style="width: 18%" />
</colgroup>
<thead>
<tr class="header">
<th>名字</th>
<th>位置</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>methodName</td>
<td>root object</td>
<td>当前被调用的方法名</td>
<td>#root.methodName</td>
</tr>
<tr class="even">
<td>method</td>
<td>root object</td>
<td>当前被调用的方法</td>
<td>#root.method.name</td>
</tr>
<tr class="odd">
<td>target</td>
<td>root object</td>
<td>当前被调用的目标对象</td>
<td>#root.target</td>
</tr>
<tr class="even">
<td>targetClass</td>
<td>root object</td>
<td>当前被调用的目标对象类</td>
<td>#root.targetClass</td>
</tr>
<tr class="odd">
<td>args</td>
<td>root object</td>
<td>当前被调用的方法的参数列表</td>
<td>#root.args[0]</td>
</tr>
<tr class="even">
<td>caches</td>
<td>root object</td>
<td>当前被调用使用的缓存列表</td>
<td>#root.caches[0].name</td>
</tr>
<tr class="odd">
<td>argument name</td>
<td>evaluation context</td>
<td>方法参数名字，可以直接 #参数名，也可以使用 #p0或#a0的形式，0代表参数的索引</td>
<td>#iban、#a0、#p0</td>
</tr>
<tr class="even">
<td>result</td>
<td>evaluation context</td>
<td>方法执行后的返回值(仅当方法执行之后的判断有效，如'unless'，'cache put'的表达式'cache evict'的表达式beforeInvocation=false)</td>
<td>#result</td>
</tr>
</tbody>
</table>
<h2 id="整合redis作为缓存">整合redis作为缓存</h2>
<ol type="1">
<li><p>使用docker安装redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line">docker run --name myredis -d -p 6379:6379 redis</span><br></pre></td></tr></table></figure></li>
<li><p>引入redis的starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置redis</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果是对象，则javabean需要实现Serializable，同时可自定义配置规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, User&gt; <span class="title">userRedisTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnknownHostException</span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object,User&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;User&gt; ser = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;User&gt;(User.class);</span><br><span class="line">        template.setDefaultSerializer(ser);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;User&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(User.class);</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">100</span>))  <span class="comment">// 设置缓存有效期100s</span></span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer));</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager</span><br><span class="line">                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义template使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.将数据以json方式保存</span></span><br><span class="line">            <span class="comment">// 1. 自己将对象转json</span></span><br><span class="line">            <span class="comment">// 2. redisTemplate默认的序列化规则</span></span><br><span class="line">        userRedisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>,userMapper.getUserById(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-配置嵌入式Servlet容器</title>
    <url>/2020/02/20/SpringBoot-%E9%85%8D%E7%BD%AE%E5%B5%8C%E5%85%A5%E5%BC%8FServlet%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="springboot-配置嵌入式servlet容器">SpringBoot-配置嵌入式Servlet容器</h1>
<p>SpringBoot默认使用的是嵌入式Servlet容器（Tomcat）</p>
<h2 id="如何定制和修改servlet容器的相关配置">如何定制和修改Servlet容器的相关配置</h2>
<ul>
<li>方法一：修改和server有关的配置（ServerProperties）</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.prot</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 通用的Servlet容器设置 </span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="comment"># Tomcat设置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方法 二：编写一个WebServerFactoryCustomizer：嵌入式的Servlet容器定制器，来修改Servlet容器配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; <span class="title">webServerFactoryCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">            factory.setPort(<span class="number">8081</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="springboot注册servlet的三大组件">SpringBoot注册Servlet的三大组件</h2>
<p>由于 SpringBoot默认以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml，所以注册三大组件方式为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册三大组件</span></span><br><span class="line"><span class="comment"> * 分别对应的是：</span></span><br><span class="line"><span class="comment"> * ServletRegistrationBean</span></span><br><span class="line"><span class="comment"> * FilterRegistrationBean</span></span><br><span class="line"><span class="comment"> * ServletListenerRegistrationBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">&quot;/myServlet&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/myServlet&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean&lt;MyListener&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DispatcherServlet自动配置</p>
<p>默认拦截：/ 所有请求，包括静态资源，但不拦截jsp；/*会拦截jsp</p>
<p>可能通过server.servletPath来修改springMVC前端控制器默认拦截的请求路径</p>
</blockquote>
<h2 id="springboot能否支持其它的servlet容器">SpringBoot能否支持其它的Servlet容器</h2>
<ul>
<li><p>Jetty(长连接)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Undertow(不支持JSP)</p>
<p>配置与jetty类似</p></li>
</ul>
<h2 id="使用外置的servlet容器">使用外置的Servlet容器</h2>
<p>嵌入式Servlet容器：应用打包成可执行的jar</p>
<p>优点：简单、便携</p>
<p>缺点：默认不支持JSP、优化定制比较复杂</p>
<p>外置的Servlet容器：在应用外安装Tomcat--应用war包的方式打包</p>
<ol type="1">
<li><p>创建新项目时选择packaging为war，会自动将嵌入式的tomcat指定为privided且编写一个SpringBootServletInitializer的子类调用configure方法</p></li>
<li><p>在main文件夹下新建webapp文件夹</p></li>
<li><p>和之前的web工程一样配置tomcat启动即可</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置前后缀</span></span><br><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/WEB_INF/</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="启动原理">启动原理</h2>
<p>jar包：执行SpringBoot主类的main方法，启动IOC容器，创建嵌入式Servlet容器</p>
<p>war包：启动服务器，服务器启动SpringBoot应用，启动IOC容器</p>
<blockquote>
<p>Servlet3.0中</p>
<p>规则：</p>
<ol type="1">
<li>服务器(web应用启动)会创建当前web应用里面的每一个jar包里面的ServletContainerInitializer实例</li>
<li>ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer实现类的全类名</li>
<li>还可以使用@HandlersTypes，在应用启动的时候加载我们需要的类</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-配置文件</title>
    <url>/2020/02/17/SpringBoot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="springboot-配置文件">SpringBoot-配置文件</h1>
<h2 id="配置文件">配置文件</h2>
<p>SpringBoot使用一个全局的配置文件，配置文件名是固定的：</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<p>配置文件的作用：修改SpringBoot自动配置的默认值</p>
<p>yml是YAML(YAML Ain't Markup Language)语言的文件，以数据为中心，比json、xml等更适合作配置文件</p>
<p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>yml:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<h2 id="yaml语法">YAML语法</h2>
<h2 id="基本语法">基本语法</h2>
<ul>
<li><p>k:(空格)v：表示一对键值对（空格必须有)</p></li>
<li><p>以空格的缩进来控制层级关系；只有是左对齐的一列数据，都是同一层级的</p></li>
<li><p>属性和值也是大小写敏感的</p></li>
</ul>
<h2 id="值的写法">值的写法</h2>
<ul>
<li><p>字面量：普通的值(数字、字符串、布尔)</p></li>
<li><p>k: v：字面直接写（字符串默认不用加上引号；双引号不会转义字符串中的特殊字符；单引号会转义特殊字符）</p></li>
<li><p>对象、Map(属性和值)(键值对)</p>
<ul>
<li>k: v：对象还是k: v的方式，在下一行来写对象的属性和值的关系；注意缩进</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">	<span class="string">name:zhangsan</span></span><br><span class="line">	<span class="string">age:20</span></span><br></pre></td></tr></table></figure>
<ul>
<li>行内写法：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>数组(List、Set)</p>
<ul>
<li><p>用- 值表示数组中的一个元素</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">dog</span></span><br></pre></td></tr></table></figure></li>
<li><p>行内写法</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>]</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="配置文件值注入">配置文件值注入</h3>
<ul>
<li><p>配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="number">12</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># idea properties配置文件默认是utf-8编码</span></span><br><span class="line"><span class="comment"># 会有中文乱码，需要在setting-&gt;File Encodings将Transparent native-to-ascii勾上</span></span><br><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">18</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2020/2/7</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">22</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">5</span></span><br></pre></td></tr></table></figure></li>
<li><p>JavaBean：</p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>的作用：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * prefix=&quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能使用容器提供的ConfigurationProperties功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>默认是从全局配置文件中获取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以导入配置文件处理器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="value获取值和configurationproperties获取值比较2.1.6版本"><span class="citation" data-cites="Value获取值和">@Value获取值和</span><span class="citation" data-cites="ConfigurationProperties获取值比较">@ConfigurationProperties获取值比较</span>(2.1.6版本)</h3>
<table>
<thead>
<tr class="header">
<th></th>
<th><span class="citation" data-cites="ConfigurationProperties">@ConfigurationProperties</span></th>
<th><span class="citation" data-cites="Value">@Value</span></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>功能</td>
<td>批量注入配置文件中属性</td>
<td>一个个指定</td>
</tr>
<tr class="even">
<td>松散绑定(松散语法)</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr class="odd">
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr class="even">
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr class="odd">
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<p>配置文件 yml还是properties，才能获取到值</p>
<blockquote>
<p>如果只是在某个业务逻辑中需要获取一下配置文件中的某项值，就用@Value</p>
<p>如果专门编写一个javaBean来和配置文件 进行映射就使用@ConfigurationProperties</p>
</blockquote>
<h3 id="配置文件注入值数据校验">配置文件注入值数据校验</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="comment">// @Validated：配置以验证格式，配置后，若使用@Email则验证必须是邮箱格式</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境</span></span><br><span class="line"><span class="comment">     *      变量、配置文件获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">// @Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">// 必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><span class="citation" data-cites="PropertySource">@PropertySource</span>&amp;<span class="citation" data-cites="ImportResource">@ImportResource</span></p>
<ul>
<li><span class="citation" data-cites="PropertySource">@PropertySource</span>：读取指定配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value=&#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><span class="citation" data-cites="ImportResource">@ImportResource</span>：导入Spring的配置文件 ，让配置文件中的内容生效</p>
<p>Spring Boot里面没有Spring配置文件 ，编写的配置文件也不能自动识别</p>
<p>想让Spring配置文件生效，就必须用@ImportResource加载</p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations=&#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>SpringBoot推荐的给容器中添加组件的方式，使用全注解的方式</p>
<ol type="1">
<li>配置类==Spring配置文件</li>
<li>使用@Bean给容器中添加组件</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类，替代Spring配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置文件站位符</p></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机数</span></span><br><span class="line"><span class="attr">$&#123;random.value&#125;、$&#123;random.int&#125;、$&#123;random.long&#125;</span></span><br><span class="line"><span class="meta">$&#123;random.int(10)&#125;、$&#123;random.int[1024,65536]&#125;</span> <span class="string"></span></span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 站位符获取之前配置的值，如果没有可以使用：指定默认值</span></span><br><span class="line"><span class="meta">person.name</span>=<span class="string">tom</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.name&#125;_dog</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Profile</p>
<ol type="1">
<li><p>多Profile文件</p>
<p>我们在主配置文件编写的时候，文件名可以是application-{profile}.properties/yml</p>
<p>默认使用application.properties配置文件</p></li>
<li><p>yml支持多文档块方式</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span></span><br><span class="line">		<span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">	<span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure></li>
<li><p>激活指定profile</p>
<p>在配置文件中指定：spring.profiles.active=dev</p>
<p>或使用命令行： --spring.profiles.active=dev，idea中配置program arguments</p>
<p>或虚拟机参数：-D spring.profiles.active=dev，idea中配置VM options</p></li>
</ol></li>
<li><p>配置文件加载位置</p>
<p>SpringBoot启动会扫描以下位置的application.properties或者application.yml文件作为SpringBoot的默认配置文件</p>
<ul>
<li>file:./config/</li>
<li>file:./</li>
<li>classpath:/config/</li>
<li>classpath:/</li>
</ul>
<p>以上是按照<strong>优先级从高到低</strong>的顺序，所有位置的文件都会被加载，高优先级配置内容会覆盖低优先级配置内容，互补配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.context-path</span>=<span class="string">/boot02 # 配置项目的访问路径</span></span><br></pre></td></tr></table></figure>
<p>可以通过配置spring.config.location来改变默认配置文件位置，项目打包后，可以使用命令行参数，启动项目时指定配置文件的新位置，指定配置文件和默认加载的这些配置文件共同起作用形成互补配置</p></li>
<li><p>外部配置加载顺序</p>
<p>SpringBoot也可以从以下位置加载配置：优先级从高到低，高优先级覆盖低优先级的配置，所有配置会形成互补配置</p>
<ol type="1">
<li><p>命令行参数：java -jar xxx.jar --server.port=8088 --server.context-path=/abc，多个配置间用空格分开</p></li>
<li><p>来自java:comp/env的JNDI属性</p></li>
<li><p>Java系统属性(System.getProperties())</p></li>
<li><p>操作系统环境变量</p></li>
<li><p>RandomValuePropertySource配置的random.*属性值</p>
<blockquote>
<p>优先加载带profile的，从外部向内部</p>
</blockquote></li>
<li><p>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p></li>
<li><p>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p></li>
<li><p>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</p></li>
<li><p>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</p></li>
<li><p><span class="citation" data-cites="Configuration注解类上的">@Configuration注解类上的</span><span class="citation" data-cites="PropertySource">@PropertySource</span></p></li>
<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p></li>
</ol></li>
<li><p>自动配置原理</p></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-错误处理机制</title>
    <url>/2020/02/19/SpringBoot-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="springboot-错误处理机制">SpringBoot-错误处理机制</h1>
<h2 id="原理">原理</h2>
<p>可以参照ErrorMvcAutoConfiguration，错误处理的自动配置</p>
<p>给容器中添加了以下组件</p>
<ul>
<li><p>DefaultErrorAttributes：</p>
<p>帮我们在页面共享信息</p></li>
<li><p>BasicErrorController：</p>
<p>处理默认的/error请求，返回html数据或json数据</p></li>
<li><p>ErrorPageCustomizer：</p>
<p>系统出现错误后，来到error请求进行处理</p></li>
<li><p>DefaultErrorViewResolver：</p>
<p>默认SpringBoot可以去找到一个页面(error/xxx)，模板引擎能解析页面地址就用模板引擎解析，模板引擎可用就返回到erorViewName指定的视图地址，不可用则就在静态资源文件夹下找errorViewName对应的页面</p></li>
</ul>
<p>步骤：一旦系统出现4xx或5xx之类的错误，ErrorPageCustomizer就会生效(定制错误的响应规则)；就会来到/error请求；就会被BasicErrorController处理：</p>
<p>响应页面：去哪个页面是由DefaultErrorViewResolver解析得到的</p>
<h2 id="如何定制错误响应">如何定制错误响应</h2>
<h3 id="如何定制错误的页面">如何定制错误的页面</h3>
<ol type="1">
<li>有模板引擎的情况下：error/状态码
<ul>
<li>将错误页面命名为错误状态码.html放在resources/templates文件夹里面的error文件夹下，发生此状态码的错误就会来到对应的页面</li>
<li>可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确名(如404.html)优先</li>
<li>页面能获取的信息：
<ul>
<li>timestamp：时间戳</li>
<li>status：状态码</li>
<li>error：错误提示</li>
<li>exception：异常对象</li>
<li>message：异常消息</li>
<li>errors：JSR303数据校验的错误</li>
</ul></li>
</ul></li>
<li>没有模板引擎(模板引擎下没有这个错误页面)，静态资源文件夹下找</li>
<li>以上都没有错误页面，则默认到SpringBoot默认的错误提示页面</li>
</ol>
<h3 id="如何定制错误的json响应数据">如何定制错误的json响应数据</h3>
<ol type="1">
<li><p>自定义异常处理并返回定制json数据</p>
<p>无法自适应，浏览器和客户端返回的都是json</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 1. 浏览器客户端返回的都是json</span></span><br><span class="line"><span class="comment">//    @ExceptionHandler(UserNotExistExecption.class)</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line"><span class="comment">//    public Map&lt;String,Object&gt; handleExecption(Exception e)&#123;</span></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;code&quot;, &quot;user.notexist&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;message&quot;,e.getMessage());</span></span><br><span class="line"><span class="comment">//        return map;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">handleExecption</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 传入我们自己的错误状态码</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>,<span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>,e.getMessage());</span><br><span class="line">        </span><br><span class="line">        request.setAttribute(<span class="string">&quot;ext&quot;</span>,map);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转发到/error进行自适应处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>转发到/error进行自适应处理</p></li>
<li><p>设置错误状态码</p></li>
<li><p>将定制数据携带出去</p>
<ul>
<li><p>完全编写一个ErrorController的实现在(或编写AbstractErrorController的子类),放在容器中</p></li>
<li><p>页面上能用的数据或json返回能用的数据都是通过errorAttributes.getErrorAttributes得到</p>
<ul>
<li><p>容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的，可自定义ErrorAttributes</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">&quot;company&quot;</span>,<span class="string">&quot;company&quot;</span>);</span><br><span class="line">        <span class="comment">// 从request域中获取数据，0-&gt;request域</span></span><br><span class="line">        Map&lt;String ,Object&gt; ext = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">&quot;ext&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ext&quot;</span>,ext)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>TX2 踩坑</title>
    <url>/2021/10/01/TX2-%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="tx2-踩坑">TX2 踩坑</h1>
<h2 id="使用ubuntu20.04-无法刷机提示没有对应的版本">1. 使用Ubuntu20.04 无法刷机，提示没有对应的版本</h2>
<p>解决：修改/etc/os/release文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;18.04.3 LTS (Focal Fossa)&quot;</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Ubuntu 18.04.3 LTS&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;18.04&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.ubuntu.com/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;https://help.ubuntu.com/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span></span><br><span class="line">VERSION_CODENAME=focal</span><br><span class="line">UBUNTU_CODENAME=focal</span><br></pre></td></tr></table></figure>
<h2 id="使用pycuda时出现illegal-instruction-core-dumped错误">2. 使用pycuda时，出现Illegal instruction (core dumped)错误</h2>
<p>解决：修改/etc/profile添加环境变量，然后<code>source /etc/profile</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> OPENBLAS_CORETYPE=ARMV8</span><br></pre></td></tr></table></figure>
<h2 id="报错modulenotfounderror-no-module-named-numpy.testing.nosetester">3. 报错ModuleNotFoundError: No module named 'numpy.testing.nosetester'</h2>
<p>解决：将所有包更新到最新版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --user --upgrade numpy </span><br><span class="line">pip install --user --upgrade scikit-learn</span><br><span class="line">pip install --user --upgrade scipy</span><br><span class="line">pip install --user --upgrade joblib</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TX2</category>
      </categories>
      <tags>
        <tag>TX2</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/10/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>. ## Quick Start</p>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>开始</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>开始</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2020/02/08/redis/</url>
    <content><![CDATA[<h1 id="redis">redis</h1>
<h2 id="概念">概念</h2>
<p>redis是一款高性能的NOSQL系列的非关系型数据库</p>
<ol type="1">
<li><p>数据之间没有关联关系</p></li>
<li><p>数据存储在内存中</p></li>
<li><p>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p></li>
</ol>
<p>redis的应用场景</p>
<ul>
<li>缓存（数据查询、短连接、新闻内容、商品内容等）</li>
<li>聊天室的在线好友列表</li>
<li>任务队列（秒杀、抢购、12306等）</li>
<li>应用排行榜</li>
<li>网站访问统计</li>
<li>数据过期处理（可以精确到毫秒）</li>
<li>分布式集群架构中的session分离</li>
</ul>
<h2 id="命令操作">命令操作</h2>
<ol type="1">
<li>redis的数据结构
<ul>
<li>redis存储的是：key-value格式的数据，其中key都是字符串，value有5种不同的数据结构
<ul>
<li>value的数据结构：
<ol type="1">
<li>字符串类型：string</li>
<li>哈希类型：hash：类似map格式</li>
<li>列表类型：list：linkedlist格式</li>
<li>集合类型：set：</li>
<li>有序集合类型：sortedset</li>
</ol></li>
</ul></li>
</ul></li>
<li>字符串类型 string
<ol type="1">
<li>存储：set key value</li>
<li>获取：get key</li>
<li>删除：del key</li>
</ol></li>
<li>哈希类型：hash
<ol type="1">
<li>存储：hset key field value</li>
<li>获取：
<ul>
<li>hget key field：获取指定的field对应的值</li>
<li>hgetall key：获取所有的field和value</li>
</ul></li>
<li>删除：hdel key field</li>
</ol></li>
<li>列表类型：list
<ol type="1">
<li>存储：
<ul>
<li>lpush key value：将元素加入列表左边</li>
<li>rpush key value：将元素加入列表右边</li>
</ul></li>
<li>获取：
<ul>
<li>lrange key start end：范围获取</li>
</ul></li>
<li>删除：
<ul>
<li>lpop key：删除列表最左边的元素，并将元素返回</li>
<li>rpop key：删除列表最右边的元素，并将元素返回</li>
</ul></li>
</ol></li>
<li>集合类型：set：不允许重复元素
<ol type="1">
<li>存储：sadd key value</li>
<li>获取：smembers key：获取set集合中所有元素</li>
<li>删除：srem key value：删除set集合中的某个元素</li>
</ol></li>
<li>有序集合类型：sortedset：不允许重复元素，且元素有顺序
<ol type="1">
<li>存储：zadd key score value</li>
<li>获取：zrange key start end</li>
<li>删除：zrem key value</li>
</ol></li>
<li>通用命令
<ul>
<li>keys * ：查询所有的键</li>
<li>type key：获取键对应的value的类型</li>
<li>del key：删除指定的key value</li>
</ul></li>
</ol>
<h2 id="持久化">持久化</h2>
<ol type="1">
<li>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中</li>
<li>redis持久化机制：
<ol type="1">
<li>RDB：默认方式，不需要进行配置，默认就使用这种机制
<ul>
<li>在一定的间隔时间中，检测key的变化情况，然后持久化数据</li>
</ul></li>
<li>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据。</li>
</ol></li>
</ol>
<h2 id="jedis">Jedis</h2>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>第十五天</title>
    <url>/2019/07/26/vue-5/</url>
    <content><![CDATA[<h1 id="第十五天">第十五天</h1>
<h2 id="watch监视数据">watch监视数据</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>watch属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 分析： --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 1. 我们要监听到文本框数据的改变，这样才能知道什么时候去拼接出一个fullname --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2. 如何监听到 文本框的数据的改变？ --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span> +</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span> =</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fullname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">firstname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">lastname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">fullname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 使用这个属性可以监视data中指定的数据的变化，然后触发watch中对应的function处理函数</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">firstname</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123; <span class="comment">// firstname可加可不加&#x27;&#x27; ,如果是first-name就必须加&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(&#x27;监视到了firstname的变化&#x27;);</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// this.fullname = this.firstname + &#x27;-&#x27; + lastname;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(newVal+&#x27;---&#x27;+oldVal);</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.fullname = newVal + <span class="string">&quot;-&quot;</span> + <span class="built_in">this</span>.lastname;</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">lastname</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.fullname = <span class="built_in">this</span>.firstname + <span class="string">&quot;-&quot;</span> + newVal;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="watch监视路由地址的改变">watch监视路由地址的改变</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>watch-监视路由地址的改变<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;注册组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">routes</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">component</span>: login</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">component</span>: register</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                ]</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                router,</span></span><br><span class="line"><span class="javascript">                <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this.$route.path</span></span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;$route.path&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(newVal + &#x27;---&#x27; + oldVal);</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (newVal === <span class="string">&quot;/login&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">&quot;欢迎登录&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newVal === <span class="string">&quot;/register&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">&quot;欢迎注册&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="computed-计算属性的使用">computed 计算属性的使用</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>computed<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span> +</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span> =</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fullname&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 三个只输出一次&quot;fullname被触发&quot;，表示computed的缓存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">firstname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">lastname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// fullname:&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">computed</span>: &#123; <span class="comment">// 在computed中，可以定义一些属性，称为计算属性，其本质就是一个方法，只是在使用时是将其名称直接当做属性使用，并不会将计算属性当作方法调用</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意：计算属性，在引用时，一定不要加()去调用，直接将其当作普通属性使用即可</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意：只要计算属性function内部，所用的任何data中的数据发生变化，就会立即重新计算</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意：计算属性的求值结果，会被缓存，方便下次直接使用，如果计算属性中所有数据都没有发生过变化，则不会重新对计算属性求值</span></span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;fullname&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;fullname被触发&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.firstname + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastname;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="watchcomputed和methods之间的对比">watch、computed和methods之间的对比</h2>
<ol type="1">
<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用</li>
<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑</li>
<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体</li>
</ol>
<h2 id="webpack">Webpack</h2>
<h3 id="什么是webpack">什么是webpack</h3>
<p>webpack是前端的一个项目构建工具，它是基于Node.js开发出来的一个前端工具</p>
<h3 id="webpack使用">webpack使用</h3>
<ol type="1">
<li>npm init -y</li>
<li>创建两个文件夹src、dist(打包后输出的文件夹)</li>
<li>在src下新建index.html</li>
<li>在src下新建main.js(项目的JS入口文件)</li>
<li>测试打包 webpack ..js -o ..js</li>
<li>在index.html中手动引入bundle.js</li>
</ol>
<h3 id="webpack实现自动打包">webpack实现自动打包</h3>
<ol type="1">
<li>安装webpack-dev-server npm i webpack-dev-server -D</li>
<li>在根目录新建webpack.config.js文件并进行配置</li>
<li>根据提示安装本地webpack和webpack-cli</li>
<li>在package.json添加指令</li>
<li>在终端 npm run dev</li>
</ol>
<h3 id="webpack使用插件">webpack使用插件</h3>
<ol type="1">
<li>安装html-webpack-plugin npm i html-webpack-plugin -D(根据index.html在内存中生成页面并将bundle.js注入)</li>
<li>在webpack.config.js配置plugins</li>
</ol>
<h3 id="webpack使用第三方loader模块">webpack使用第三方loader模块</h3>
<ol type="1">
<li>安装css-loader style-loader npm i style-loader css-loader -D</li>
<li>在webpack.config.js中配置module</li>
<li>在main.js使用import引用</li>
<li>其它非js文件的使用同理(图片和字体文件都对应 file-loader url-loader)</li>
</ol>
<h3 id="webpack实例">webpack实例</h3>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表隔行变色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：不推荐直接在这里引用任何包和css文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- main中的代码，涉及到es6新语法，浏览器不识别 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过webpack，将main.js进行处理，生成bundle.js --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当使用html-webpack-plugin之后，我们不再需要手动处理bundle.js的引用路径了，因为这个插件已经自动创建了一个script并引用了正确的路径 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 能实现，但会产生二次请求 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/index.css&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第6个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第7个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第8个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第9个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第10个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-heart&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用热更新的第二步</span></span><br><span class="line"><span class="comment">// const webpack = require(&#x27;webpack&#x27;);</span></span><br><span class="line"><span class="comment">// 导入在内存中生成HTML页面的插件</span></span><br><span class="line"><span class="comment">// 只要是插件，都一定要放到plugins节点中</span></span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 插件的两个作用：</span></span><br><span class="line"><span class="comment">// 1. 自动在内存中根据指定页面生成一个内存页面</span></span><br><span class="line"><span class="comment">// 2. 自动把打包好的bunlde.js 追加到页面中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个配置文件，其实就是一个JS文件，通过Node中的模块操作，向外暴露一个配置对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: path.join(__dirname, <span class="string">&#x27;./src/main.js&#x27;</span>), <span class="comment">//入口，表示要使用webpack打包哪个文件</span></span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">// 输出文件相关的配置</span></span><br><span class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="comment">//指定打包好的文件输出目录</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span> <span class="comment">//指定输出文件名称</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// devServer: &#123;</span></span><br><span class="line">    <span class="comment">//     contentBase: path.join(__dirname, &#x27;./src&#x27;),</span></span><br><span class="line">    <span class="comment">//     port: 3000,</span></span><br><span class="line">    <span class="comment">//     open: true,</span></span><br><span class="line">    <span class="comment">//     hot: true // 网页不刷新即可重载；bundle.js以打补丁形式更新，启用热更新的第一步</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// plugins:[    // 配置插件的节点</span></span><br><span class="line">    <span class="comment">// new webpack.HotModuleReplacementPlugin() //new 一个热更新的模块对象，第三步</span></span><br><span class="line">    <span class="comment">// ]</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> htmlWebpackPlugin(&#123; <span class="comment">// 创建一个在内存中生成HTML页面的插件</span></span><br><span class="line">            <span class="attr">template</span>: path.join(__dirname, <span class="string">&#x27;./src/index.html&#x27;</span>), <span class="comment">// 指定模板页面，将来会根据指定页面路径，去生成内存中页面</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span> <span class="comment">//指定生成的页面的名称</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">module</span>: &#123; <span class="comment">//这个节点用于配置所有第三方模块加载器</span></span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">// 所有第三方模块的匹配规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 配置处理.css文件的第三方loader</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>] <span class="comment">// 调用顺序：从右到左</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123; <span class="comment">// 处理图片路径</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|bmp|jpeg)$/</span>,</span><br><span class="line">                use: <span class="string">&#x27;url-loader?limit=1000&amp;name=[hash:8]-[name].[ext]&#x27;</span></span><br><span class="line">                <span class="comment">// limit 给定的值是图片的大小，单位是字节，如果引用的图片大于或等于limit，则不会被转为base64格式字符串，否则会被转为base64</span></span><br><span class="line">                <span class="comment">// name用来表示图片名，[hash:8]表示8位哈希值 防止重名 [name]表示原名称 [ext]表示原后缀名</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123; <span class="comment">// 处理字体文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(ttf|eot|svg|woff|woff2)$/</span>,</span><br><span class="line">                use: <span class="string">&#x27;url-loader&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们在控制台直接输入webpack命令执行时，webpack操作：</span></span><br><span class="line"><span class="comment">// 1. webpack发现，我们没有通过命令形式，指定入口和出口</span></span><br><span class="line"><span class="comment">// 2.webpack就会去项目根目录查找&#x27;webpack.config.js&#x27;配置文件</span></span><br><span class="line"><span class="comment">// 3. 当找到配置文件后， webpack会去解析执行这个配置文件， 当解析执行完配置文件后， 就得到配置文件中导出的配置对象</span></span><br><span class="line"><span class="comment">// 4. 当webpack拿到配置对象后，就拿到了配置对象中指定的入口和出口，然后进行打包构建</span></span><br></pre></td></tr></table></figure>
<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --port 3000--hot&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;jquery&quot;</span>: <span class="string">&quot;^3.4.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.3.6&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;css-loader&quot;</span>: <span class="string">&quot;^3.1.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^3.2.0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;style-loader&quot;</span>: <span class="string">&quot;^0.23.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.7.2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webpack-babel配置">webpack babel配置</h3>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> info = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.info);</span><br><span class="line"><span class="comment">// 在webpack中默认只能处理一部分ES6新语法，一些更高级的ES6语法或ES7语法，webpack无法处理，这里就需要用第三方loader，来帮助webpack处理这些高级的语法，当第三方loader把高级语法转为低级语法后，会把结果交给webpack去打包到bundle.js</span></span><br><span class="line"><span class="comment">// 通过Babel，可以帮我们将高级语法转为低级语法</span></span><br><span class="line"><span class="comment">// 在webpack中，安装Babel使用指令：</span></span><br><span class="line"><span class="comment">// npm install -D babel-loader @babel/plugin-proposal-class-properties</span></span><br><span class="line"><span class="comment">// npm i -D @babel/core babel-preset-env @babel/preset-react babel-preset-stage-0 </span></span><br><span class="line"><span class="comment">// 在webpack配置文件中，在module节点下的rules数组中，添加新的匹配规则</span></span><br><span class="line"><span class="comment">// &#123;test:/\.js$/,use:&#x27;babel-loader&#x27;,exclude:&#x27;/node_modules/&#125;</span></span><br><span class="line"><span class="comment">// 注意：在配置babel的loader规则时，必须把node_modules目录通过exclude排除，原因：</span></span><br><span class="line"><span class="comment">// 1. 如果不排除，则babel会把node_modules中所有第三方JS文件都打包编译，这样会非常消耗CPU，同时，打包速度非常慢</span></span><br><span class="line"><span class="comment">// 2. 即使babel将所有node_modules中的JS转换完了，项目也无法正常运行</span></span><br><span class="line"><span class="comment">// 3. 在项目的根目录中，新建一个.babelrc 的Babel配置文件，属于JSON格式，所以在写.BABELRC配置时，必须符合JSON语法规范，不能写注释，字符串必须用双引号</span></span><br><span class="line"><span class="comment">// 在.babelrc写如下配置：</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;presets&quot;: [&quot;@babel/react&quot;, &quot;@babel/env&quot;], // 语法</span></span><br><span class="line"><span class="comment">//     &quot;plugins&quot;: [&quot;@babel/plugin-proposal-class-properties&quot;]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<p>.babelrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/react&quot;</span>, <span class="string">&quot;@babel/env&quot;</span>], <span class="comment">// 语法</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第十六天</title>
    <url>/2019/07/27/vue-6/</url>
    <content><![CDATA[<h1 id="第十六天">第十六天</h1>
<h2 id="在页面中使用render函数渲染组件">在页面中使用render函数渲染组件</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>在页面中使用render函数渲染组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;这是登录组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// creteElement 是一个方法，调用它能将指定的组件模板渲染为HTML结构</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> createElement(login);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意：这里return 的结果会替换页面中el对应的容器</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="在webpack中使用vue">在webpack中使用vue</h2>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如何在webpack构建的文件中，使用Vue进行开发</span></span><br><span class="line"><span class="comment">// 1. 装包 npm i vue -S</span></span><br><span class="line"><span class="comment">// 2. 由于在webpack中，推荐使用.vue这个组件模板文件定义组件，所以需要安装能解析这种文件的loader npm i -D vue-loader vue-template-compiler</span></span><br><span class="line"><span class="comment">// 3. 在main.js中导入vue模块 import Vue from &#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 4. 定义一个.vue结尾的组件，其中组件包括template、script、style三部分</span></span><br><span class="line"><span class="comment">// 5. 使用import login from &#x27;./login.vue&#x27;导入这个组件</span></span><br><span class="line"><span class="comment">// 6. 创建vm的实例 var vm = new Vue(&#123;el:&quot;#app&quot;,render:c=&gt;c(login)&#125;)</span></span><br><span class="line"><span class="comment">// 7. 在页面中创建一个id为app的div元素作为vm实例要控制的区域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在webpack中使用import导入的Vue构造函数功能不完整，只提供了runtime-only方式，并没有提供像网页中那种形式</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="comment">// 如果想像网页中那样可以有以下方法</span></span><br><span class="line"><span class="comment">// import Vue from &#x27;../node_modules/vue/dist/vue.js&#x27;</span></span><br><span class="line"><span class="comment">// 或 在webpack.config.js module.exports中添加</span></span><br><span class="line"><span class="comment">// resolve: &#123;</span></span><br><span class="line"><span class="comment">//     alias: &#123;</span></span><br><span class="line"><span class="comment">//         // 修改vue被导入时包的路径</span></span><br><span class="line"><span class="comment">//         &quot;vue$&quot;: &quot;vue/dist/vue.js&quot;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 包的查找规则：</span></span><br><span class="line"><span class="comment">// 1. 找项目根目录中有没有node_modules的文件夹</span></span><br><span class="line"><span class="comment">// 2. 在node_modules中根据包名，找对应的vue文件夹</span></span><br><span class="line"><span class="comment">// 3. 在vue文件夹中找一个叫package.json的包配置文件</span></span><br><span class="line"><span class="comment">// 4. 在package.json文件中，找一个main属性【main属性指定了这个包在被加载时的入口文件】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入login组件</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">&#x27;./login.vue&#x27;</span></span><br><span class="line"><span class="comment">// 默认webpack无法打包.vue文件，需要安装vue-loader vue-template-compiler</span></span><br><span class="line"><span class="comment">// npm i -D vue-loader vue-template-compiler</span></span><br><span class="line"><span class="comment">// 在配置文件中新增loader配置项(包括rule和plugin)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 在webpack中，如果想通过vue将一个组件放到页面中去展示，vm实例中的render函数可以实现</span></span><br><span class="line">    <span class="comment">// render: function (createElement) &#123;</span></span><br><span class="line">    <span class="comment">//     return createElement(login);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">c</span> =&gt;</span> c(login) <span class="comment">//简写</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置文件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    VueLoaderPlugin</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: path.join(__dirname, <span class="string">&#x27;./src/main.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">template</span>: path.join(__dirname, <span class="string">&#x27;./src/index.html&#x27;</span>),</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">            use: <span class="string">&quot;vue-loader&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">        <span class="comment">// ,</span></span><br><span class="line">        <span class="comment">// resolve: &#123;</span></span><br><span class="line">        <span class="comment">//     alias: &#123;</span></span><br><span class="line">        <span class="comment">//         // 修改vue被导入时包的路径</span></span><br><span class="line">        <span class="comment">//         &quot;vue$&quot;: &quot;vue/dist/vue.js&quot;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="export和export-default">export和export default</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是登录组件，使用.vue文件定义出来的---&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// ES6中规定了导入导出模块的方式</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 导入：import 模块名称 from &#x27;模块标识符&#x27; import &#x27;表示路径&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 导出：export default 和 export 向外暴露成员</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注意：export default向外暴露的成员，可以通过任意变量接收</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注意：在一个模块中，export default只允许向外暴露一次</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// export var title = &#x27;abc&#x27; --&gt; import &#123;title&#125; from &#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 通过export形式向外暴露的只能使用&#123; &#125;的形式来接收(即按需导出)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 使用export导出的成员，必须严格使用导出时的名称(或者 import &#123;title as t&#125; from &#x27;&#x27; 来起别名)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// export var a = &#x27;a&#x27; export var b = &#x27;b&#x27; --&gt;import&#123;a,b&#125; from &#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// export可以向外暴露多个成员，同时，如果某些成员，在import时不需要则可以不在&#123;&#125;中定义</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 在一个模块中，可以同时使用export 和 export default向外暴露</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data () &#123; <span class="comment">// 注意：组件中的data必须是function</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&#x27;123&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    show () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;调用了login.vue中的show()方法&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="webpack中使用vue-router">webpack中使用vue-router</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 导入vue-router包</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> account <span class="keyword">from</span> <span class="string">&#x27;./main/account.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> goodslist <span class="keyword">from</span> <span class="string">&#x27;./main/goodslist.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">&#x27;./subcom/login.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> register <span class="keyword">from</span> <span class="string">&#x27;./subcom/register.vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 2. 手动安装 VueRouter</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由对象</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// account goodslist</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/account&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: account,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: login</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: register</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/goodslist&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: goodslist</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&#x27;./app.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">c</span> =&gt;</span> c(app), <span class="comment">// render会将el指定的容器，所有内容都清空覆盖，所以不将router-view和router-link放到该容器中</span></span><br><span class="line">    router <span class="comment">// 4. 将路由对象挂在到vm上</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：App这个组件，是通过VM实例render函数渲染出来的，render函数如果要渲染组件，渲染出来的组件，只能放到el:&#x27;#app&#x27;所指定的元素中</span></span><br><span class="line"><span class="comment">// Account和goodslist组件，是通过路由匹配监听到的，所以，这两个组件只能展示到属于路由的&lt;router-view&gt;&lt;/router-view&gt;中去</span></span><br></pre></td></tr></table></figure>
<h2 id="组件中的style">组件中的style</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是account的登录子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 普通的style标签只支持普通的样式，如果要启用scss 或 less需要为style元素设置lang属性 */</span></span></span><br><span class="line"><span class="css"><span class="comment">/* 使用scoped使style中的样式只是该组件使用,一般在.vue中都推荐打开scoped */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue商城项目的一些问题</title>
    <url>/2019/09/22/vue-Vue%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="vue中常见问题解决">Vue中常见问题解决</h1>
<h2 id="项目地址">项目地址</h2>
<p>https://github.com/Zephon-H/vue-store ## 使用Better-Scroll时由于计算高度时，图片未加载出来所以高度计算错误，滚动会有问题，如何解决？</p>
<ul>
<li>监听每一张图片是否加载完成，每张图片加载完成后就执行一次scroll的refresh()的方法</li>
</ul>
<h3 id="如何监听图片加载完成">如何监听图片加载完成？</h3>
<ul>
<li>原生的JS方式<code>img.onload=function()&#123;&#125;</code></li>
<li>Vue中监听：<code>@load='方法'</code></li>
</ul>
<h3 id="如何将图片所在vue中的监听到的图片加载完成事件传给home.vue中">如何将图片所在vue中的监听到的图片加载完成事件传给Home.vue中</h3>
<ul>
<li><p>因为涉及到了非父子组件的通信，所以这里可以采用vuex或事件总线的方法</p></li>
<li><p>事件总线的方法步骤</p>
<ol type="1">
<li>在main.js中<code>Vue.prototype.$bus = new Vue()</code></li>
<li>在图片组件中给图片加上<code>@*load*="imageLoad"</code>并在imageLoad()方法中<code>*this*.$bus.$emit('itemImageLoad')</code></li>
<li>在Home组件中<code>this.$bus.$on('itemImageLoad',()=&gt;&#123;o&#125;)</code></li>
</ol>
<h3 id="对于refresh频繁的问题如果处理">对于refresh频繁的问题，如果处理？</h3></li>
<li><p>进行防抖</p></li>
<li><p>防抖函数起作用的过程：</p>
<ul>
<li>如果我们直接执行refresh，那么refresh会被执行n次</li>
<li>可以将refresh函数传入到debounce函数中，生成一个新的函数</li>
<li>之后在调用非常频繁的时候，就调用新生成的函数</li>
<li>而新生成的函数，并不会非常频繁的调用，如果下一次执行来的非常快，那么会将上一次的取消掉</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">debounce (func, delay) &#123;</span><br><span class="line">      <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          func.apply(<span class="built_in">this</span>, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="tab选项卡的吸顶效果">tab选项卡的吸顶效果</h2>
<ul>
<li>获取offsetTop
<ul>
<li>必须知道滚动到多少时，开始有吸顶效果，这个时候，就需要获取tab的offsetTop</li>
<li>但是如果直接在mounted中获取offsetTop，那么值不正确，因为可能有图片未加载</li>
<li>监听滚动，动态的改变tab的样式，动态改变tab的样式时会出现两个问题</li>
</ul></li>
</ul>
<h3 id="如何获取正确的offsettop">如何获取正确的offsetTop?</h3>
<ul>
<li>由于swiper中图片较大，当swiper中图片加载完后，可视为所有图片加载完，所有监听swiper中img加载完成</li>
<li>加载完成后，发出事件，在home中获取正确的值</li>
<li>为了swiper不多次发出事件，可以设置一个变量isLoad进行状态记录</li>
</ul>
<h3 id="当动态改变tab的样式时下面的商品内容会突然上移且tab虽然设置了fixed但也会随着better-scroll一起滚出去如何解决">当动态改变tab的样式时，下面的商品内容会突然上移，且tab虽然设置了fixed，但也会随着better scroll一起滚出去，如何解决？</h3>
<ul>
<li>通过其它方法实现相同效果</li>
<li>在最上面，多复制一个tab组件，用它实现停留效果</li>
<li>当用户滚动一定的位置时，复制的tab显示，未到该位置，则隐藏</li>
</ul>
<h2 id="加入详情页后点击所有商品进入的详情页内容是同一个">加入详情页后，点击所有商品进入的详情页内容是同一个?</h2>
<ul>
<li>由于前面使用了keep-alive，所有离开详情页后，结果只是将detail转为deactive，再进入不会执行created中的更新id、加载数据的方法，所以需要在keep-alive中使用<em>exclude</em>="Detail"排除详情页</li>
</ul>
<h2 id="如何将时间戳转成格式化字符串">如何将时间戳转成格式化字符串？</h2>
<ul>
<li>将时间戳(单位是秒)转成Date对象<code>const date = new Date(t*1000)</code></li>
<li>将date进行格式化，转成对应的字符串<code>date.getYear()+date.getMonth()+1...</code> 部分语言中可以使用<code>fmt.format(date,'yyyy-MM-dd hh:mm:ss')</code></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>会话-复习</title>
    <url>/2020/02/05/%E4%BC%9A%E8%AF%9D-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="会话">会话</h1>
<h2 id="概述">概述</h2>
<p>一次会话中包含多次请求和响应</p>
<ul>
<li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li>
<li>功能：在一次会话范围内的多次请求间，共享数据</li>
<li>方式：
<ol type="1">
<li>客户端会话技术：Cookie</li>
<li>服务器会话技术：Session</li>
</ol></li>
</ul>
<h2 id="cookie">Cookie</h2>
<ul>
<li><p>概念：客户端会话技术-将数据保存在客户端浏览器</p></li>
<li><p>快速入门：</p>
<ul>
<li>使用步骤：
<ol type="1">
<li>创建Cookie对象，绑定数据：new Cookie(String name,String value)</li>
<li>发送Cookie对象：resp.addCookie(Cookie cookie)</li>
<li>获取Cookie，拿到数据：Cookie[] req.getCookies()</li>
</ol></li>
</ul></li>
<li><p>实现原理：</p>
<ul>
<li>基于响应头set-cookie和请求头cookie实现</li>
</ul></li>
<li><p>cookie的细节</p>
<ol type="1">
<li><p>一次可否发送多个cookie？</p>
<ul>
<li>可以，通过创建多个Cookie对象，使用resp调用多次addCookie方法 发送cookie对象即可</li>
</ul></li>
<li><p>cookie在浏览器中保存多长时间？</p>
<ul>
<li>默认情况下，当浏览器关闭后，cookie数据被销毁</li>
<li>持久化存储：setMaxAge(int seconds)
<ul>
<li>seconds&gt;0：将Cookie数据写到硬盘的文件中，持久化存储。seconds代表Cookie存活时间</li>
<li>second&lt;0：默认值</li>
<li>second=0：删除cookie信息</li>
</ul></li>
</ul></li>
<li><p>cookie能否存中文</p>
<ul>
<li>在tomcat 8 之前，cookie不能直接存储中文数据，需要将中文数据转码---一般采用URL编码(%E3)</li>
<li>在tomcat 8 之后，cookie可以存储中文数据，但仍然不支持特殊字符，采用URL编码</li>
</ul></li>
<li><p>cookie共享问题？</p>
<ol type="1">
<li>假设在一个tomcat服务器中，部署多个项目，则这些项目的cookie能否共享？
<ul>
<li>默认情况下cookie不能共享</li>
<li>setPath(String path)：设置cookie的获取范围，默认情况下设置当前的虚拟目录</li>
<li>如果需要共享，则可将path设置为"/"</li>
</ul></li>
<li>不同服务器间cookie共享问题？(比如百度搜索与百度贴板等之间)
<ul>
<li>setDomain(String path)：如果设置一级域名相同，那么多个服务器之间cookie可以共享</li>
</ul></li>
</ol></li>
<li><p>Cookie的特点和作用</p>
<ol type="1">
<li>cookie存储数据在客户端浏览器</li>
<li>浏览器对于单个Cookie的大小有限制(4kb)以及对同一域名的总cookie数量也有限制(20个)</li>
</ol>
<ul>
<li>作用：
<ol type="1">
<li>cookie一般用于存储少量的不太敏感的数据</li>
<li>在不登录的情况下，完成服务器对客户端的识别</li>
</ol></li>
</ul></li>
<li><p>案例-记住上次访问时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/cookieServletTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieServletTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="keyword">null</span>&amp;&amp;cookies.length!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie c :</span><br><span class="line">                    cookies) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.getName().equals(<span class="string">&quot;lastTime&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// URL解码</span></span><br><span class="line">                    String value = URLDecoder.decode(c.getValue(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                    response.getWriter().write(<span class="string">&quot;您上次访问的时间是：&quot;</span>+value);</span><br><span class="line">                    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH：mm：ss&quot;</span>);</span><br><span class="line">                    String time = sdf.format(date);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用URL编码</span></span><br><span class="line">                    time = URLEncoder.encode(time, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    c.setValue(time);</span><br><span class="line">                    c.setMaxAge(<span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">                    response.addCookie(c);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH：mm：ss&quot;</span>);</span><br><span class="line">        String time = sdf.format(date);</span><br><span class="line">        <span class="comment">// 使用URL编码</span></span><br><span class="line">        time = URLEncoder.encode(time, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;lastTime&quot;</span>,time);</span><br><span class="line">        cookie.setMaxAge(<span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;首次访问，欢迎您！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol></li>
</ul>
<h2 id="session">Session</h2>
<ul>
<li><p>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p></li>
<li><p>快速入门：</p>
<ol type="1">
<li>获取session对象
<ul>
<li>HttpSession session = req.getSession()</li>
</ul></li>
<li>使用HttpSession对象：
<ul>
<li>Object getAttribute(String name)</li>
<li>void setAttribute(String name,Object value)</li>
<li>void removeAttribute(String name)</li>
</ul></li>
</ol></li>
<li><p>原理：</p>
<ul>
<li>session的实现是依赖于cookie的</li>
</ul></li>
<li><p>细节</p>
<ol type="1">
<li><p>当客户端关闭后，服务器不关闭，两次获取session是否为同一个?</p>
<ul>
<li><p>默认情况下不是</p></li>
<li><p>如果需要相同，则可以创建Cookie，键为JSESSIONID，设置最大存活时间，让cookie持久化保存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">&quot;JSESSIONID&quot;</span>,session.getID());</span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">resp.addCookie(c);</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>客户端不关闭，服务器关闭后，两次获取的session是否为同一个？</p>
<ul>
<li>不是同一个，但是要确保数据不丢失
<ul>
<li>session的钝化：
<ul>
<li>在服务器正常关闭之前，将session对象系列化到硬盘上</li>
</ul></li>
<li>session的活化：
<ul>
<li>在服务器启动后，将session文件转化为内存中的session对象即可</li>
</ul></li>
</ul></li>
<li>tomcat会自动完成钝化和活化，但idea中无法完成</li>
</ul></li>
<li><p>session的失效时间？</p>
<ol type="1">
<li><p>服务器关闭</p></li>
<li><p>session对象调用invalidate()</p></li>
<li><p>session默认失效时间是30分钟</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
</ol></li>
<li><p>session的特点</p>
<ol type="1">
<li>session用于存储一次会话的多次请求的数据，存在服务器端</li>
<li>session可以存储任意类型、任意大小的数据</li>
</ol></li>
</ul>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>数据获取</title>
    <url>/2019/12/13/%E5%85%B6%E5%AE%83-%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<h1 id="数据获取">数据获取</h1>
<ol type="1">
<li><p>iiMedia Research(艾媒咨询)/综合类研报 <a href="https://research.cicc.com/index">点击访问</a></p></li>
<li><p>艺恩/影视类数据分析<a href="http://www.endata.com.cn/">点击访问</a></p></li>
<li><p>中文互联网数据研究资讯中心/综合类研报<a href="http://www.199it.com/archives/category/sharingeconomy">点击访问</a></p></li>
<li><p>易观智库商业信息服务平台<a href="https://www.analysys.cn/">点击访问</a></p></li>
<li><p>北京赛诺市场研究<a href="http://cn.sino-mr.com/about/profile">点击访问</a></p></li>
<li><p>移动数据报告-移动观象台<a href="http://mi.talkingdata.com/reports.html?category=IndustryReport">点击访问</a></p></li>
<li><p>旅游圈/旅游财经研报<a href="https://www.dotour.cn/">点击访问</a></p></li>
<li><p>金研报/金融类研报<a href="https://research.cicc.com/index">点击访问</a></p></li>
<li><p>卡思数据/自媒体访问数据<a href="https://www.caasdata.com/index/rank/index.html">点击访问</a></p></li>
</ol>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>第四天CSS</title>
    <url>/2019/07/11/%E5%89%8D%E7%AB%AF-CSS-1/</url>
    <content><![CDATA[<h1 id="第四天">第四天</h1>
<h2 id="media-query">media query</h2>
<p>在不同的屏幕宽度下有不同的对应的css，从而有不同的显示效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>media query<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* max-width从大写到小，min-width从小写到大，也可以同时给定min-width和max-width */</span></span></span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1000px</span>) &#123;<span class="comment">/* max-width:最大宽度,min-width：最小宽度 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">600px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>box中的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="移动端自适应">移动端自适应</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>移动端自适应<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">25%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;<span class="comment">/* 改变width的含义，width由内容的宽度变为包括padding和border和内容的宽度之和 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#036</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 图片自适应 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 缺点：只能完成一行图片的显示 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>,<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mlist</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mlist</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">86vw</span>;<span class="comment">/* 不换行时，可以利用flex的特性设置距离，将li的宽度设为大于三分之一 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mlist</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mlist</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-overflow</span>: ellipsis;<span class="comment">/* 多余文字变成 ... */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 广泛性自适应 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.zlist</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.zlist</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">25%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 长度单位：px、% 、vw、vh、rem--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- %是指父元素的百分比，vw、vh是屏幕的百分比 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 图片自适应 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 缺点：只能完成一行图片的显示  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;mlist&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 具有广泛性的自适应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;zlist&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="rem">rem</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文字大小自适应<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 基于视口宽度的rem */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* html&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            font-size: 5.6vw;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">        #box&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            font-size: 0.3rem;</span></span></span><br><span class="line"><span class="comment"><span class="css">            border: 1px solid #c00;</span></span></span><br><span class="line"><span class="comment"><span class="css">            padding: 0.5rem 1rem 1rem 1rem;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 基于media query的rem */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">56px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">800px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">480px</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">min-width</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.rlist</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.rlist</span>&gt;<span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">33%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0.2rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.rlist</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">0.1rem</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.rlist</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">0.4rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">150%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用rem --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- rem是一个长度单位，是根元素的字体大小 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- rem的实现方法 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.视口宽度的百分比：javascript,vw --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.基于media query的离散固定值：media query --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.基于media query的表达式：js、cacl(5vw+3px+5%)，连续值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        rem的移动解决方案</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 基于media query的上图下文 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;rlist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="文字">文字</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文字相关属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 单词自动换行 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* word-break: break-all;  */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-overflow</span>: ellipsis;<span class="comment">/* 文字溢出部分为省略号 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基本表单设计">基本表单设计</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>form基本设计<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">form</span>,<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#form</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">360px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#form</span> <span class="selector-tag">li</span> <span class="selector-tag">label</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.input</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">290px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none; <span class="comment">/* 去除边框 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.error</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#form</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="comment">&lt;!-- 当被点击时，for的标签获得焦点 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>用户名输入错误!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>密码输入错误！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="图片按钮的实现">图片按钮的实现</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>file<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#file</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#file</span> <span class="selector-tag">input</span>,<span class="selector-id">#img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0</span>;<span class="comment">/* 透明实现既看不见，又能响应事件 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(<span class="number">#000</span>,<span class="number">#ccc</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* box-shadow: 5px 5px 5px #ccc; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">38px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/jpeg,image/gif&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span>&gt;</span>浏览<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="h5表单">h5表单</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>h5-form<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;email please&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="comment">&lt;!-- required要求必须输入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">list</span>=<span class="string">&quot;list&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;autofocus&quot;</span>&gt;</span><span class="comment">&lt;!-- autofocus自动获得焦点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;南昌&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;大连&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;济南&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;西安&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;[a-z]&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第五天</title>
    <url>/2019/07/12/%E5%89%8D%E7%AB%AF-CSS-2/</url>
    <content><![CDATA[<h1 id="第五天">第五天</h1>
<h2 id="css图片处理">CSS图片处理</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片解决方案<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 普通背景图片处理 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.tlist</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./dot_red.gif</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">15px</span>;<span class="comment">/* 调整图片上下的位置 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">12px</span>; <span class="comment">/* 调整图片左右的位置 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 雪碧图使用 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.miaosha</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">zhekouicon_bg.gif</span>) no-repeat -<span class="number">126px</span> -<span class="number">343px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* css sprite 的background-position一定是负值或0 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.other</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">zhekouicon_bg.gif</span>) no-repeat -<span class="number">85px</span> -<span class="number">343px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.img</span>,<span class="selector-class">.img2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">zhekouicon_bg.gif</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 属性值为一个值则为宽度，高度随着宽度等比例变化 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* background-size: contain; */</span></span></span><br><span class="line"><span class="css">            block-size: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.img2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-clip</span>: content-box;<span class="comment">/* 只为内容加背景图片，padding部分不加 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.电脑端：css sprite 雪碧图，css精灵 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将多张辅助(背景)合并为一张图片 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.移动端 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图像软件：fireworks、photoshop、画图 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 做设计图，切图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tlist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这里是列表的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这里是列表的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这里是列表的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这里是列表的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;miaosha&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;other&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="移动端图片处理">移动端图片处理</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>移动端图片处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont/iconfont.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span><span class="selector-class">.iconfont</span>&#123;<span class="comment">/* 优先级问题 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.iconfont</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 移动端图片解决方案 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.png、jpg --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.iconfont字体图标，使用文字作为图标，@font-face-服务器端字体 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.svg:ai --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.base64 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="下导航实例">下导航实例</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>下导航<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont/iconfont.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>,<span class="selector-tag">p</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.fnav</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.fnav</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.fnav</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) <span class="selector-class">.iconfont</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.iconfont</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.fnav</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;fnav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>精选<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-hearto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>娱乐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-like&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>商城<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-like1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="css3d动画">CSS3D动画</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>3D<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h2</span>,<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.view</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">            <span class="attribute">perspective</span>: <span class="number">400px</span>;<span class="comment">/* 视图 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* perspective-origin: bottom left; 视觉的终点 */</span></span></span><br><span class="line"><span class="css">            </span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.three</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform-origin</span>: right center <span class="number">0</span>;<span class="comment">/* 三个值 x,y,z */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease-in-out;</span></span><br><span class="line"><span class="css">            <span class="comment">/* transform-style: preserve-3d; */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.front</span>,<span class="selector-class">.back</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">backface-visibility</span>: hidden;<span class="comment">/* 3D旋转过程中后面是否可见 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.back</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0.5turn</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.three</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>) <span class="built_in">rotateY</span>(-<span class="number">180deg</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.back</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.back</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.back</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第三天CSS3</title>
    <url>/2019/07/10/%E5%89%8D%E7%AB%AF-CSS3/</url>
    <content><![CDATA[<h1 id="第三天">第三天</h1>
<h2 id="css3">CSS3</h2>
<h3 id="css3选择器">css3选择器</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;<span class="comment">/* *通配符，尽量避免使用 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123; <span class="comment">/* 是.box 并且 是第二个子元素 ，此处是1*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">7</span>)&#123; <span class="comment">/* 父元素里的第七个div */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span><span class="selector-pseudo">:last-child</span>&#123; <span class="comment">/* 既是.box又是最后一个子元素 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-color</span>: blue;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">h2</span><span class="selector-pseudo">:first</span>-child&#123; <span class="comment">/* 是h2并且是第一个子元素 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>:green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:last-of-type</span>&#123; <span class="comment">/* 最后一个div */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(odd)&#123; <span class="comment">/* odd 奇数，even 偶数,是div并且是第奇数个子元素 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-style</span>: dashed;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>)&#123;<span class="comment">/* 是div，并且是第3n+1个子元素，n从0开始*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-style</span>: dotted;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>+<span class="selector-class">.box</span>&#123;  <span class="comment">/* .box后面的一个.box，相邻兄弟选择器 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">h2</span>+<span class="selector-tag">div</span>&#123; <span class="comment">/* h2后面的一个div */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>; <span class="comment">/* 圆角矩形 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>~<span class="selector-class">.box2</span>&#123;<span class="comment">/* div后面的所有.box2 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">h2</span><span class="selector-pseudo">::first-letter</span>&#123; <span class="comment">/* h2的第一个字母(汉字) 类似的first-line：第一行 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-attr">[class~=box]</span>&#123; <span class="comment">/* 所有class=box的div class^=box 所有div具有class属性，属性值以box开关 $=以结束 ^=以开始 ~=属性值中带空格 class常用这种写法*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border-width</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-pseudo">::after</span>&#123;<span class="comment">/* 在.box内部的最后*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>:<span class="string">&quot;=&quot;</span>;<span class="comment">/* content表示内容 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>:<span class="string">&quot;before&quot;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>css3选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>css3选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ul<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;<span class="attribute">padding</span>: <span class="number">0</span>;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span><span class="selector-id">#list</span>&#123;    <span class="comment">/* 交集选择器，既是ul又是#list */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span>&#123; <span class="comment">/* &gt;表示子元素, 空格表示后代元素(可能是孙子元素) */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">ul</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123; <span class="comment">/* 找到所有二级列表中的第一个 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 实现下拉菜单 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>国际新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>本地新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>焦点新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>娱乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>国内娱乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>国际娱乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="图片效果">图片效果</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>instance1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>,<span class="selector-tag">p</span>,<span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.trlist</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.trlist</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;<span class="comment">/* 溢出隐藏 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.trlist</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: all <span class="number">0.8s</span> ease-in-out;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.trtext</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: all <span class="number">1.3s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.trtext</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.trtext</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.trlist</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.6</span>)</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.trlist</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.trtext</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* height: 75px; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">51</span>,<span class="number">156</span>,<span class="number">0.4</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;trlist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;trtext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;trtext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;trtext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;trtext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;trtext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;trtext&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="animation动画">animation动画</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>animation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">height</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="css">           <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">animation</span>: dh <span class="number">5s</span> infinite;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 建议关键帧各帧的css属性相同 */</span></span></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> dh&#123;</span></span><br><span class="line"><span class="css">            <span class="number">20%</span>&#123;<span class="attribute">background-color</span>: <span class="number">#f00</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">50%</span>&#123;<span class="attribute">background-color</span>: <span class="number">#f0f</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">80%</span>&#123;<span class="attribute">background-color</span>: <span class="number">#00f</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">100%</span>&#123;<span class="attribute">background-color</span>: <span class="number">#000</span>;&#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="animation实现幻灯片">animation实现幻灯片</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css animation slide<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.slide</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.slide</span>&gt;<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">animation</span>: dh <span class="number">10s</span> infinite;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.slide</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.slide</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.slide</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="keyword">@keyframes</span> dh&#123;</span></span><br><span class="line"><span class="css">            <span class="number">10%</span>&#123;<span class="attribute">margin-left</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">20%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">30%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">40%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">200%</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">50%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">200%</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">60%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">300%</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">70%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">300%</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">80%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">400%</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">90%</span>&#123;<span class="attribute">margin-left</span>: -<span class="number">400%</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="number">100%</span>&#123;<span class="attribute">margin-left</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="flex">flex</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.flex</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;<span class="comment">/* flex的子元素(项目)在一行里显示 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-direction: row-reverse; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* flex-wrap: wrap; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* justify-content: space-around; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.flex</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.flex</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">order</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.flex</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* order:必须写在子元素上，先显示没有order属性的，然后按照order属性从小到大进行显示 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* flex-grow:如果所有子元素的宽度和小于100%，则将剩余的空间按照flex-grow的比例分布 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.flex</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">order</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="table">table</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.table</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.table</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: table-cell;<span class="comment">/* 单元格td th */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 多列高度自适应才必须设置父元素display为table，只设置水平垂直居中时，不需要设置display为table，只设置自己的display为table-cell即可 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.table</span> <span class="selector-class">.tc1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 水平垂直居中 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.tc1</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tc1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tc2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tc3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="h5新标签">h5新标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 都相当于div，只是增加了语义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">&quot;head&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第一天HTML</title>
    <url>/2019/07/08/%E5%89%8D%E7%AB%AF-HTML/</url>
    <content><![CDATA[<h1 id="第一天html">第一天HTML</h1>
<h2 id="课程内容介绍">课程内容介绍</h2>
<p>HTML(HTML5)+CSS(css3、flex、移动开发)+JavaScript(es6)+JS库(Jquery、vue、react、anjular)+AJAX+JSON+webpack(发布) 项目：基于原生代码的移动网站(自适应)、基于js库的电脑端网站(数据基于JSON) restful架构：一个服务器提供一个接口，可以给android、ios、web等使用(提供的数据是JSON格式) 手机网站+电脑网站(国内) 响应式网站(国外)：bootstrap</p>
<h2 id="开发工具">开发工具</h2>
<p>HBuilder、VSCode、webstorm</p>
<h2 id="前端的扩展">前端的扩展</h2>
<p>小程序、typescript</p>
<h2 id="授课安排">授课安排</h2>
<p>第一周：HTML5+CSS3 第二周：JavaScript</p>
<h2 id="htmlcss">HTML+CSS</h2>
<p>HTML5(超文本标记语言) CSS(层叠样式表) 内容与样式相分离 strong与b的区别：效果上都是加粗，strong语义是强调，&lt; b &gt;违背了内容与样式相分离，b属于样式，但单词短，写起来方便；类似的还有em和i</p>
<p>标签： 标签名 | 语义 | - | - | - &lt; h1 &gt; | 标题 &lt; ul &gt; | 无序列表(子元素只能是li) &lt; li &gt; | 子列 &lt; p &gt; | 段 &lt; strong &gt; | 强调 &lt; em &gt; | 强调 &lt; div &gt; | 盒子 &lt; span &gt; | 区域 &lt; a &gt; | 锚点 &lt; img &gt; | 图片</p>
<blockquote>
<p>注：&lt; h2 &gt; &lt; ul &gt; &lt; p &gt; 默认都和周围有距离 display为block的标签(盒子，单独占一行):h1、p、div、ul、li display为inline的标签(不单独占一行):span、a、strong、em、img 不推荐使用的标签：br hr table font等</p>
</blockquote>
<h2 id="代码">代码</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网页的文档类型为HTML5 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标签、标记 tag --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根元素，head和body的父元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定字符集 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- HTML属性(attribute)，如charset就是meta的属性,utf-8则是属性值 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- meta是一个单标签(没有结束标签) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- HTML元素=开始标签+内容+结束标签 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 显示效果：字体字号、粗细、与周围有间距 语义：标题 SEO:搜索引擎优化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h6</span>&gt;</span>小<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- ul的子元素只能是li(在语义上说)，和周围有间距 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在网页设计过程中，不使用列表前面自带的点，因为不同的浏览器对此兼容不同--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 永远不用&lt;br&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;p&gt;和周围有间距--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>静夜思<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>床前明月光<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>疑是地上霜<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>举头<span class="tag">&lt;<span class="name">strong</span>&gt;</span>望<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>明月<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>低头思故乡<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 没有任何显示效果 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 300px; background-color: blue;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size:50px; color: red&quot;</span>&gt;</span>盒<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size:50px; color:green&quot;</span>&gt;</span>子<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 锚点，href中必须是url，即有http等协议标识的 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- a必须要有href属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- title属性与SEO相关 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>空链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span>&gt;</span>空链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2.png&quot;</span> <span class="attr">title</span>=<span class="string">&quot;this is title&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- alt：图片无法加载时的文字替代 title：与SEO相关，解释图片--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当图片宽度变化时，高度会等比例变化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;this is alt&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬浮时显示&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;4.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span>&gt;</span>图片超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定义列表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- dt:标题 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- dd:描述 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- dt和dd有着天生的对应关系，一个dt可以对应多个dd--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>省会沈阳，简称辽<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>江西<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>省会南昌，简称赣<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 除了罗列数据外，不能用表格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 颜色表示方法：#rrggbb 缩写为#rgb</span></span><br><span class="line"><span class="comment">             rgb(255,255,32)</span></span><br><span class="line"><span class="comment">             rgba(232,232,56,0.5) 0.5为透明度</span></span><br><span class="line"><span class="comment">             字符实体：&amp;lt;&amp;nbsp;不推荐使用</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第六天</title>
    <url>/2019/07/15/%E5%89%8D%E7%AB%AF-JS-1/</url>
    <content><![CDATA[<h1 id="第六天">第六天</h1>
<h2 id="javascript">Javascript</h2>
<h3 id="javascript输出">javascript输出</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;hello word&quot;</span>);<span class="comment">//不推荐使用</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">&quot;hello word&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.writeln(<span class="string">&quot;hello word&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h2&gt;Hello&lt;h2&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//控制台输出</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;控制台信息&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//控制台输出对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.dir(<span class="built_in">document</span>);</span></span><br><span class="line"><span class="javascript">        prompt(<span class="string">&quot;请输入年龄：&quot;</span>);</span></span><br><span class="line"><span class="javascript">        confirm(<span class="string">&quot;确认提交么？&quot;</span>);<span class="comment">//不推荐使用</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="javascript数据类型">javascript数据类型</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript基础-数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//var 定义变量，var可以不写，不推荐，严格模式不可以不写，不写就是全局变量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bar = <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            foo = <span class="number">10</span>,</span></span><br><span class="line"><span class="javascript">            o = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&quot;a&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(bar * foo % <span class="number">3</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(bar++ + (++bar)); <span class="comment">//bar++=1,bar-&gt;2,++bar=3</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//此时bar=6</span></span></span><br><span class="line"><span class="javascript">        bar += <span class="number">6</span>;</span></span><br><span class="line"><span class="javascript">        foo = <span class="number">5</span> ? <span class="number">3</span> : <span class="number">6</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(bar + foo);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span> &amp;&amp; <span class="number">1</span> &amp;&amp; <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span> || <span class="number">0</span> != <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//javascript数据类型</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//布尔、数值、字符串、对象、null、undefined</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bar = <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            foo = <span class="string">&quot;str&quot;</span>,</span></span><br><span class="line"><span class="javascript">            arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 返回变量数据类型</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> bar);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">false</span>); <span class="comment">//结果是1，自动转换成1+0</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> o); <span class="comment">// 对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">//数组</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> u;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> u);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//结果是object 但null是null数据类型</span></span></span><br><span class="line"><span class="javascript">        hw();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> hw); <span class="comment">//结果是function</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">hw</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 数据类型转换</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;123&quot;</span>)); <span class="comment">//&quot;123&quot;自动转换成123</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">//true自动转换成1</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;11&quot;</span> + <span class="number">2</span>); <span class="comment">// &quot;112&quot; 字符串+数字-&gt;数字自动转字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">2</span> - <span class="string">&quot;1&quot;</span>); <span class="comment">//1 数字-字符串-&gt;字符串自动转数字</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">2</span> + <span class="string">&quot;a&quot;</span>); <span class="comment">//&quot;2a&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span>); <span class="comment">//number，巨坑...</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&quot;123&quot;</span>); <span class="comment">//string</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//引用类型与普通值类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">//a的数据类型是数组，a是引用类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> b = a; <span class="comment">//b就相当于a的别名，和a指向同一内存空间</span></span></span><br><span class="line"><span class="javascript">        b[<span class="number">0</span>] = <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">//1000;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//作用域</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> foo = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//alert(m);//报错，未定义过</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(foo); <span class="comment">//输出undefined,后定义的变量 变量提升</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> foo = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        main();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> a = b = <span class="number">5</span>;<span class="comment">//a是局部变量，b是全局变量(b的前面没有var)</span></span></span><br><span class="line"><span class="javascript">        &#125;)(); <span class="comment">//自执行函数:定义一个函数并执行它</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(b); <span class="comment">//5</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="js逻辑">js逻辑</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript 逻辑<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (i % <span class="number">7</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">10</span> != <span class="number">7</span> &amp;&amp; <span class="built_in">parseInt</span>(i / <span class="number">10</span>) != <span class="number">7</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.write(<span class="string">&quot;&lt;div&gt;&quot;</span> + i + <span class="string">&quot;&lt;/div&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.write(<span class="string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//作业：使用while写一个函数，求和，参数为n，返回值是1到n的和</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> s=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> i=<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(i==n+<span class="number">1</span>)<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                s+=i;</span></span><br><span class="line"><span class="javascript">                i++;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> s;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        alert(sum(<span class="number">100</span>));</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="js事件">js事件</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript 事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>变宽<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>变窄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>出现<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>消失<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>随机变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>); <span class="comment">//获得#box，结果唯一</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>); <span class="comment">//根据标签名称获得所有button，结果是类数组(array-like)</span></span></span><br><span class="line"><span class="javascript">        button[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// font-size-&gt;fontSize 复杂的css属性在js里要改成驼峰式命名</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// style是html属性，可修改css，名称和html属性相同，例外的是class(className) 和for(For);</span></span></span><br><span class="line"><span class="javascript">            box.style.width = <span class="number">100</span> + <span class="string">&quot;%&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        button[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            box.style.width = <span class="number">300</span> + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        button[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            box.style.display = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        button[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            box.style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        button[<span class="number">4</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//Math.random()//生成一个[0,1)的随机数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//Math.floor:取整</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//Math.round:四舍五入</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> w = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">900</span> + <span class="number">100</span>) + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> h = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">900</span> + <span class="number">100</span>) + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">            box.style.width = w;</span></span><br><span class="line"><span class="javascript">            box.style.height = h;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//作业：随机字体大小(1-90)，随机背景颜色，随机margin</span></span></span><br><span class="line"><span class="javascript">            box.style.fontSize = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">90</span> + <span class="number">1</span>) + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></span><br><span class="line"><span class="javascript">            box.style.backgroundColor = <span class="string">&quot;rgb(&quot;</span> + r + <span class="string">&quot;,&quot;</span> + g + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;)&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> m = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">            box.style.margin = m + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            box.innerHTML = <span class="string">&quot;width:&quot;</span> + w + <span class="string">&quot;&lt;br&gt;height:&quot;</span> + h + <span class="string">&quot;&lt;br&gt;color:&quot;</span> + <span class="string">&quot;rgb(&quot;</span> + r + <span class="string">&quot;,&quot;</span> + g + <span class="string">&quot;,&quot;</span> + b +</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;)&quot;</span>; <span class="comment">//Dom元素内部的html</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//box.innerText//内部文字</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数组">数组</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript array<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 数组的创建</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">8</span>); <span class="comment">//8个元素的数组</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//es6 array</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr4 = <span class="built_in">Array</span>.of(<span class="number">8</span>); <span class="comment">//定义只有一个元素并且是8的数组</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr2);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr3);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 数组的成员和函数</span></span></span><br><span class="line"><span class="javascript">        arr[<span class="number">8</span>] = <span class="number">2000</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 数组的成员之间的数据类型可以不同</span></span></span><br><span class="line"><span class="javascript">        arr[<span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;b&#x27;</span>; <span class="comment">//正确，非数字下标的数组成员不计算在数组长度内</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr.length);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 数组的循环</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i, arr[i]);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//值为undefined的不输出，index为字符串的可以输出</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//es6</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">in</span> arr) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(v);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// i从1开始</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> arr2) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i - <span class="number">1</span>, arr2[i - <span class="number">1</span>]);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 值为undefined不输出</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> narr = arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i, v);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr.constructor == <span class="built_in">Array</span>); <span class="comment">//true 通过构造函数判断一个变量是否为数组</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//true 判断一个变量是否是一个对象的实例</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr)); <span class="comment">//es6,判断是否是数组</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">//输出object，无法判断是否是数组</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//数组的方法</span></span></span><br><span class="line"><span class="javascript">        arr.push(<span class="string">&quot;10&quot;</span>); <span class="comment">//在数组的后面加</span></span></span><br><span class="line"><span class="javascript">        arr.pop(); <span class="comment">//从数组里删除最后一个元素</span></span></span><br><span class="line"><span class="javascript">        arr.unshift(<span class="string">&quot;99&quot;</span>); <span class="comment">//在数组的最前面增加</span></span></span><br><span class="line"><span class="javascript">        arr.shift(); <span class="comment">//在数组的前面删除</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr.indexOf(<span class="number">4</span>)); <span class="comment">//当没找到时，indexof()返回-1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> n = arr.slice(<span class="number">2</span>, <span class="number">4</span>, arr);<span class="comment">//从arr中截取数组的片断，从[2,4)，返回值为截取的新数组，不影响的原有的数组</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(n);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> n = arr.splice(<span class="number">2</span>,<span class="number">3</span>,arr);<span class="comment">//从arr中删除数组的片段，从2开始，删除3个元素，返回删除的元素组成的数组，影响原有的数组</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(n);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr.join(<span class="string">&quot;-&quot;</span>));<span class="comment">//将数组的元素用连接符“-”连接</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr.concat(arr).reverse()</span></span><br><span class="line"><span class="javascript">        );<span class="comment">//concat 将两个数组合并为一个数组 reverse倒序</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = [<span class="number">33</span>,<span class="number">23</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">54</span>,<span class="number">32</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rs = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">v,i</span>)</span>&#123;<span class="comment">//some存在v&gt;60的元素; every每个元素都&gt;60</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> v&gt;<span class="number">60</span>;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rs = arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> a-b;<span class="comment">//升序</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rs = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v,i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> v&gt;<span class="number">70</span>&amp;&amp;v&lt;<span class="number">90</span>;<span class="comment">//找出&gt;70且&lt;90的元素</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//根据已有数组生成一个该数组的映射(新的数组)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rs = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">v,i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> v*i+<span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rs = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> pre+cur;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(rs);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串">字符串</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript string<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="string">&quot;hello word js,js is good&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str.length);</span></span><br><span class="line"><span class="javascript">        str[<span class="number">5</span>]=<span class="string">&quot;Y&quot;</span>;<span class="comment">//不能修改字符串的内容</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str.charAt(<span class="number">6</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str[<span class="number">6</span>]);<span class="comment">//只能读，不能写</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str.indexOf(<span class="string">&quot;js&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str.substring(<span class="number">3</span>,<span class="number">5</span>));<span class="comment">//截取[3,5)内容，第二个参数不写代表到最后，不推荐substr，不标准</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str.slice(<span class="number">3</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = str.split(<span class="string">&quot; &quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = str.split();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = str.split(<span class="string">&quot;&quot;</span>);<span class="comment">//拆成一个个字母</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//题目：写一个方法判断输入的参数是不是回文</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">str</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> str==str.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(fun(<span class="string">&quot;abcba&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str.trim())<span class="comment">//去空格</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str.toUpperCase);<span class="comment">//变大写字母</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="object">Object</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Object<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;Auer&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">gender</span>: <span class="string">&#x27;m&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">bir</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">2001</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(o.name, o[<span class="string">&#x27;age&#x27;</span>]);<span class="comment">//对象的属性</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(o.bir());<span class="comment">//对象的方法</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(o.__proto__);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//对象的遍历，k:key，键</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>( k <span class="keyword">in</span> o)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(k,o[k]);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//JS内部对象，Math、Date</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//获得当前时间，获得的是客户端时间</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(d);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//显示当前时间，格式为yyyy-mm-dd hh:mm:ss</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//d.getMonth()返回值从0开始</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//d.getDay()返回星期几</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//d.getDate()返回几日</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> y = date.getFullYear();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> m = date.getMonth()+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> d = date.getDate();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h = date.getHours();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> M = date.getMinutes();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s = date.getSeconds();</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">num</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(num&lt;<span class="number">10</span>)num=<span class="string">&#x27;0&#x27;</span>+num;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> num;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(y+<span class="string">&quot;-&quot;</span>+fun(m)+<span class="string">&quot;-&quot;</span>+fun(d)+<span class="string">&quot; &quot;</span>+fun(h)+<span class="string">&quot;-&quot;</span>+fun(M)+<span class="string">&quot;-&quot;</span>+fun(s));</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第八天</title>
    <url>/2019/07/17/%E5%89%8D%E7%AB%AF-JS-3/</url>
    <content><![CDATA[<h1 id="第八天">第八天</h1>
<h2 id="面向对象">面向对象</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>面向对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// javascript没有类，es6中的class只是一种语法糖(同一种东西的简单写法)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使用function来实现面向对象</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 对象 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">rect</span>(<span class="params">w,h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//该函数相当于构造函数constructor</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// this是指该对象的实例，定义对象的属性一定要使用this</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.width = w;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.height = h;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 在方法中使用属性，一定要使用this</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.c=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">2</span>*(<span class="built_in">this</span>.width+<span class="built_in">this</span>.height);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.s=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.width*<span class="built_in">this</span>.height;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> r1 = <span class="keyword">new</span> rect(<span class="number">100</span>,<span class="number">200</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r1.width);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r1.c());</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r1.s());</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r1 <span class="keyword">instanceof</span> rect);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r1,rect);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 不建议在正式代码中使用__proto__</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// prototype 原型</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 原型链</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 一个实例的__proto__指向其对象的prototype</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r1.__proto__==rect.prototype);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(rect.prototype.constructor==rect);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(rect.prototype.__proto__== r1.__proto__.__proto__);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(rect.prototype.__proto__==<span class="built_in">Object</span>.prototype)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 总结：子类的prototype中的__proto__指向父类的prototype</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.prototype.king = <span class="string">&quot;monkey&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r1.king);</span></span><br><span class="line"><span class="javascript">        rect.prototype.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span>+<span class="built_in">this</span>.king);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        r1.sayname();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(rect.prototype);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="原型链">原型链</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>原型链继承<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">rect</span>(<span class="params">w,h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.width=w;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.height=h;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">2</span>*(<span class="built_in">this</span>.width+<span class="built_in">this</span>.height);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.s = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.width*<span class="built_in">this</span>.height;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">w</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.width = w;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.height = w;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//使square的prototype为rect</span></span></span><br><span class="line"><span class="javascript">        square.prototype = <span class="keyword">new</span> rect();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s1 = <span class="keyword">new</span> square(<span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s1.c(),s1.s());</span></span><br><span class="line"><span class="javascript">        <span class="comment">//实例的__proto__指向对象的prototype</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//对象的prototype中的__proto__指向其父对象的prototype</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s1.__proto__==square.prototype);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s1.__proto__.__proto__==rect.prototype);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s1.__proto__.__proto__.__proto__==<span class="built_in">Object</span>.prototype);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        rect.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断一个变量是否为square</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s1 <span class="keyword">instanceof</span> square);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(s1.constructor == rect);//不可以通过构造方法判断</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//第二种继承方法，call或apply继承</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">w</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.width = w;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.height = w;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//apply：调用rect函数，rect函数，rect函数内的this为其第一个参数，调用rect函数时rect的参数为其第二个参数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//call：功能和applay相同，参数形式不同</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//call继承不能继承通过prototype扩展属性的方法</span></span></span><br><span class="line"><span class="javascript">            rect.apply(<span class="built_in">this</span>,[w,w]);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// rect.call(this,w,w,);</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// s2.sayHello();call继承不能继承通过prototype扩展属性的方法</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s2 = <span class="keyword">new</span> Square(<span class="number">78</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s2.c(),s2.s());</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="class">class</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>class<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//es6 class，是一种语法糖，本质没变</span></span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">rect</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">constructor</span>(<span class="params">w,h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.width = w;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.height = h;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">c</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">2</span>*(<span class="built_in">this</span>.width+<span class="built_in">this</span>.height);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">s</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.width*<span class="built_in">this</span>.height;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> r1 = <span class="keyword">new</span> rect(<span class="number">10</span>,<span class="number">20</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r1.c(),r1.s());</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">square</span> <span class="keyword">extends</span> <span class="title">rect</span></span>&#123;<span class="comment">//square 是rect的子类</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">constructor</span>(<span class="params">w</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">super</span>(w,w);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.cname = <span class="string">&quot;正方形&quot;</span> <span class="comment">//其它一定要在super后执行</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s1 = <span class="keyword">new</span> square(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s1.c(),s1.s());</span></span><br><span class="line"><span class="javascript">        <span class="comment">//s1是否有height属性</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s1.hasOwnProperty(<span class="string">&quot;height&quot;</span>));<span class="comment">//true</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s1.__proto__==square.prototype);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="string">&quot;s1&quot;</span>)==square.prototype);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s3 = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.setPrototypeOf(s3,s1);<span class="comment">//相当于s3.__proto__=s1</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s3.__proto__,s1);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="定时器">定时器</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>timer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#ad</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ad&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// setTimeout()  -&gt; 经过多久后执行</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// setInterval() -&gt; 每过多久执行一次</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.setTimeout(close, <span class="number">3000</span>); <span class="comment">//close 函数的引用，而非函数的执行</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ad = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#ad&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h = ad.offsetHeight;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// ad.style.display = &quot;none&quot;;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                ad.style.height = h-- + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(h);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (h &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">clearInterval</span>(timer); <span class="comment">//关闭定时器</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="搜索框动态变长效果">搜索框动态变长效果</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>search<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* css 搜索框动态变长 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.search</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: all <span class="number">0.4s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.search</span><span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: <span class="number">150</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="手机触屏事件">手机触屏事件</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>mobile-touch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-id">#main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// hammer:移动事件库</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">        main.addEventListener(<span class="string">&quot;touchmove&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//e.touches[0]手机上的所有手指</span></span></span><br><span class="line"><span class="javascript">            main.innerText=e.targetTouches[<span class="number">0</span>].offSetX+<span class="string">&quot; &quot;</span>+e.targetTouches[<span class="number">0</span>].pageX+</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot; &quot;</span>+e.targetTouches[<span class="number">0</span>].screenX+<span class="string">&quot; &quot;</span>+e.targetTouches[<span class="number">0</span>].clientX+<span class="string">&quot; &quot;</span>+e.touches[<span class="number">0</span>].clientX;<span class="comment">//main上的所有手指</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> endX;</span></span><br><span class="line"><span class="javascript">        main.ontouchstart = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            x = e.targetTouches[<span class="number">0</span>].pageX;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        main.ontouchend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            endX = e.changedTouches[<span class="number">0</span>].pageX;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(endX-x&gt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">                main.innerText=<span class="string">&quot;右滑&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(endX-x&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">                main.innerText = <span class="string">&quot;左滑&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="正则表达式">正则表达式</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>正则表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="string">&quot;abcd&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//test:参数中是否包含符合该正则表达式的值</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//bcd里是事包含a或b或c或d</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/[abc]/</span>.test(<span class="string">&quot;bcd&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">//参数里包含不是abc的值则为true</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/[^abc]/</span>.test(<span class="string">&quot;abcd&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/[0-9]/</span>.test(<span class="string">&quot;abc1&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/\d\w/</span>.test(<span class="string">&quot;a0000&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/[ab]?c/</span>.test(<span class="string">&quot;aaaaaabc&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// * 出现0或n次 + 出现1或n次 ？出现0次或1次</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 电话号码</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/\d&#123;3,4&#125;-\d&#123;7,8&#125;/</span>.test(<span class="string">&quot;1234-1234567&quot;</span>))</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/\￥\d+\.?\d*/</span>.test(<span class="string">&quot;￥22.3&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/^\dA$/</span>.test(<span class="string">&quot;1A&quot;</span>));<span class="comment">//以数字开始，以字母结束</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="regexp">/abc/i</span>.test(<span class="string">&quot;aBC&quot;</span>));<span class="comment">//i 忽略大小写</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="string">&quot;my name is xiao ,Xiao likes js&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> first = str.search(<span class="regexp">/[abxX]iao/</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> newstr = str.replace(<span class="regexp">/xiao/ig</span>,<span class="string">&quot;xiaoming&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newstr);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="滚动时固定效果">滚动时固定效果</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>scroll<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#fixed</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;   </span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">4000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(<span class="number">#000</span>,<span class="number">#ccc</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;header&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fixed = <span class="built_in">document</span>.getElementById(<span class="string">&quot;fixed&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> st = <span class="built_in">document</span>.body.scrollTop||<span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(st);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(st&gt;<span class="number">100</span>)&#123;</span></span><br><span class="line"><span class="javascript">                fixed.style.position = <span class="string">&quot;fixed&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                fixed.style.position = <span class="string">&quot;relative&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第九天</title>
    <url>/2019/07/18/%E5%89%8D%E7%AB%AF-JS-4/</url>
    <content><![CDATA[<h1 id="第九天">第九天</h1>
<h2 id="闭包">闭包</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>closure 闭包<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//闭包是定义在函数内部的函数。通常，函数内定义的函数为返回值</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> n=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;执行了a&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(n);<span class="keyword">return</span> ++n;&#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> b = a();<span class="comment">//执行了a()，但没有执行闭包函数，b是闭包函数的别名</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;b()&quot;</span>+b());</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a()());<span class="comment">//和b()不同，这种调用方式将执行a函数的内部的内容</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过闭包实现点击ul中的li显示是第几个li">通过闭包实现点击ul中的li显示是第几个li</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>closure<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clist</span>&gt;<span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">34px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">34px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;clist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.clist li&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; li.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            li[i].onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// alert(i+1);</span></span></span><br><span class="line"><span class="javascript">                    li[i].innerText = i + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)(i);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;li.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> b = a(i);</span></span><br><span class="line"><span class="javascript">            li[i].onclick=b;<span class="comment">//b即闭包函数，点击第i个li时调用a(i)</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">i</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    li[i].innerText = i+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//3</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;li.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            li[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                li[i].innerText = i+<span class="number">1</span>;<span class="comment">//在事件响应函数内部使用了i</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="es6-新增let-consot">es6 新增let consot</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>es6 新增<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">//块作用域</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> N = <span class="number">100</span>; <span class="comment">//常量</span></span></span><br><span class="line"><span class="javascript">            a = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// N=101;</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(N);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(a);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//异步操作：settimeout和ajax；</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="javascript">            &#125;(i),<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// let在做循环时，和var不同，let是为每次循环单独维持一个值</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="es6解构赋值">es6解构赋值</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>es6 解构赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//解构赋值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> [a,b,c]=[<span class="string">&quot;xiao&quot;</span>,<span class="string">&quot;ming&quot;</span>];</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a,b,c);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//a=&quot;xiao&quot; b=&quot;ming&quot; c=undefined</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> &#123;<span class="attr">id</span>:d,<span class="attr">height</span>:e&#125;=&#123;<span class="attr">id</span>:<span class="number">1123</span>,<span class="attr">height</span>:<span class="number">180</span>&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(d,e);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//d=1123 e=180</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//d,e交换</span></span></span><br><span class="line"><span class="javascript">        [d,e]=[e,d];</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">[x,y]</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> [x+y,x*y];</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(fun([<span class="number">2</span>,<span class="number">3</span>])[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> &#123;<span class="attr">name</span>:xingming&#125;=&#123;<span class="attr">name</span>:<span class="string">&quot;zephon&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(xingming);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//name=undefined，xingming=zephon</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//xingming是name在代码中的变量名称，只能在代码中使用xingming，其值为name对应的值</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="es6-箭头函数">es6 箭头函数</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>es6 箭头函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> f = <span class="function">() =&gt;</span> <span class="number">5</span>; <span class="comment">//相当于 var f=function()&#123;return 5&#125;;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(f()); <span class="comment">//5</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> f2 = <span class="function"><span class="params">v</span> =&gt;</span> v * v; <span class="comment">//相当于 var f2 = function(v)&#123;return v*v&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(f2(<span class="number">5</span>)); <span class="comment">//25</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> f3 = <span class="function">(<span class="params">v1, v2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> v1 + v2 * v2</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(f3(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">//19</span></span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">foo</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">f1</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this表示window</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">                &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this表示对象的实例</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">                &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> o = <span class="keyword">new</span> foo();</span></span><br><span class="line"><span class="javascript">        o.f1();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="es6深入">es6深入</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>es6<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//数组扩展</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> arr2 = [...arr];<span class="comment">//复制一个数组</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// arr2=arr;//只是得到arr的一个别名</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(arr2);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//求n个数的和</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> f = <span class="function">(<span class="params">...rest</span>)=&gt;</span>&#123;<span class="comment">//任意参数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> sum=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            rest.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                sum+=v;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> sum.toFixed(<span class="number">3</span>);<span class="comment">//取3位小数</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(f(<span class="number">0.001</span>,<span class="number">0.022</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> foo = <span class="string">&quot;zephon&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s1=<span class="built_in">Symbol</span>();<span class="comment">//变量提升，变量的声明会自动的放到程序的开始，不包括赋值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> o =&#123;</span></span><br><span class="line"><span class="javascript">            arr,<span class="comment">//属性名叫arr，值是arr的值</span></span></span><br><span class="line"><span class="javascript">            [foo]:<span class="string">&quot;a good guy!&quot;</span>,<span class="comment">//动态属性名</span></span></span><br><span class="line"><span class="javascript">            [s1]:<span class="string">&quot;this is a symbor&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(o.arr,o[<span class="string">&quot;arr&quot;</span>]);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(o.zephon,o[foo],o[<span class="string">&quot;zephon&quot;</span>]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(o[s1]);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 第七种数据类型symbol，独一无二的值 </span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>();<span class="comment">//不知道具体值，由系统维护</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> s2);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//生成相同的symbol</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s3 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s4 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s3==s4);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 动态字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> str = <span class="string">`&#x27;<span class="subst">$&#123;arr&#125;</span>变量<span class="subst">$&#123;foo&#125;</span>======</span></span></span><br><span class="line"><span class="string"><span class="javascript">        destroyed()&#123;    </span></span></span><br><span class="line"><span class="string"><span class="javascript">            ddd</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &#125;,`</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(str);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Set</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(set);</span></span><br><span class="line"><span class="javascript">        set.add(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">        set.add(<span class="number">6</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(set.size);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(set.has(<span class="number">10</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(arr)].length);<span class="comment">//数组去重</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//Map</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> m1 = <span class="string">&quot;zephon&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> m2 = <span class="string">&quot;zephon&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> m3 = [<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> m4 = [<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">        map.set(m1,<span class="string">&quot;blue&quot;</span>);</span></span><br><span class="line"><span class="javascript">        map.set(m2,<span class="string">&quot;green&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(map.get(m1));<span class="comment">//green</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        map.set(m3,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="javascript">        map.set(m4,<span class="string">&quot;pink&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(map.get(m3));<span class="comment">//red</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(map.has(m4));<span class="comment">//true</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(map.has([<span class="number">1</span>]));<span class="comment">//false</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第十天</title>
    <url>/2019/07/19/%E5%89%8D%E7%AB%AF-JS-5/</url>
    <content><![CDATA[<h1 id="第十天">第十天</h1>
<h2 id="json">Json</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Json<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// restful架构,json</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// xml</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> json = &#123;<span class="comment">//对象</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">link</span>:<span class="string">&quot;http://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">img</span>:<span class="string">&quot;img/1.jpg&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">content</span>:<span class="string">&quot;这是content&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">time</span>:<span class="string">&quot;2019-09-10&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//key键，value值，键值对</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> json)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(k,json[k]);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(json.id);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="built_in">JSON</span>.stringify(json));<span class="comment">//将JSON变为字符串</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(json);<span class="comment">//字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> o = <span class="built_in">JSON</span>.parse(str);<span class="comment">//对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(o.link);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="json实际应用">json实际应用</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>json<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>,<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.jlist</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.jlist</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">33.3%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.jlist</span>&gt;<span class="selector-tag">li</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.name</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="css">            <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.time</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;jlist&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// restful架构，json，前端与后台相分离</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// json加入网页：</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 固定个数：事先写好html</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 不固定个数，html都由js插入</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> json = [&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">link</span>:<span class="string">&quot;http://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">img</span>:<span class="string">&quot;../大作业/images/2.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">content</span>:<span class="string">&quot;这是content&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">time</span>:<span class="string">&quot;2019-09-10&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>:<span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">link</span>:<span class="string">&quot;http://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">img</span>:<span class="string">&quot;../大作业/images/2.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">content</span>:<span class="string">&quot;这是content&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">time</span>:<span class="string">&quot;2019-09-10&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">link</span>:<span class="string">&quot;http://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">img</span>:<span class="string">&quot;../大作业/images/2.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">content</span>:<span class="string">&quot;这是content&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">time</span>:<span class="string">&quot;2019-09-10&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> c = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:json,</span></span><br><span class="line"><span class="javascript">            <span class="attr">date</span>:<span class="string">&quot;dddd&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jlist = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.jlist&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;json.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> hang = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;a href=&quot;<span class="subst">$&#123;json[i].link&#125;</span>&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;img src=&quot;<span class="subst">$&#123;json[i].img&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;p class=&quot;name&quot;&gt;<span class="subst">$&#123;json[i].content&#125;</span>&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;p class=&quot;time&quot;&gt;<span class="subst">$&#123;json[i].time&#125;</span>&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;/a&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            `</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">            li.innerHTML = hang;</span></span><br><span class="line"><span class="javascript">            jlist.appendChild(li);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基础bom">基础BOM</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">4000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#000</span>,<span class="number">#ffc</span>);</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">name</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>到顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>到顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>到顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>到顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>到顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn  = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#box&quot;</span>);</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            location.hash = <span class="string">&quot;box&quot;</span>;<span class="comment">//根据name回到顶部</span></span></span><br><span class="line"><span class="javascript">            location.hash = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> st = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(st);</span></span><br><span class="line"><span class="javascript">                st-=<span class="number">30</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,st);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(st&lt;<span class="number">0</span>)<span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            location.reload();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">4</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            location.href = <span class="string">&quot;test1.html&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络-基础</title>
    <url>/2020/12/25/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="卷积神经网络-基础">卷积神经网络-基础</h1>
<h2 id="计算机视觉">计算机视觉</h2>
<p>计算机视觉问题：图片分类、目标检测、图片风格迁移</p>
<p>在较大图片上的深度学习：</p>
<p>假设图片是64 × 64的，则RGB三通道后，结果就是64×64×3=12288，如果图片更大如1000×1000，则1000 × 1000 × 3 = 300万</p>
<p>而如果要输入300万的数据量，则意味着特征向量x的维度高达300万，所以在第一个隐藏层中，或许有1000个隐藏单元，而所有的权值组成的矩阵<span class="math inline">\(W^{[1]}\)</span>，如果使用了标准的全连接网络，则这个矩阵的大小就是(1000,300万)，而这意味着矩阵<span class="math inline">\(W^{[1]}\)</span>会有30亿个参数，在参数如此大量的情况下，难以获取足够的数据来防止神经网络发生过拟合，同时巨大的内存需求也会让人无法接受。</p>
<p>但是对于计算机视觉应用来说，我们一定不想它只能处理小图片，因此，需要进行卷积运算。</p>
<h2 id="边缘检测案例卷积运算如何进行的">边缘检测案例(卷积运算如何进行的)</h2>
<blockquote>
<p>对于一张图片的边缘检测，我们可能会想到对它进行垂直边缘检测和水平边缘检测，但如何在图像中检测这些边缘呢？</p>
</blockquote>
<p>Eg：如图是一个6 × 6的灰度图像(也就是说它是6 × 6 × 1，而不是6 × 6 × 3)</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225230911493.png" alt="image-20201225230911493" /><figcaption>image-20201225230911493</figcaption>
</figure>
<p>为了检测图像中的<strong>垂直边缘</strong>，可以构造一个3 × 3的矩阵，这样一个矩阵通常在卷积神经网络的术语中称为<strong>过滤器</strong>(在论文中有时会称为<strong>核</strong>)，这个矩阵如下图</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225231127552.png" alt="image-20201225231127552" /><figcaption>image-20201225231127552</figcaption>
</figure>
<p>然后对这个6 × 6的图像进行<strong>卷积运算</strong>(用"*")表示，卷积得到一个4 × 4的矩阵，如图，计算步骤，以左上角第一个数为例，将3 × 3矩阵与6 × 6矩阵的左上角取3 × 3的矩阵对位相乘再想加，得到的结果即4 × 4矩阵左上方第一个数的值</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225232243785.png" alt="image-20201225232243785" /><figcaption>image-20201225232243785</figcaption>
</figure>
<p>如果用python来实现，则会使用conv_forwoard()函数进行卷积运算，如果是在tensorflow，则是tf.nn.conv2d，如果是keras，则是Conv2D，基本上所有的编程框架，都会有一些函数来实现卷积运算</p>
<blockquote>
<p>注：这种操作有时被称为互相关而不是卷积，因为严格意义上的数学中定义的卷积中在做元素乘积求和之前，还需要先将过滤器沿水平和垂直轴翻转，但按机器学习的惯例，通常不需要进行这个翻转操作</p>
</blockquote>
<blockquote>
<p>为什么这个可以做垂直边缘检测呢？</p>
</blockquote>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225232801410.png" alt="image-20201225232801410" /><figcaption>image-20201225232801410</figcaption>
</figure>
<blockquote>
<p>中间3 × 3的矩阵意味着左边亮的部分中间不需要考虑，右边是暗的部分</p>
</blockquote>
<h2 id="更多的边缘检测">更多的边缘检测</h2>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225233145414.png" alt="image-20201225233145414" /><figcaption>image-20201225233145414</figcaption>
</figure>
<p>还是上述的例子，将6 × 6矩阵稍作变动，就会发现结果的30都变成了-30，表明这是由暗向亮过渡，而不是由亮向暗过渡，因此，这个过滤器确实可以<code>区分两种明暗变化的区别</code></p>
<p>同样的，水平边缘检测的过滤器如下图</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225233801912.png" alt="image-20201225233801912" /><figcaption>image-20201225233801912</figcaption>
</figure>
<p>还有一些其它的过滤器图，如</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225233914828.png" alt="image-20201225233914828" /><figcaption>image-20201225233914828</figcaption>
</figure>
<p>它的优点在于：增加了中间一行元素的权重，这使得结果的鲁棒性会更高一些</p>
<p>再如：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225234015307.png" /></p>
<p>实际上这也是一种垂直边缘检测，如果道将其翻转90度，就能得到对应的水平边缘检测</p>
<p>随着深度学习的发展，当想要真正检测出复杂图像的边缘时，不一定要使用固定的某九个数字，可以将矩阵中的9个数字当成9个参数<span class="math inline">\(w_1 \sim w_9\)</span>，然后使用反向传播，相比之前那些简单的过滤器，它可以检测出45°或70°甚至任意角度的边缘</p>
<h2 id="填充padding">填充(Padding)</h2>
<blockquote>
<p>为了构建深度神经网络，需要学会使用的一个基本的卷积操作就是padding</p>
</blockquote>
<p>之前的内容中可能看到，用一个3 × 3的过滤器卷积一个6 × 6的图像，会得到一个4 × 4的矩阵输出，那是因为用一个3 × 3的过滤器在一个6 × 6的矩阵中只可能有4 × 4种可能位置</p>
<p>背后的数学解释是：如果有一个n × n图像，用一个f × f的过滤器做卷积，则会输出一个(n-f+1) × (n-f+1) 维矩阵</p>
<blockquote>
<p>这样的话会有两个缺点：</p>
<ol type="1">
<li>每次卷积操作，都会让图像缩小</li>
<li>角落边的像素只会被一个输出所使用，而中间的像素点，就会有许多3 × 3的矩阵与之重叠，就会被多个输出所使用；即角落或边缘区的像素点在输出中采样少，相当于会丢掉图像边缘位置；</li>
</ol>
</blockquote>
<p>为了解决这两个缺点：</p>
<ol type="1">
<li>缩小输出</li>
<li>在卷积操作之前，填充图像(pad)，填充后，输入图像变成了8 × 8图像，输出变成了6 × 6矩阵，设p是填充的数量，则此案例中p=1(因为在周围都填充了一个像素点)，输出也就变成了(n+2p-f+1) × (n+2p-f+1)</li>
</ol>
<p>Valid卷积和Same卷积：</p>
<p>Valid卷积：不填充，n × n * f × f -&gt; n-f+1 × n-f+1</p>
<p>Same卷积：填充后输出大小和输入大小一样，则<span class="math inline">\(n+2p-f+1=n \Rightarrow p=\frac{f-1}{2}\)</span>，</p>
<blockquote>
<p><span class="math inline">\(f\)</span>通常是奇数的原因：</p>
<ol type="1">
<li>如果f是一个偶数，那么就只能使用一些不对称填充，只有f是奇数时，same卷积都会有自然的填充</li>
<li>当有一个奇数维过滤器时，它就有一个中心点，有时在计算机视觉中，有一个中心像素点会更方便，便于指出过滤器的位置</li>
</ol>
</blockquote>
<h2 id="卷积步长strided-convolutions">卷积步长(Strided Convolutions)</h2>
<blockquote>
<p>卷积步长就是过滤器在输入图像上每次移动的步数，如图是步长为2的情况</p>
</blockquote>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226102853468.png" alt="image-20201226102853468" /><figcaption>image-20201226102853468</figcaption>
</figure>
<p>新的卷积公式 <span class="math display">\[
n×n \ *\ f×f \rightarrow \lfloor\frac{n+2p-f}{s}+1\rfloor × \lfloor\frac{n+2p-f}{s}+1\rfloor\\
padding：p；stride：s ；如果商不是一个整数，则向下取整(\lfloor \rfloor：向下取整符号)
\]</span></p>
<h2 id="三维卷积">三维卷积</h2>
<p>假设需要卷积一个RGB图像，则6×6的图像对应的就是6×6×3，为了检测边缘，对应的需要和一个3×3×3的过滤器卷积，三个数通常对应的高、宽、通道数(RGB对应三通道)，输入图像和过滤器通道数必须相同，如图</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226105848237.png" alt="image-20201226105848237" /><figcaption>image-20201226105848237</figcaption>
</figure>
<p>对应的计算，和二维类似，也是将3×3×3=27个数相乘再想加得到结果</p>
<p>而如果为了检测红色的边缘，则可以将三个通道中的R通道置为二维边缘检测对应的过滤器，G和B则全置0，同样的，如果将三个通道全置为二维边缘检测对应的过滤器，则可以检测任意颜色通道的边缘</p>
<p>多过滤器情况，如下图：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226110638537.png" alt="image-20201226110638537" /><figcaption>image-20201226110638537</figcaption>
</figure>
<blockquote>
<p>总结：</p>
<p><span class="math inline">\(n×n×n_c\ *\ f×f×n_c \rightarrow n-f+1 × n-f+1 × n_c&#39;(n_c&#39;:过滤器数量)\)</span></p>
</blockquote>
<h2 id="单层卷积网络">单层卷积网络</h2>
<p>如图，将输入图像和两个过滤器卷积，最终 各自形成一个卷积神经网络层，然后增加偏差，然后应用非线性函数如ReLU，输出一个4×4矩阵</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226152031740.png" alt="image-20201226152031740" /><figcaption>image-20201226152031740</figcaption>
</figure>
<blockquote>
<p>卷积层符号总结：</p>
<p>如果第l层是卷积层，则：</p>
<p><span class="math inline">\(f^{[l]}\)</span>：表示过滤器大小</p>
<p><span class="math inline">\(p^{[l]}\)</span>：填充数量</p>
<p><span class="math inline">\(s^{[l]}\)</span>：步幅</p>
<p><span class="math inline">\(n_c^{[l]}\)</span>：过滤器的数量</p>
<p>输入：<span class="math inline">\(n_H^{[l-1]}×n_W×n_c^{[l-1]}\)</span></p>
<p>输出：<span class="math inline">\(n_H^{[l]}×n_W^{[l]}×n_c^{[l]}\)</span></p>
<p><span class="math inline">\(n_H^{[l]} = \lfloor \frac{n_H^{[l-1]+2p^{[l]-f^{[l]}}}}{s^{[l]}} + 1 \rfloor\)</span></p>
<p><span class="math inline">\(n_W^{[l]} = \lfloor \frac{n_W^{[l-1]+2p^{[l]-f^{[l]}}}}{s^{[l]}} + 1 \rfloor\)</span></p>
<p>每个过滤器shape:<span class="math inline">\(f^{[l]}×f^{[l]}×n_c^{[l-1]}\)</span></p>
<p>激活函数：<span class="math inline">\(a^{[l]} \rightarrow n_H^{[l]}×n_W^{[l]}×n_c^{[l]}\)</span></p>
<p>在mini-batch向量化后：<span class="math inline">\(A^{[l]} \rightarrow m×n_H^{[l]}×n_W^{[l]}×n_c^{[l]}\)</span></p>
<p>权重：<span class="math inline">\(f^{[l]}×f^{[l]}×n_c^{[l-1]}×n_c^{[l]}\)</span></p>
<p>偏差：<span class="math inline">\(n_c^{[l]} - (1,1,1,n_c^{[l]})\)</span></p>
</blockquote>
<h2 id="简单卷积网络示例">简单卷积网络示例</h2>
<blockquote>
<p>假设有一张图片，想做图片分类或图片识别，将这张图片定义为x，然后判断图片中是否有猫。</p>
</blockquote>
<p>针对这个例子，以一张较小的图片为例，如39×39×3，如下图</p>
<p><span class="math inline">\(n_H^{[0]}=n_W^{[0]}=39,n_c^{[0]}=3\)</span></p>
<p>假设第一层用一个3×3过滤器提取特征，即<span class="math inline">\(f^{[1]}=3,s^{[1]}=1,p^{[1]}=0\)</span>，如果有10个过滤器，则神经网络下一层为37×37×10</p>
<p><span class="math inline">\(n_H^{[1]}=n_W^{[1]}=37,n_c^{[1]}=10\)</span></p>
<p>假设再用一个5×5过滤器，即<span class="math inline">\(f^{[2]}=5,s^{[2]}=2,p^{[2]}=0\)</span>，如果有20个过滤器，则神经网络下一层为17×17×20</p>
<p><span class="math inline">\(n_H^{[2]}=n_W^{[2]}=17,n_c^{[2]}=20\)</span></p>
<p>假设再用一个5×5过滤器，即<span class="math inline">\(f^{[2]},s^{[2]}=2,p^{[2]}=0\)</span>，如果有40个过滤器，则神经网络下一层为7×7×40，计算出来就是1960个特征，然后对该卷积层进行处理，可以将其展开成1960个单元，输出一个向量，然后Logistic Regression 或 Softmax Regression，输出预测值<span class="math inline">\(\hat y\)</span></p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226155934667.png" alt="image-20201226155934667" /><figcaption>image-20201226155934667</figcaption>
</figure>
<p>一个典型的卷积网络通常有三类层：</p>
<ul>
<li>卷积层，常用Conv标注</li>
<li>池化层，常用POOL标注</li>
<li>全连接层，常用FC表示</li>
</ul>
<h2 id="池化层pooling-layers">池化层(Pooling layers)</h2>
<p>池化层：最大池化(Max pooling)</p>
<p>如图，对于一个4×4的矩阵，执行最大池化的输出是一个2×2矩阵，将4×4矩阵进行类似卷积的操作，只是将相乘再想加的步骤换成取最大值</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226195203508.png" alt="image-20201226195203508" /><figcaption>image-20201226195203508</figcaption>
</figure>
<p>相当于2×2的过滤器，步幅为2，即超参数f=2,s=2</p>
<p>最大化运算的实际作用就是：如果在过滤器中提取到某个特征，则保留其最大值，如果没有提取到这个特征，则最大值也还是很小</p>
<p>同理，如果有多个通道，则分别对每个通道单独进行上述操作，得到多通道结果</p>
<p>平均池化(不太常用)：</p>
<p>和最大池化类似，但选择的不最大值，而是平均值，如图</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226200142414.png" alt="image-20201226200142414" /><figcaption>image-20201226200142414</figcaption>
</figure>
<blockquote>
<p>池化总结：</p>
<p>超参数：</p>
<p><span class="math inline">\(f\)</span>：过滤器大小</p>
<p><span class="math inline">\(s\)</span>：步幅大小</p>
<p>少数情况下，会有：</p>
<p>p：填充</p>
<p>输入维度：<span class="math inline">\(n_H×n_W×n_c\)</span></p>
<p>输出维度：<span class="math inline">\(\lfloor \frac{n_H-f}{s}+1 \rfloor × \lfloor\frac{n_W-f}{s}+1\rfloor×n_c\)</span></p>
<p>池化过程中没有需要学习的参数，所以反向传播没有参数适用于最大池化</p>
</blockquote>
<h2 id="卷积神经网络示例">卷积神经网络示例</h2>
<blockquote>
<p>假设，有一张32×32×3的输入图片，需要进行手写数字识别</p>
</blockquote>
<p>假设第一层使用过滤器5×5，步幅为1，无填充，过滤器个数是6，则输出维度为28×28×6(后面增加偏差、应用非线性函数等文字省略)，将输出的这层记为Conv1</p>
<p>然后构建一个池化层，选用最大池化，参数f=2,s=2(padding=0省略)，则输出维度14×14×6，将该输出标记为POOL1</p>
<blockquote>
<p>卷积通常有两种分类，这与层的划分存在一致性</p>
<p>一类卷积是：一个卷积层和一个池化层一起作为一层；</p>
<p>另一类卷积是：将卷积层作为一层，而池化层单独作为一层</p>
<p>人们在计算神经网络层数时，通常只统计具有权重和参数的层，由于池化层没有权重和参数，只有一些超级参数，因此，这里将Conv1和POOL1作为一个卷积，并标记为Layer1</p>
</blockquote>
<p>同理后续步骤如图：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226202312020.png" alt="image-20201226202312020" /><figcaption>image-20201226202312020</figcaption>
</figure>
<p>最终展开后得到400个单元的输出，然后用这400个单元构建下一层，下一层含有120个单元，也是第一个全连接层，标记为FC3，因为这120个单元和之前400个单元紧密连接(即400个单元与120个单元中的每一个相连接)，很像之前的单神经网络，是标准的神经网络，所以称为<strong>全连接层</strong>。对应的有一个120×400的权重矩阵<span class="math inline">\(W^{[3]}\)</span>和一个偏差参数</p>
<p>然后再添加一个84个单元的全连接层，称为FC4，最后用这84个单元的输出填充softmax单元，对于手写数字识别而言，softmax就会有10个输出</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226202918400.png" alt="image-20201226202918400" /><figcaption>image-20201226202918400</figcaption>
</figure>
<blockquote>
<p>需要注意的是：</p>
<ol type="1">
<li>超参数尽量不要自己随意设置，而是先参考文献中效果较好的数值</li>
<li>随着神经网络深度的加深，会发现<span class="math inline">\(n_H\)</span>和<span class="math inline">\(n_W\)</span>通常都会减少，而<span class="math inline">\(n_c\)</span>会增加</li>
<li>在神经网络中另一种常见的模式是：一个或多个卷积层后加一个池化层，然后一个或多个卷积层后面再跟一个池化层，然后是几个全连接层，最后是一个softmax</li>
</ol>
</blockquote>
<p>网络中不同层的激活值形状和大小</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>激活值形状(shape)</th>
<th>激活值大小(size)</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入层</td>
<td>(32,32,3)</td>
<td>3,072</td>
<td>0</td>
</tr>
<tr class="even">
<td>CONV1(f=5,s=1)</td>
<td>(28,28,8)</td>
<td>6,272</td>
<td>208</td>
</tr>
<tr class="odd">
<td>POOL1</td>
<td>(14,14,8)</td>
<td>1,568</td>
<td>0</td>
</tr>
<tr class="even">
<td>CONV2(f=5,s=1)</td>
<td>(10,10,6)</td>
<td>1,600</td>
<td>416</td>
</tr>
<tr class="odd">
<td>FC3</td>
<td>(120,1)</td>
<td>120</td>
<td>48,001</td>
</tr>
<tr class="even">
<td>FC4</td>
<td>(84,1)</td>
<td>84</td>
<td>10,081</td>
</tr>
<tr class="odd">
<td>Softmax</td>
<td>(10,1)</td>
<td>10</td>
<td>841</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：</p>
<ol type="1">
<li>输入层和池化层-最大池化层没有参数</li>
<li>卷积层的参数相对较少</li>
<li>随着神经网络加深，激活值会逐渐变小，如果激活值下降太快，也会影响网络性能</li>
</ol>
</blockquote>
<h2 id="为什么使用卷积神经网络">为什么使用卷积神经网络？</h2>
<p>和只用全连接层相比，卷积层的优势：</p>
<ol type="1">
<li>参数共享：一个特征检测(如垂直边缘检测)，对于图像的一部分适用，那么它也可能适用于图片的其它区域</li>
<li>稀疏连接：在每一层，每个输出值只依赖于少量的输入，如输出的左上角的值只依赖于输入左上角部分的单元格</li>
</ol>
<p>如对于一张32×32×3(=3072)的图，通过f=5的6个过滤器卷积后，结果是28×28×6=4704</p>
<p>而如果构建一个普通神经网络，则如果一层含有3072个单元，下一层有4704个单元，以全连接形式连接，计算权重矩阵，则这个权重矩阵维度为3072×4704约等于1400万，所以需要训练的参数会很多，并且随着图片大小的增大，这个权重矩阵还会更大，</p>
<p>而对于卷积方式的参数数量，则只需要5×5+1(1个偏差参数)=26×6=156个参数</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226210647458.png" alt="image-20201226210647458" /><figcaption>image-20201226210647458</figcaption>
</figure>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络-实例探究</title>
    <url>/2020/12/26/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E5%AE%9E%E4%BE%8B%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h1 id="卷积神经网络-实例探究">卷积神经网络-实例探究</h1>
<h2 id="为什么要进行实例分析">为什么要进行实例分析？</h2>
<blockquote>
<p>之前已经了解过了卷积神经网络的一些基本知识-卷积层、池化层、全连接层等，人们花费许多时间在探究如何将这些不同的层进行连接形成有更有效的神经网络，而找到这种方法(或感觉)的最好方法之一就是看一些实例。</p>
</blockquote>
<h2 id="经典网络">经典网络</h2>
<h3 id="lenet-5">LeNet-5</h3>
<p>LeNet-5是针对灰度图像训练的，所以输入通道只有1，结构如图</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226211935913.png" alt="image-20201226211935913" /><figcaption>image-20201226211935913</figcaption>
</figure>
<blockquote>
<p>包含约6万个参数</p>
</blockquote>
<p><a href="https://www.researchgate.net/publication/2985446_Gradient-Based_Learning_Applied_to_Document_Recognition">参考文献:Gradient-Based Learning Applied to Document Recognition</a></p>
<h3 id="alexnet">AlexNet</h3>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226212903842.png" alt="image-20201226212903842" /><figcaption>image-20201226212903842</figcaption>
</figure>
<blockquote>
<p>AlexNet和LeNet类似，但更大，包含约6000万个参数</p>
<p>使用了ReLU激活函数</p>
<p>多GPU</p>
<p><del>LRN层：局部响应归一化层(Local Response Normalization)</del></p>
</blockquote>
<p><a href="http://www.cs.toronto.edu/~hinton/absps/imagenet.pdf">参考文献:ImageNet Classification with Deep Convolutional Neural Networks</a></p>
<h3 id="vggnetvgg-16">VGGNet(VGG-16)</h3>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226214414518.png" alt="image-20201226214414518" /><figcaption>image-20201226214414518</figcaption>
</figure>
<blockquote>
<p>VGG-16中的16指在网络中包含16个卷积层和全连接层</p>
<p>总共包含约1.38亿个参数</p>
</blockquote>
<p><a href="https://arxiv.org/pdf/1409.1556">参考文献:Very Deep Convolutional Networks for Large-Scale Image Recognition</a></p>
<h2 id="残差网络residual-networksresnets">残差网络(Residual Networks(ResNets))</h2>
<h3 id="残差块residual-block">残差块(Residual block)</h3>
<p>ResNets是由残差块构建的</p>
<p>如图是一个两层神经网络，在L层进行激活，得到<span class="math inline">\(a^{[l+1]}\)</span>再次进行激活，两层之后，得到<span class="math inline">\(a^{[l+2]}\)</span> <span class="math display">\[
a^{[l]} \xrightarrow[z^{[l+1]}=W^{[l+1]}a^{[l]}+b^{[l+1]}]{} Linear \rightarrow ReLU \xrightarrow[a^{[l+1]}=g(z^{[l+1]})]{a^{[l+1]}}Linear \xrightarrow[z^{[l+2]}=W^{[l+2]}a^{[l+1]}+b^{[l+2]}]{} \\ ReLU \xrightarrow[a^{[l+2]}=g(z^{[l+2]})]{} a^{[l+2]}
\]</span> 换句话说，从<span class="math inline">\(a^{[l]}\)</span>到<span class="math inline">\(a^{[l+2]}\)</span>，需要经过以上所有步骤，即这些网络的主路径</p>
<p>在残差网络中有一点变化，将<span class="math inline">\(a^{[l]}\)</span>直接迅速向后拷贝到神经网络的深层，在ReLU非线性激活前加上<span class="math inline">\(a^{[l]}\)</span>，构成一条捷径"short cut"(远跳连接"skip connection")，意味着最后的<span class="math inline">\(a^{[l+2]}=g(z^{[l+2]})\)</span>去掉了，取而代之的是<span class="math inline">\(a^{[l+2]}=g(z^{[l+2]}+a^{[l]})\)</span></p>
<p>通过这种残差块的方式，能够训练更深的神经网络，所以构建一个ResNet网络，就是通过将很多这样的残差块堆积在一起，形成一个深度神经网络</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226221805757.png" alt="image-20201226221805757" /><figcaption>image-20201226221805757</figcaption>
</figure>
<h3 id="残差网络residual-network">残差网络(Residual Network)</h3>
<p>如图是一个"Plain Network"，将它变成"ResNet"的方法是，加上所有的"skip connections"/"shortcut connections"，和前面一样，第两层增加一个捷径，构成一个残差块，5个残差块连接在一起，构成一个残差网络</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226222440538.png" alt="image-20201226222440538" /><figcaption>image-20201226222440538</figcaption>
</figure>
<p>如图下面部分，在"Plain Network"中，虽然理论上应该神经网络层数越深，错误率越低，但实际上却往往会先下降再上升，而ResNet中则几乎会一起下降</p>
<p><a href="">参考文献</a></p>
<h2 id="残差网络会什么有用">残差网络会什么有用？</h2>
<p>如图，假设有一个大型神经网络，输入为X，输出激活值<span class="math inline">\(a^{[l]}\)</span>,如果想增加这个神经网络的深度，方便起见，假设使用的激活函数都是ReLU，且激活值a大于等于0，</p>
<p>如果增加两层，将这两层看作一个残差块，则<span class="math inline">\(a^{[l+2]}=g(z^{[l+2]}+a^{[l]})=g(W^{l+2]}a^{[l+1]}+b^{[l+2]}+a^{[l]})\)</span>，</p>
<p>如果<span class="math inline">\(W^{[l+2]}=0,b^{[l+1]}=0\)</span>，则<span class="math inline">\(a^{[l+2]}=g(a^{[l]})\)</span>，则<span class="math inline">\(a^{[l+2]}=a^{[l]}\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226224134777.png" /></p>
<blockquote>
<p>结果表明，残差块学习这个恒等函数并不难，"skip connection"帮助我们很容易得到<span class="math inline">\(a^{[l+2]}=a^{[l]}\)</span>，这也就意味着，即使给这个网络增加了这两层，它的效率也并不逊色于更简单的神经网络</p>
<p>当然，如果这些新增的隐藏层单元可以学到一些有用的信息，那么它可能会比恒等函数表现的更好</p>
</blockquote>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226224639302.png" alt="image-20201226224639302" /><figcaption>image-20201226224639302</figcaption>
</figure>
<h2 id="网络中的网络network-in-network和11卷积">网络中的网络(Network in Network)和1×1卷积</h2>
<h3 id="为什么11卷积">为什么1×1卷积？</h3>
<p>如图，将一个6×6×1的图片，与一个1×1×1的过滤器作卷积，相当于把这个图片中每个数字乘以2，这对单通道图片而言，看上去并没有什么效果；</p>
<p>但如果是一张6×6×32的图片，与一个1×1×32的过滤器作卷积，</p>
<p>具体来说，1×1卷积所实现的功能是：遍历这36个单元格，计算左图中32个数字和过滤器中32个数字的元素智能乘积(Element wise product)，然后应用ReLU非线性函数，得到一个实数，作为输出中的一个元素</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226230148608.png" alt="image-20201226230148608" /><figcaption>image-20201226230148608</figcaption>
</figure>
<blockquote>
<p>1×1卷积可以从根本上理解为：这32个单元都应用了一个全连接神经网络，全连接层的作用是输入32个数字，和过滤器数量，在6×6=36个单元上重复进行，输出结果是6×6×过滤器数量，以便在输入层上实施一个"pretty non-trivial computation"，这种方法通常被称为1×1卷积，有时也称为Network in Network</p>
</blockquote>
<p><a href="http://arxiv.org/pdf/1312.4400">参考文献:Network In Network</a>)</p>
<h3 id="卷积的一个应用">1×1卷积的一个应用</h3>
<p>如图，有一个28×28×129的输入层，可以使用池化层压缩它的高度和宽度，但是，如果通道数量很大，该如何压缩呢？</p>
<p>可以使用32个大小为1×1的过滤器，严格地说是1×1×192，输出层为28×28×32，这就是压缩<span class="math inline">\(n_c\)</span>的方法，然而池化层，则只是压缩了这些层的高度和宽度</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201226232038321.png" alt="image-20201226232038321" /><figcaption>image-20201226232038321</figcaption>
</figure>
<h2 id="inception-network">Inception Network</h2>
<h3 id="motivation-for-inception-network">Motivation for Inception Network</h3>
<blockquote>
<p>Inception Network的作用就是你替你决定过滤器的大小究竟是多少或要不要添加池化层等，但它会让网络架构变得更加复杂，但网络表现却很好</p>
</blockquote>
<p>如图，是一个28×28×192的输入层，Inception Network或Inception Layer的作用是代替人工决定卷积层中的过滤器类型或确定是否需要创建卷积层或池化层</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227112249498.png" alt="image-20201227112249498" /><figcaption>image-20201227112249498</figcaption>
</figure>
<blockquote>
<p>基本思想是Inception Network不需要选择使用哪个过滤器或是池化，而是由网络自行确定这些参数，然后将这些输出连接起来，让网络自己学习它需要什么样的参数，采用哪些过滤器组合</p>
</blockquote>
<p><a href="https://www.researchgate.net/publication/305196650_Going_deeper_with_convolutions">参考文献:Going deeper with convolutions</a></p>
<h3 id="计算成本的问题">计算成本的问题</h3>
<p>将重点放在上述图中的5×5过滤器，则如下图</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227113212477.png" alt="image-20201227113212477" /><figcaption>image-20201227113212477</figcaption>
</figure>
<p>计算这个28×28×32输出的计算成本：</p>
<p>它有32个过滤器，因为输出有32个通道，每个过滤器大小为5×5×192，输出大小是20×20×32，所以要计算(28×28×32)个数字， 对于输出中的每个数字而言，都要执行(5×5×192)次乘法运算，所以乘法运算的总次数为每个输出值所需的乘法运算次数乘以输出值的个数((28×28×32)×(5×5×192))=1.2亿</p>
<h3 id="使用11卷积">使用1×1卷积</h3>
<p>如图，和上述计算有相同的输入和输出</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227113723554.png" alt="image-20201227113723554" /><figcaption>image-20201227113723554</figcaption>
</figure>
<blockquote>
<p>事实证明，只要合理构建瓶颈层，既可以显著缩小表示层规模，又不会降低网络性能，从而大量节省了计算。</p>
</blockquote>
<h3 id="inception-模块">Inception 模块</h3>
<p>Inception模块会将之前层的激活或输出作为它的输入</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227172240582.png" alt="image-20201227172240582" /><figcaption>image-20201227172240582</figcaption>
</figure>
<h3 id="inception-network-1">Inception Network</h3>
<p>如图，可以发现图中有许多重复的模块，如果只取其中一部分，会发现它就是之前的Inception模块，有的还会有一些额外的最大池化层，Inception Network其实只是许多之前据说的Inception Module在不同位置重复组成的网络。</p>
<p>此外，网络中其实还有一些分支，在网络的最后几层，通常称为全连接层，之后是一个Softmax层来做预测，而这些分支所做的就是通过隐藏层来做出预测，所以其实是一个softmax输出，它确保了即便是隐藏单元和中间层也参与了特征计算，也能预测图片的分类，在Inception Network中直到一种调整的效果，并能防止过拟合</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227173532543.png" alt="image-20201227173532543" /><figcaption>image-20201227173532543</figcaption>
</figure>
<h2 id="迁移学习">迁移学习</h2>
<blockquote>
<p>Eg：假设需要建立一个猫的检测器，需要检测图片中的是A类猫还是B类猫还是都不是，忽略两种猫同时出现在一张图片里的情况</p>
</blockquote>
<p>现在，对于这个任务，可能没有大量的相关图片，所以训练集会很小，可以从网上下载一些神经网络开源的实现，除了代码外，权重也需要下载，如ImageNet数据集对应的，它有1000个不同的类别，因此有一个Softmax单元，可以去掉这个softmax单元，然后创建用于这个任务的softmax单元来输出A、B、N三个类别，就网络而言，可以将前面所有层都看作是冻结的，网络中所有层的参数都是被冻结的，只需要训练和softmax有关的参数，通过使用其它人预训练的权重，可能可以得到很好的性能，即使只有一个小的数据集。</p>
<p>并且，对于大多数神经网络，都支持这种迁移操作，事实上，取决于使用的框架，也许有trainableParameter=0这样的参数，对于冻结的层，可以设置这个参数来让网络不训练这些权重，有时也是freeze=1等</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227175302682.png" alt="image-20201227175302682" /><figcaption>image-20201227175302682</figcaption>
</figure>
<blockquote>
<p>加速训练的一个技巧：</p>
<p>将冻结部分最后层的计算的特征或激活值，然后存到硬盘中，进而对于每个输入x，可以直接映射到冻结部分的最后输出，相当于在训练时缩短了神经网络的层数。</p>
</blockquote>
<p>而如果训练集的大小更大一些，则可以冻结更少的层</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227180138230.png" alt="image-20201227180138230" /><figcaption>image-20201227180138230</figcaption>
</figure>
<p>而如果训练集足够大，则应该将下载的权重当做初始化，然后训练网络</p>
<h2 id="数据增强data-augmentation">数据增强(Data Augmentation)</h2>
<blockquote>
<p>大部分的计算机视觉任务使用很多的数据，数据增强是一种经常用来提高计算机视觉系统表现的技巧</p>
</blockquote>
<h3 id="普通增强方法">普通增强方法</h3>
<p>垂直镜像对称方法(Mirroring)：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227180944240.png" alt="image-20201227180944240" /><figcaption>image-20201227180944240</figcaption>
</figure>
<p>随机裁剪(Random Cropping)：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227181212935.png" alt="image-20201227181212935" /><figcaption>image-20201227181212935</figcaption>
</figure>
<p>以上两种是经常被使用的，但理论上，也可以使用旋转(rotation)、剪切(shearing)、局部弯曲(local warping)等</p>
<h3 id="颜色转换">颜色转换</h3>
<p>如图，给图片RGB三通道上加减不同的失真值，进行颜色转换</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227181730903.png" alt="image-20201227181730903" /><figcaption>image-20201227181730903</figcaption>
</figure>
<h3 id="在训练期间实现变形implementing-distortions-during-training">在训练期间实现变形(Implementing distortions during training)</h3>
<p>通常将图片数据从硬盘上读取后，可以使用CPU多线性对图片进行变形处理如镜像、变色等，然后将构成的批数据或mini batch传输给其它线程(可以是CPU也可以是GPU)进行训练</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227182327667.png" alt="image-20201227182327667" /><figcaption>image-20201227182327667</figcaption>
</figure>
<p>将数据加载、增强和训练分开在不同的线程或进程，可以让两个部分并行进行，加快速度</p>
<h2 id="计算机视觉现状">计算机视觉现状</h2>
<h3 id="数据和手工工程data-vs.-hand-engineering">数据和手工工程(Data vs. hand-engineering)</h3>
<p>机器学习问题可以看成映射在在数据相对较少和大量数据之间的范围</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201227215302872.png" alt="image-20201227215302872" /><figcaption>image-20201227215302872</figcaption>
</figure>
<p>通常认为学习算法有两种知识来源：</p>
<ol type="1">
<li>被标记的数据(x,y)</li>
<li>手工工程特征或网络体系结构或系统的其它组件</li>
</ol>
<p>因此，当没有太多的标签数据时，只需要更多地考虑手工工程，因此，计算机视觉在试图学习一个非常复杂的功能时，经常会感觉到没有足够的数据，这可能就是为什么计算机视觉从历史到现在都更多地依赖于手工工程，这也是计算机视觉邻域发展比较复杂网络架构的原因，正是由于缺乏较多的数据，因此，想要更好的表现就需要花更多的时间进行架构设计</p>
<h3 id="做好基准测试或赢得比赛的技巧tips-for-doing-well-on-benchmarkswinning-competitions">做好基准测试或赢得比赛的技巧(Tips for doing well on benchmarks/winning competitions)</h3>
<ol type="1">
<li>集成(Ensembling)
<ul>
<li>独立训练一些网络，然后将它们的结果平均后输出</li>
</ul></li>
<li>在测试时使用Multi-crop(Multi-crop at test time)
<ul>
<li>在多个版本测试图片和平均结果上运行分类器</li>
</ul></li>
</ol>
<h3 id="使用开源代码">使用开源代码</h3>
<ul>
<li>使用发布了文献的网络框架</li>
<li>如果可能的话使用已经开源的实现</li>
<li>使用预训练模型并在数据集上微调(fine tune)</li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络-目标检测</title>
    <url>/2020/12/28/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="卷积神经网络-目标检测">卷积神经网络-目标检测</h1>
<p>目标检测是计算机视觉邻域中的一个新兴应用方向，相比前之前，它的性能也是越来越好，在构建目标检测之前，可以先了解一下目标定位。</p>
<h2 id="目标定位">目标定位</h2>
<h3 id="什么是目标定位和检测">什么是目标定位和检测</h3>
<p>之前所学的图片分类问题，主要是给定一张图片，将图片进行分类，如图，给定图片，判定为"Car"类</p>
<p>而定位分类问题，这意味着，不仅需要用算法判断图片中是不是一辆汽车，还需要在图片中标注出它的位置，如图，使用边框将汽车圈起来</p>
<p>而目标检测，则对应的图片中可能有多个对象需要检测并确定位置</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228113741768.png" alt="image-20201228113741768" /><figcaption>image-20201228113741768</figcaption>
</figure>
<h3 id="位置分类">位置分类</h3>
<p>图片分类问题之前已经有所了解了，如输入一张图片到多层卷积神经网络，然后会输出一个特征向量，并通过softmax单元来预测图片类型，这就是图片分类的基本流程</p>
<blockquote>
<p>如果还想定位图片中的洗车位置，又该怎么做呢？</p>
</blockquote>
<p>可以让神经网络多输出几个单元，输出一个边界框，具体地，就是让神经网络再多输出4个数字(bx,by,bh,bw)</p>
<p>一般情况符号表示：</p>
<p>图片左上角坐标：(0,0)</p>
<p>图片右下角坐标：(1,1)</p>
<p>边框中心坐标：(bx,by)</p>
<p>边框高度：bh</p>
<p>边框宽度：bw</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228123954111.png" alt="image-20201228123954111" /><figcaption>image-20201228123954111</figcaption>
</figure>
<h3 id="定义目标标签y">定义目标标签y</h3>
<p>神经网络需要输出的是四个数字和一个分类标签即<span class="math inline">\(b_x,b_y,b_h,b_w,class\ label(1-4)\)</span></p>
<p><span class="math inline">\(y = \begin{bmatrix} P_c \\ b_x \\ b_y \\ b_h \\ b_w \\ c_1 \\ c_2 \\ c_3 \end{bmatrix} \\ P_c：被检测对象属于某一分类的概率(背景分类除外)，如果P_c为0，则没有被检测对象，其它参数无意义 \\ 如果检测到对象：b_x、b_y、b_w、b_h、c_1、c_2、c_3 \\ c_1,c_2,c_3表现该对应属于1-3中的哪一类\)</span></p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228124818356.png" alt="image-20201228124818356" /><figcaption>image-20201228124818356</figcaption>
</figure>
<h3 id="损失函数">损失函数</h3>
<p><span class="math display">\[
L(\hat y,y) = x = \begin{cases}  
(\hat y_1-y_1)^2+(\hat y_2-y_2)^2 + \cdots + (\hat y_8-y_8)^2\ 如果y_1=1 \\
(\hat y_2-y_1)^2\ 如果y_1=0
\end{cases}
\]</span></p>
<blockquote>
<p>实际应用中，可以不对<span class="math inline">\(c_1,c_2,c_3\)</span>的softmax激活的输出使用对数似然损失，通常是地边框坐标应用平方误差或类似方法，对<span class="math inline">\(P_c\)</span>应用Logistic Regression</p>
</blockquote>
<h2 id="特征点检测landmark-detection">特征点检测(Landmark detection)</h2>
<p>对于人脸来说，通常可能会将眼角、眼眶、鼻梁、嘴角等作为你们俩检测的特征点；而对于人体姿态检测，则可能会定义一些关键特征点如胸部的中点、左肩、左肘、腰等，然后通过神经网络标人物姿态的关键特征点，再输出这些标注过的特征点，就相当于输出了人物的姿态动作</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228133314846.png" alt="image-20201228133314846" /><figcaption>image-20201228133314846</figcaption>
</figure>
<blockquote>
<p>要明确一点：特征点一的特性必须在不同的图片中保持一致</p>
</blockquote>
<h2 id="目标检测">目标检测</h2>
<blockquote>
<p>通过卷积网络进行目标检测，使用的是基于滑动窗口的目标检测算法</p>
</blockquote>
<h3 id="汽车检测示例">汽车检测示例</h3>
<p>首先创建一个标签训练集</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228140303024.png" alt="image-20201228140303024" /><figcaption>image-20201228140303024</figcaption>
</figure>
<h3 id="滑动窗口检测">滑动窗口检测</h3>
<p>如图，首先通过卷积网络判断图中框内是否有汽车</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228140413919.png" alt="image-20201228140413919" /><figcaption>image-20201228140413919</figcaption>
</figure>
<p>如果没有，则继续处理第二个图像</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228140512762.png" alt="image-20201228140512762" /><figcaption>image-20201228140512762</figcaption>
</figure>
<p>依次重复操作，直到遍历整个图片</p>
<p>然后再重复上述操作，但将边框大小调大，遍历完成后，再重复，仍然将边框调大，如此，无论汽车在图片什么位置，总会有一个窗口能检测到它</p>
<blockquote>
<p>缺点：计算成本太高</p>
<p>因为在图片中剪切出很多小方块，卷积网络需要一个一个地处理，如果选用上海步幅很大，则显然会减少输入卷积的窗口个数，但粗粒度又可能会影响性能，反之，如果采用小粒度或小步幅，则传递给卷积网络的小窗口又会特别多，这又会造成超高的计算成本，所以在最开始的时候，通常采用更简单的分类器进行目标检测，如简单的线性分类器，而由于每个分类器计算成本都很低，所以滑动窗口目标检测算法表现较好，但卷积网络运行单个分类任务的成本却高得多，并且滑动窗口太慢，除非使用超细粒度或极小步幅，否则无法准确定位图片中的目标。</p>
</blockquote>
<h2 id="卷积的滑动窗口实现">卷积的滑动窗口实现</h2>
<h3 id="将fc层转成卷积层">将FC层转成卷积层</h3>
<p>如图，假设对象检测算法输入一个14×14×3的图像，使用16个5×5的过滤器后，映射为10×10×16，然后通过2×2的最大池化操作，图像减小到5×5×16，然后添加一个连接400个单元的全连接层，接着再加一个全连接层，最终通过softmax单元输出</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228142154833.png" alt="image-20201228142154833" /><figcaption>image-20201228142154833</figcaption>
</figure>
<p>将全连接层转换成卷积层：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228142510296.png" alt="image-20201228142510296" /><figcaption>image-20201228142510296</figcaption>
</figure>
<h3 id="通过卷积实现滑动窗口目标检测">通过卷积实现滑动窗口目标检测</h3>
<p>如图，假设输入是14×14×3，和之前一样，通过卷积网后，输出1×1×4，假设将输入处理为16×16×3，则一系列处理后输出2×2×4，相当于一次计算了四次滑动窗口的值</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228143559460.png" alt="image-20201228143559460" /><figcaption>image-20201228143559460</figcaption>
</figure>
<p>由于最大池化参数为2，所以相当于以大小为2的步幅在原始图片上应用神经网络</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228143859644.png" alt="image-20201228143859644" /><figcaption>image-20201228143859644</figcaption>
</figure>
<p><a href="https://arxiv.org/pdf/1312.6229">参考文献:OverFeat: Integrated Recognition, Localization and Detection using Convolutional Networks</a>)</p>
<blockquote>
<p>但这种算法仍存在一个缺点就是边界框的位置可能不够准确</p>
</blockquote>
<h2 id="边界框预测">边界框预测</h2>
<h3 id="输出正确的边框">输出正确的边框</h3>
<p>在滑动窗口方法中，取出这些离散的位置集合，然后在它们上面运算分类器，如果滑动窗口的大小和边框大小不符合，如图，可能就无法保证边框的正确性，那么如何让这个算法输出更精准的边框呢？</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228144404612.png" alt="image-20201228144404612" /><figcaption>image-20201228144404612</figcaption>
</figure>
<h3 id="yolo-算法">YOLO 算法</h3>
<p>如图，假设输入图像是100×100的，然后在图像上放一个网格，为实现方便，此处用3×3网格，实际上会用更加精细的网格，基本思想是使用图像分类和定位算法，然后逐一应用到9个格子上。</p>
<p>对于什么都没有格子，<span class="math inline">\(P_c=0\)</span>，则直接跳过，对于有目标的格子，则取目标的中点，然后将目标分配给包含对象中点的格子</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228150026755.png" alt="image-20201228150026755" /><figcaption>image-20201228150026755</figcaption>
</figure>
<p>对于参数的取值，通常的约定是：</p>
<p><span class="math inline">\(b_x,b_y\)</span>必须是0~1之间，而<span class="math inline">\(b_h,b_w\)</span>则可能大于1</p>
<p><a href="https://arxiv.org/pdf/1506.02640">参考文献:You Only Look Once: Unified, Real-Time Object Detection</a></p>
<h2 id="交并比intersection-over-union">交并比(Intersection over union)</h2>
<blockquote>
<p>如何判断目标检测算法效果好坏呢？</p>
</blockquote>
<h3 id="评估目标位置">评估目标位置</h3>
<p>在目标检测任务中，我们希望同时能定位对象，于是，引入评估目标检测结果的函数-交并比(IoU)函数</p>
<p>IoU：计算两个边界框交集和并集之比，如图，<span class="math inline">\(IoU=\frac{黄色阴影面积}{绿色阴影面积}\)</span></p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201228150827635.png" alt="image-20201228150827635" /><figcaption>image-20201228150827635</figcaption>
</figure>
<blockquote>
<p>一般约定 ，在计算机检测任务中，如果IoU大于或等于0.5，则证明检测正确，如果预测框和实际框完善重叠，则IoU=1。</p>
</blockquote>
<h2 id="非极大值抑制non-max-suppression">非极大值抑制(non-max suppression)</h2>
<h3 id="非极大值抑制示例">非极大值抑制示例</h3>
<p>假设需要在如图上检测行人和汽车，可能会在上面放19×19网格，理论上每辆车只有一个中点，所以理论上应该只有一个格子作出有车的预测，但实践中，当进行目标分类和定位算法时，对于每个格子都运算一次，因此，有的邻近的格子可能会认为中点也在该格子内</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229100808790.png" alt="image-20201229100808790" /><figcaption>image-20201229100808790</figcaption>
</figure>
<p>而Non-max suppression就是用来解决这个问题的</p>
<p>因为需要在361个格子上都运行一次，因此最后可能会对同一对象做出多次检测，而Non-max suppression做的就是清理这些检测结果，这样，每辆车只检测一次</p>
<p>具体的算法步骤：</p>
<ol type="1">
<li>查看检测结果，每个检测结果相关的概率<span class="math inline">\(P_c\)</span>，首先看概率最大的<span class="math inline">\(P_c\)</span>，然后认为该检测是最可靠的检测，如图用高亮标记</li>
<li>这样之后，Non-max suppression会逐一审视剩下的检测框，所有检测到的和这个最大边界框有高交并比、高度重叠的其它边界框则输出会被抑制，如图用暗色标记</li>
</ol>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229101702105.png" alt="image-20201229101702105" /><figcaption>image-20201229101702105</figcaption>
</figure>
<blockquote>
<p>non max：只输出概率最大的分类结果，但抑制很接近但不是最大的其它预测结果</p>
</blockquote>
<h3 id="非极大值抑制算法">非极大值抑制算法</h3>
<p>如图，对于每个预测结果格式是<span class="math inline">\(\begin{bmatrix}p_c\\ b_x\\ b_y\\ b_h\\ b_w \end{bmatrix}\)</span>,丢弃所有<span class="math inline">\(p_c \le 0.6\)</span>的结果，对于剩下的所有边框：选择<span class="math inline">\(p_c\)</span>最大边框的作为输出结果，丢弃上一步后剩下的所有<span class="math inline">\(IoU \ge 0.5\)</span>的边框</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229102537025.png" alt="image-20201229102537025" /><figcaption>image-20201229102537025</figcaption>
</figure>
<h2 id="anchor-boxes">Anchor Boxes</h2>
<blockquote>
<p>前面的知识，都是每个格子只能检测一个对象，如果想一个格子检测出多个对象，则需要Anchor Boxes</p>
</blockquote>
<h3 id="重叠目标">重叠目标</h3>
<p>如图，使用3×3的网格，则行人的中点和汽车的中点几乎在同一个地方，所以对于对应的那个格子，如果y输出和之前一样的向量，将无法输出检测结果，而是必须从两个检测结果中选择一个</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229103401743.png" alt="image-20201229103401743" /><figcaption>image-20201229103401743</figcaption>
</figure>
<p>而Anchor box的思路则是：</p>
<p>预先定义两个不同形状的anchor box，然后将预测结果和这两个anchor box关联起来，一般而言，实际情况下可能会用更多(如5个或更多)的anchor box。</p>
<p>所以，用的向量对应的是 <span class="math display">\[
y=\begin{bmatrix} p_c\\ b_x\\ b_y\\b_h\\b_w\\c_1\\c_2\\c_3\\p_c\\b_x\\b_y\\b_h\\b_w\\c_1\\c_2\\c_3 \end{bmatrix}
\]</span> <img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229104032246.png" alt="image-20201229104032246" /></p>
<h3 id="anchor-box算法">Anchor box算法</h3>
<p>预先：</p>
<ul>
<li>每个目标处于训练中</li>
<li>图片被分配到对应的包含目标中点的格子</li>
</ul>
<p>如果是两个anchor boxes：</p>
<p>则对于训练图像中的每个目标被分配到包含目标中点和与目标形状IoU最高的anchor box的格子中，即目标在目标标签中的编码方式为(grid cell,anchor box)</p>
<h3 id="anchor-box示例">Anchor box示例</h3>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229105105568.png" alt="image-20201229105105568" /><figcaption>image-20201229105105568</figcaption>
</figure>
<h2 id="综合yolo目标检测算法">综合：Yolo目标检测算法</h2>
<h3 id="训练集">训练集</h3>
<p>输入：图片</p>
<p>输出：shape：3×3(假设图片分成3×3格)×2(anchor box数量)×8(向量维度:5(<span class="math inline">\(p_c\)</span>+边框参数(<span class="math inline">\(b_x,b_y,b_w,b_h\)</span>))+类别种数(<span class="math inline">\(c_1,c_2,c_3\)</span>))，</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229105955274.png" alt="image-20201229105955274" /><figcaption>image-20201229105955274</figcaption>
</figure>
<h3 id="做出预测">做出预测</h3>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229110321783.png" alt="image-20201229110321783" /><figcaption>image-20201229110321783</figcaption>
</figure>
<h3 id="输出non-max-supressed结果">输出non-max supressed结果</h3>
<ul>
<li>对于每个格子，会有2个预测边框，其中一个<span class="math inline">\(p_c\)</span>很低</li>
</ul>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229110512960.png" alt="image-20201229110512960" /><figcaption>image-20201229110512960</figcaption>
</figure>
<ul>
<li>丢弃概率低的预测</li>
</ul>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229110558587.png" alt="image-20201229110558587" /><figcaption>image-20201229110558587</figcaption>
</figure>
<ul>
<li>对每个类别 ，单独运算non-max suppresion，生成最终预测结果(如有三种类别：行人、汽车、摩托车，则需要分别对其进行non-max suppression)</li>
</ul>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229110735645.png" alt="image-20201229110735645" /><figcaption>image-20201229110735645</figcaption>
</figure>
<h2 id="候选区域">候选区域</h2>
<h3 id="region-proposalr-cnn">Region proposal：R-CNN</h3>
<blockquote>
<p>R-CNN：Regions with convolutional neural networks，带区域的卷积神经网络</p>
</blockquote>
<p>这个算法尝试选出一些在上面运算卷积网络分类器更有意义的区域，所以这里不再针对每个滑动窗口跑检测算法，而是只选择一些窗口，在少数窗口上运行卷积网络分类器，选出候选区域的方法是图像分割算法，</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201229142922008.png" alt="image-20201229142922008" /><figcaption>image-20201229142922008</figcaption>
</figure>
<h3 id="更快的算法">更快的算法</h3>
<p>R-CNN：提出候选区域，然后对每个候选区域跑一次分类器，每个区域输出一个标签和一个边界框</p>
<p>Fast R-CNN：提出候选区域，使用卷积实现滑动窗口(使用卷积替代循环)，但得到候选区域的聚类步骤仍然非常缓慢</p>
<p>Faster R-CNN：使用卷积网络获得候选区域</p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>反射复习</title>
    <url>/2020/02/02/%E5%8F%8D%E5%B0%84-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="反射复习">反射复习</h1>
<p>框架设计的灵魂</p>
<h2 id="获取class对象的方式">获取Class对象的方式</h2>
<ol type="1">
<li><p>Class.forName("全类名")</p>
<p>多用于配置文件，将类名定义在配置文件 中，读取文件，加载类</p></li>
<li><p>类名.class</p>
<p>多用于参数的传递</p></li>
<li><p>对象.getClass()</p>
<p>多用于对象的获取字节码的方式</p></li>
</ol>
<blockquote>
<p>同一字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪种方式获取的Class对象都是同一个</p>
</blockquote>
<h2 id="class对象功能">Class对象功能</h2>
<ol type="1">
<li>获取成员变量们(Fields)</li>
<li>获取构造方法们(Constructors)</li>
<li>获取成员方法们(Methods)</li>
<li>获取类名</li>
</ol>
<h2 id="一个案例">一个案例</h2>
<p>需求：写一个“框架”，不能改变该类的任何代码的前提下，可以创建任意类的对象并执行其中的任意方法</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">com.zephon.domain.Person</span></span><br><span class="line"><span class="attr">method</span>=<span class="string">eat</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zephon.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.zephon.reflect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/1 下午6:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span> ©</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现：</span></span><br><span class="line"><span class="comment">     * 1. 配置文件</span></span><br><span class="line"><span class="comment">     * 2. 反射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IllegalAccessException, InstantiationException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        <span class="comment">// 创建Properties对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        <span class="comment">// 获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = ReflectDemo2.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line">        properties.load(is);</span><br><span class="line">        <span class="comment">// 获取配置文件中定义的数据</span></span><br><span class="line">        String className = properties.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String method = properties.getProperty(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="comment">// 加载该类进内存</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(className);</span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        Method method1 = cls.getMethod(method);</span><br><span class="line">        method1.invoke(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>项目介绍</title>
    <url>/2019/05/05/%E5%9B%A2%E9%98%9F%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="项目介绍">项目介绍</h1>
<hr />
<h2 id="项目名称慧友">项目名称：慧友</h2>
<figure>
<img src="/img/logo.png" alt="0" /><figcaption>0</figcaption>
</figure>
<h2 id="项目团队我们做的都队">项目团队：“我们做的都队”</h2>
<h2 id="项目单位软件学院">项目单位：软件学院</h2>
<h2 id="项目版本1.0">项目版本：1.0</h2>
<h2 id="项目具体介绍">项目具体介绍</h2>
<ul>
<li>点击我们的慧友app后，伴随着一闪而过的启动页，就进入我的应用首页。</li>
</ul>
<p><img src="/img/team1.jpg" alt="1" /><br />
<img src="/img/team2.jpg" alt="2" /></p>
<ul>
<li><p>在搜索框中，用户可以输入自己想要学习的内容，通过FlashText构建的标签树，对关键词进行标签匹配，查到到用户需要的文章或是专家。</p></li>
<li><p>首页内容主要分为两个部分，上半部分的内容推送，在醒目的位置推送给用户优质的信息 目前的推送内容是慧友团队的基本信息，点击后可以进行超看。下半部分是平台中的作者们最新发布的优质文章，用户可以点击查看，由于项目尚未形成良好的创作生态，所以目前使用的文章内容都来源于玩安卓平台提供的开源接口。也可以点击右下角的红心标识收藏到自己的账户中，目前因为是没有登录的状态，所以点击红心会跳转至登录界面，目前的登录方式还不够完善，未来将会使用手机号登录、第三方平台登录等方式，为用户提供更舒适的体验。登录后可以正常收藏文章。不断下滑可以查看更早之前的文章内容。</p></li>
<li><p>在学习板块中，文章根据内容不同被归类在对应标签下。在常用控件大标签下，就有着基础UI控件，Listview等小标签。在这里同样可以对这些文章进行收藏和查看。</p></li>
</ul>
]]></content>
      <categories>
        <category>我们的项目</category>
      </categories>
      <tags>
        <tag>我们的项目</tag>
      </tags>
  </entry>
  <entry>
    <title>常见数学公式Markdown表示总结</title>
    <url>/2019/11/15/%E5%B8%B8%E8%A7%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8FMarkdown%E8%A1%A8%E7%A4%BA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="常见数学公式markdown表示总结">常见数学公式Markdown表示总结</h1>
<h2 id="下标与上标">下标与上标</h2>
<ol type="1">
<li>下标，x_1--&gt;<span class="math inline">\(x_1\)</span></li>
<li>上标，x<sup>1--&gt;<span class="math inline">\(x^1\)</span>,x</sup>{12}--&gt;<span class="math inline">\(x^{12}\)</span></li>
</ol>
<h2 id="分数">分数</h2>
<p>---&gt;<span class="math inline">\(\frac{1}{2}\)</span></p>
<h2 id="求导">求导</h2>
<p>--&gt;<span class="math inline">\(\frac{\partial J(\theta)}{\partial\theta_j}\)</span></p>
<h2 id="数学符号">数学符号</h2>
<table>
<thead>
<tr class="header">
<th>符号</th>
<th>代码</th>
<th>符号</th>
<th>代码</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(\alpha\)</span></td>
<td></td>
<td><span class="math inline">\(\beta\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\gamma\)</span></td>
<td></td>
<td><span class="math inline">\(\delta\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\Delta\)</span></td>
<td></td>
<td><span class="math inline">\(\epsilon\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\varepsilon\)</span></td>
<td></td>
<td><span class="math inline">\(\zeta\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\eta\)</span></td>
<td></td>
<td><span class="math inline">\(\theta\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\Theta\)</span></td>
<td></td>
<td><span class="math inline">\(\vartheta\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\iota\)</span></td>
<td></td>
<td><span class="math inline">\(\pi\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\phi\)</span></td>
<td></td>
<td><span class="math inline">\(\psi\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\Psi\)</span></td>
<td></td>
<td><span class="math inline">\(\omega\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\Omega\)</span></td>
<td></td>
<td><span class="math inline">\(\chi\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\rho\)</span></td>
<td></td>
<td><span class="math inline">\(\omicron\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\sigma\)</span></td>
<td></td>
<td><span class="math inline">\(\Sigma\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\nu\)</span></td>
<td></td>
<td><span class="math inline">\(\xi\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\tau\)</span></td>
<td></td>
<td><span class="math inline">\(\lambda\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\Lambda\)</span></td>
<td></td>
<td><span class="math inline">\(\mu\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\partial\)</span></td>
<td></td>
<td><span class="math inline">\(\hat{y}\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\check{y}\)</span></td>
<td></td>
<td><span class="math inline">\(\breve{y}\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\bigcup\)</span></td>
<td></td>
<td><span class="math inline">\(\bigcap\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\leq\)</span></td>
<td></td>
<td><span class="math inline">\(\geq\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\prod\)</span></td>
<td></td>
<td><span class="math inline">\(\int\)</span></td>
<td></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(\iint\)</span></td>
<td></td>
<td><span class="math inline">\(\oint\)</span></td>
<td></td>
</tr>
<tr class="even">
<td><span class="math inline">\(\overline{a}\)</span></td>
<td></td>
<td><span class="math inline">\(\bar{x}\)</span></td>
<td>{x}</td>
</tr>
</tbody>
</table>
<h2 id="不同括号">不同括号</h2>
<p>{nk}-----&gt;$ {nk}$</p>
<p>{nk}----&gt;$ {nk}$</p>
<p>{nk}---&gt;$ {nk}$</p>
<p>---&gt;<span class="math inline">\(\dbinom{n}{k}\)</span></p>
<h2 id="矩阵">矩阵</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\left[</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   a &amp; b &amp; c &amp; d &amp; e\\</span><br><span class="line">   f &amp; g &amp; h &amp; i &amp; j \\</span><br><span class="line">   k &amp; l &amp; m &amp; n &amp; o \\</span><br><span class="line">   p &amp; q &amp; r &amp; s &amp; t</span><br><span class="line">  \end&#123;matrix&#125; </span><br><span class="line">\right]</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p><span class="math display">\[
\left[
 \begin{matrix}
   a &amp; b &amp; c &amp; d &amp; e\\
   f &amp; g &amp; h &amp; i &amp; j \\
   k &amp; l &amp; m &amp; n &amp; o \\
   p &amp; q &amp; r &amp; s &amp; t
  \end{matrix} 
\right]
\]</span></p>
<h2 id="开平方">开平方</h2>
<p>---&gt;<span class="math inline">\(\sqrt{a}\)</span></p>
<h2 id="分段函数">分段函数</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">X(m,n)=\begin&#123;cases&#125;</span><br><span class="line">x(n)\\</span><br><span class="line">x(n-1)\\</span><br><span class="line">x(n-1)</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(X(m,n)=\begin{cases}x(n)\\x(n-1)\\x(n-1)\end{cases}\)</span></p>
<h2 id="待续">待续</h2>
<p>。。。</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库-事务</title>
    <url>/2020/04/10/%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="数据库-事务">数据库-事务</h1>
<h2 id="数据库并发问题">数据库并发问题</h2>
<ol type="1">
<li><p>脏读</p>
<p>事务1：将某条记录的Age值从20修改为30</p>
<p>事务2：读取了事务1更新后的值：30</p>
<p>事务1：回滚，Age值恢复到20</p>
<p>事务2：读取的30就是一个无效值</p></li>
<li><p>不可重复读</p>
<p>事务1：读取Age值为20</p>
<p>事务2：将Age修改为30</p>
<p>事务1：两次读取Age值为30,和第一次值读取不一致</p></li>
<li><p>幻读</p>
<p>事务1：读取了Stu表中一部分数据</p>
<p>事务2：向Stu表中插入了新的行</p>
<p>事务1：读取Stu表时，多出了一些行</p></li>
</ol>
<h2 id="隔离级别">隔离级别</h2>
<ol type="1">
<li><p>读未提交：READ UNCOMMITTED</p>
<p>允许事务1读取事务2未提交的修改</p></li>
<li><p>读已提交：READ COMMITED</p>
<p>要求事务1只能读取事务2已提交的修改</p></li>
<li><p>可重复读：REPEATABLE READ</p>
<p>确保事务1可以多次从一个字段中读取的相同的值，即事务1执行期间禁止其它事务对这个字段进行更新</p></li>
<li><p>串行化：SERIALIZABLE</p>
<p>确保事务1可以多次从一个表中读取到相同的行，在事务1执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分地下。</p></li>
</ol>
<h2 id="传播行为">传播行为</h2>
<p>事务的传播+事务的行为</p>
<p>如果有多个事务嵌套运行，子事务是否要和大事务共用一个事务</p>
<table>
<thead>
<tr class="header">
<th>传播属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>REQUIRED</td>
<td>如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行</td>
</tr>
<tr class="even">
<td>REQUIRED_NEW</td>
<td>当前事务必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将它挂起</td>
</tr>
<tr class="odd">
<td>SUPPORTS</td>
<td>如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中</td>
</tr>
<tr class="even">
<td>NOT_SUPPORTS</td>
<td>当前的方法不应该运行在事务中，如果有运行的事务，将它挂起</td>
</tr>
<tr class="odd">
<td>MANDATORY</td>
<td>当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常</td>
</tr>
<tr class="even">
<td>NEVER</td>
<td>当前方法不应该运行在事务中，如果有运行的事务，就抛出异常</td>
</tr>
<tr class="odd">
<td>NESTED</td>
<td>如果有事务在运行，当前的就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-K-means</title>
    <url>/2019/11/03/%E6%95%B0%E6%A8%A1-K-means/</url>
    <content><![CDATA[<h1 id="k-means">K-means</h1>
<h2 id="原理">原理</h2>
<p>聚类分析是在数据中发现数据对象之间的关系，将数据进行分组，组内相似性越大，组间的差别越大，则聚类效果越好。</p>
<p>K-means算法的思想很简单，对于给定的样本集，按照样本之间的距离大小，将样本集划分为K个簇。让簇内的点尽量紧密的连在一起，而让簇间的距离尽量的大。K-means算法是无监督的聚类算法，它实现起来比较简单，聚类效果也不错，因此应用很广泛。</p>
<p>如果用数据表达式表示，假设簇划分为(C1,C2,...,Ck),则我们的目标是最小化平方误差E：<span class="math inline">\(E=\sum_{i=1}^k\sum_{x\in C_i}||x-\mu_i||_2^2\)</span> ，其中<span class="math inline">\(\mu_i\)</span>是簇Ci的均值向量，有时也称为质心，表达式为：<span class="math inline">\(\mu_i=\frac{1}{|C_i|}\sum_{x\in C_i}x\)</span> ，如果我们想直接求上式的最小值并不容易，这是一个NP难(没有直接能求的一个式子)的问题，因此只能采用启发式的迭代方法。</p>
<p>K-means采用的启发式：</p>
<p>选择K个点作为初始质心</p>
<p>repeat</p>
<p>将每个点指派到最近的质心，形成K个簇</p>
<p>重新计算每个簇的质心</p>
<p>until 簇不发生变化式达到最大迭代次数</p>
<h2 id="使用方法和适用范围">使用方法和适用范围</h2>
<h3 id="k-means算法的要点">K-means算法的要点</h3>
<ol type="1">
<li>对于K-means算法，首先要注意的是k值的选择，一般来说，我们会根据对数据的先验经验选择一个合适的k值，如果没有什么先验知识，则可以通过交叉验证选择一个合适的k值</li>
<li>在确定了k的个数后，我们需要选择k个初始化的质心。由于我们是启发式方法，k个初始化的质心的位置选择对最后的聚类结果和运行时间都有很大的影响，因此需要选择合适的k个质心，最好这些质心不能太近。</li>
</ol>
<h3 id="k-means算法的步骤">K-means算法的步骤</h3>
<p>输入是样本集<span class="math inline">\(D={x_1,x_2,...x_m}\)</span>,聚类的簇树k，最大迭代次数N</p>
<p>输出是簇划分<span class="math inline">\(C={C_1,C_2,...C_k}\)</span></p>
<ol type="1">
<li>从数据集D中随机选择k个样本作为初始的k个质心向量：<span class="math inline">\({\mu_1,\mu_2,...\mu_k}\)</span></li>
<li>对于n=1,2,...,N
<ol type="1">
<li>将簇划分C初始化为<span class="math inline">\(C_i=\empty （t=1,2...k）\)</span></li>
<li>对于i=1,2,...m,计算样本<span class="math inline">\(x_i\)</span>和各个质心向量<span class="math inline">\(\mu_j(j=1,2,...,k)\)</span>的距离：<span class="math inline">\(d_{ij}=||x_i-\mu_j||_2^2\)</span>，将<span class="math inline">\(x_i\)</span>标记最小为<span class="math inline">\(d_{ij}\)</span>所对应的类别<span class="math inline">\(\lambda_i\)</span>。此时更新<span class="math inline">\(C_{\lambda_i}=C_{\lambda_i}\cup {\{ x_i\}}\)</span></li>
<li>对于 j=1,2,...,k，对<span class="math inline">\(C_j\)</span>中所有的样本点重新计算新的质心<span class="math inline">\(\mu_j=\frac{1}{|C_j|}\sum_{x\in C_j}x\)</span></li>
<li>如果所有的k个质心向量都没有发生变化，则转到步骤3（外）</li>
</ol></li>
<li>输出簇划分<span class="math inline">\(C={C_1,C_2,...C_k}\)</span></li>
</ol>
<h3 id="适用范围">适用范围</h3>
<p>主要是解决分类问题，对于给定的样本集，按照样本之间的距离大小，将样本集划分为K个簇，也就是分成K类。让簇内的点尽量紧密的连在一起，而让簇间的距离尽量的大。</p>
<p>可以解决的问题有：</p>
<ol type="1">
<li>星系区分</li>
<li>区域分划</li>
<li>样本分类</li>
</ol>
<p>...</p>
<h2 id="matlab调用">MATLAB调用</h2>
<p>K-means聚类算法采用的是将N×P的矩阵X划分成K个类，使得类内对象之间的距离最大，而类之间的距离最小。</p>
<p>使用方法 ：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Idx=kmeans(X,K)</span><br><span class="line"></span><br><span class="line">[Idx,C]=kmeans(X,K)</span><br><span class="line"></span><br><span class="line">[Idx,C,sumD]=kmeans(X,K)</span><br><span class="line"></span><br><span class="line"><span class="comment">% X:N*P的数据矩阵</span></span><br><span class="line"><span class="comment">% K:表示将X划分为几类，为整数</span></span><br><span class="line"><span class="comment">% Idx:N*1的向量，存储的是每个点的聚类标号</span></span><br><span class="line"><span class="comment">% C:K*P的矩阵，存储的是K个聚类质心位置</span></span><br><span class="line"><span class="comment">% sumD:1*K的和向量，存储的是类间所有点与该类质心之间距离之和</span></span><br><span class="line"><span class="comment">% D:N*N的矩阵，存储的是每个点与所有质心的距离</span></span><br><span class="line">[Idx,C,sumD,D]=kmeans(X,K)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Param1、Param2等，主要可以设置如下：</span></span><br><span class="line"><span class="comment">% &#x27;Distance&#x27; (距离测度)</span></span><br><span class="line"><span class="comment">% &#x27;sqEuclidean&#x27; 欧式距离(默认时采用此距离方式)</span></span><br><span class="line"><span class="comment">% &#x27;cityblock&#x27; 绝对误差和，又称：L1</span></span><br><span class="line"><span class="comment">% &#x27;cosine&#x27; 针对向量</span></span><br><span class="line"><span class="comment">% &#x27;correlation&#x27; 针对有时序关系的值</span></span><br><span class="line"><span class="comment">% &#x27;Hamming&#x27; 只针对二进制数据</span></span><br><span class="line"><span class="comment">% ’start&#x27; (初始质心为位置选择方法)</span></span><br><span class="line"><span class="comment">% &#x27;sample&#x27; 从X中随机选取K个质心点</span></span><br><span class="line"><span class="comment">% &#x27;uniform&#x27; 根据X的分布范围均匀的随机生成K个质心</span></span><br><span class="line"><span class="comment">% &#x27;cluster&#x27; 初始聚类阶段随机选择10%的X的子样本(此方法初始使用&#x27;sample&#x27;方法)</span></span><br><span class="line"><span class="comment">% &#x27;Replicates&#x27; (聚类重复次数) 整数</span></span><br><span class="line"><span class="comment">% &#x27;emptyaction&#x27; (空簇处理方法):&#x27;drop&#x27;</span></span><br><span class="line">[...]=kmeans(...,<span class="string">&#x27;Param1&#x27;</span>,Val1,<span class="string">&#x27;Param2&#x27;</span>,Val2,...)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% </span></span><br><span class="line"><span class="comment">% test</span></span><br><span class="line">clear;clc;</span><br><span class="line">x=[<span class="number">1</span> <span class="number">1</span>;<span class="number">1</span> <span class="number">2</span>;<span class="number">2</span> <span class="number">1</span>;<span class="number">2</span> <span class="number">2</span>];</span><br><span class="line">x=[x;x+<span class="number">10</span>;x+<span class="number">20</span>;x+<span class="number">30</span>;x+<span class="number">40</span>];</span><br><span class="line">[Idx,C,sumD,D]=kmeans(x,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">plot</span>(x(<span class="built_in">find</span>(Idx==<span class="number">1</span>),<span class="number">1</span>),x(<span class="built_in">find</span>(Idx==<span class="number">1</span>),<span class="number">2</span>),<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(x(<span class="built_in">find</span>(Idx==<span class="number">2</span>),<span class="number">1</span>),x(<span class="built_in">find</span>(Idx==<span class="number">2</span>),<span class="number">2</span>),<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(x(<span class="built_in">find</span>(Idx==<span class="number">3</span>),<span class="number">1</span>),x(<span class="built_in">find</span>(Idx==<span class="number">3</span>),<span class="number">2</span>),<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(x(<span class="built_in">find</span>(Idx==<span class="number">4</span>),<span class="number">1</span>),x(<span class="built_in">find</span>(Idx==<span class="number">4</span>),<span class="number">2</span>),<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(x(<span class="built_in">find</span>(Idx==<span class="number">5</span>),<span class="number">1</span>),x(<span class="built_in">find</span>(Idx==<span class="number">5</span>),<span class="number">2</span>),<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="评价和结果分析">评价和结果分析</h2>
<ol type="1">
<li>通过调用MATLAB中的kmeans函数可以实现聚类过程，返回得到质心和各个数据点的类别</li>
<li>接下来要做的就是通过画图将结果呈现出来。我们可以将不同类别采用不同的颜色或形状将数据点区分开来。</li>
<li>可以较为直观的观察出分类的效果，区分明显则说明分类效果较好，否则调整参数重新聚类分析。</li>
</ol>
<p>聚类的衡量指标</p>
<p>均一性(一个簇只包含一个类别的样本)</p>
<p>完整性(同类别样本被归类到相同簇中)</p>
<p>V-measure(均一性和完整性的加权平均)</p>
<p>ARI</p>
<p>AMI</p>
<p>轮廓系数</p>
<h2 id="优点和改进方法">优点和改进方法</h2>
<h3 id="优点">优点</h3>
<ol type="1">
<li>是解决聚类问题的一种经典算法，简单、快速</li>
<li>对处理大数据集，该算法保持可伸缩性和高效性</li>
<li>当簇接近高斯分布时，它的效果较好</li>
</ol>
<h3 id="缺点">缺点</h3>
<ol type="1">
<li>在簇的平均值可被定义的情况下才能使用,可能不适合某些应用</li>
<li>在K-means算法中,K是事先给定的,这个K值的选定是非常难以估计的.很多时候,事先并不知道给定的数据集应该分成多少类别最合适</li>
<li>在K-means算法中,首先需要根据初始聚类中心来确定一个初始划分,然后对初始划分进行优化.这个初始聚类中心的选择对聚类结果有较大的影响,一旦初始值选择的不好,可能无法得到有效的聚类结果.</li>
<li>该算法需要不断地进行样本分类调整,不断地计算调整后的新的聚类中心,因此当数据量非常大时,算法的时间开销非常大;</li>
<li>若簇中含有异常点,将导致均值偏离严重(即:对噪声和孤立点数据敏感)</li>
<li>不适用于发现非凸形状的簇或大小差别很大的簇</li>
</ol>
<h3 id="改进">改进</h3>
<ol type="1">
<li>很多时候,事先并不知道给定的数据集应该分成多少类别才最合适.通过类的自动合并和分裂,得到较为合理的类型数目K,例如ISODATA算法</li>
<li>针对上述3,可选用二分K-均值聚类;或多设置一些不同的初值,对比最后的运算结果,一值到结果趋于稳定结束</li>
<li>针对上述5,改成求点的中位数,这种聚类方式即K-Mediods聚类(K中值)</li>
</ol>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-Matlab</title>
    <url>/2019/11/01/%E6%95%B0%E6%A8%A1-Matlab/</url>
    <content><![CDATA[<h1 id="matlab">Matlab</h1>
<h2 id="文件io">文件IO</h2>
<p>读写操作常用来保存中间过程中出现的大变量，避免占用内存太多，也可以减少程序运行时间，避免重复进行同一个操作。最常用的读写操作即为load和save语句。利用MAT文件可以把当前MATLAB工作空间中的一些有用变量长久的保留下来，扩展名是.mat。MAT文件的生成和装入由save和load命令完成。</p>
<h2 id="常见数据文件的读写函数">常见数据文件的读写函数</h2>
<table>
<thead>
<tr class="header">
<th>文件类型</th>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>文本文件</td>
<td>csvread</td>
<td>读取以逗号作为间隔符的文本数据文件</td>
</tr>
<tr class="even">
<td>文本文件</td>
<td>csvwrite</td>
<td>保存数据到文本文件，逗号作为分隔符</td>
</tr>
<tr class="odd">
<td>文本文件</td>
<td>dimread</td>
<td>按照指定的间隔符读取文本文件的数据</td>
</tr>
<tr class="even">
<td>文本文件</td>
<td>dimwrite</td>
<td>按照指定的间隔符写入文本文件</td>
</tr>
<tr class="odd">
<td>文本文件</td>
<td>textread</td>
<td>按照指定的格式从文本文件中读取数据</td>
</tr>
<tr class="even">
<td>文本文件</td>
<td>textscan</td>
<td>按照指定的格式从文本文件中读取数据</td>
</tr>
<tr class="odd">
<td>Excel表格</td>
<td>xlsfinfo</td>
<td>获取文件类型基本信息</td>
</tr>
<tr class="even">
<td>Excel表格</td>
<td>xlsread</td>
<td>读取Excel电子表格文件数据</td>
</tr>
<tr class="odd">
<td>Lotus 1-2-3表格</td>
<td>wk1read</td>
<td>从Lotus 1-2-3电子表格中读取数据</td>
</tr>
<tr class="even">
<td>Lotus 1-2-3表格</td>
<td>wk2write</td>
<td>将数据写入Lotus 1-2-3电子表格</td>
</tr>
</tbody>
</table>
<h3 id="可读取load文件类型">可读取(load)文件类型</h3>
<table>
<thead>
<tr class="header">
<th>文件类型</th>
<th>扩展名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>声音格式文件</td>
<td>.wav</td>
<td>Microsoft音频格式文件</td>
</tr>
<tr class="even">
<td>声音格式文件</td>
<td>.au</td>
<td>Sum系统音频格式文件</td>
</tr>
<tr class="odd">
<td>电子表格</td>
<td>.xls</td>
<td>Excel电子表格</td>
</tr>
<tr class="even">
<td>电子表格</td>
<td>.wk1</td>
<td>Lotus 1-2-3电子表格</td>
</tr>
<tr class="odd">
<td>视频格式文件</td>
<td>.avi</td>
<td>多媒体文件格式</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>.bmp</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="odd">
<td>图形图像格式</td>
<td>.cur</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>.gif</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="odd">
<td>图形图像格式</td>
<td>.hdf</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>.ico</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="odd">
<td>图形图像格式</td>
<td>.jpg(jpeg)</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>.pbm</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="odd">
<td>图形图像格式</td>
<td>.pcx</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>.pgm</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="odd">
<td>图形图像格式</td>
<td>.png</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>.pnm</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="odd">
<td>图形图像格式</td>
<td>.ppm</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>.ras</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="odd">
<td>图形图像格式</td>
<td>.tif(.tiff)</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>.xwd</td>
<td>各种常用的图形图像格式文件</td>
</tr>
<tr class="odd">
<td>科学数据格式</td>
<td>.cdf</td>
<td></td>
</tr>
<tr class="even">
<td>科学数据格式</td>
<td>.hdf</td>
<td>这里的hdf格式文件不是图像文件格式</td>
</tr>
<tr class="odd">
<td>科学数据格式</td>
<td>.fits</td>
<td></td>
</tr>
<tr class="even">
<td>科学数据格式</td>
<td>.h5</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="部分数据文件专用load函数">部分数据文件专用load函数</h3>
<table>
<thead>
<tr class="header">
<th>文件类型</th>
<th>扩展名</th>
<th>函数</th>
<th>输出数据格式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>特殊科学数据格式</td>
<td>CDF</td>
<td>cdfread</td>
<td>元胞数组</td>
</tr>
<tr class="even">
<td>特殊科学数据格式</td>
<td>FITS</td>
<td>fitsread</td>
<td>主/副数据表集合</td>
</tr>
<tr class="odd">
<td>特殊科学数据格式</td>
<td>HDF</td>
<td>hdfread</td>
<td>HDF/HDF-EOS数据</td>
</tr>
<tr class="even">
<td>图形图像格式</td>
<td>BMP、JPG、TIFF等</td>
<td>imread</td>
<td>色彩数据和灰度/色彩索引数组</td>
</tr>
<tr class="odd">
<td>声音格式文件</td>
<td>WAV</td>
<td>wavread</td>
<td>声音数据和采样率</td>
</tr>
<tr class="even">
<td>声音格式文件</td>
<td>AU</td>
<td>auread</td>
<td>声音数据和采样率</td>
</tr>
<tr class="odd">
<td>视频格式文件</td>
<td>AVI</td>
<td>aviread</td>
<td>MATLAB视频格式文件</td>
</tr>
</tbody>
</table>
<h3 id="二进制文件导出函数">二进制文件导出函数</h3>
<table>
<thead>
<tr class="header">
<th>文件类型</th>
<th>扩展名</th>
<th>函数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>声音文件</td>
<td>AU</td>
<td>auwrite</td>
</tr>
<tr class="even">
<td>声音文件</td>
<td>WAV</td>
<td>wavwrite</td>
</tr>
<tr class="odd">
<td>图像文件</td>
<td>BMP、JPG等</td>
<td>imwrite</td>
</tr>
<tr class="even">
<td>视频格式文件</td>
<td>AVI</td>
<td>avifile</td>
</tr>
<tr class="odd">
<td>科学数据格式</td>
<td>CDF</td>
<td>cdfwrite</td>
</tr>
<tr class="even">
<td>科学数据格式</td>
<td>HDF</td>
<td>使用图形用户界面导出</td>
</tr>
</tbody>
</table>
<h2 id="数据矩阵处理">数据矩阵处理</h2>
<p>数据读入后需要经过处理，比较实用的包括数据格式控制、矩阵删除行列、矩阵分割、矩阵转置等操作。</p>
<h3 id="数据格式控制">数据格式控制</h3>
<p>whos可以观察变量的数据类型</p>
<p>建模过程中学遇到格式不相符导致报错，但数值是相同的，所以需要数据转换格式。</p>
<p>数据类型转换函数：</p>
<table>
<thead>
<tr class="header">
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>datestr(d,f)</td>
<td>将日期数字转换为字符串</td>
</tr>
<tr class="even">
<td>datenum(str,f)</td>
<td>将字符串转换为日期数字</td>
</tr>
<tr class="odd">
<td>datevec(str)</td>
<td>日期字符串转换向量</td>
</tr>
<tr class="even">
<td>num2str(k)</td>
<td>将数字转换成字符串</td>
</tr>
<tr class="odd">
<td>int2str(k)</td>
<td>将整数型转换为字符串</td>
</tr>
<tr class="even">
<td>mat2str(k)</td>
<td>将矩阵转换为字符串，供eval使用</td>
</tr>
<tr class="odd">
<td>str2double(S)</td>
<td>将字符串数组转化为数值数组</td>
</tr>
<tr class="even">
<td>springf</td>
<td>将数据格式化为字符串</td>
</tr>
<tr class="odd">
<td>str2num/str2double</td>
<td>将字符串转换为整形数字</td>
</tr>
<tr class="even">
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<h3 id="矩阵删除行或列">矩阵删除行或列</h3>
<p>一般删除操作通过冒号表达式将行或列设置为空(即为[])实现，方便快捷。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 删除行</span></span><br><span class="line">a=[<span class="number">1</span> <span class="number">2</span>; <span class="number">3</span> <span class="number">4</span>];</span><br><span class="line">a(<span class="number">1</span>,:)=[]</span><br><span class="line"><span class="comment">% 结果</span></span><br><span class="line"><span class="comment">%a=</span></span><br><span class="line"><span class="comment">%	</span></span><br><span class="line"><span class="comment">%	3    4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 删除列</span></span><br><span class="line">a=[<span class="number">1</span> <span class="number">2</span>;<span class="number">3</span> <span class="number">4</span>];</span><br><span class="line">a(:,<span class="number">1</span>)=[]</span><br><span class="line"><span class="comment">% 结果</span></span><br><span class="line"><span class="comment">%a=</span></span><br><span class="line"><span class="comment">%	2</span></span><br><span class="line"><span class="comment">%	4</span></span><br></pre></td></tr></table></figure>
<h3 id="矩阵转置">矩阵转置</h3>
<p>矩阵转置通过“'”实现</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">2</span> <span class="number">1</span>];</span><br><span class="line">b=a&#x27;</span><br><span class="line"><span class="comment">% 结果</span></span><br><span class="line"><span class="comment">%b=</span></span><br><span class="line"><span class="comment">%		2</span></span><br><span class="line"><span class="comment">%		1</span></span><br></pre></td></tr></table></figure>
<h3 id="矩阵分割">矩阵分割</h3>
<p>一般矩阵分割也是通过冒号表达式选取特定区域的行列将矩阵分割开的。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span> <span class="number">2</span>;<span class="number">3</span> <span class="number">4</span>];</span><br><span class="line">b=a(<span class="number">1</span>,:);</span><br><span class="line">a=a(<span class="number">2</span>,:);</span><br><span class="line"><span class="comment">%a=</span></span><br><span class="line"><span class="comment">%	3	4</span></span><br><span class="line"><span class="comment">%b=</span></span><br><span class="line"><span class="comment">%	1	2</span></span><br></pre></td></tr></table></figure>
<h2 id="数学公式处理">数学公式处理</h2>
<p>数学公式处理主要通过符号变量建立表达式，进而计算，主要解决数学公式的运算问题以及一些棘手的计算问题。</p>
<p>主要元素：符号变量</p>
<p>主要形式：符号运算</p>
<p>主要特点：</p>
<ol type="1">
<li><p>运算对象可以是没赋值的符号变量</p>
<ol start="2" type="1">
<li>可以获得任意精度的解</li>
</ol></li>
</ol>
<p>与数值运算的区别：</p>
<ol type="1">
<li>数值运算中必须先对变量赋值，然后才能参与运算</li>
<li>符号运算无须事先对独立变量赋值，运算结果以标准的符号形式表达</li>
</ol>
<p>定义符号变量：</p>
<p>函数sym一次只能定义一个符号变量，使用不方便。MATLAB提供了另一个函数syms，一次可以定义多个符号变量。syms函数的一般调用格式为：</p>
<p>syms 符号变量名1 ...符号变量</p>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-优劣解距离法</title>
    <url>/2019/10/22/%E6%95%B0%E6%A8%A1-%E4%BC%98%E5%8A%A3%E8%A7%A3%E8%B7%9D%E7%A6%BB%E6%B3%95/</url>
    <content><![CDATA[<h1 id="优劣解距离法topsis">优劣解距离法Topsis</h1>
<h2 id="介绍">介绍</h2>
<p><strong>TOPSIS （Technique for Order Preference by Similarity to an Ideal Solution ）法</strong>是C.L.Hwang和K.Yoon于1981年首次提出，TOPSIS法根据有限个评价对象与理想化目标的接近程度进行排序的方法，是在现有的对象中进行相对优劣的评价。可翻译成逼近理想解排序法，国内常简称优劣解距法。</p>
<h2 id="指标分类">指标分类</h2>
<ul>
<li>极大型指标(效益性指标)：越大越好，例如成绩</li>
<li>极小型指标(成本型指标)：越小越好，例如费用</li>
<li>中间型指标：越接近某个值越好，例如水质量评估的PH值</li>
<li>区间型指标：落在某个区间最好，例如体温</li>
</ul>
<p>将所有指标转化为极大型称为指标正向化(最常用)</p>
<p>极小型指标转换为极大型指标的公式：max-x</p>
<p>为了消去不同指标量纲(单位)的影响，需要对已经正向化的矩阵进行标准化处理</p>
<p>标准化计算公式: <span class="math display">\[
标准化矩阵中的元素\frac{z_{ij}=x_{ij}}{\sqrt(\sum_{i=1}^{n}(x_{ij}^2))}
\]</span></p>
<p>## 计算得分</p>
<p>计算评分公式：<span class="math inline">\(\frac{x与最小值的距离}{x与最大值的距离+x与最小值的距离}\)</span></p>
<p>定义最大值$ Z<sup>+=(Z_1</sup>{+},Z_2<sup>{+},,Z_{m}</sup>{+})=(max(z_{11},z_{21},,z_{n1}),max(z_{12},z_{22},,z_{n2}),,max(z_{1m},z_{2m},,z_{nm})) $</p>
<p>定义最大值$ Z<sup>-=(Z_1</sup>{-},Z_2<sup>{-},,Z_{m}</sup>{-})=(min(z_{11},z_{21},,z_{n1}),min(z_{12},z_{22},,z_{n2}),,min(z_{1m},z_{2m},,z_{nm})) $</p>
<p>定义第i(i=1,2,...n)个评价对象与最大值的距离$ D_i^+= $</p>
<p>定义第i(i=1,2,...n)个评价对象与最小值的距离$ D_i^-= $</p>
<p>则可以计算出第i(i=1,2,...,n)个评价类对象未归一化的得分：$ S_i= $</p>
<p>0$S_i<span class="math inline">\(1，且\)</span>S_i<span class="math inline">\(越大\)</span>D_i^+$越小，即越接近最大值。</p>
<h2 id="使用步骤">使用步骤</h2>
<ol type="1">
<li>将原始矩阵正向化，所谓将原始矩阵正向化，就是将所有的指标类型统一转化为极大型指标
<ul>
<li>极小型转为极大型公式：max-x</li>
<li>中间型转为极大型公式：$ M=max(|x_i-x_{best}|,x_i^{'}=1-) $</li>
<li>区间型转为极大型公式：$ M=max(a-min(x_i),max(x_i)-b),x_i^{'}=
<span class="math display">\[\begin{cases} 1-\frac{a-x}{M}，x&lt;a\\ 1 ,a\leqslant x \leqslant b\\1-\frac{x-b}{M}，x&gt;b\end{cases}\]</span>
$</li>
</ul></li>
<li>正向化矩阵标准化
<ul>
<li>目的是消除不同指标量纲(单位)的影响</li>
<li>直接使用标准化公式$ z_{ij}= $（每一个元素/sqrt(其所在列的元素的平方和)）</li>
</ul></li>
<li>计算得分并归一化
<ul>
<li>方法即<strong>计算得分</strong>中的步骤</li>
</ul></li>
</ol>
<h2 id="扩展">扩展</h2>
<ol type="1">
<li><p>可以使用<strong>层次分析法</strong>给评价指标确定权重：<span class="math inline">\(\sum_{j=1}^m\omega_j=1\)</span></p></li>
<li><p>基于熵权法对Topsis模型修正</p>
<ul>
<li>商权法依据原理：指标的变异程度(方差)越小，所反映的信息量也越少，其对应的权值也应该越低。</li>
<li>信息量：越有可能发生的事情，信息量越少；越不可能发生的事情，信息量就越多。</li>
<li>衡量事情发生的可能性的大小：概率</li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-决策树和随机森林</title>
    <url>/2019/11/04/%E6%95%B0%E6%A8%A1-%E5%86%B3%E7%AD%96%E6%A0%91%E5%92%8C%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/</url>
    <content><![CDATA[<h1 id="数模-决策树和随机森林">数模-决策树和随机森林</h1>
<h2 id="决策树原理">决策树原理</h2>
<h3 id="决策树算法原理">决策树算法原理</h3>
<p>决策树算法是一种逼近离散函数值的方法。它是一种典型的分类方法，首先以数据进行处理，利用归纳算法生成可读的规则和决策树，然后使用决策树对新数据进行分析。本质上决策树是通过一系列规则对数据进行分类的过程。</p>
<p>决策树算法构造决策树来发现数据中蕴含的分类规则。如何构造精度高、规模小的决策树是决策树算法的核心内容。决策树构造可以分两步进行。</p>
<ol type="1">
<li>决策树的生成：由训练样本集生成决策树的过程。一般情况下，训练样本数据集是根据实际需要有历史的、有一定程度的，用于分析处理的数据集。</li>
<li>决策树的剪枝：决策树的剪枝是对上一阶段生成的决策树进行检验、校正和修正的过程，主要是用新的样本数据集(称为测试数据集)中的数据校验决策树生成过程中产生的初步规则，将那些影响预测准确性的分枝剪除。</li>
</ol>
<h3 id="决策树id3算法的原理">决策树ID3算法的原理：</h3>
<p>机器学习算法其实很古老，作为一个程序猿，可能会经常敲if,else if,else，其实就已经在用到决策树的思想了。只是有那么多条件，用哪个条件特征先做if，哪个条件特征后做if比较优呢？怎么准确的定量选择这个标准就是决策树机器学习算法的关键。</p>
<p>1970年代，一个昆兰的大牛找到了用信息论中的熵来度量决策树的决策选择过程，方法一出，它的简介和高效就引起了轰动，昆兰把这个算法叫做ID3。</p>
<p>ID3算法如何选择特征？</p>
<p>首先，我们需要熟悉信息论中熵的概念。熵度量了事物的不确定性，越不确定的事物，它的熵就越大.具体的,随机变量X的熵的表达式如下: <span class="math display">\[
H(X)=-\sum_{i=1}^np_ilogp_i
\]</span> 其中n代表X的n种不同的离散取值.而<span class="math inline">\(p_i\)</span>代表了X取值为i的概率,log为以2或e为底的对数.举个例子,比如X有2个可能的取值,而这两个取值各为1/2时X的熵最大,此时X具有最大的不确定性.值为<span class="math inline">\(H(X)=-(\frac{1}{2}log\frac{1}{2}+\frac{1}{2}log\frac{1}{2})=log2\)</span>.如果一个值概率大于1/2,另一个值概率小于1/2,则不确定性减少,对应的熵也会减少.比如一个概率1/3,一个概率2/3,则对应熵为<span class="math inline">\(H(X)=-(\frac{1}{3}log\frac{1}{3}+\frac{2}{3}log\frac{2}{3})=log3-\frac{2}{3}log2&lt;log2\)</span>.</p>
<p>熟悉了一个变量的熵,很容易推广到多个变量的联合熵,这里给出两个变量X和Y的联合熵表达式:<span class="math inline">\(H(X,Y)=-\sum_{i=1}^np(x_i,y_i)logp(x_i,y_i)\)</span></p>
<p>有了联合熵,又可以得到条件熵的表达式H(X|Y),条件熵类似于条件概率,它度量了我们的X在知道Y以后剩下的不确定性.表达式如下: <span class="math display">\[
H(X|Y)=-\sum_{i=1}^np(x_i,y_i)logp(x_i|y_i)=\sum_{j=1}^np(y_j)H(X|y_j)
\]</span> 前面提到H(X)度量了X的不确定性,条件熵H(X|Y)度量了在知道Y以后X剩下的不确定性,那么H(X)-H(X|Y)呢?从上面的描述可以看出,它度量了X在知道Y以后不确定性减少程度,这个度量在信息论中称为互信息,记为I(X,Y).在决策树ID3算法中叫做信息增益.ID3算法就是用信息增益来判断当前节点应该用什么特征来构建决策树.信息增益大,则越适合用来分类.</p>
<figure>
<img src="/img/id3.png" alt="ID3图片" /><figcaption>ID3图片</figcaption>
</figure>
<p>使用上图就很容易明白他们的关系.左边的椭圆代表H(X),右边的椭圆代表H(Y),中间重合的部分就是我们的互信息或信息增益I(X,Y),左边的椭圆去掉重合部分就是H(X|Y),右边的椭圆去掉重合部分就是H(Y|X).两个椭圆的并就是H(X,Y)</p>
<h2 id="决策树算法的主要内容">决策树算法的主要内容</h2>
<p>一棵决策树生成过程的主要分为以下3个部分:</p>
<ol type="1">
<li>特征选择:特征选择是指从训练数据中众多的特征中选择一个特征作为当前 节点的分裂标准,如何选择特征有着很多不同量化评估标准,从而衍生出不同的决策树算法.</li>
<li>决策树生成:根据选择的特征评估标准,从上至下递归地生成子节点,直到数据集不可分则停止决策树生长.树结构来说,递归结构是最容易理解的方式.</li>
<li>剪枝:决策树容易过拟合,一般来说需要剪枝,缩小树结构规模，缓解过拟合.剪枝技术有预剪枝和后剪枝两种.</li>
</ol>
<h3 id="主要思想">主要思想</h3>
<ol type="1">
<li>树以代表训练样本的单个结点开始</li>
<li>如果样本都在同一个类,则该结点成为树叶,并用该类标记</li>
<li>否则,算法选择最有分类能力的属性作为决策树的当前结点</li>
<li>根据当前决策结点属性聚会的不同,将训练样本数据集分为若干子集,每个取值形成一个分枝,有几个取值形成几个分枝.均针对上一步得到的一个子集,重复进行先前的步骤,形成每个划分样本上的决策树.一旦一个属性出现在一个结点上,就不必在该结点的任何后代远程考虑它.</li>
<li>递归划分步骤仅当下列条件之一成立时停止
<ol type="1">
<li>给定结点的所有样本属于同一类</li>
<li>没有剩余属性可以用来进一步划分样本.在这种情况下,使用多数表决将给定的结点转换成树叶,并以样本中元组个数最多的类别作为类别标记,同时也可以存放该结点样本的类别分布.</li>
<li>如果某一分支,没有满足该分支中已有分类的样本,则以样本的多数类创建一个树叶</li>
</ol></li>
</ol>
<h3 id="决策树ｉｄ３算法的主要内容">决策树ＩＤ３算法的主要内容</h3>
<p>输入的是ｍ个样本，样本输出集全为Ｄ，每个样本有n个离散特征,特征集合即为A,输出决策树T.</p>
<p>算法过程为:</p>
<ol type="1">
<li>初始化信息增益的阈值<span class="math inline">\(\epsilon\)</span></li>
<li>判断样本是否为同一类输出<span class="math inline">\(D_i\)</span>,如果是则返回节点树T.标记类别为<span class="math inline">\(D_i\)</span></li>
<li>判断特征是否为空,如果是则返回单节点树T,标记类别为样本中输出类别D实例数最多的类别</li>
<li>计算A中各个特征(一共n个)对输出D的信息增益,选择信息增益最大的特征<span class="math inline">\(A_g\)</span></li>
<li>如果<span class="math inline">\(A_g\)</span>的信息增益小于阈值<span class="math inline">\(\epsilon\)</span>,则返回单节点树T,标记类别为样本中输出类别D实例数最多的类别</li>
<li>否则,按特征<span class="math inline">\(A_g\)</span>的不同取值<span class="math inline">\(A_{gi}\)</span>将对应的样本输出D分成不同的类别<span class="math inline">\(D_i\)</span>.每个类别产生一个子节点.对应特征值为<span class="math inline">\(A_{gi}\)</span>.返回增加节点的数T.</li>
<li>对于所有的子节点,令<span class="math inline">\(D=D_i\)</span>,<span class="math inline">\(A=A-\{A_g\}\)</span>递归调用2-6步,得到子树<span class="math inline">\(T_i\)</span>并返回</li>
</ol>
<h2 id="随机森林的原理">随机森林的原理</h2>
<p>随机森林指的是利用多棵树对样本进行训练并预测的一种分类器.</p>
<p>决策树相当于一个大师,通过自己在数据集中学到的知识对于新的数据进行分类.但是俗话说得好,三个臭皮匠,顶个诸葛亮.随机森林就是希望构建多个臭皮匠,希望最终的分类效果能够超过单个大师的一种算法.</p>
<p>那随机森林具体如何构建呢?有两个方面:数据的随机性选取,以及待选特征的随机选取.</p>
<ol type="1">
<li><p>数据的随机选取</p>
<p>首先,从原始的数据集中采取有放回的抽样,构造子数据集,子数据集的数据量是和原始数据集相同的.不同子数据集的元素可以重复,同一子数据集中的元素也可以重复.</p>
<p>第二,利用子数据集来构建子决策树,将这个数据放到每个子决策树中,每个子决策树输出一个结果.最后,如果有了新数据需要通过随机森林得到分类结果,就可以通过对子决策树的判断结果投票,得到随机森林的输出结果.</p></li>
<li><p>待选特征的随机选取</p>
<p>与数据集的随机选取类似,随机森林中的子树的每一个分裂过程并未用到所有的待选特征,而是从所有待选特征中随机选取一定的特征,之后再随机选取的特征中选取最优的特征.这样能够使得随机森林中的决策树都能彼此不同,提升系统的多样性,从而提升分类性能.</p></li>
</ol>
<h2 id="随机森林的主要内容">随机森林的主要内容</h2>
<ol type="1">
<li>从原始训练集中使用Bootstraping方法随机有放回的采样选出m个样本,共进行n_tree次采样,生成n_tree个训练集</li>
<li>对于n_tree个训练集,我们分别训练n_tree个决策树模型</li>
<li>对于单个决策树模型,假设训练样本特征的个数为n,那么每次分裂时根据信息增益/信息增益比/基尼指数选择最好的特征进行分裂</li>
<li>每棵树都一直这样分裂下去,直到该节点的所有训练样例都属于同一类.在决策树的分裂过程中不需要剪枝</li>
<li>将生成的多棵决策树组成随机森林.对于分类问题,按多棵分类器投票决定最终分类结果;对于回归问题,由多棵树预测值的均值决定最终预测结果</li>
</ol>
<h2 id="决策树和随机森林的matlab调用">决策树和随机森林的MATLAB调用</h2>
<p>已知训练数据和训练数据类,获得决策树模型:</p>
<p>t=treefit(train_X,y);%train_X的行数为样本数,列数为特征数;y的行数为样本数,1列表征类</p>
<p>t=classregtree(train_Y,y);%用法与上一致,只是treefit为ID3算法,classregtree为CART算法;现在多使用classregtree(现treefit在matlab中会报错)</p>
<ol type="1">
<li><p>计算获得的决策树的精确度:</p>
<p>cost=treetest(t,'test',X,y);%测试错误率;</p>
<p>[cost,secost,ntnodes,besetleavel]=treetest(...);% cost为误差率向量;ntnodes为决策树包含的节点向量; 两者对应</p></li>
<li><p>已知决策树计算测试数据类:</p>
<p>yfit=treeval(t,X)</p>
<p>[yfit,node,cname]=treeval(...)%cname获得测试数据类</p></li>
<li><p>裁剪决策树</p>
<p>t2 = treeprune(t1,'level',level)%裁剪t1树的最后level级</p>
<p>t2 = treeprune(t1,'nodes',nodes)</p></li>
</ol>
<p>相关函数</p>
<table>
<thead>
<tr class="header">
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>catsplit</td>
<td></td>
</tr>
<tr class="even">
<td>children</td>
<td>查看子节点个数</td>
</tr>
<tr class="odd">
<td>classcount</td>
<td>查看节点各类实例数</td>
</tr>
<tr class="even">
<td>classprob</td>
<td>查看节点各类概率</td>
</tr>
<tr class="odd">
<td>classregtree</td>
<td>构建决策树</td>
</tr>
<tr class="even">
<td>cutcatrgories</td>
<td>剪枝范畴</td>
</tr>
<tr class="odd">
<td>cutpoint</td>
<td>分枝点的阀值</td>
</tr>
<tr class="even">
<td>cuttype</td>
<td>分枝的类型</td>
</tr>
<tr class="odd">
<td>cutvar</td>
<td>分枝点的属性名</td>
</tr>
<tr class="even">
<td>eval</td>
<td>进行预测</td>
</tr>
<tr class="odd">
<td>isbranch</td>
<td>是否是分枝节点</td>
</tr>
<tr class="even">
<td>nodeerr</td>
<td></td>
</tr>
<tr class="odd">
<td>nodeprob</td>
<td>节点的概率</td>
</tr>
<tr class="even">
<td>nodesize</td>
<td>节点的尺寸,即各类实例之和</td>
</tr>
<tr class="odd">
<td>numnodes</td>
<td>节点数量</td>
</tr>
<tr class="even">
<td>parent</td>
<td>父节点</td>
</tr>
<tr class="odd">
<td>prune</td>
<td>剪枝</td>
</tr>
<tr class="even">
<td>risk</td>
<td>节点风险</td>
</tr>
<tr class="odd">
<td>test</td>
<td>错误率</td>
</tr>
<tr class="even">
<td>type</td>
<td>树类别</td>
</tr>
<tr class="odd">
<td>varimportance</td>
<td>估算输入特征的重要性</td>
</tr>
<tr class="even">
<td>view</td>
<td>画出决策树</td>
</tr>
</tbody>
</table>
<h2 id="决策树和随机森林的优缺点和改进方法">决策树和随机森林的优缺点和改进方法</h2>
<h3 id="决策树的优缺点">决策树的优缺点</h3>
<p>决策树算法的优点:</p>
<ol type="1">
<li>分类精度高</li>
<li>生成的模式简单</li>
<li>对噪声数据有很好的健壮性</li>
</ol>
<p>决策树算法(ID3)的缺点:</p>
<ol type="1">
<li>ID3没有考虑连续特征,比如长度,密度都是连续值 ,无法在ID3运用.这大大限制了ID3的用途</li>
<li>ID3采用信息增益大的特征优先建立决策树的节点.很快就被人发现,在相同条件下,取值比较多的特征比取值少的特征信息增益大</li>
<li>ID3算法对于缺失值的情况没有做考虑</li>
<li>没有考虑过拟合的问题</li>
</ol>
<h3 id="随机森林的优缺点">随机森林的优缺点</h3>
<p>随机森林的优点:</p>
<ol type="1">
<li>具有极高的准确率</li>
<li>随机性的引入,使得随机森林不容易过拟合</li>
<li>随机性的引入,使得随机森林有很好的抗噪声能力</li>
<li>能处理很高维度的数据,并且不用做特征选择</li>
<li>既能处理离散型数据,也能处理连续型数据,数据集无需规范化,训练速度快,可以得到变量重要性排序</li>
<li>容易实现并行化</li>
</ol>
<p>随机森林的缺点:</p>
<ol type="1">
<li>当随机森林中的决策树个数很多时,训练时需要的空间和时间会较大</li>
<li>随机森林模型还有许多不好解释的地方,有点算个黑盒模型</li>
</ol>
<h3 id="决策树算法的改进方法">决策树算法的改进方法</h3>
<p>１． Ｃ4.5算法</p>
<p>C4.5算法是ID3的一个改进算法,继承了ID3算法的优点</p>
<p>C4.5算法用信息增益率来选择属性,克服了用信息增益选择属性时偏向选择取值多的属性的不足在树构造过程中进行剪枝; 能够完成对连续属性的离散化处理; 能够对不完整数据进行处理.C4.5算法产生的分类规则易于理解,准确率较高; 但效率低,因树构造过程中,需要对数据集进行多次的顺序扫描和排序.也是因为必须多次数据集扫描,C4.5只适合于能够驻留于内存的数据集</p>
<ol start="2" type="1">
<li>CART算法</li>
</ol>
<p>CART算法的全称是Classification And Regression Tree,采用的是Gini指数(选Gini指数最小的特征s)作为分裂标准,同时它也是包含后剪枝操作.ID3算法和C4.5算法虽然在对训练样本集的学习中可以尽可能多地挖掘信息,但其生成的决策树分支较大,规模较大.为了简化决策树的规模,提高生成决策树的效率,就出现了根据GINI系数来选择测试属性的决策树算法CART.</p>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-十大算法</title>
    <url>/2019/10/23/%E6%95%B0%E6%A8%A1-%E5%8D%81%E5%A4%A7%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="十大算法">十大算法</h1>
<ol type="1">
<li>蒙特卡算法(通过计算机仿真解决问题的算法，同时可以通过模拟来检验自己模型的正确性，是比赛时经常的方法)</li>
<li>数据拟合、参数估计、插值等数据处理算法(比赛中通常会遇到大量的数据需要处理，通常使用Matlab作为工具)</li>
<li>线性规划、整数规划、二次规划等规划类问题(建模的大多问题属于最优化问题，通常用Lingo软件实现)</li>
<li>图算法(如最短路、网络流、二分图等 算法)</li>
<li>动态规划、回溯搜索、分治算法、分枝定界等计算机算法(这些算法是算法设计比较常用的方法，很多场合可以用到竞赛中)</li>
<li>优化理论的三大非经典算法：模拟退火、神经网络、遗传算法(这些问题是用来解决一些较困难的优化问题的算法，对于有些问题非常有帮助，但是算法实现比较困难，需谨慎使用)</li>
<li>数值分析算法(数值分析中常用算法比如方程组求解、矩阵运算、函数积分等)</li>
<li>一些连续离散化方法(很多实际问题要用计算机求解，必须将离散化后才能计算)</li>
<li>网格算法和穷举法(网格算法和穷举法都是搜索最优点的算法，在很多竞赛题中有应用，当重点讨论模型本身而轻视算法的时候，可以使用这种方案)</li>
<li>图像处理算法</li>
</ol>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-回归分析</title>
    <url>/2019/11/02/%E6%95%B0%E6%A8%A1-%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="回归分析">回归分析</h1>
<h2 id="回归分析的原理">回归分析的原理</h2>
<h3 id="概述">概述</h3>
<p>在统计学中，回归分析(regression analysis)指的是确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。回归分析按照涉及的变量的多少，分为一元回归和多元回归分析；按照因变量的多少，可分为简单回归分析和多重回归分析；按照自变量和因变量之间的关系类型，可分为线型回归分析和非线性回归分析。</p>
<h3 id="原理">原理</h3>
<p>在大数据分析中，回归分析是一种预测性的建模技术，它研究的是因变量(目标)和自变量(预测器)之间的关系。这种技术通常用于预测分析，时间序列模型以及发现变量之间的因果关系。</p>
<h3 id="回归分析研究的主要问题">回归分析研究的主要问题</h3>
<ol type="1">
<li>确定Y与X间的定量关系表达式，这种表达式称为回归方程</li>
<li>对求得的回归方程的可信度进行检验</li>
<li>判断自变量X对因变量Y有无影响</li>
<li>利用所求得的回归方程进行预测和控制</li>
</ol>
<h2 id="回归分析的分类和使用方法">回归分析的分类和使用方法</h2>
<h3 id="回归分析的分类">回归分析的分类</h3>
<ol type="1">
<li>Linear Regression 线性回归</li>
<li>Logistic Regression 逻辑回归</li>
<li>Polynomial Regression 多项式回归</li>
<li>Stepwise Regression 逐步回归</li>
<li>Ridge Regression 岭回归</li>
<li>Lasso Regression 套索回归</li>
<li>ElasticNet回归</li>
</ol>
<h4 id="线性回归">线性回归</h4>
<p>线性回归是最为人熟知的建模技术之一。线性回归通常是人们在学习预测模型时首选的技术之一。在这种技术中，因变量是连续的，自变量可以是连续的也可以是离散的。回归线的性质是线性的。</p>
<p>线性回归使用最佳的拟合直线(也就是回归线)在因变量(Y)和一个或多个自变量(X)之间建立一种关系。</p>
<p>多元线性回归只需要将一元线性回归中的自变量和因变量修正为向量即可，由线性代数知识按照一元线性回归步骤求解。</p>
<h3 id="回归分析使用前提">回归分析使用前提</h3>
<ol type="1">
<li>方差齐性</li>
<li>线性关系</li>
<li>效应累加</li>
<li>变量无测量误差</li>
<li>变量服从多元正态分布</li>
<li>观察独立</li>
<li>模型完整（没有包含不该进入的变量，也没有漏掉应该进入的变量）</li>
<li>误差项独立且服从(0,1)正态分布</li>
</ol>
<h3 id="回归分析的内容">回归分析的内容</h3>
<ol type="1">
<li>从一组数据出发，确定某些变量之间的定量关系式，即建立数学模型并估计其中的未知参数。估计参数的常用方法是最小二乘法</li>
<li>对这些关系式的可信程度进行检验</li>
<li>在许多自变量共同影响着一个因变量的关系中，判断哪个自变量的影响是显著的，哪些自变量的影响是不显著的，将影响显著的自变量加入模型中，而剔除影响不显著的变量，通常用逐步回归、向前回归和向后回归等方法</li>
<li>利用所求的关系式对某一生产过程进行预测或控制。回归分析的应用是非常广泛的，统计软件包使各种回归方法计算十分方便</li>
</ol>
<h3 id="回归分析的步骤">回归分析的步骤</h3>
<ol type="1">
<li><p>确定变量</p>
<p>明确预测的具体目标，也就确定了因变量。如预测具体目标是下一年度的销售量，那么销售量Y就是因变量。通过市场调查和查阅资料，寻找与预测目标的相关影响因素，即自变量，并从中选出主要的影响因素。</p></li>
<li><p>建立预测模型</p>
<p>依据自变量和因变量的历史统计资料进行计算，在此基础上建立回归分析方程，即回归分析预测模型</p></li>
<li><p>进行相关分析</p>
<p>回归分析是对具有因果关系的影响因素(自变量)和预测对象(因变量)所进行的数理统计分析处理。只有当自变量与因变量确实存在某种关系时，建立的回归方程才有意义。因此，作为自变量的因素与作为因变量的预测对象是否有关，相关程度如何，以及判断这种相关程度的把握性多大，就成为进行回归分析必须要解决的问题，进行相关分析，一般要求出相关关系，以相关系数的大小来判断自变量和因变量的相关程度。</p></li>
<li><p>计算预测误差</p>
<p>回归预测模型是否可用于实际预测，取决于对回归预测模型的检验和对预测误差的计算。回归方程只有通过各种检验，且预测误差较小，才能将回归方程作为预测模型进行预测</p></li>
<li><p>确定预测值</p>
<p>利用回归预测模型计算预测值，并对预测值进行综合分析，确定最后的预测值</p></li>
</ol>
<h2 id="回归分析的matlab调用">回归分析的MATLAB调用</h2>
<h3 id="简单的线性回归">简单的线性回归</h3>
<p>假设我们找到了最佳拟合的直线方程：y=ax+b</p>
<p>则对于每一个样本点<span class="math inline">\(x^{(i)}\)</span>，根据我们的直线方程，预测值为：<span class="math inline">\(\hat{y}^{(i)}=ax^{(i)}+b\)</span>，真值为：<span class="math inline">\(y^{(i)}\)</span></p>
<p>目标：使<span class="math inline">\(\sum_{i=1}^m(y^{(i)}-\hat{y}^{(i)})^2\)</span> 尽可能小 <span class="math inline">\(\hat{y}^{(i)}=ax^{(i)}+b\)</span></p>
<p>目标：找到a和b，使得<span class="math inline">\(\sum_{i=1}^m(y^{(i)}-ax^{(i)}-b)^2\)</span> (损失函数)尽可能小</p>
<p>典型的最小二乘法问题：最小化误差的平方 <span class="math display">\[
a=\frac{\sum_{i=1}^m(x^{(i)}-\bar{x})(y^{(i)}-\bar{y})}{\sum_{i=1}^m(x^{(i)}-\bar{x})^2}
\]</span></p>
<p><span class="math display">\[
b=\bar{y}-a\bar{x}
\]</span></p>
<p><span class="math display">\[
a=\frac{\sum_{i=1}^m(x^{(i)}-\bar{x})(y^{(i)}-\bar{y})}{\sum_{i=1}^m(x^{(i)}-\bar{x})^2} --&gt;\sum_{i=1}^mw^{(i)}\cdot v^{(i)} --&gt;w\cdot v
\]</span></p>
<p><span class="math display">\[
w=(w^{(1)},w^{(2)},...,w^{(n)})，v=(v^{(1)},v^{(2)},...,v^{(n)})
\]</span></p>
<h3 id="多元线性回归">多元线性回归</h3>
<p>目标：使<span class="math inline">\(\sum_{i=1}^m(y^{(i)}-\hat{y}^{(i)})^2\)</span>尽可能小 <span class="math display">\[
\hat{y}^{(i)}=\theta_0+\theta_1X_1^{(i)}+\theta_2X_2^{(i)}+...+\theta_nX_n^{(i)}
\]</span> 目标：找到<span class="math inline">\(\theta_0,\theta_1,\theta_2,...,\theta_n\)</span>，使得<span class="math inline">\(\sum_{i=1}^m(y^{(i)}-\hat{y}^{(i)})^2\)</span>尽可能小 <span class="math display">\[
\hat{y}^{(i)}=\theta_0+\theta_1X_1^{(i)}+\theta_2X_2^{(i)}+...+\theta_nX_n^{(i)}
\]</span></p>
<p><span class="math display">\[
\theta=(\theta_0,\theta_1,\theta_2,...,\theta_n)^T
\]</span></p>
<p><span class="math display">\[
\hat{y}^{(i)}=\theta_0X_0^{(i)}+\theta_1X_1^{(i)}+\theta_2X_2^{(i)}+...+\theta_nX_n^{(i)}\underline=1
\]</span></p>
<p><span class="math display">\[
X^{(i)}=(X_0^{(i)},X_1^{(i)},X_2^{(i)},...,X_n^{(i)})
\]</span></p>
<p><span class="math display">\[
\hat{y}^{(i)}=X^{(i)}\cdot \theta
\]</span></p>
<p><span class="math display">\[
X_b=\left(
\begin{matrix} 
1&amp;X_1^{(1)}&amp;X_2^{(1)}&amp;...&amp;X_n^{(1)}\\
1&amp;X_1^{(2)}&amp;X_2^{(2)}&amp;...&amp;X_n^{(2)}\\
...\\
1&amp;X_1^{(m)}&amp;X_2^{(m)}&amp;...&amp;X_n^{(m)}\\
\end{matrix}
\right)
\]</span></p>
<p><span class="math display">\[
\theta=\left(
\begin{matrix}
\theta_0\\
\theta_1\\
\theta_2\\
...\\
\theta_n
\end{matrix}
\right)
\]</span></p>
<p><span class="math display">\[
\hat{y}=X_b\cdot \theta
\]</span></p>
<p>目标：使<span class="math inline">\(\sum_{i=1}^m(y^{(i)}-\hat{y}^{(i)})^2\)</span>尽可能小--&gt;使<span class="math inline">\((y-X_b\cdot \theta)^T(y-X_b\cdot \theta)\)</span>尽可能小--&gt;<span class="math inline">\(\theta=(X_b^TX_b)^{-1}X_b^Ty\)</span></p>
<p>多元线性回归的正规方程解<span class="math inline">\(\theta=(X_b^TX_b)^{-1}X_b^Ty\)</span></p>
<p>问题：时间复杂度高：O(n<sup>3)(wdwxO(n</sup>2.4))</p>
<p>优点：不需要对数据做归一化处理</p>
<h3 id="回归分析的matlab调用-1">回归分析的MATLAB调用</h3>
<ol type="1">
<li>b=regress(Y,X)确定回归系数的点估计值，其中，Y为n*1的矩阵；X为（ones(n,1),x1,...,xm)的矩阵</li>
<li>[b,bint,r,rint,stats]=regress(Y,X,alpha)求回归系数的点估计和区间估计，并检验回归模型(b：回归系数；bint：回归系数的区间估计；r：残差；rint：残差置信区间；stats：用于检验回归模型的统计量，有四个数值：相关系数R2、F值、与F对应的概率p，误差方差。相关系数R2越接近1，说明回归方程越显著；F&gt;F1-<span class="math inline">\(\alpha\)</span>(k,n-k-1)时拒绝H0,F越大，说明回归方程越显著；与F对应的概率p时拒绝H0，回归模型成立。p值在0.01-0.05之间，越小越好</li>
<li>残差以及其置信区间：rcoplot(r,rint);</li>
</ol>
<h2 id="回归分析的评价">回归分析的评价</h2>
<p>衡量线性回归法的指标</p>
<p>​ 均方误差ＭSE均方根差RMSE、平均绝对误差MAE，这三类算法具体公式不赘述，但乐都存在局限性：作用域使用范围，对不同事物的预测缺乏统一标准，这样就引出了新的一个预测指标R Squared <span class="math display">\[
R^2=1-\frac{\sum_i(\hat{y}^{(i)}-y^{(i)})^2}{\sum_i(\bar{y}-y^{(i)})^2}
\]</span></p>
<ul>
<li>R^2&lt;=1</li>
<li>R<sup>2越大越好。当我们的预测模型不犯任何错误时，R</sup>2为最大值 1</li>
<li>当我们的模型等于基准模型时，R^2=0</li>
<li>如果R^2&lt;0，说明我们学习到的模型还不如基准模型，此时，数据很可能不存在任何线性关系</li>
</ul>
<p>实际应用中，学采用regress函数来实现</p>
<h2 id="回归分析的优点">回归分析的优点</h2>
<ol type="1">
<li>回归分析在分析多因素模型时，更加简单和方便</li>
<li>运用回归模型，只需要采用的模型与数据相同，通过标准的统计方法可以计算出唯一的结果，但在图和表的形式中，数据之间的关系往往因人而异，不同人画出的拟合曲线可能不一样</li>
<li>回归分析可以准确的计算每个因素的相关程度和回归拟合程度的高低，提高预测方程式的效果</li>
<li>在使用回归分析时，要注意模式的适用范围。</li>
</ol>
<h2 id="回归分析的缺点">回归分析的缺点</h2>
<p>有时候在回归分析中，选用何种因子和该因子采用何种表达式仅是一种推测，这影响了因子的多样性和某些因子的不可预测性，使得回归分析在某些情况下受到限制。</p>
<h2 id="回归分析的改进方法">回归分析的改进方法</h2>
<ol type="1">
<li>综合分析,仔细确定模型</li>
<li>对于较难确定的相关关系,可以采用神经网络等算法进行分析</li>
<li>通过残差分析和拟合度分析,不断调整模型,直到符合实际情况</li>
</ol>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-层次分析法</title>
    <url>/2019/10/21/%E6%95%B0%E6%A8%A1-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/</url>
    <content><![CDATA[<h1 id="层次分析法">层次分析法</h1>
<h2 id="简介">简介</h2>
<p>The analytic hierarchy process,简称AHP，最基础模型之一，主要用于解决评价类问题(例如：选择哪种方案最好、哪位运动员或员工表现更优秀)</p>
<h2 id="评价类问题">评价类问题</h2>
<blockquote>
<p>评价类问题可以用打分解决</p>
</blockquote>
<p>解决评价类问题，首先要想到以下三个问题：</p>
<ol type="1">
<li>我们评价的目标是什么 ？</li>
<li>我们为了达到这个目标有哪几种可选的方案？</li>
<li>评价的准则或指标是什么？</li>
</ol>
<p>以旅游为例，可供选择A,B,C：</p>
<ol type="1">
<li>我们评价的<strong>目标</strong>是什么 ？</li>
</ol>
<p>​ 答：选择最佳旅游景点</p>
<ol type="1">
<li><p>我们为了达到这个目标有哪几种可选的<strong>方案</strong>？</p>
<p>答：三种，分别是去A，去B和去C</p>
<ol start="3" type="1">
<li>评价的<strong>准则</strong>或指标是什么？</li>
</ol></li>
</ol>
<p>​ 答：景色、花费、居住、饮食、交通</p>
<p>一般而言，前两个问题答案是显而易见的，第三个问题需要我们根据题目中的<strong>背景材料、常识以及网上搜集到的参考资料</strong>进行整合，从中筛选出最合适的指标。</p>
<blockquote>
<p>网上搜索选择：</p>
<p>优先选择知网(或万方、百度学术、谷歌学术等平台)</p>
<p>推荐搜索网站：<a href="https://search.chongbuluo.com/">虫部落</a></p>
</blockquote>
<h2 id="层次分析法的思想">层次分析法的思想</h2>
<table>
<thead>
<tr class="header">
<th>标度</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>表示两个因素相比，具有同样重要性</td>
</tr>
<tr class="even">
<td>3</td>
<td>表示两个因素相比，一个因素比另一个因素稍微重要</td>
</tr>
<tr class="odd">
<td>5</td>
<td>表示两个因素相比，一个因素比另一个因素明显重要</td>
</tr>
<tr class="even">
<td>7</td>
<td>表示两个因素相比，一个因素比另一个因素强烈重要</td>
</tr>
<tr class="odd">
<td>9</td>
<td>表示两个因素相比，一个因素比另一个因素极短重要</td>
</tr>
<tr class="even">
<td>2,4,6,8</td>
<td>上述两相邻判断的中值</td>
</tr>
<tr class="odd">
<td>倒数</td>
<td>A和B相比如果标度为3,那么B和A相比就是1/3</td>
</tr>
</tbody>
</table>
<p>由此构成<strong>判断矩阵</strong></p>
<h2 id="一致矩阵">一致矩阵</h2>
<p><span class="math inline">\(a_{ij}=i的重要程度/j的重要程度\)</span></p>
<p><span class="math inline">\(a_{jk}=j的重要程度/k的重要程度\)</span></p>
<p><span class="math inline">\(a_{ik}=i的重要程度/k的重要程度=a_{ij}*a_{jk}\)</span></p>
<p>若矩阵中每个元素$ a_{ij} <span class="math inline">\(&gt;0且满足\)</span>a_{ij}*a_{ji}=1$,则我们称该矩阵为正互反矩阵</p>
<p>在层次分析法中，我们构造的判断矩阵均是正互反矩阵</p>
<p>若正互反矩阵满足<span class="math inline">\(a_{ij}*a_{jk}=a_{ik}\)</span>，则我们称其为一致矩阵</p>
<blockquote>
<p>在使用判断矩阵求权重之前，必须对其进行一致性检验</p>
</blockquote>
<h3 id="一致性检验的步骤">一致性检验的步骤：</h3>
<ol type="1">
<li><p>计算一致性指标CI</p>
<p><span class="math display">\[
  CI=\frac{\lambda_{max}-n}{n-1}
  \]</span></p></li>
<li><p>查找对应的平均随机一致性指标RI</p>
<table>
<thead>
<tr class="header">
<th>n</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>RI</td>
<td>0</td>
<td>0</td>
<td>0.52</td>
<td>0.89</td>
<td>1.12</td>
<td>1.26</td>
<td>1.36</td>
<td>1.41</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1.46</td>
<td>1.49</td>
<td>1.52</td>
<td>1.54</td>
<td>1.56</td>
<td>1.58</td>
<td>1.59</td>
</tr>
</tbody>
</table></li>
<li><p>计算一致性比例CR</p>
<p><span class="math display">\[
CR = \frac{CI}{RI}
\]</span></p>
<p>如果CR&lt;0.1，则可认为判断矩阵的一致性可以接受;否则需要对判断矩阵进行修正。</p></li>
</ol>
<h3 id="一致矩阵计算权重">一致矩阵计算权重</h3>
<p>必须进行归一化处理 <span class="math display">\[
i = \frac{a_{ij}}{a_{1j}+a_{2j}+\cdots+a_{ij}+\cdots+a_{nj}}
\]</span></p>
<h3 id="判断矩阵计算权重">判断矩阵计算权重</h3>
<ol type="1">
<li><p>算术平均法求权重</p>
<ol type="1">
<li><p>将判断矩阵按照归一化(每一个元素除以其所在列的和)</p></li>
<li><p>将归一化的各列相加(按行求和)</p></li>
<li><p>将相加后得到的向量中每个元素除以n即可得到权重向量 <span class="math display">\[
\omega_{i}=\frac{1}{n}\sum_{j=1}^{n}\frac{a_{ij}}{\sum_{k=1}^{n}a_{kj}}
\]</span></p></li>
</ol></li>
<li><p>几何平均法求权重</p>
<ol type="1">
<li><p>将A的元素按照行相乘得到一个新的列向量</p></li>
<li><p>将新的向量的每个分量开n次方</p></li>
<li><p>对该列向量进行归一化即可得到权重向量 <span class="math display">\[
\omega_{i}=\frac{(\prod_{j=1}^{n}a_{ij})^\frac{1}{n}}{\sum_{k=1}^{n}(\prod_{j=1}^{n}a_{kj})^\frac{1}{n}}
\]</span></p></li>
</ol></li>
<li><p>特征值法求权重(使用最多的)</p>
<ol type="1">
<li>第一步：求出矩阵A的最大特征值以及其对应的特征向量</li>
<li>第二步：对求出的特征向量进行归一化即可得到权重</li>
</ol></li>
<li><p>汇总结果得到权重矩阵</p></li>
<li><p>计算各方案的得分</p>
<blockquote>
<p>比赛时建议三种方案全用，然后在结尾加上：为了保证结果的稳健性，本文采用了三种方法分别求出了权重，再根据得到的权重矩阵计算各方案的得分，并进行排序和综合分析，这样避免了采用单一方法所产生的偏差，得出的结论将更全面、更高效。</p>
</blockquote></li>
</ol>
<h2 id="层次分析法具体步骤">层次分析法具体步骤</h2>
<ol type="1">
<li>第一步，分析系统中各因素之间的关系，建立系统的递阶层次结构</li>
<li>第二步，对于同一层次的各元素关于上一层次中某一准则的重要性进行两两比较，构造两两比较矩阵(判断矩阵)</li>
<li>第三步，由判断矩阵计算彼此被比较元素对于该准则的相对权重，并进行一致性检验(检验通过权重才能用)</li>
<li>第四步，计算各层元素对系统目标的合成权重，并进行排序</li>
</ol>
<h2 id="层次分析法的一些局限性">层次分析法的一些局限性</h2>
<ol type="1">
<li>评价的决策层不能太多，太多的话n会很大，判断矩阵和一致矩阵差异可能会很大</li>
<li>如果决策层中指标的数据是已知的，那么我们如何利用这些数据来使得评价的更加准确呢？</li>
</ol>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-灰色预测模型</title>
    <url>/2019/10/26/%E6%95%B0%E6%A8%A1-%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="灰色预测模型">灰色预测模型</h1>
<h2 id="概要">概要</h2>
<p><strong>灰色预测模型</strong>是通过少量的、不完全的信息，建立数学模型并做出预测的一种预测方法。其对<strong>时间序列短、统计数据少、信息不完全系统</strong>的分析与建模，具有独特的功效。</p>
<h2 id="灰色系统">灰色系统</h2>
<h3 id="灰色系统的定义">灰色系统的定义</h3>
<p>灰色系统是黑箱概念的一种推广。我们把既含有已知信息又含有未知信息的系统称为灰色系统。作为两个极端，我们将信息完全未确定的系统称为黑色系统；将信息完全确定的系统为白色系统。区别白色系统与黑色系统的重要标志是系统各因素之间是否具有确定的关系。</p>
<h3 id="灰色系统的特点">灰色系统的特点</h3>
<ol type="1">
<li>用灰色数学(不定积分、微积分等包括未知参数/导数的)处理不确定量，使之量化</li>
<li>充分利用已知信息寻求系统的运动规律</li>
<li>灰色系统理论能处理贫信息系统</li>
</ol>
<h2 id="常见的灰色预测">常见的灰色预测</h2>
<ol type="1">
<li>数列预测，即用观察到的反映预测对象特征的时间序列来构造灰色预测模型，预测未来某一时刻的特征量，或达到某一特征量的时间。(eg:1,3,5,7,9,预测下一个)</li>
<li>灾变与异常值预测，即通过灰色模型预测异常值出现的时刻，预测异常值什么时候出现在特定时区内。</li>
<li>季节灾变与异常值预测，即通过灰色模型预测灾变值发生在一年内某个特定的时区或季节的灾变预测</li>
<li>拓扑预测，将原始数据作曲线，在曲线上按定值寻找该定值发生的所有时点，并以该定值为框架构成时点数列，然后建立模型预测该定值所发生的时点。</li>
<li>系统预测，通过对系统行为特征指标建立一组相互关联的灰色预测模型，预测系统中众多变量间的相互协调关系的变化。</li>
</ol>
<h2 id="建立基于模型的灰色预测">建立基于模型的灰色预测</h2>
<ol type="1">
<li><p>数据的预处理(使用累加) <span class="math display">\[
x^{(1)}(i) =\{\sum_{j=1}^ix^{(0)}(j)|i=1,2,...,N\}
\]</span> 称此式所表示的数据列为原始数据列的一次累加生成，简称<strong>一次累加生成</strong>，显然有$ x<sup>{(1)}(1)=x</sup>{(0)}(1) $</p></li>
<li><p>通过图形预测后，使用累减还原 <span class="math display">\[
\delta x^{(1)}(i)=x^{(1)}(i)-x^{1}(i-1)=x^{(0)}(i),其中i=1,2,...,N,x^{(0)}=0
\]</span></p></li>
<li><p>建模原理，给定<span class="math inline">\(x^{(0)}={x^{(0)}(1),x^{(0)}(2),...,x^{(0)}(N)}\)</span>，经一次累加得<span class="math inline">\(x^{(1)}=\{x^{(1)}(1),x^{(1)}(2),...,x^{(1)}(N)\}\)</span> ，设<span class="math inline">\(x^{(1)}\)</span> 满足一阶常微分方程<span class="math inline">\(\frac{dx^{(1)}}{dt}+ax^{(1)}=u\)</span> ，其中a为常数，u称为发展灰数，为内生控制类数，是对系统的常定输入，此方程满足初始条件：</p>
<p>​ 当<span class="math inline">\(t=t_0时x^{(1)}=x^{(1)}(t_0)\)</span>的解为<span class="math inline">\(x^{(1)}(t)=[x^{(1)}(t_0)-\frac{u}{a}]e^{-a(t-t_0)}+\frac{u}{a}\)</span> ,对等间隔取样的离散值则为<span class="math inline">\(x^{(1)}(k+1)=[x^{(1)}(1)-\frac{u}{a}]e^{-ak}+\frac{u}{a}\)</span> ，通过最小二乘法来估计常数a与u</p></li>
<li><p>精度检验</p>
<ol type="1">
<li>残差检验</li>
<li>后验差检验</li>
<li>预测精度等级对照</li>
</ol></li>
</ol>
<p>GM(1,1)的建模步骤：</p>
<ol type="1">
<li><p>由原始数据序列<span class="math inline">\(x^{(0)}\)</span>计算一次累加序列<span class="math inline">\(x^{(1)}\)</span></p></li>
<li><p>建立矩阵B,y</p></li>
<li><p>求逆矩阵<span class="math inline">\((B^TB)^{-1}\)</span></p></li>
<li><p>根据<span class="math inline">\(\hat{U}=(B^TB)^{-1}B^Ty求估计值\hat{a}和\hat{u}\)</span></p></li>
<li><p>用时间响应方程计算拟合值<span class="math inline">\(\hat{x}^{(1)}(i)\)</span>，再用后减运算还原，即： <span class="math display">\[
x^{(0)}(i)=x(i)-\hat{x}^{(1)}(i-1)(i=2,3,...,N)
\]</span></p></li>
<li><p>精度检验与预测</p></li>
</ol>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-神经网络</title>
    <url>/2019/11/05/%E6%95%B0%E6%A8%A1-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="神经网络">神经网络</h1>
<h3 id="原理">原理</h3>
<h3 id="模型概述">模型概述</h3>
<p>神经元模型：从神经元的特性和功能可以知道，神经元是一个多输入单输出的信息处理单元，而且，它对信息的处理是非线性的。根据神经元的特性和功能，可以把神经元抽象为一个简单的数学模型。</p>
<figure>
<img src="/img/ANN.png" alt="ANN" /><figcaption>ANN</figcaption>
</figure>
<p>X1，X2，...，Xn是神经元的输入，即是来自前几个神经元的轴突的信息A，<span class="math inline">\(\sum\)</span>是i神经元的阈值；Wi1,Wi2,...,Win分别是i神经元对X1,X2,...,Xn的权系数，也即突触的传递效率；Yi是i神经元的输出；f[.]是激发函数，它决定i神经元受到输入X1,X2,...,Xn的共同刺激达到阀值时以何种方式输出。</p>
<p>神经元模型表达式： <span class="math display">\[
\begin{cases}
U_i=\sum_{j=1}^nw_yx_j-\theta_i\\
Y_i=f(U_i)
\end{cases}
\]</span> 对于阶跃型激发函数，它的输出是电位脉冲，故而这种激发函数的神经元称离散输出模型。</p>
<p>对于线性激发函数，它的输出是随输入的激发问题成正比的；故这种神经元称线性连续型模型。</p>
<p>对于用s型激发函数，它的输出是非线性的；故这种神经元称非线性连续型模型。 <span class="math display">\[
阶跃函数：f(x)=\begin{cases}
0&amp; x&lt;0\\
1&amp; x&gt;=0
\end{cases}\\
线性函数：f(x)=x\\
单极性S型函数：f(x)=\frac{1}{1+e^{-x}}\\
双曲正切S型函数：f(x)=\frac{1-e^{-x}}{1+e^{-x}}
\]</span></p>
<h2 id="人工神经网络">人工神经网络</h2>
<p>在机器学习和认知科学领域，人工神经网络(artificial neural network,缩写ANN),简称神经网络(neural network，缩写NN)或类神经网络，是一种模仿生物神经网络(动物的中枢神经系统，特别是大脑)的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统。现代神经网络是一种非线性统计性数据建模工具。典型的神经网络具有以下三个部分：</p>
<ol type="1">
<li>结构(Architecture) 结构指定了网络中的变量和它们的拓扑关系。例如，神经网络中的变量可以是神经元连接的权重(weights)和神经元的激励值(activities of the neurons)。</li>
<li>激励函数(Activity Rule) 大部分神经网络模型具有一个短时间尺度的动力学规则，来定义神经元如何根据其他神经元活动来改变自己的激励值。一般激励函数依赖于网络中的权重(即该网络的参数)。</li>
<li>学习规则(Learning Rule) 学习规则指定了网络中的权重如何随着时间推进而调整。这一般被看作是一种长时间尺度的动力学规则。一般情况下，学习规则依赖于神经元的激励值 。它也可能依赖于监督者提供的目标值和当前权重的值。</li>
</ol>
<p>神经网络主要包括三个部分：结构、激励函数、学习规则。下图是一个三层的神经网络，输入层有d个节点，隐层有q个节点，输出层有l个节点。除了输入层，每层节点都包含一个<strong>非线性</strong>变换。</p>
<figure>
<img src="/img/nnlayer.png" alt="nnlayer" /><figcaption>nnlayer</figcaption>
</figure>
<h3 id="为什么要进行非线性变换">为什么要进行非线性变换？</h3>
<ol type="1">
<li>如果只进行线性变换，那么即使是多层的神经网络，依然只有一层的效果(类似于层次分析法)</li>
<li>进行非线性变换，可以使得神经网络可以拟合任意一个函数</li>
</ol>
<h3 id="bpback-propagation神经网络">BP(Back Propagation)神经网络</h3>
<p>BP神经网络的学习过程由信号的正向传播与误差的反向传播两个过程组成。正向传播时，输入样本从输入层传入，经隐层逐层处理后，传向输出层。若输出层的实际输出与期望输出不符，则转身误差的反向传播阶段。误差的反向传播是将输出误差以某种形式通过隐层向输入层逐层反传，并将误差分摊给各层的所有单元，从而获得各层单元的误差信号，此误差信号即作为修正各单元权值的依据。</p>
<h2 id="主要内容">主要内容</h2>
<h3 id="数据预处理">数据预处理</h3>
<p>在训练神经网络前一般需要对数据进行预处理，一种重要的预处理手段是归一化处理</p>
<ol type="1">
<li><p>什么是归一化</p>
<p>数据归一化，就是将数据映射到[0,1]或[-1,1]区间或更小的区间</p></li>
<li><p>为什么要归一化处理</p>
<ol type="1">
<li>输入数据的单位不一样，有些数据的范围可能特别大，导致结果是神经网络收敛慢、训练时间长</li>
<li>数据范围大的输入在模式分类中的作用可能会偏大，而数据范围小的输入作用就可能会偏小</li>
<li>由于神经网络输出层的激活函数的值域是有限制的，因此需要将网络训练的目标函数映射到激活函数的值域。例如，神经网络的输出层若采用S形激活函数，由于S形函数的值域限制在(0,1)，也就是说神经网络的输出只能限制在(0,1)，所以训练数据的输出就要归一化到[0,1]区间</li>
<li>S形激活函数在(0,1)区间以外区域很平缓，区分度太小。例如S形函数f(X)在参数a=1时，f(100)与f(5)只差0.0067</li>
</ol></li>
<li><p>归一化算法</p>
<p>一种简单而快速的归一化算法是线性转换算法。线性转换算法常见有两种形式:</p>
<ol type="1">
<li><p>y=(x-min)/(max-min)</p>
<p>其中min为x的最小值 ，max为 x的最大值 ，输入向量为x，归一化后的输出向量为y。上式将数据归一化到[0,1]区间，当激活函数采用S形函数时(值域为(0,1))时适用</p></li>
<li><p>y=2*(x-min)/(max-min)-1</p>
<p>这条公式将数据归一化到[-1,1]区间。当激活函数采用双极S形函数(值域为(-1,1))时适用</p></li>
</ol></li>
</ol>
<h3 id="bp神经网络的训练过程">BP神经网络的训练过程</h3>
<ol type="1">
<li>初始化网络的突触权值和阈值矩阵</li>
<li>训练样本的呈现</li>
<li>前向传播计算</li>
<li>误差反向传播计算并更新权值</li>
<li>迭代，用新的样本进行步骤3和4，直至满足停止准则</li>
</ol>
<h3 id="bp神经网络的测试过程">BP神经网络的测试过程</h3>
<ol type="1">
<li>数据分为训练数据和测试数据，根据训练数据训练模型，再根据测试数据验证模型训练的正确性</li>
<li>将测试数据输入模型，得到理论测试输出和实际输出，对比后即可确定模型预测的正确率</li>
</ol>
<h2 id="ｍatlab调用">Ｍatlab调用</h2>
<ol type="1">
<li><p>数据预处理</p>
<p>Matlab中归一化处理数据可以采用premnmx,postmnmx,tramnmx这3个函数</p>
<ul>
<li><p>premnmx</p>
<p>语法：[pn,minp,maxp,tn,mint,maxt]=premnmx(p,t)</p>
<p>参数：</p>
<p>pn:p矩阵按行归一化后的矩阵</p>
<p>minp,maxp:p矩阵每一行的最小值 ，最大值</p>
<p>tn:t矩阵按行归一化后的矩阵</p>
<p>mint,maxt:t矩阵每一行的最小值，最大值</p>
<p>作用：将矩阵p,t归一化到[-1,1]，主要用于归一化处理数据集</p></li>
<li><p>tramnmx</p>
<p>语法：[pn]=tramnmx(p,minp,maxp)</p>
<p>参数：</p>
<p>minp,maxp:premnmx函数计算的矩阵的最小、最大值</p>
<p>pn:归一化后的矩阵</p>
<p>作用：主要用于归一化处理待分类的输入数据</p></li>
<li><p>postmnmx</p>
<p>语法：[p,t]=postmnmx(pn,minp,maxp,tn,mint,maxt)</p>
<p>参数：</p>
<p>minp,maxp:premnmx函数计算的p矩阵每行的最小值，最大值</p>
<p>mint,maxt:premnmx函数计算的t矩阵每行的最小值，最大值</p>
<p>作用：将矩阵pn,tn映射回归一化处理前的范围。postmnmx函数主要用于将神经网络的输出结果映射回归一化前的数据范围。</p></li>
</ul></li>
<li><p>神经网络的训练和测试</p>
<p>使用matlab建立前馈神经网络主要会使用到下面3个函数：</p>
<ul>
<li><p>newff：前馈网络创建函数</p>
<p>语法：newff函数参数列表有很多的可选参数，具体可以参数Matlab的帮助文档，这里介绍new函数的一种简单的形式：net=newff(A,B,{C},'trainFun')</p>
<p>参数：</p>
<p>A:一个n*2的矩阵，第i行元素为输入信号xi的最小值和最大值</p>
<p>B:一个k维行向量，其元素为网络中各层节点数</p>
<p>C:一个k维字符串行向量，每一分量为对应层神经元的激活函数</p>
<p>trainFun:为学习规则采用的训练算法</p>
<ul>
<li><p>常用的激活函数</p>
<p>线性函数(Linear transfer function)---&gt;'purelin'</p>
<p>对数S形转移函数(Logarithmic sigmoid transfer function)---&gt;'logsig'</p>
<p>双曲正切S形函数(Hyperbolic tangent sigmoid transfer function)---&gt;'tansig'</p></li>
<li><p>常见的训练函数</p>
<p>traingd：梯度下降BP训练函数(Gradient descent backpropagation)</p>
<p>traingdx：梯度下降自适应学习率训练函数</p></li>
<li><p>网络配置参数</p>
<p>net.trainparam.goal：神经网络训练的目标误差</p>
<p>net.trainparam.show：显示中间结果的周期</p>
<p>net.trainparam.epochs：最大迭代次数</p>
<p>net.trainParam.lr：学习率</p></li>
</ul></li>
<li><p>train：训练一个神经网络</p>
<p>语法：[net,tr,Y1,E]=train(net,X,Y)</p>
<p>参数：</p>
<p>X：网络实际输入</p>
<p>Y：网络应有输出</p>
<p>tr：训练跟踪信息</p>
<p>Y1：网络实际输出</p>
<p>E：误差矩阵</p></li>
<li><p>sim：使用网络进行仿真</p>
<p>语法：Y=sim(net,X)</p>
<p>参数：</p>
<p>net：网络</p>
<p>X：输入给网络的K*N矩阵，其中K为网络输入个数，N为数据样本数</p>
<p>Y：输出矩阵Q*N，其中Q为网络输出个数</p></li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% BP网络函数逼近实例</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 1.首先定义正弦函数，采样率为20Hz，频率为1Hz</span></span><br><span class="line">k=<span class="number">1</span>; <span class="comment">%设定正弦信号频率</span></span><br><span class="line">p=[<span class="number">0</span>:<span class="number">0.05</span>:<span class="number">25</span>];</span><br><span class="line">t=<span class="built_in">cos</span>(k*<span class="built_in">pi</span>*p)+<span class="number">3</span>*<span class="built_in">sin</span>(<span class="built_in">pi</span>*p);</span><br><span class="line"><span class="comment">% plot(p,t,&#x27;-&#x27;),xlabel(&#x27;时间&#x27;);ylabel(&#x27;输入信号&#x27;);</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 2生成BP网络。用newff函数生成前向型BP网络，设定隐层中神经元数目为10</span></span><br><span class="line"><span class="comment">% 分别选择隐层的传递函数为tansig，输出层的传递函数为purelin</span></span><br><span class="line"><span class="comment">% 学习算法为trainlm</span></span><br><span class="line"><span class="comment">% net = newff(minmax(p),[10,10,1],&#123;&#x27;tansig&#x27;,&#x27;tansig&#x27;,&#x27;purelin&#x27;&#125;,&#x27;trainlm&#x27;);</span></span><br><span class="line">output=t;</span><br><span class="line">net = newff(p,output,[<span class="number">10</span>,<span class="number">10</span>],&#123;<span class="string">&#x27;tansig&#x27;</span>,<span class="string">&#x27;tansig&#x27;</span>,<span class="string">&#x27;purelin&#x27;</span>&#125;,<span class="string">&#x27;trainlm&#x27;</span>);</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 3.对生成的网络进行仿真并做图显示</span></span><br><span class="line"><span class="comment">% y1=sim(net,p);plot(p,t,&#x27;-&#x27;,p,y1,&#x27;--&#x27;)</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 4.训练。对网络进行训练，设定训练误差目标为1e-5，最大迭代数为300</span></span><br><span class="line"><span class="comment">% 学习速率为0.05</span></span><br><span class="line">net.trainParam.lr=<span class="number">0.05</span>;</span><br><span class="line">net.trainParam.epochs=<span class="number">1000</span>;</span><br><span class="line">net.trainParam.goal=<span class="number">1e-5</span>;</span><br><span class="line">[net,tr]=train(net,p,t);</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% 5.再次对生成的网络进行仿真并作图显示</span></span><br><span class="line">y2=sim(net,p);</span><br><span class="line"><span class="built_in">plot</span>(p,t,<span class="string">&#x27;-&#x27;</span>,p,y2,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="调试与结果分析">调试与结果分析</h2>
<h3 id="调试">调试</h3>
<p>采用Matlabt内置函数后，BP神经网络的调试就已经变成了修改参数，使结果能够满意</p>
<p>可调试的内容有</p>
<ol type="1">
<li><p>激活函数</p></li>
<li><p>神经网络层数</p></li>
<li><p>神经网络节点数</p></li>
<li><p>有无偏置</p></li>
<li><p>步长</p></li>
<li><p>梯度下降法</p>
<p>...</p></li>
</ol></li>
</ol>
<p>###　结果分析</p>
<p>神经网络的结果分析可以在Matlab的神经网络训练界面中实现，查看：</p>
<ol type="1">
<li>步数</li>
<li>时间</li>
<li>梯度</li>
<li>图像对比</li>
<li>回归分析</li>
<li>训练状态</li>
</ol>
<h2 id="优缺点和改进方法">优缺点和改进方法</h2>
<h2 id="bp神经网络的优点">BP神经网络的优点</h2>
<ol type="1">
<li>非线性映射能力：BP神经网络实质上实现了一个从输入到输出的映射功能，数学理论证明三层的神经网络就能够以任意精度逼近任何非线性连续函数，这使得其特别适合于求解内部机制复杂的问题，即BP神经网络具有较强的非线性映射能力</li>
<li>自学习和自适应能力：BP神经网络在训练时，能够通过学习自动提取输入、输出数据间的“合理规则”，并自适应的将学习内容记忆于网络的权值中。即BP神经网络具有高度自学习和自适应的能力。</li>
<li>泛化能力：所谓泛化能力是指在设计模式分类器时，即要考虑网络在保证对所需分类对象进行正确分类，还要关心网络在经过训练后，能否对未见过的模式或有噪声的模式，进行正确的分类。也即BP神经网络具有将学习成果应用于新知识的能力。</li>
<li>容错能力：BP神经网络在其局部的或部分的神经元受到破坏后对全局的训练结果不会造成很大的影响，也就是说即使系统在受到局部损伤时还是可以正常工作的。即BP神经网络具有一定的容错能力</li>
</ol>
<h3 id="bp神经网络的缺点">BP神经网络的缺点</h3>
<ol type="1">
<li>局部极小化问题：从数学角度看，传统的BP神经网络为局部搜索的优化方法，它要解决的是一个复杂非线性化问题，网络的权值是通过沿局部改善的方向逐渐进行调整的，这样会使算法陷入局部极值，权值收敛到局部极小点，从而导致网络训练失败。加上BP神经网络对初始网络权重非常敏感，以不同的权重初始化网络，其往往会收敛于不同的局部极小，这也是很多学者每次训练得到不同结果的根本原因。</li>
<li>BP神经网络算法的收敛速度慢：由于BP神经网络算法本质上为梯度下降法，它所要优化的目标函数是非常复杂的，因此，必然会出现“锯齿形现象”，这使得BP算法低效；又由于优化的目标函数很复杂，它必然会在神经元输入接近0或1的情况下，出现一些平坦区，在这些区域内，权值误差改变很小，使训练过程几乎停顿；BP神经网络模型中，为了使网络执行BP算法，不能使用传统的一维搜索法求每次迭代的步长，而必须把步长更新规则预先赋予网络，这种方法也会引起算法低效。以上种种，导致了BP神经网络算法收敛速度慢的现象</li>
<li>BP神经网络结构选择不一：BP神经网络结构的选择至今尚无一种统一而完整的理论指导，一般只能由经验选定。网络结构选择过大，训练中效率不高，可能出现过拟合现象，造成网络性能低，容错性下降，若选择过小，则又会造成网络可能不收敛。而网络的结构直接影响网络的逼近能力及推广性质。因此，应用中如何选择合适的网络结构是一个重要的问题</li>
<li>应用实例与网络规模的矛盾问题：BP神经网络难以解决应用问题的实例规模和网络规模间的矛盾问题，其涉及到网络容量的可能性与可行性的关系问题，即学习复杂性问题</li>
<li>BP神经网络预测能力和训练能力的矛盾问题：预测能力也称泛化能力或推广能力，而训练能力也称逼近能力或学习能力。一般情况下，训练能力差时，预测能力也差，并且一定程度上，随着训练能力地提高，预测能力会得到提高。但这种趋势不是固定的，其有一个极限，当达到此极限时，随着训练能力的提高，预测能力反而会下降，也即出现所谓“过拟合”现象。出现该现象的原因是网络学习了过多的样本细节导致，学习出的模型已不能反映样本内含的规律，所以如何把握好学习的度，解决网络预测能力和训练能力间矛盾问题也是BP神经网络的重要研究内容。</li>
<li>BP神经网络样本依赖性问题：网络模型的逼近和推广能力与学习样本的典型性密切相关，而从问题中选取典型样本实例组成训练集是一个很困难的问题</li>
</ol>
<h3 id="ｂp神经网络算法的改进">ＢP神经网络算法的改进</h3>
<p>传统的BP算法改进主要有两类：</p>
<p>启发式算法：如附加动量法、自适应算法</p>
<p>数值优化法：如共轭梯度法、牛顿迭代法、Levenberg-Marquardt算法</p>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-蒙特卡罗算法</title>
    <url>/2019/10/30/%E6%95%B0%E6%A8%A1-%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="蒙特卡罗算法">蒙特卡罗算法</h1>
<h2 id="概念">概念</h2>
<p>蒙特卡罗算法又称统计模拟法、随机抽样技术，是一种随机模拟方法，以概率和统计理论方法为基础的一种计算方法，是使用随机数来解决很多计算问题的方法。将所求解的问题同一定的概率模型相联系，用电子计算机实现统计模拟或抽样，以获得问题的近似解。为象征性地表明这一方法的概率统计特征，故解借用赌城蒙特卡罗命名。</p>
<h2 id="基本思想">基本思想</h2>
<ul>
<li>当所求问题的解是某个事件的概率，或是某个随机变量的数学期望，或是与概率，数学期望有关的量时，通过某种试验的方法，得出该事件发生的概率或该随机变量若干个具体观察值的算术平均值，通过它得到问题的解。</li>
<li>当随机变量的取值仅为1或0时，它的数学期望就是某个事件的概率。或者说，某种事件的概率也是随机变量(仅取值为1或0)的数学期望。</li>
</ul>
<h2 id="优点">优点</h2>
<ol type="1">
<li>能够比较逼真地描述具有随机性质的事物的特点及物理实验过程</li>
<li>受几何条件限制小</li>
<li>收敛速度与问题的维数无关</li>
<li>具有同时计算多个方案与多个未知量的能力</li>
<li>误差容易确定</li>
<li>程序结构简单，易于实现</li>
</ol>
<h2 id="缺点">缺点</h2>
<ol type="1">
<li>收敛速度慢</li>
<li>误差具有概率性</li>
<li>在粒子输运问题中，计算结果与系统大小有关</li>
</ol>
<h2 id="主要应用范围">主要应用范围</h2>
<ul>
<li>粒子输运问题(实验物理，反应堆物理，高能物理)</li>
<li>统计物理</li>
<li>典型数学问题</li>
<li>真空技术</li>
<li>激光技术以及医学</li>
<li>生物</li>
<li>探矿</li>
</ul>
<h2 id="matlab实现">matlab实现</h2>
<p>以求积分为例</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 蒙特卡罗求积分</span></span><br><span class="line"><span class="comment">% x^2+cos(x)在[0,1]上求积分</span></span><br><span class="line">a=<span class="number">0</span>;</span><br><span class="line">b=<span class="number">1</span>;</span><br><span class="line">n=<span class="number">20000</span>;</span><br><span class="line">t=<span class="built_in">rand</span>(<span class="number">1</span>,n);</span><br><span class="line">x=a+(b-a)*t;</span><br><span class="line">f=x.^<span class="number">2</span>+<span class="built_in">cos</span>(x);</span><br><span class="line">s=sum(f);</span><br><span class="line">s=s*(b-a)/n</span><br><span class="line"></span><br><span class="line"><span class="comment">% 画图</span></span><br><span class="line">x=<span class="number">-0.5</span>:<span class="number">0.01</span>:<span class="number">1.5</span>;</span><br><span class="line">y=x.^<span class="number">2</span>+<span class="built_in">cos</span>(x);</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">axis([<span class="number">-0.5</span> <span class="number">1.5</span> <span class="number">0</span> <span class="number">2.5</span>])</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">x1 = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">1</span>;</span><br><span class="line">y1 = x1.^<span class="number">2</span>+<span class="built_in">cos</span>(x1);</span><br><span class="line">area(x1,y1);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-非线性规划</title>
    <url>/2019/10/24/%E6%95%B0%E6%A8%A1-%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="非线性规划">非线性规划</h1>
<h2 id="几种常见的规划名称">几种常见的规划名称</h2>
<p>整数规划：规划中的变量(全部或部分)限制为整数，称为整数规划</p>
<p>0-1规划：决策变量仅取值0或1的一类特殊的整数规划</p>
<p>非线性规划：目标函数或约束条件中至少有一个是非线性函数时的最优化问题</p>
<p>多目标规划：研究多于一个的目标函数在给定区域上的最优化</p>
<p>动态规划：是运筹学的一个分支，是求解决策过程最优化的数学方法</p>
<h2 id="规划">0-1规划</h2>
<p><span class="math display">\[
目标函数：Max(Min)z = c_1x_1+c_2x_2+...+c_nx_n
\]</span></p>
<p><span class="math display">\[
约束条件：
\begin{cases}
a_{11}x_1+a_{12}x_2+... a_{1n}x_n&lt;=b_1 \\
a_{21}x_1+a_{22}x_2+... a_{2n}x_n&lt;=b2 \\
...\\
a_{m1}x_1+a_{m2}x_2+... a_{mn}x_n&lt;=b_m\\
x_1,x_2,...,x_n=0|1（0|1表示0或1）
\end{cases}
\]</span></p>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>文本预处理-文本数据分析</title>
    <url>/2021/10/06/%E6%96%87%E6%9C%AC%E9%A2%84%E5%A4%84%E7%90%86-%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="文本预处理-文本数据分析">文本预处理-文本数据分析</h1>
<h2 id="文本数据分析的作用">文本数据分析的作用</h2>
<ul>
<li>文本数据分析能够有效帮助我们理解数据语料，快速检查出语料可能存在的问题，并指导之后模型训练过程中一些超参数的选择</li>
</ul>
<h2 id="常用的几种文本数据分析方法">常用的几种文本数据分析方法</h2>
<ul>
<li>标签数量分布</li>
<li>句子长度分布</li>
<li>词频统计与关键词词云</li>
</ul>
<h2 id="实验数据">实验数据</h2>
<ul>
<li><p>中文酒店评论语料：</p>
<ul>
<li>属于二分类的中文情感分析语料，该语料存放在"./cn_data"目录下</li>
<li>其中train.tsv代表训练集，dev.tsv代表验证集，二者数据样式相同</li>
</ul></li>
<li><p>train.tsv数据样式</p>
<blockquote>
<p>sentence label</p>
<p>早餐不好，服务不到位，晚餐无西餐，早餐晚餐相同，房间条件不好，餐厅不分吸烟区，房间不分有无烟房. 0</p>
</blockquote></li>
<li><p>train.tsv数据样式说明</p>
<ul>
<li>train.tsv中的数据内容共分为2列，第一列数据代表具有感情色彩的评论文本；第二列数据，0或1，代表每条文本数据是积极或消极的评论，0代表消极，1代表积极</li>
</ul></li>
</ul>
<h4 id="获得训练集和验证集的标签数量分布">获得训练集和验证集的标签数量分布</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="string">&#x27;fivethirtyeight&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 分别读取训练集和验证集</span></span><br><span class="line">train_data = pd.read_csv(<span class="string">&quot;./cn_data/train.tsv&quot;</span>, sep=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">valid_data = pd.read_csv(<span class="string">&quot;./cn_data/dev.tsv&quot;</span>, sep=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 获得训练数据标签数量分布</span></span><br><span class="line">sns.countplot(<span class="string">&quot;label&quot;</span>, data=train_data)</span><br><span class="line">plt.title(<span class="string">&quot;train_data&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取验证数据标签数量分布</span></span><br><span class="line">sns.countplot(<span class="string">&quot;label&quot;</span>, data=valid_data)</span><br><span class="line">plt.title(<span class="string">&quot;valid_data&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006175331202.png" /></p>
<p><img src="C:\Users\Zephon\AppData\Roaming\Typora\typora-user-images\image-20211006175351275.png" /></p>
</blockquote>
<ul>
<li><p>分析：</p>
<ul>
<li>在深度学习模型评估中，我们一般使用ACC作为评估指标，若想将ACC的基线定义在50%左右，则需要正负样本比例维持在1:1左右，否则就要进行收入必要的数据增强或数据删减。</li>
</ul></li>
</ul>
<h4 id="获取训练集和验证集的句子长度分布">获取训练集和验证集的句子长度分布</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在训练数据中添加新的句子长度列，每个元素的值都是对应的句子列的长度</span></span><br><span class="line">train_data[<span class="string">&#x27;sentence_length&#x27;</span>] = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">len</span>(x), train_data[<span class="string">&#x27;sentence&#x27;</span>]))</span><br><span class="line"><span class="comment"># 绘制句子长度列的数量分布图</span></span><br><span class="line">sns.countplot(<span class="string">&quot;sentence_length&quot;</span>, data=train_data)</span><br><span class="line"><span class="comment"># 主要关注count长度分布的纵坐标，不需要绘制横坐标，横坐标范围通过dict图进行查看</span></span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制dist长度的分布图</span></span><br><span class="line">sns.distplot(train_data[<span class="string">&quot;sentence_length&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要关注dist长度分布横坐标，不需要绘制纵坐标</span></span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在验证数据中添加新的句子长度列，每个元素的值都是对应的句子列的长度</span></span><br><span class="line">valid_data[<span class="string">&quot;sentence_length&quot;</span>] = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">len</span>(x), valid_data[<span class="string">&quot;sentence&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制句子长度列的数量分布图</span></span><br><span class="line">sns.countplot(<span class="string">&quot;sentence_length&quot;</span>, data=valid_data)</span><br><span class="line"><span class="comment"># 主要关注count长度分布的纵坐标，不需要绘制横坐标，横坐标范围通过dist图进行查看</span></span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制dist长度分布图</span></span><br><span class="line">sns.distplot(valid_data[<span class="string">&quot;sentence_length&quot;</span>])</span><br><span class="line"><span class="comment"># 主要关注dist长度分布横坐标，不需要绘制纵坐标</span></span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006181533053.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006181547709.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006181652995.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006181704976.png" /></p>
</blockquote>
<ul>
<li>分析
<ul>
<li>通过绘制句子长度分布图，可以得知语料中大部分句子长度的分布范围，因为模型的输入要求固定尺寸的张量，合理的长度范围对之后进行句子截断补齐(规范长度)直到关键的指导作用。上图中大部分句子就是在20~250之间</li>
</ul></li>
</ul>
<h4 id="获取训练集和验证集正负样本长度散点分布">获取训练集和验证集正负样本长度散点分布</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制训练集长度分布的散点图</span></span><br><span class="line">sns.stripplot(y=<span class="string">&quot;sentence_length&quot;</span>, x=<span class="string">&quot;label&quot;</span>, data=train_data)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 绘制验证集长度分布的散点图</span></span><br><span class="line">sns.stripplot(y=<span class="string">&quot;sentence_length&quot;</span>, x=<span class="string">&quot;label&quot;</span>, data=valid_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006205928598.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006210018536.png" /></p>
</blockquote>
<ul>
<li>分析
<ul>
<li>通过查看正负样本长度散点图，可以有效定位异常点的出现位置，帮助我们更准确进行人工语料审查。上图中在训练集正样本中出现了异常点，它的句子长度近3500左右，需要人工审查</li>
</ul></li>
</ul>
<h4 id="获得训练集与验证集不同词汇总数统计">获得训练集与验证集不同词汇总数统计</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入jieba用于分词</span></span><br><span class="line"><span class="comment"># 导入chain方法用于扁平化列表</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="comment"># 进行训练集的句子进行分词，并统计出不同词汇的总数</span></span><br><span class="line">train_vocab = <span class="built_in">set</span>(chain(*<span class="built_in">map</span>(<span class="keyword">lambda</span> x : jieba.lcut(x), train_data[<span class="string">&quot;sentence&quot;</span>])))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练集共包含不同词汇总数为：&quot;</span>, <span class="built_in">len</span>(train_vocab))</span><br><span class="line"><span class="comment"># 进行验证集的句子进行分词，并统计出不同词汇的总数</span></span><br><span class="line">valid_vocab = <span class="built_in">set</span>(chain(*<span class="built_in">map</span>(<span class="keyword">lambda</span> x:jieba.lcut(x), valid_data[<span class="string">&quot;sentence&quot;</span>])))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;验证集共包含不再词汇总数为：&quot;</span>, <span class="built_in">len</span>(valid_vocab))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>训练集共包含不同词汇总数为： 12162</p>
<p>验证集共包含不再词汇总数为： 6857</p>
</blockquote>
<h4 id="获得训练集上正负样本的高频形容词词云">获得训练集上正负样本的高频形容词词云</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用jieba中的词性标注功能</span></span><br><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_a_list</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于获取形容词列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 使用jieba的记性标注方法切分文本，获得具有词性属性flag和词汇属性的word的对象，从而判断flag是否为形容词，来返回对应的词汇</span></span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> pseg.lcut(text):</span><br><span class="line">        <span class="keyword">if</span> g.flag == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">            r.append(g.word)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入绘制词云的工具包</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_word_cloud</span>(<span class="params">keywords_list</span>):</span></span><br><span class="line">    <span class="comment"># 实例化绘制词云的类，其中参数font_path是字体路径，为了能显示中文</span></span><br><span class="line">    <span class="comment"># max_words指词云图像最多显示多少个词，background_color为背景颜色</span></span><br><span class="line">    wordcloud = WordCloud(font_path=<span class="string">&quot;./SimHei.ttf&quot;</span>, max_words=<span class="number">100</span>, background_color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">    <span class="comment"># 将传入的列表转化成词云生成器需要的字符串形式</span></span><br><span class="line">    keywords_string = <span class="string">&quot; &quot;</span>.join(keywords_list)</span><br><span class="line">    <span class="comment"># 生成词云</span></span><br><span class="line">    wordcloud.generate(keywords_string)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制图像并显示</span></span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.imshow(wordcloud, interpolation=<span class="string">&quot;bilinear&quot;</span>)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得训练集上正样本</span></span><br><span class="line">p_train_data = train_data[train_data[<span class="string">&quot;label&quot;</span>]==<span class="number">1</span>][<span class="string">&quot;sentence&quot;</span>]</span><br><span class="line"><span class="comment"># 对正样本的每个句子的形容词</span></span><br><span class="line">train_p_a_vocab = chain(*<span class="built_in">map</span>(<span class="keyword">lambda</span> x: get_a_list(x), p_train_data))</span><br><span class="line"><span class="comment">#print(train_p_n_vocab)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得训练集上负样本</span></span><br><span class="line">n_train_data = train_data[train_data[<span class="string">&quot;label&quot;</span>]==<span class="number">0</span>][<span class="string">&quot;sentence&quot;</span>]</span><br><span class="line"><span class="comment">#print()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取负样本的每个句子的形容词</span></span><br><span class="line">train_n_a_vocab = chain(*<span class="built_in">map</span>(<span class="keyword">lambda</span> x:get_a_list(x), n_train_data))</span><br><span class="line"></span><br><span class="line">get_word_cloud(train_p_a_vocab)</span><br><span class="line">get_word_cloud(train_n_a_vocab)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006220052298.png" /></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006220125067.png" /></p>
</blockquote>
<h4 id="获得验证集上正负样本的形容词词云">获得验证集上正负样本的形容词词云</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获得验证集上正样本</span></span><br><span class="line">p_valid_data = valid_data[valid_data[<span class="string">&quot;label&quot;</span>]==<span class="number">1</span>][<span class="string">&quot;sentence&quot;</span>]</span><br><span class="line"><span class="comment"># 对正样本的每个句子的形容词</span></span><br><span class="line">valid_p_a_vocab = chain(*<span class="built_in">map</span>(<span class="keyword">lambda</span> x: get_a_list(x), p_valid_data))</span><br><span class="line"><span class="comment"># 获得验证集上负样本</span></span><br><span class="line">n_valid_data = valid_data[valid_data[<span class="string">&quot;label&quot;</span>]==<span class="number">0</span>][<span class="string">&quot;sentence&quot;</span>]</span><br><span class="line">valid_n_a_vocab = chain(*<span class="built_in">map</span>(<span class="keyword">lambda</span> x: get_a_list(x), n_valid_data))</span><br><span class="line">get_word_cloud(valid_p_a_vocab)</span><br><span class="line">get_word_cloud(valid_n_a_vocab)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006220302903.png" /></p>
</blockquote>
<ul>
<li>分析
<ul>
<li>根据高频形容词词云显示，可以对当前语料质量进行简单评估，同时对违反语料标签含义的词汇进行人工审查和修正，来保证绝大多数语料符合训练标准。上图中的正样本大多数是褒义词，而负样本大多数是贬义词，基本符合要求，但负样本中也存在“便利”这样的褒义词，因此可以人工进行审查</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>文本预处理-文本数据增强</title>
    <url>/2021/10/07/%E6%96%87%E6%9C%AC%E9%A2%84%E5%A4%84%E7%90%86-%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA/</url>
    <content><![CDATA[<h1 id="文本预处理-文本数据增强">文本预处理-文本数据增强</h1>
<h2 id="常见的文本数据增强方法">常见的文本数据增强方法</h2>
<ul>
<li>回译数据增强法</li>
</ul>
<h2 id="什么是回译数据增强法">什么是回译数据增强法</h2>
<ul>
<li>回译数据增强目前是文本数据增强方面效果较好的增强方法，一般基于google翻译接口，将文本数据翻译成另一种语言(一般选择小语种)，之后再翻译回原语言，即可认为得到与原语料同标签的新语料，新语料加入到原数据集中即可认为是对原数据集数据增强。</li>
</ul>
<h2 id="回译数据增强优势">回译数据增强优势</h2>
<ul>
<li>操作简便，获得新语料质量高</li>
</ul>
<h2 id="回译数据增强存在的问题">回译数据增强存在的问题</h2>
<ul>
<li>在短文本回译过程中，新语料与原语料可能存在很高的重复率，并不能有效增大样本的特征</li>
</ul>
<h2 id="高重复率解决办法">高重复率解决办法</h2>
<ul>
<li>进行连续的多语言翻译，如：中文-&gt;韩语-&gt;日语-&gt;英文-&gt;中文，根据经验，最多只采用3次连续翻译，更多的翻译次数将产生效率低下、语义失真等问题</li>
</ul>
<h2 id="回译数据增强实现">回译数据增强实现</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设取两条已经存在的正样本和两条负样本</span></span><br><span class="line"><span class="comment"># 将基于这四条样本产生新的同标签的四条样本</span></span><br><span class="line">p_sample1 = <span class="string">&quot;酒店设施非常不错&quot;</span></span><br><span class="line">p_sample2 = <span class="string">&quot;这家价格很便宜&quot;</span></span><br><span class="line">n_sample1 = <span class="string">&quot;拖鞋都发霉了，太差了&quot;</span></span><br><span class="line">n_sample2 = <span class="string">&quot;电视不好用，没有看到足球&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入google翻译接口工具</span></span><br><span class="line"><span class="keyword">from</span> googletrans <span class="keyword">import</span> Translator</span><br><span class="line"><span class="comment"># 实例化翻译对象</span></span><br><span class="line">translator = Translator()</span><br><span class="line"><span class="comment"># 进行第一次批量翻译，目标是韩语</span></span><br><span class="line">l = [p_sample1, p_sample2, n_sample1, n_sample2]</span><br><span class="line"><span class="comment"># translations = translator.translate([p_sample1, p_sample2, n_sample1, n_sample2], dest=&quot;ko&quot;)</span></span><br><span class="line">translations = [translator.translate(x, dest=<span class="string">&quot;ko&quot;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> l]</span><br><span class="line"><span class="comment"># 获得翻译后的结果</span></span><br><span class="line">ko_res = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x.text, translations))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;中间翻译结果：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ko_res)</span><br><span class="line"><span class="comment"># 翻译回中文</span></span><br><span class="line"><span class="comment"># translations = translator.translate(ko_res, dest=&quot;zh-cn&quot;)</span></span><br><span class="line">translations = [translator.translate(x, dest=<span class="string">&quot;zh-cn&quot;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> ko_res]</span><br><span class="line">cn_res = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.text, translations))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;回译得到的增强数据：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cn_res)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>中间翻译结果：</p>
<p>['호텔 시설은 아주 좋습니다', '이 가격은 매우 저렴합니다', '슬리퍼는 곰팡이가 너무 나쁩니다', 'TV는 쉽지 않고 축구를 보지 못했습니다']</p>
<p>回译得到的增强数据：</p>
<p>['酒店设施非常好', '这个价格很便宜', '拖鞋太糟糕了', '电视并不容易，我看不到足球']</p>
</blockquote>
<blockquote>
<p>注意：编码中存在的问题，报错：AttributeError: 'NoneType' object has no attribute 'group'</p>
<p>截至到这篇博客发文的时间，解决方案是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">!pip uninstall googletrans</span><br><span class="line">!pip install googletrans==4.0.0-rc1</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>文本预处理-文本特征处理</title>
    <url>/2021/10/07/%E6%96%87%E6%9C%AC%E9%A2%84%E5%A4%84%E7%90%86-%E6%96%87%E6%9C%AC%E7%89%B9%E5%BE%81%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="文本预处理-文本特征处理">文本预处理-文本特征处理</h1>
<h2 id="文本特征处理的作用">文本特征处理的作用</h2>
<ul>
<li>文本特征处理包括为语料添加具有普适性的文本特征，如n-gram特征，以及对加入特征之后的文本语料进行必要的处理，如：长度规范。这些特征处理工作能够有效的将重要的文本特征加入模型训练中，增强模型评估指标</li>
</ul>
<h2 id="常见的文本特征处理方法">常见的文本特征处理方法</h2>
<ul>
<li>添加n-gram特征</li>
<li>文本长度规范</li>
</ul>
<h2 id="n-gram特征">n-gram特征</h2>
<h3 id="什么是n-gram特征">什么是n-gram特征</h3>
<ul>
<li>给定一段文本序列，其中n个词或字的相邻共现特征即n-gram特征，常用的n-gram特征是bi-gram和tri-gram特征，分别对应n为2和3</li>
</ul>
<p>例：</p>
<blockquote>
<p>假设给定分词列表：["是谁", "敲动", "我心"]</p>
<p>对应的数值映射列表为：[1, 34, 21]</p>
<p>我们可以认为数值映射列表中的每个数学是词汇特征。</p>
<p>除此之外，我们还可以把“是谁“和”敲动“两个词共同出现且相邻也作为一种特征加入到序列列表中，假设1000就代表”是谁“和”敲动“共同出现且相邻</p>
<p>此时数值映射列表就变成了包含2-gram特征的特征列表：[1, 34, 21, 1000]</p>
<p>这里的”是谁“和”敲动“共同出现且相邻就是bi-gram特征中的一个</p>
<p>”敲动“和”我心“也是共现且相邻的两个词汇，因此它们也是bi-gram特征。</p>
<p>假设1001代表”敲动“和”我心“共同出现且相邻，那么最后原始的数值映射列表[1, 34, 21]添加了bi-gram特征之后就变成了[1, 34, 21, 1000, 1001]</p>
</blockquote>
<h3 id="提取n-gram特征">提取n-gram特征</h3>
<ul>
<li>一般n-gram中的n取2或3</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ngram_range = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_ngram_set</span>(<span class="params">input_list</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    description: 从数值列表中提取所有的n-gram特征</span></span><br><span class="line"><span class="string">    :param input_list: 输入的数值列表，可以看作是词汇映射后的列表，里面每个数字的取值范围为[1, 25000]</span></span><br><span class="line"><span class="string">    :return: n-gram特征组成的集合</span></span><br><span class="line"><span class="string">    eg:</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; create_ngram_set([1, 4, 9, 4, 1, 4])</span></span><br><span class="line"><span class="string">    &#123;(4,9),(4,1),(1,4),(9,4)&#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">set</span>(<span class="built_in">zip</span>(*[input_list[i:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ngram_range)]))</span><br><span class="line"></span><br><span class="line">input_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(create_ngram_set(input_list))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>{(3, 2), (1, 3), (2, 1), (1, 5), (5, 3)}</p>
</blockquote>
<h2 id="文本长度规范">文本长度规范</h2>
<h3 id="文本长度规范及其作用">文本长度规范及其作用</h3>
<ul>
<li>一般模型的输入需要等尺寸大小的矩阵，因此在进入模型前需要对每条文本数值映射后的长度进行规范，此时将根据句子长度分布分析出覆盖大多数文本的合理长度，对照长文本进行截断，对不足文本进行补齐(一般使用数字0)，这个过程就是文本长度规范</li>
</ul>
<h3 id="文本长度规范的实现">文本长度规范的实现</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> sequence</span><br><span class="line"><span class="comment"># cutlen根据数据分析中的句子长度分布，覆盖90%左右语料的最短长度</span></span><br><span class="line">cutlen = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding</span>(<span class="params">x_train</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    description: 对输入文本张量进行长度规范</span></span><br><span class="line"><span class="string">    :param x_train: 文本的张量表示，形如: [[1, 32, 32, 61], [2, 54, 21, 7, 19]]</span></span><br><span class="line"><span class="string">    :return: 进行截断补齐后的文本张量表示</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 使用sequence.pad_sequence即可完成</span></span><br><span class="line">    <span class="keyword">return</span> sequence.pad_sequences(x_train, cutlen)</span><br><span class="line"></span><br><span class="line">x_train = [[<span class="number">1</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">55</span>, <span class="number">63</span>, <span class="number">2</span>, <span class="number">21</span>, <span class="number">78</span>, <span class="number">32</span>, <span class="number">23</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">1</span>]]</span><br><span class="line">res = padding(x_train)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[[ 5 32 55 63 2 21 78 32 23 1]</p>
<p>[ 0 0 0 0 0 2 32 1 23 1]]</p>
</blockquote>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>文本预处理-文本处理的基本方法</title>
    <url>/2021/10/05/%E6%96%87%E6%9C%AC%E9%A2%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="文本预处理-文本处理的基本方法">文本预处理-文本处理的基本方法</h1>
<h2 id="认识文本预处理">认识文本预处理</h2>
<ul>
<li><p>文本预处理的及其作用</p>
<p>文本语料在输送给模型前一般需要一系列的预处理工作，才能符合模型的输入的要求，如：将文本转化成模型需要的张量，规范张量的尺寸等，而且科学的文本预处理环节还将有效指导模型超参数的选择，提升模型的评估指标</p></li>
<li><p>文本预处理中包含的主要环节</p>
<ul>
<li>文本处理的基本方法
<ul>
<li>分词</li>
<li>词性标注</li>
<li>命名实体识别</li>
</ul></li>
<li>文本张量的表示方法
<ul>
<li>one-hot编码</li>
<li>Word2vec</li>
<li>Word Embedding</li>
</ul></li>
<li>文本语料的数据分析
<ul>
<li>标签数量分布</li>
<li>句子长度分布</li>
<li>词频统计与关键词词云</li>
</ul></li>
<li>文本特征处理
<ul>
<li>添加n-gram特征</li>
<li>文本长度规范</li>
</ul></li>
<li>数据增强方法
<ul>
<li>回译数据增强法</li>
</ul></li>
</ul></li>
</ul>
<h2 id="文本处理的基本方法">文本处理的基本方法</h2>
<h3 id="jieba分词">jieba分词</h3>
<h4 id="安装">安装</h4>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure>
<h4 id="精确模式分词">精确模式分词</h4>
<ul>
<li>试图将句子最精确地切开，适合文本分析</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">content = <span class="string">&quot;巴西圣保罗州法院裁定苹果在当地出售的iPhone必须配备充电器&quot;</span></span><br><span class="line">jieba.cut(content, cut_all=<span class="literal">False</span>) <span class="comment">#　cut_all默认为False 返回一个生成器对象</span></span><br><span class="line">jieba.lcut(content, cut_all=<span class="literal">False</span>) <span class="comment"># 使用lcut()直接返回列表内容</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Building prefix dict from the default dictionary ... Dumping model to file cache /tmp/jieba.cache Loading model cost 1.053 seconds. Prefix dict has been built successfully. ['巴西', '圣保罗州', '法院', '裁定', '苹果', '在', '当地', '出售', '的', 'iPhone', '必须', '配备', '充电器']</p>
</blockquote>
<h4 id="全模式分词">全模式分词</h4>
<ul>
<li>把句子中所有的可以成词的词语都扫描出来，速度非常快，但不能消除歧义</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">content = <span class="string">&quot;巴西圣保罗州法院裁定苹果在当地出售的iPhone必须配备充电器&quot;</span></span><br><span class="line">jieba.cut(content, cut_all=<span class="literal">True</span>) <span class="comment"># cut_all默认为False</span></span><br><span class="line">jieba.lcut(content, cut_all=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Building prefix dict from the default dictionary ... Dumping model to file cache /tmp/jieba.cache Loading model cost 1.005 seconds. Prefix dict has been built successfully. ['巴西', '圣保罗', '圣保罗州', '保罗', '罗州', '法院', '裁定', '苹果', '果在', '当地', '出售', '的', 'iPhone', '必须', '配备', '充电', '充电器', '电器']</p>
</blockquote>
<h4 id="搜索引擎模式分词">搜索引擎模式分词</h4>
<ul>
<li>在精确模式的基础上，对长词再次切分，提高召回率，适用于搜索引擎分词</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">content = <span class="string">&quot;巴西圣保罗州法院裁定苹果在当地出售的iPhone必须配备充电器&quot;</span></span><br><span class="line">jieba.cut_for_search(content)</span><br><span class="line">jieba.lcut_for_search(content)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>['巴西', '保罗', '罗州', '圣保罗', '圣保罗州', '法院', '裁定', '苹果', '在', '当地', '出售', '的', 'iPhone', '必须', '配备', '充电', '电器', '充电器']</p>
</blockquote>
<h4 id="中文繁体分词">中文繁体分词</h4>
<ul>
<li>针对中国香港，台湾地区的繁体文本进行分词</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">content = <span class="string">&quot;煩惱既是菩提，我暫且不提&quot;</span></span><br><span class="line">jieba.lcut(content)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>['煩惱', '既', '是', '菩提', '，', '我', '暫且', '不', '提']</p>
</blockquote>
<h4 id="使用用户自定义的词典">使用用户自定义的词典</h4>
<ul>
<li>添加自定义词典后，jieba能够准确识别词典中出现的词汇，提升整体的识别准确率</li>
<li>词典格式：每行分三部分：词语、词频(可省略)，用空格隔开，顺序不可颠倒</li>
</ul>
<p>如：</p>
<blockquote>
<p>云计算 5 n</p>
<p>李小福 2 nr</p>
<p>easy_install 3 eng</p>
<p>好用 300</p>
<p>韩玉赏鉴 3 nz</p>
<p>八一双鹿 3 nz</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="comment"># 没有使用用户自定义词典前结果</span></span><br><span class="line">jieba.lcut(<span class="string">&quot;八一双鹿更名为八一南昌篮球队！&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>['八', '一双', '鹿', '更名', '为', '八一', '南昌', '篮球队', '！']</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jieba.load_userdict(<span class="string">&quot;./userdict.txt&quot;</span>)</span><br><span class="line"><span class="comment"># 使用自定义词典后的结果</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>['八一双鹿', '更名', '为', '八一', '南昌', '篮球队', '！']</p>
</blockquote>
<h3 id="hanlp">hanlp</h3>
<ul>
<li>中英文NLP处理工具包，基于tensorflow2.0 ，使用在学术界和行业中推广最先进的深度学习技术</li>
</ul>
<h4 id="hanlp的安装">hanlp的安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install hanlp</span><br></pre></td></tr></table></figure>
<h4 id="使用hanlp进行中文分词">使用hanlp进行中文分词</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hanlp</span><br><span class="line">tokenizer = hanlp.load(<span class="string">&quot;CTB6_CONVSEG&quot;</span>)</span><br><span class="line">tokenizer(<span class="string">&quot;巴西圣保罗州法院裁定苹果在当地出售的iPhone必须配备充电器&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Downloading https://file.hankcs.com/hanlp/embeddings/convseg_embeddings.zip#news_tensite.w2v200 to /root/.hanlp/embeddings/convseg_embeddings.zip 100% 188.3 MiB 2.5 MiB/s ETA: 0 s [=========================================] Decompressing /root/.hanlp/embeddings/convseg_embeddings.zip to /root/.hanlp/embeddings Loading word2vec from cache ...88.82% 13.2 MB/14.9 MB Loading word2vec from text file ... ETA: 0 sDownloading https://file.hankcs.com/corpus/char_table.zip#CharTable.txt to /root/.hanlp/thirdparty/file.hankcs.com/corpus/char_table.zip 100% 17.6 KiB 4.4 KiB/s ETA: 0 s [=========================================] Decompressing /root/.hanlp/thirdparty/file.hankcs.com/corpus/char_table.zip to /root/.hanlp/thirdparty/file.hankcs.com/corpus ['巴西', '圣保罗州', '法院', '裁定', '苹果', '在', '当地', '出售', '的', 'iPhone', '必须', '配备', '充电器']</p>
</blockquote>
<h4 id="使用hanlp进行英文分词">使用hanlp进行英文分词</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 但是我在colab上跑的时候报错了，问题目前还没解决！！！</span></span><br><span class="line">tokenizer = hanlp.utils.rules.tokenize_english</span><br><span class="line">tokenizer(<span class="string">&quot;Don&#x27;t go gentle into that good night.&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>['Do', "n't", 'go', 'gentle', 'into', 'that', 'good', 'night', '.']</p>
</blockquote>
<h3 id="命名实体识别">命名实体识别</h3>
<ul>
<li>命名实体：通常我们将人名，地名，机构名等专有名词统称为命名实体。如：周杰伦、黑山县、孔子学院</li>
<li>顾名思义，命名实体识别(Named Entity Recognition，简称NER)就是识别出一段文本中可能存在的命名实体</li>
</ul>
<p>如：</p>
<blockquote>
<p>鲁迅，浙江绍兴人，五四新文化运动的重要参与者，代表作朝花夕拾。</p>
<p>==&gt;</p>
<p>鲁迅(人名) / 浙江绍兴(地名)人 / 五四新文化运动(专有名词) / 重要参与者 / 代表作 / 朝花夕拾(专有名词)</p>
</blockquote>
<ul>
<li>命名实体识别的作用：
<ul>
<li>同词汇一样，命名实体也是人类理解文本的基础单元，因此也是AI解决NLP领域高阶任务的重要基础环节</li>
</ul></li>
</ul>
<h4 id="使用hanlp进行中文命名实体识别">使用hanlp进行中文命名实体识别</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hanlp</span><br><span class="line">tokenizer = hanlp.load(hanlp.pretrained.ner.MSRA_NER_BERT_BASE_ZH)</span><br><span class="line">tokenizer(<span class="string">&quot;上海华安工业(集团)公司董事长谭旭光和秘书张晚霞来到美国纽约现代艺术博物馆参观。&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[('上海华安工业(集团)公司', 'NT', 0, 12), ('谭旭光', 'NR', 15, 18), ('张晚霞', 'NR', 21, 24), ('美国', 'NS', 26, 28), ('纽约现代艺术博物馆', 'NS', 28, 37)]</p>
</blockquote>
<h4 id="使用hanlp进行英文命名实体识别">使用hanlp进行英文命名实体识别</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hanlp</span><br><span class="line">recoginizer = hanlp.load(hanlp.pretrained.ner.CONLL03_NER_BERT_BASE_UNCASED_EN)</span><br><span class="line">recognizer([<span class="string">&quot;President&quot;</span>, <span class="string">&quot;Obama&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;speaking&quot;</span>, <span class="string">&quot;at&quot;</span>, <span class="string">&quot;the&quot;</span>, <span class="string">&quot;White&quot;</span>, <span class="string">&quot;House&quot;</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[('Obama', 'NR', 1, 2)]</p>
</blockquote>
<h3 id="词性标注">词性标注</h3>
<ul>
<li>词性：语言中对词的一种分类方法，以语法特征为主要依据、兼顾词汇意义对词进行划分的结果，常见的词性有14种，如：名词、动词、形容词等</li>
<li>顾名思义，词性标注(Part-Of-Speech tagging，简称POS)就是标注出一段文本中每个词汇的词性</li>
</ul>
<p>如：</p>
<blockquote>
<p>我爱自然语言处理</p>
<p>＝＝＞</p>
<p>我/rr，爱/v，自然语言/n，处理/vn</p>
<p>rr：人称代词</p>
<p>v：动词</p>
<p>n：名词</p>
<p>vn：动名词</p>
</blockquote>
<ul>
<li>作用：
<ul>
<li>词性标注以分词为基础，是对文本语言的另一个角度的理解，因此也常常成为AI解决NLP领域高阶任务的重要基础环节</li>
</ul></li>
</ul>
<h4 id="使用hanlp进行中文词性标注">使用hanlp进行中文词性标注</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hanlp</span><br><span class="line">tagger = hanlp.load(hanlp.pretrained.pos.CTB5_POS_RNN_FASTTEXT_ZH)</span><br><span class="line">tagger(<span class="built_in">list</span>(<span class="string">&quot;我的希望是希望和平&quot;</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>['PN', 'DEG', 'NR', 'AD', 'VC', 'NR', 'NN', 'CC', 'NN']</p>
</blockquote>
<h4 id="使用hanlp进行英文词性标注">使用hanlp进行英文词性标注</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hanlp</span><br><span class="line">tagger = hanlp.load(hanlp.pretrained.pos.PTB_POS_RNN_FASTTEXT_EN)</span><br><span class="line">tagger([<span class="string">&quot;I&quot;</span>, <span class="string">&quot;banked&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;dollars&quot;</span>, <span class="string">&quot;in&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;bank&quot;</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>['PRP', 'VBD', 'CD', 'NNS', 'IN', 'DT', 'NN']</p>
</blockquote>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>新闻主题分类任务</title>
    <url>/2021/10/07/%E6%96%B0%E9%97%BB%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="新闻主题分类任务">新闻主题分类任务</h1>
<h2 id="关于新闻主题分类任务">关于新闻主题分类任务</h2>
<ul>
<li>以一段新闻报道中的文本描述内容为输入，使用模型帮助我们判断 它最有可能属于哪一种类型的新闻，这是典型的文本分类问题，这里假定每种类型是互斥的，即文本描述有且只有一种类型</li>
</ul>
<h2 id="新闻主题分类数据">新闻主题分类数据</h2>
<h3 id="通过torchtext获取数据">通过torchtext获取数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入相关torch工具包</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchtext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 定义数据下载路径</span></span><br><span class="line">load_data_path = <span class="string">&quot;./data&quot;</span></span><br><span class="line"><span class="comment"># 如果不存在路径，则创建</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(load_data_path):</span><br><span class="line">	os.mkdir(load_data_path)</span><br><span class="line"><span class="comment"># 选取torchtext中的文本分类数据集&quot;AG_NEWS&quot;</span></span><br><span class="line"><span class="comment"># 并将数值映射后的训练和验证数据加载到内存中</span></span><br><span class="line">train_dataset, test_dataset = torchtext.datasets.DATASETS[<span class="string">&quot;AG_NEWS&quot;</span>](root=load_data_path)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>文件说明：</p>
<ul>
<li>train.csv表示训练数据，共12万条；test.csv表示验证数据，共7600条；</li>
</ul>
</blockquote>
<h3 id="处理数据">处理数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.preprocessing.text <span class="keyword">import</span> Tokenizer</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> sequence</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_datasets_by_Tokenizer</span>(<span class="params">train_datasets, test_datasets, cutlen=<span class="number">256</span></span>):</span></span><br><span class="line">    tokenizer = Tokenizer()</span><br><span class="line"></span><br><span class="line">    train_datasets_texts = []</span><br><span class="line">    train_datasets_labels = []</span><br><span class="line">    test_datasets_taxts = []</span><br><span class="line">    test_datasets_labels = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> train_datasets:</span><br><span class="line">        train_datasets_labels.append(item[<span class="number">0</span>] - <span class="number">1</span>) <span class="comment"># 注意将标签映射到 [0, 3]</span></span><br><span class="line">        train_datasets_texts.append(item[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> test_datasets:</span><br><span class="line">        test_datasets_labels.append(item[<span class="number">0</span>] - <span class="number">1</span>)</span><br><span class="line">        test_datasets_taxts.append(item[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    all_datasets_texts = train_datasets_texts + test_datasets_taxts</span><br><span class="line">    all_datasets_labels = train_datasets_labels + test_datasets_labels</span><br><span class="line"></span><br><span class="line">    tokenizer.fit_on_texts(all_datasets_texts)</span><br><span class="line">    train_datasets_seqs = tokenizer.texts_to_sequences(train_datasets_texts)</span><br><span class="line">    test_datasets_seqs = tokenizer.texts_to_sequences(test_datasets_taxts)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将序列化后的语料进行截断或补齐，使它们长度一致</span></span><br><span class="line">    train_datasets_seqs = sequence.pad_sequences(train_datasets_seqs, cutlen)</span><br><span class="line">    test_datasets_seqs = sequence.pad_sequences(test_datasets_seqs, cutlen)</span><br><span class="line"></span><br><span class="line">    train_datasets = <span class="built_in">list</span>(<span class="built_in">zip</span>(train_datasets_seqs, train_datasets_labels))</span><br><span class="line">    test_datasets = <span class="built_in">list</span>(<span class="built_in">zip</span>(test_datasets_seqs, test_datasets_labels))</span><br><span class="line"></span><br><span class="line">    vocab_size = <span class="built_in">len</span>(tokenizer.index_word.keys())</span><br><span class="line">    num_class = <span class="built_in">len</span>(<span class="built_in">set</span>(all_datasets_labels))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_datasets, test_datasets, vocab_size, num_class</span><br><span class="line">train_datasets, test_datasets, vocab_size, num_class = process_datasets_by_Tokenizer(train_datasets, test_datasets)</span><br></pre></td></tr></table></figure>
<h2 id="新闻主题分类实现步骤">新闻主题分类实现步骤</h2>
<ol type="1">
<li>构建带有Embedding层的文本分类模型</li>
<li>对数据进行batch处理</li>
<li>构建训练与验证函数</li>
<li>进行模型训练和验证</li>
<li>查看embedding层嵌入的词向量</li>
</ol>
<h2 id="构建带有embedding层的文本分类模型">构建带有Embedding层的文本分类模型</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入必备的torch模型构建工具</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定BATCH_SIZE的大小</span></span><br><span class="line">BATCH_SIZE = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行可用设备检测, 有GPU的话将优先使用GPU</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextSentiment</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;文本分类模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, vocab_size, embed_dim, num_class</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        description: 类的初始化函数</span></span><br><span class="line"><span class="string">        :param vocab_size: 整个语料包含的不同词汇总数</span></span><br><span class="line"><span class="string">        :param embed_dim: 指定词嵌入的维度</span></span><br><span class="line"><span class="string">        :param num_class: 文本分类的类别总数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> </span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 实例化embedding层, sparse=True代表每次对该层求解梯度时, 只更新部分权重.</span></span><br><span class="line">        self.embedding = nn.Embedding(vocab_size, embed_dim, sparse=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 实例化线性层, 参数分别是embed_dim和num_class.</span></span><br><span class="line">        self.fc = nn.Linear(embed_dim, num_class)</span><br><span class="line">        <span class="comment"># 为各层初始化权重</span></span><br><span class="line">        self.init_weights()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_weights</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化权重函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 指定初始权重的取值范围数</span></span><br><span class="line">        initrange = <span class="number">0.5</span></span><br><span class="line">        <span class="comment"># 各层的权重参数都是初始化为均匀分布</span></span><br><span class="line">        self.embedding.weight.data.uniform_(-initrange, initrange)</span><br><span class="line">        <span class="comment"># self.fc.weight.data.uniform_(-initrange, initrange)</span></span><br><span class="line">        <span class="comment"># 偏置初始化为0</span></span><br><span class="line">        self.fc.bias.data.zero_()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param text: 文本数值映射后的结果</span></span><br><span class="line"><span class="string">        :return: 与类别数尺寸相同的张量, 用以判断文本类别</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 获得embedding的结果embedded</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; embedded.shape</span></span><br><span class="line">        <span class="comment"># (m, 32) 其中m是BATCH_SIZE大小的数据中词汇总数</span></span><br><span class="line">        embedded = self.embedding(text)</span><br><span class="line">        <span class="comment"># 接下来我们需要将(m, 32)转化成(BATCH_SIZE, 32)</span></span><br><span class="line">        <span class="comment"># 以便通过fc层后能计算相应的损失</span></span><br><span class="line">        <span class="comment"># 首先, 我们已知m的值远大于BATCH_SIZE=16,</span></span><br><span class="line">        <span class="comment"># 用m整除BATCH_SIZE, 获得m中共包含c个BATCH_SIZE</span></span><br><span class="line">        c = embedded.size(<span class="number">0</span>) // BATCH_SIZE</span><br><span class="line">        <span class="comment"># 之后再从embedded中取c*BATCH_SIZE个向量得到新的embedded</span></span><br><span class="line">        <span class="comment"># 这个新的embedded中的向量个数可以整除BATCH_SIZE</span></span><br><span class="line">        embedded = embedded[:BATCH_SIZE*c]</span><br><span class="line">        <span class="comment"># 因为我们想利用平均池化的方法求embedded中指定行数的列的平均数,</span></span><br><span class="line">        <span class="comment"># 但平均池化方法是作用在行上的, 并且需要3维输入</span></span><br><span class="line">        <span class="comment"># 因此我们对新的embedded进行转置并拓展维度</span></span><br><span class="line">        embedded = embedded.transpose(<span class="number">1</span>, <span class="number">0</span>).unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 然后就是调用平均池化的方法, 并且核的大小为c</span></span><br><span class="line">        <span class="comment"># 即取每c的元素计算一次均值作为结果</span></span><br><span class="line">        embedded = F.avg_pool1d(embedded, kernel_size=c)</span><br><span class="line">        <span class="comment"># 最后，还需要减去新增的维度, 然后转置回去输送给fc层</span></span><br><span class="line">        <span class="comment"># return self.fc(embedded[0].transpose(1, 0))</span></span><br><span class="line">        <span class="keyword">return</span> F.softmax(self.fc(embedded[<span class="number">0</span>].transpose(<span class="number">1</span>, <span class="number">0</span>)), dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获得整个语料包的不同词汇总数</span></span><br><span class="line">VOCAB_SIZE = vocab_size</span><br><span class="line"><span class="comment"># 指定词嵌入维度</span></span><br><span class="line">EMBED_DIM = <span class="number">32</span></span><br><span class="line"><span class="comment"># 获取整个文本分类的总数</span></span><br><span class="line">NUM_CLASS = num_class</span><br><span class="line"><span class="comment"># 实例化模型对象</span></span><br><span class="line">model = TextSentiment(VOCAB_SIZE, EMBED_DIM, NUM_CLASS).to(device)</span><br></pre></td></tr></table></figure>
<h2 id="对数据进行batch处理">对数据进行batch处理</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_batch</span>(<span class="params">batch</span>):</span></span><br><span class="line">  text = []</span><br><span class="line">  label = []</span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> batch:</span><br><span class="line">      text.extend(item[<span class="number">0</span>])</span><br><span class="line">      label.append(item[<span class="number">1</span>]) </span><br><span class="line">  <span class="keyword">return</span> torch.tensor(text), torch.tensor(label)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">batch = [(torch.tensor([<span class="number">3</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="number">8</span>]), <span class="number">1</span>), (torch.tensor([<span class="number">3</span>, <span class="number">45</span>, <span class="number">21</span>, <span class="number">6</span>]), <span class="number">0</span>)]</span><br><span class="line"><span class="built_in">print</span>(generate_batch(batch))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>(tensor([ 3, 23, 2, 8, 3, 45, 21, 6]), tensor([1, 0]))</p>
</blockquote>
<h2 id="构建训练与验证函数">构建训练与验证函数</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">train_data</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;模型训练函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化训练损失和准确率为0</span></span><br><span class="line">    train_loss = <span class="number">0</span></span><br><span class="line">    train_acc = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 使用数据加载器生成BATCH_SIZE大小的数据进行批次训练</span></span><br><span class="line">    <span class="comment"># data就是N多个generate_batch函数处理后的BATCH_SIZE大小的数据生成器</span></span><br><span class="line">    data = DataLoader(train_data, batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>, collate_fn = generate_batch)</span><br><span class="line">    <span class="keyword">for</span> i, (text, cls) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        <span class="comment"># 设置优化器初始梯度为0</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        <span class="comment"># 模型输入一个批次数据，获得输出</span></span><br><span class="line">        output = model(text.to(device))</span><br><span class="line">        <span class="comment"># 根据真实标签与模型输出计算损失</span></span><br><span class="line">        loss = criterion(output, cls.to(device))</span><br><span class="line">        <span class="comment"># 将该批次的损失回到总损失中</span></span><br><span class="line">        train_loss += loss.item()</span><br><span class="line">        <span class="comment"># 误差反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        <span class="comment"># 参数进行更新</span></span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="comment"># 准确率更新</span></span><br><span class="line">        train_acc += (output.argmax(<span class="number">1</span>) == cls.to(device)).<span class="built_in">sum</span>().item()</span><br><span class="line">        </span><br><span class="line">	<span class="comment"># 调整优化器学习率</span></span><br><span class="line">    scheduler.step()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回本轮训练的平均损失和平均准确率</span></span><br><span class="line">    <span class="keyword">return</span> train_loss / <span class="built_in">len</span>(train_data), train_acc / <span class="built_in">len</span>(train_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid</span>(<span class="params">valid_data</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;模型验证函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化验证损失和准确率为0</span></span><br><span class="line">    loss = <span class="number">0</span></span><br><span class="line">    acc = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 和训练相同，使用DataLoader获得训练数据生成器</span></span><br><span class="line">    data = DataLoader(valid_data, batch_size=BATCH_SIZE, collate_fn = generate_batch)</span><br><span class="line">    <span class="keyword">for</span> text, cls <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># 验证阶段，不再求梯度</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="comment"># 使用模型获得输出</span></span><br><span class="line">            output = model(text.to(device))</span><br><span class="line">            <span class="comment"># 计算损失</span></span><br><span class="line">            loss = criterion(output, cls.to(device))</span><br><span class="line">            <span class="comment"># 将损失和准确率回到总损失和准确率中</span></span><br><span class="line">            loss += loss.item()</span><br><span class="line">            acc += (output.argmax(<span class="number">1</span>) == cls.to(device)).<span class="built_in">sum</span>().item()</span><br><span class="line">    <span class="keyword">return</span> loss / <span class="built_in">len</span>(valid_data), acc / <span class="built_in">len</span>(valid_data)</span><br></pre></td></tr></table></figure>
<h2 id="进行模型训练和验证">进行模型训练和验证</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> torch.utils.data.dataset <span class="keyword">import</span> random_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定训练轮数</span></span><br><span class="line">N_EPOCHS = <span class="number">10</span></span><br><span class="line"><span class="comment"># 定义初始的验证损失</span></span><br><span class="line">min_valid_loss = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line"><span class="comment"># 选择损失函数，这里选择预定义的交叉熵函数</span></span><br><span class="line">criterion = torch.nn.CrossEntropyLoss().to(device)</span><br><span class="line"><span class="comment"># 选择随机梯度下降优化器</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">4.0</span>)</span><br><span class="line"><span class="comment"># 选择优化器步长调节方法StepLR，用来衰减学习率</span></span><br><span class="line">scheduler = torch.optim.lr_scheduler.StepLR(optimizer, <span class="number">1</span>, gamma=<span class="number">0.9</span>)</span><br><span class="line"><span class="comment"># 从train_datasets取95%作为训练集</span></span><br><span class="line">train_len = <span class="built_in">int</span>(<span class="built_in">len</span>(train_datasets)*<span class="number">0.95</span>)</span><br><span class="line">sub_train, sub_valid = random_split(train_datasets, [train_len, <span class="built_in">len</span>(train_datasets)-train_len])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(N_EPOCHS):</span><br><span class="line">  start_time = time.time()</span><br><span class="line">  <span class="comment"># 调用train和valid函数得到训练和验证的平均损失，平均准确率</span></span><br><span class="line">  train_loss, train_acc = train(sub_train)</span><br><span class="line">  valid_loss, valid_acc = valid(sub_valid)</span><br><span class="line"></span><br><span class="line">  secs = <span class="built_in">int</span>(time.time() - start_time)</span><br><span class="line">  mins = secs / <span class="number">60</span></span><br><span class="line">  secs = secs % <span class="number">60</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Epoch: %d&quot;</span> %(epoch+<span class="number">1</span>),<span class="string">&quot;| time in %d minute,% seconds&quot;</span> %(mins, secs))</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;\tLoss: <span class="subst">&#123;train_loss:<span class="number">.4</span>f&#125;</span>(train)\t|\tAcc:<span class="subst">&#123;train_loss*<span class="number">100</span>:<span class="number">.1</span>f&#125;</span>%(train)&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;\tLoss: <span class="subst">&#123;valid_loss:<span class="number">.4</span>f&#125;</span>(valid)\t|\tAcc:<span class="subst">&#123;valid_loss*<span class="number">100</span>:<span class="number">.1</span>f&#125;</span>%(valid)&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Epoch: 1 | time in 0 minute,25econds Loss: 0.0873(train) | Acc:32.1%(train) Loss: 0.0004(valid) | Acc:35.9%(valid) Epoch: 2 | time in 0 minute,25econds Loss: 0.0826(train) | Acc:38.8%(train) Loss: 0.0005(valid) | Acc:39.4%(valid) Epoch: 3 | time in 0 minute,25econds Loss: 0.0821(train) | Acc:40.2%(train) Loss: 0.0004(valid) | Acc:34.9%(valid) Epoch: 4 | time in 0 minute,25econds Loss: 0.0804(train) | Acc:43.0%(train) Loss: 0.0005(valid) | Acc:39.1%(valid) Epoch: 5 | time in 0 minute,25econds Loss: 0.0793(train) | Acc:45.0%(train) Loss: 0.0005(valid) | Acc:31.5%(valid) Epoch: 6 | time in 0 minute,25econds Loss: 0.0778(train) | Acc:47.7%(train) Loss: 0.0004(valid) | Acc:56.5%(valid) Epoch: 7 | time in 0 minute,25econds Loss: 0.0768(train) | Acc:49.5%(train) Loss: 0.0004(valid) | Acc:37.1%(valid) Epoch: 8 | time in 0 minute,25econds Loss: 0.0754(train) | Acc:52.0%(train) Loss: 0.0004(valid) | Acc:58.4%(valid) Epoch: 9 | time in 0 minute,25econds Loss: 0.0741(train) | Acc:54.2%(train) Loss: 0.0004(valid) | Acc:48.4%(valid) Epoch: 10 | time in 0 minute,25econds Loss: 0.0731(train) | Acc:56.0%(train) Loss: 0.0005(valid) | Acc:34.3%(valid) Epoch: 11 | time in 0 minute,25econds Loss: 0.0716(train) | Acc:58.4%(train) Loss: 0.0003(valid) | Acc:68.2%(valid) Epoch: 12 | time in 0 minute,25econds Loss: 0.0706(train) | Acc:60.1%(train) Loss: 0.0003(valid) | Acc:59.5%(valid) Epoch: 13 | time in 0 minute,26econds Loss: 0.0694(train) | Acc:62.2%(train) Loss: 0.0003(valid) | Acc:69.2%(valid) Epoch: 14 | time in 0 minute,25econds Loss: 0.0684(train) | Acc:63.9%(train) Loss: 0.0003(valid) | Acc:64.7%(valid) Epoch: 15 | time in 0 minute,25econds Loss: 0.0675(train) | Acc:65.4%(train) Loss: 0.0004(valid) | Acc:65.5%(valid) Epoch: 16 | time in 0 minute,25econds Loss: 0.0664(train) | Acc:67.2%(train) Loss: 0.0003(valid) | Acc:64.6%(valid) Epoch: 17 | time in 0 minute,25econds Loss: 0.0657(train) | Acc:68.5%(train) Loss: 0.0003(valid) | Acc:70.4%(valid) Epoch: 18 | time in 0 minute,25econds Loss: 0.0650(train) | Acc:69.5%(train) Loss: 0.0004(valid) | Acc:69.0%(valid) Epoch: 19 | time in 0 minute,25econds Loss: 0.0643(train) | Acc:70.8%(train) Loss: 0.0003(valid) | Acc:76.3%(valid) Epoch: 20 | time in 0 minute,25econds Loss: 0.0636(train) | Acc:72.0%(train) Loss: 0.0003(valid) | Acc:70.5%(valid)</p>
</blockquote>
<h2 id="查看embedding层嵌入的词向量">查看embedding层嵌入的词向量</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.state_dict()[<span class="string">&#x27;embedding.weight&#x27;</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([[-3.9321e-02, 1.2770e-02, -1.2725e-02, ..., -3.7640e-02, 5.0681e-02, 3.4286e-03], [-1.6661e+00, -5.6520e+00, -6.9105e-03, ..., -7.4342e-01, 1.5925e+00, -3.9538e-01], [ 1.2449e+00, 1.8321e+00, 8.1467e-01, ..., 4.5453e-01, -1.1000e+00, 8.3954e-01], ..., [-2.6404e-01, -4.9704e-01, 8.3933e-02, ..., -4.8199e-01, 3.0737e-01, 4.4653e-01], [-1.4254e-01, 2.1912e-01, -3.5175e-01, ..., 1.7252e-01, -4.0052e-01, -1.5885e-02], [-1.5442e-02, -2.2085e-01, -3.8362e-01, ..., -3.5968e-01, 3.6406e-01, 3.7704e-01]], device='cuda:0')</p>
</blockquote>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>机器/深度学习自学</title>
    <url>/2021/07/03/%E6%9C%BA%E5%99%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="机器深度学习自学">机器/深度学习自学</h1>
<h2 id="学习路线">学习路线</h2>
<p>参考<a href="https://zhuanlan.zhihu.com/p/37349519">知乎：纯新手自学入门机器/深度学习指南</a></p>
<h2 id="part-1从机器学习开始">Part 1：从机器学习开始</h2>
<p>课程：<a href="https://www.coursera.org/learn/machine-learning">吴恩达-机器学习</a></p>
<p>课程延伸：当学习到第五节课(开始讲神经网络)时，可看：</p>
<p><a href="https://space.bilibili.com/88461692/#/">3blue1brown推出的视频</a></p>
<p><a href="http://neuralnetworksanddeeplearning.com/">Michael A. Nielsen的在线书籍</a></p>
<p><a href="https://tigerneil.gitbooks.io/neural-networks-and-deep-learning-zh/content/">对应中文版</a></p>
<p><a href="http://colah.github.io/">Christopher Olah的博客</a></p>
<h2 id="part-2涉足深度学习">Part 2：涉足深度学习</h2>
<p>开始前，参考：</p>
<p>花书：在线版本</p>
<p><a href="https://github.com/janishar/mit-deep-learning-book-pdf/blob/master/complete-book-bookmarked-pdf/deeplearningbook.pdf">英文版</a></p>
<p><a href="https://github.com/exacity/deeplearningbook-chinese">中文版</a></p>
<p>视频课程：</p>
<p><a href="https://www.coursera.org/specializations/deep-learning">吴恩达-深度学习</a></p>
<p>同时可看Part1中的博客和文章</p>
<h2 id="part-3深度学习上手练">Part 3：深度学习上手练</h2>
<p><a href="http://course.fast.ai/">fast ai</a></p>
<p>视频课程：</p>
<p><a href="http://cs231n.stanford.edu/">斯坦福CS231n(李飞飞)</a></p>
<p><a href="http://web.stanford.edu/class/cs224n/">斯坦福CS224n Richard Socher</a></p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>模型感知训练</title>
    <url>/2021/12/16/%E6%A8%A1%E5%9E%8B%E6%84%9F%E7%9F%A5%E8%AE%AD%E7%BB%83/</url>
    <content><![CDATA[<h1 id="模型感知训练">模型感知训练</h1>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4ODA3MDkyMA==&amp;mid=2247483723&amp;idx=1&amp;sn=ad844b16f6d7a7eb006a01fa6201c9c7&amp;chksm=cf81f72cf8f67e3a1349d53518187652d84328117f19ec9a3fa19b693ffe4e8f43142f1c8740&amp;cur_album_id=1648871870714200067&amp;scene=190#rd">文章参考学习</a></p>
<p>模型感知训练也是模型量化中的一部分，它主要是在量化过程中，对网络进行训练，从而让网络参数能更好地适应量化带来的信息损失。这种方式会更加灵活，因此准确性普遍从后训练量化要高，但是，同样地，它也存在缺点，如操作起来不方便。</p>
<h2 id="量化训练过程中的梯度问题">量化训练过程中的梯度问题</h2>
<p>首先回顾一下之前的所说的量化过程： <span class="math display">\[
q = round(\frac{r}{S}+Z) \tag{1}
\]</span> 但这个<span class="math inline">\(round\)</span>函数存在一个问题，就是它是不可导的，梯度几乎处处为零，这就会导致反向传播梯度也变成0，进而导致量化训练无法进行。它的函数图像如下：</p>
<figure>
<img src="http://thumb.1010pic.com/pic3/upload/images/201409/204/62f7c687.png" alt="img" /><figcaption>img</figcaption>
</figure>
<h2 id="解决梯度处处为零的问题">解决梯度处处为零的问题</h2>
<p>一个简单常用的方法就是Straight Through Estimator(STE)，即直接跳过伪量化的过程，避开<span class="math inline">\(round\)</span>，直接将卷积的梯度作为结果传回去。</p>
<p>pytorch中的具体实现通常是使用<code>torch.autograd.Function</code>接口来重定义伪量化的过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Function</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakeQuantize</span>(<span class="params">Function</span>):</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">ctx, x, qparam</span>):</span></span><br><span class="line">        x = qparam.quantize_tensor(x)</span><br><span class="line">        x = qparam.dequantize_tensor(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="meta">   	@staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span>(<span class="params">ctx, grad_output</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        	grad_output:后一层传来的梯度</span></span><br><span class="line"><span class="string">        	返回的None相当于是forward中的qparam的梯度，这里不需要，因为</span></span><br><span class="line"><span class="string">        	qparam只是统计min和max的</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> grad_output, <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h2 id="具体代码实现中的注意事项">具体代码实现中的注意事项</h2>
<p>代码实现使用的是Github上的<a href="https://github.com/Jermmy/pytorch-quantization-demo">量化代码</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QConv2d</span>(<span class="params">QModule</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;qi&#x27;</span>):</span><br><span class="line">            self.qi.update(x)</span><br><span class="line">            x = FakeQuantize.apply(x, self.qi)</span><br><span class="line"></span><br><span class="line">        self.qw.update(self.conv_module.weight.data)</span><br><span class="line"></span><br><span class="line">        x = F.conv2d(x, FakeQuantize.apply(self.conv_module.weight, self.qw),</span><br><span class="line">                     self.conv_module.bias, </span><br><span class="line">                     stride=self.conv_module.stride,</span><br><span class="line">                     padding=self.conv_module.padding, dilation=self.conv_module.dilation, </span><br><span class="line">                     groups=self.conv_module.groups)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;qo&#x27;</span>):</span><br><span class="line">            self.qo.update(x)</span><br><span class="line">            x = FakeQuantize.apply(x, self.qo)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<p>需要注意的是<code>x = F.conv2d(...)</code>这一行，这里需要使用<code>F.conv2d()</code>来调用卷积，而不能使用<code>self.conv_module()</code>来调用，因为Pytorch中规则是<a href="https://blog.csdn.net/BigData_Mining/article/details/103746548">torch.nn.Conv2d的weight无法自定义，需要手动设置weight时只能使用torch.nn.function.conv2d</a>。</p>
<p>此外，代码中对于输入和输出也进行了伪量化，即<code>x=FakeQuantize.apply(x, self.qx)</code>，这在量化训练中是有必要的，可以帮助网络更好地感知量化带来的损失。</p>
<h2 id="总结">总结</h2>
<p>量化训练(模型感知训练)部署虽然在准确性上会有所提升，但实际应用时去会比后训练量化麻烦很多！</p>
<p>目前大部分主流推理框架在处理后训练量化时，只需要用户把模型和数据扔进去，就可以得到量化模型，然后直接部署。但很少有框架支持量化训练。</p>
]]></content>
      <categories>
        <category>轻量化模型</category>
        <category>模型压缩</category>
        <category>模型量化</category>
      </categories>
      <tags>
        <tag>轻量化模型</tag>
        <tag>模型压缩</tag>
        <tag>模型量化</tag>
      </tags>
  </entry>
  <entry>
    <title>数模-插值与拟合</title>
    <url>/2019/10/25/%E6%95%B0%E6%A8%A1-%E6%8F%92%E5%80%BC%E4%B8%8E%E6%8B%9F%E5%90%88/</url>
    <content><![CDATA[<h1 id="插值与拟合">插值与拟合</h1>
<h2 id="概述">概述</h2>
<p>遇到大量的数据需要处理，而处理数据的关键就在于这些算法，例如数据拟合、参数估计、插值等数据处理算法。</p>
<h2 id="基本概念">基本概念</h2>
<p>在实际中，常常要处理由实验或测量所得到的一些离散数据。插值与拟合方法就是要通过这些数据去确定某一类已知函数的参数或寻求某个近似函数，使所得到的近似函数与已知函数据有较高的拟合精度。如果要求这个近似函数(曲线或曲面)经过所已知的所有数据点，则称此类问题为<strong>插值问题</strong>；如果不要求近似函数通过所有数据点，而是要求它能较好地反映数据变化规律的近似函数的方法称为<strong>数据拟合</strong>。近似函数不一定通过所有数据点。</p>
<h2 id="插值与拟合的区别和联系">插值与拟合的区别和联系</h2>
<h3 id="联系">联系</h3>
<p>都是根据实际中一组已知数据来构造一个能够反映数据变化规律的近似函数的方法</p>
<h3 id="区别">区别</h3>
<p><strong>插值问题</strong>不一定得到近似函数的表达形式，仅通过插值方法找到未知点对应的值。<strong>数据拟合</strong>要求得到一个具体的近似函数的表达式。</p>
<h2 id="插值的使用及求解">插值的使用及求解</h2>
<h3 id="引言">引言</h3>
<p>当数据量不够，需要补充，且认定已有数据可信时，通常利用函数插值方法。</p>
<p>实际问题当中碰到的函数f(x)是各种各样的，有的表达式很复杂，有的甚至给不出数学的式子，只提供了一些离散数据，例如，某些点上的函数值和导数值。</p>
<h3 id="插值方法">插值方法</h3>
<ol type="1">
<li><p>拉格朗日插值(lagrange插值)</p></li>
<li><p>分段线性插值</p></li>
<li><p>Hermite</p></li>
<li><p>三次样条插值</p></li>
</ol>
<blockquote>
<p>1、2适合二维面插值；3、4适合三维空间插值；一维用可用最近邻插值/双线性内插/取平均</p>
</blockquote>
<h3 id="matlab中的方法">matlab中的方法：</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% interp1(一维插值)</span></span><br><span class="line"><span class="comment">% yi:xi处的插值结果</span></span><br><span class="line"><span class="comment">% x,y:插值节点</span></span><br><span class="line"><span class="comment">% xi:被插值点</span></span><br><span class="line"><span class="comment">% &#x27;method&#x27; 插值方法：</span></span><br><span class="line"><span class="comment">% &#x27;nearest&#x27; 最邻近插值;</span></span><br><span class="line"><span class="comment">% &#x27;linear&#x27; 线性插值;</span></span><br><span class="line"><span class="comment">% &#x27;spline&#x27; 三次样条插值</span></span><br><span class="line"><span class="comment">% &#x27;cubic&#x27; 立方插值</span></span><br><span class="line"><span class="comment">% 缺省时 分段线性插值</span></span><br><span class="line">yi=interp1(x,y,xi,<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% interp2(二维)</span></span><br><span class="line">z=interp2(x0,y0,z0,x,y,<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line"><span class="comment">% z:被插值点的函数值</span></span><br><span class="line"><span class="comment">% x0,y0,z0:插值节点</span></span><br><span class="line"><span class="comment">% x,y:被插值点</span></span><br><span class="line"><span class="comment">% &#x27;method&#x27;:插值方法</span></span><br><span class="line"><span class="comment">% 	&#x27;nearest&#x27; 最邻近插值</span></span><br><span class="line"><span class="comment">% 	&#x27;linear&#x27; 双线性插值</span></span><br><span class="line"><span class="comment">% 	&#x27;cubic&#x27; 双三次插值</span></span><br><span class="line"><span class="comment">% 	缺省时 双线性插值</span></span><br><span class="line"></span><br><span class="line">cz = griddata(x,y,z,cx,cy,<span class="string">&#x27;method&#x27;</span>)</span><br><span class="line"><span class="comment">% cz被插值点的函数值</span></span><br><span class="line"><span class="comment">% x,y,z 插值节点</span></span><br><span class="line"><span class="comment">% cx,cy 被插值点</span></span><br><span class="line"><span class="comment">% &#x27;method&#x27;插值方法</span></span><br><span class="line"><span class="comment">% &#x27;nearest&#x27; 最邻近插值</span></span><br><span class="line"><span class="comment">% &#x27;linear&#x27; 双线性插值</span></span><br><span class="line"><span class="comment">% &#x27;cubic&#x27; 双三次插值</span></span><br><span class="line"><span class="comment">% &#x27;v4&#x27; MATLAB提供的插值方法</span></span><br><span class="line"><span class="comment">% 缺省时 双线性插值</span></span><br><span class="line"><span class="comment">% 要求cx取行向量，cy取列向量</span></span><br><span class="line"></span><br><span class="line">interp3(三维)</span><br><span class="line">intern(n维)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="拟合">拟合</h2>
<h3 id="引言-1">引言</h3>
<p>对于情况较复杂的实际问题（因素不易化简，作用机理不详）可直接使用数据组建模，寻找简单的因果变量之间的数量关系，从而对未知的情形作预报。这样组建的模型为拟合模型。拟合模型的组建主要是处理好观测数据的误差，使用数学表达式从数量上近似因果变量之间的关系。拟合模型的组建是通过对有关变量的观测数据的观察、分析和选择恰当的数学表达方式得到的。</p>
<h3 id="拟合模型的分类">拟合模型的分类</h3>
<ol type="1">
<li>直线拟合</li>
<li>曲线拟合</li>
<li>观察数据修匀</li>
</ol>
<blockquote>
<p>对于已给的一批实测数据,由于实测方法,不可避免地会产生随机干扰和误差.我们自然希望根据数据分布的总趋势去剔除观察数据中的偶然误差,这就是所谓的数据修匀(或称数据平滑)问题.</p>
</blockquote>
<h2 id="曲线拟合问题最常用的解法-线性最小二乘法">曲线拟合问题最常用的解法-线性最小二乘法</h2>
<ol type="1">
<li><p>先选定一组函数<span class="math inline">\(r_1(x),r_2(x),...,r_m(x),m&lt;n\)</span>,令</p>
<p><span class="math inline">\(f(x)=a_1r_1(x)+a_2r_2(x)+...+a_mr_m(x)\)</span> (1)</p>
<p>其中<span class="math inline">\(a_1,a_2,...,a_m\)</span>为待定系数</p></li>
<li><p>确定<span class="math inline">\(a_1,a_2,...,a_m\)</span>的准则(最小二乘准则):</p>
<p>使n个点<span class="math inline">\((x_i,y_i)\)</span>与曲线y=f(x)的距离<span class="math inline">\(\delta_i\)</span>的平方和最小</p>
<p>记 <span class="math display">\[
J(a_1,a_2,...,a_m) = \sum_{i=1}^n\delta_i^2=\sum_{i=1}^n[f(x_i)-y_i]^2=\sum_{i=1}^n[\sum_{k=1}^ma_kr_k(x_i)-y_i]^2
\]</span></p></li>
<li><p>问题归结为,求<span class="math inline">\(a_1,a_2,...,a_m\)</span>使<span class="math inline">\(J(a_1,a_2,...,a_m)\)</span>最小</p></li>
</ol>
<h3 id="使用matlab作线性最小二乘拟合">使用MATLAB作线性最小二乘拟合</h3>
<ol type="1">
<li><p>作多项式<span class="math inline">\(f(x)=a_1x^m+...+a_mx+a_m+1\)</span>拟合,可利用已有程序:</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=polyfit(x,y,m)</span><br><span class="line"><span class="comment">% x,y 输入同长度的数组x,y</span></span><br><span class="line"><span class="comment">% m 拟合多项式次数</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>数模</tag>
      </tags>
  </entry>
  <entry>
    <title>量化与后训练量化</title>
    <url>/2021/12/15/%E6%A8%A1%E5%9E%8B%E9%87%8F%E5%8C%96/</url>
    <content><![CDATA[<h1 id="量化与后训练量化">量化与后训练量化</h1>
<p><a href="http://mp.weixin.qq.com/s?__biz=Mzg4ODA3MDkyMA==&amp;mid=2247483692&amp;idx=1&amp;sn=3e28db4881d591f4e6a66c83d4213823&amp;chksm=cf81f74bf8f67e5d0f2a98fd7bf7a91864d14010d88a5ed89120b7b4fcd94fc34789f0d0db9a&amp;cur_album_id=1648871870714200067&amp;scene=190#rd">文章参考学习</a></p>
<h2 id="量化">量化</h2>
<p><span class="math display">\[
S=\frac{r_{max}-r_{min}}{q_{max}-q_{min}} \tag{1}
\]</span></p>
<p>对于式<span class="math inline">\((1)\)</span>中，<span class="math inline">\(r_{max}\)</span>,<span class="math inline">\(r_{min}\)</span>表示原来的浮点实数的最大值和最小值，<span class="math inline">\(q_{max}\)</span>,<span class="math inline">\(q_{min}\)</span>表示量化后定点整数的最大值和最小值，<span class="math inline">\(S\)</span>是scale，表示实数和整数之间的比例关系。</p>
<p>例如：要将<span class="math inline">\([0.01, 0.85, 0.02, 0.96, 0.7 , 0.22, 0.86]\)</span>量化为4bit无符号整数，则<span class="math inline">\(r_{max}=0.96,r_{min}=0.01,q_{min}=0,q_{max}=2^4-1=15,S=\frac{0.5-0.1}{15-0}=0.063\)</span></p>
<p><span class="math display">\[
Z=round(q_{max}-\frac{r_{max}}{S}) \tag{2}
\]</span></p>
<p>在式<span class="math inline">\((2)\)</span>中，<span class="math inline">\(round\)</span>表示取整，接着上述的例子，则<span class="math inline">\(Z=round(15-\frac{0.96}{0.063})=round(-0.16)=0\)</span></p>
<p><span class="math display">\[
r=S(q-Z) \tag{3}
\]</span></p>
<p>式<span class="math inline">\((3)\)</span>表示反量化过程，<span class="math inline">\(r\)</span>表示原来的浮点实数，<span class="math inline">\(q\)</span>表示量化后的定点整数</p>
<p><span class="math display">\[
q=round(\frac{r}{S}+Z) \tag{4}
\]</span></p>
<p>式<span class="math inline">\((4)\)</span>是量化过程，以上述例子中的某个元素为例，如：</p>
<p><span class="math inline">\(r=0.22\)</span>则量化后<span class="math inline">\(q=round(\frac{0.22}{0.063}+0)=3\)</span>，再反量化则得出<span class="math inline">\(r&#39;=0.063(3-0)=0.19\)</span>，可以看出是量化后再反量化回去的结果是存在精度损失的</p>
<p>此外，从式<span class="math inline">\((4)\)</span>可以看出，将<span class="math inline">\(r=0\)</span>代入，可以得出<span class="math inline">\(q=Z\)</span>，即定点整数的zero point就代表了浮点实数的0，二者转换不存在精度损失。这么做的<strong>目的</strong>是<strong>为了在 padding 时保证浮点数值的 0 和定点整数的 zero point 完全等价，保证定点和浮点之间的表征能够一致</strong>。</p>
<h2 id="矩阵量化">矩阵量化</h2>
<p>假设<span class="math inline">\(mat_1、mat_2\)</span>是浮点实数<span class="math inline">\(N \times N\)</span>的矩阵，<span class="math inline">\(mat_3\)</span>表示<span class="math inline">\(mat_1\times mat_2\)</span>，则分解后可以表示为：</p>
<p><span class="math display">\[
mat_3^{i,k}=\sum_{j=1}^N mat_1^{i,j} mat_2^{j,k} \tag{5}
\]</span></p>
<p>假设<span class="math inline">\(S、Z\)</span>表示矩阵的scale和zero point，则将<span class="math inline">\((3)\)</span>代入到<span class="math inline">\((5)\)</span>，则可化为：</p>
<p><span class="math display">\[
S_3(q_3^{i,k}-Z_3)=\sum_{j=1}^NS_1(q_1^{i,j}-Z_1)S_2(q_2^{j,k}-Z_2) \tag{6}
\]</span></p>
<p>右边提取<span class="math inline">\(S_1,S_2\)</span>后，两边同除<span class="math inline">\(S_3\)</span>后移项得：</p>
<p><span class="math display">\[
q_3^{i,k} = \frac{S_1S_2}{S_3}\sum_{j=1}^N(q_1^{i,j}-Z_1)(q_2^{j,k}-Z_2)+Z_3 \tag{7}
\]</span></p>
<p>这次一来就可以仅通过定点整数运算计算出<span class="math inline">\(q_3^{i,k}\)</span>了，但其中的<span class="math inline">\(\frac{S_1S_2}{S_3}\)</span>例外，还需要使用技巧计算，假设<span class="math inline">\(M=\frac{S_1S_2}{S_3}\)</span>，由于M通常是<span class="math inline">\((0,1)\)</span>之间的整数(大量实验统计的结果)，因此可以表示为<span class="math inline">\(M=2^{-n}M_0\)</span>，其中<span class="math inline">\(M_0\)</span>表示一个定点实数(<strong>定点实数不一定是整数</strong>)，则就可以通过<span class="math inline">\(M_0\)</span>的移位操作实现<span class="math inline">\(2^{-n}M_0\)</span>了</p>
<h2 id="cnn量化">CNN量化</h2>
<p>假设卷积网络中输入为x，卷积层conv的输出为<span class="math inline">\(a_1\)</span>，激活层ReLU输出为<span class="math inline">\(a_2\)</span>，经过全连接层(fc层)后输出为y。</p>
<p>则我们的处理过程大致如下：</p>
<ol type="1">
<li><p>对于输入的x，统计样本的最大值和最小值，根据式<span class="math inline">\((1)、(2)\)</span>计算出scale和zero point即：<span class="math inline">\(S_x\)</span>和<span class="math inline">\(Z_x\)</span></p></li>
<li><p>假设conv、fc的权重参数分别为<span class="math inline">\(w_1、w_2\)</span>，scale和zero point分别为<span class="math inline">\(S_{w_1}、Z_{w_1}、S_{w_2}、Z_{w_2}\)</span>，统计<span class="math inline">\(a_1\)</span>和<span class="math inline">\(a_2\)</span>的最大最小值计算<span class="math inline">\(S_{a_1}、Z_{a_1}、S_{a_2}、Z_{a_2}\)</span></p></li>
<li><p>卷积和全连接的本质还是矩阵运算，因此可以将卷积运算表示为：</p>
<p><span class="math display">\[
a_1^{i,k}=\sum_{j=1}^Nx^{i,j}w_1^{j,k} + b \tag{8}
\]</span></p>
<p>根据<span class="math inline">\((5)(6)(7)\)</span>可得：</p>
<p><span class="math display">\[
q_{a_1}^{i,k} = M\sum_{j=1}^N(q_x^{i,j}-Z_x)(q_{w_1}^{j,k}-Z_{w_1})+ \frac{S_b}{S_a}(q_b-Z_b) +Z_{a_1} \tag{9}
\]</span></p>
<p>由于前面的<span class="math inline">\(\sum_{j=1}^N(q_x^{i,j}-Z_x)(q_{w_1}^{j,k}-Z_{w_1})\)</span>的结果通常会用int32的整数存储，因此bias通常也会选择量化到int32，这里<strong>可以直接用<span class="math inline">\(S_wS_x\)</span>来代替<span class="math inline">\(S_b\)</span></strong>，而<span class="math inline">\(Z_b\)</span>则直接记为0，则公式<span class="math inline">\((9)\)</span>可化为：</p>
<p><span class="math display">\[
q_{a_1}^{i,k} = M(\sum_{j=1}^Nq_x^{i,j}q_{w_1}^{j,k}-\sum_{j=1}^NZ_xq_{w_1}^{j,k}-\sum_{j=1}^N q_x^{i,j}Z_{w_1}+\sum_{j=1}^N Z_xZ_{w_1}+q_b)+Z_{a_1}
\]</span></p>
<p>其中与x无关的项如<span class="math inline">\(q_{w_1}^{j,k}Z_x、Z_{w_1}Z_x、q_b\)</span>都是推理前事先计算好的，这里进一步可以用函数表示上式为：</p>
<p><span class="math display">\[
q_{a_1} = M\cdot conv(q_x - Z_x) + Z_{a_1} \tag{10}
\]</span></p>
<p>其中<span class="math inline">\(M=\frac{S_{w_1}S_x}{S_{a_1}}\)</span></p>
<blockquote>
<p>上述中“<strong>直接用<span class="math inline">\(S_wS_x\)</span>来代替<span class="math inline">\(S_b\)</span></strong>”的解释：</p>
<p>如果使用原来的<span class="math inline">\(S_b\)</span>和<span class="math inline">\(Z_b\)</span>，将<span class="math inline">\(r_b\)</span>映射到<span class="math inline">\(q_b\)</span>，使用<span class="math inline">\(S_wS_x\)</span>和<span class="math inline">\(Z_b=0\)</span>映射到得的<span class="math inline">\(q_b&#39;\)</span>，则<span class="math inline">\(q_b\)</span>和<span class="math inline">\(q_b&#39;\)</span>在数值上确实不一样，但性质上，<span class="math inline">\(S_b、Z_b\)</span>和<span class="math inline">\(S_wS_x、0\)</span>才能实现<span class="math inline">\(r_b\)</span>与<span class="math inline">\(q_b\)</span>之间的映射与反映射关系，只是值存在一定的差异，但是这个数值的不一样，大量的工程实践表明是在可接受范围内的，因此，这里是可以直接代替的</p>
</blockquote>
<p>代码实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantize_inference</span>(<span class="params">self, x</span>):</span></span><br><span class="line">    x = x - self.qi.zero_point</span><br><span class="line">    x = self.conv_module(x)</span><br><span class="line">    x = self.M * x</span><br><span class="line">    x.round_() </span><br><span class="line">    x = x + self.qo.zero_point        </span><br><span class="line">    x.clamp_(<span class="number">0.</span>, <span class="number">2.</span>**self.num_bits-<span class="number">1.</span>).round_()</span><br><span class="line">    <span class="keyword">return</span> </span><br></pre></td></tr></table></figure></li>
<li><p>得到conv的输出后，不用反量化回去，直接继续后面的计算即可，下面开始进行ReLU运算</p>
<p>对于ReLU激活函数，量化后，计算的公式不再是<span class="math inline">\(y=\max (x, 0)\)</span>，而是<span class="math inline">\(y=\max(x,Z)\)</span>，即<span class="math inline">\(q_{a_2}=\max(q_{a_1},Z_{a_1})\)</span> ，并且由于ReLU本身不会对数值进行任何运算，而只是相当于进行了简单的截断，因此对于量化的ReLU而言，scale和zero point前后一样并不影响结果。</p>
<p>另外对于relu、maxpooling这类激活函数而言，它们会沿用上一层输出的min、max，不需要额外统计，即<span class="math inline">\(a_1、a_2\)</span>会共享相同的min、max</p>
<blockquote>
<p>注：<a href="https://www.zephon.ml/2021/12/17/模型量化中的激活函数/">关于激活函数量化</a></p>
</blockquote></li>
<li><p>得到relu的输出后，可以继续计算fc层，和式<span class="math inline">\((9)(10)\)</span>一样，则</p>
<p><span class="math display">\[
q_y^{i,k}=M\sum_{j=1}^N(q_{a_2}^{i,j}-Z_{a_2})(q_{w_2}^{j,k}-Z_{w_2})+Z_y \tag{11}
\]</span></p>
<p><span class="math display">\[
q_y=M\cdot Linear(q_{a_2}-Z_{a_2})+Z_y
\]</span></p>
<p>然后通过<span class="math inline">\(y=S_y(q_y-Z_y)\)</span>反量化回去，就可以得到结果了！</p>
<p>其中<span class="math inline">\(S_y、Z_y\)</span>表示输出y对应的scale和zero point。</p></li>
<li><p>实际上，上述量化推理过程是在训练完成的全精度模型上进行的，所以可以事先统计出权重weight和各个中间特征输出的min和max，并以此计算出各个scale和zero point，然后把weight量化成int8或int16型的整数后，再进行上述量化推理过程！</p></li>
</ol>
<h2 id="总结">总结</h2>
<p>以上这种对训练后的模型进行量化与推理加速的过程，也被称为<strong>后训练量化</strong>，后训练量化相对比较简单，但有时候不能保证足够的精度，因此有时候也需要采用另一种方法<strong>量化感知训练</strong></p>
]]></content>
      <categories>
        <category>轻量化模型</category>
        <category>模型压缩</category>
        <category>模型量化</category>
      </categories>
      <tags>
        <tag>轻量化模型</tag>
        <tag>模型压缩</tag>
        <tag>模型量化</tag>
      </tags>
  </entry>
  <entry>
    <title>模型量化中的激活函数</title>
    <url>/2021/12/17/%E6%A8%A1%E5%9E%8B%E9%87%8F%E5%8C%96%E4%B8%AD%E7%9A%84%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="模型量化中的激活函数">模型量化中的激活函数</h2>
<p><a href="%5B神经网络量化入门--激活函数%20(qq.com)%5D(https://mp.weixin.qq.com/s?__biz=Mzg4ODA3MDkyMA==&amp;mid=2247483867&amp;idx=1&amp;sn=c09357d10ceea0d74c0dc69a21d7f4ad&amp;chksm=cf81f7bcf8f67eaab3eac420bf2efcc63503014a9b457e55dfc9e14f17c64df96f1d9d397846&amp;scene=178&amp;cur_album_id=1648871870714200067#rd)">文章参考学习</a></p>
<p>在之前学习的模型量化过程中，对于激活函数的处理只是简单说了一下ReLU函数的量化，这里更加具体的学习一下！</p>
<h2 id="量化回顾">量化回顾</h2>
<p>之前说的量化过程： <span class="math display">\[
r=S(q-Z) \tag{1}
\]</span></p>
<p><span class="math display">\[
q=round(\frac{r}{S}+Z) \tag{2}
\]</span></p>
<p>但是，这里还存在一点小问题，就是对于式<span class="math inline">\((2)\)</span>而言，仅使用<span class="math inline">\(round\)</span>是不够的，还需要使用一个<span class="math inline">\(clip\)</span>操作，来将结果固定到指定范围内，防止溢出，例如对于uint8的量化，则量化的结果q必须要量化到[0,255]，所以进一步公式为： <span class="math display">\[
q=clip(round(\frac{r}{S}+Z), 0, 255) \tag{3}
\]</span> 现在，假设激活函数为<span class="math inline">\(f(x)\)</span>，存在浮点实数<span class="math inline">\(r_1\)</span>，则其对应的激活值为 <span class="math display">\[
r_2=f(r_1) \tag{4}
\]</span> 把式<span class="math inline">\((1)\)</span>代入式<span class="math inline">\((4)\)</span>得: <span class="math display">\[
S_2(q_2-Z_2) = f(S_1(q_1-Z_1)) \tag{5}
\]</span></p>
<h2 id="relu量化">ReLU量化</h2>
<p>具体的对于ReLU激活函数进行量化，ReLU原函数是： <span class="math display">\[
ReLU(x) = \begin{cases} 0 &amp;,x&lt;0 \\ x &amp;, x\ge0 \end{cases} \tag{6}
\]</span> 使用<span class="math inline">\(r_1,r_2\)</span>替换得： <span class="math display">\[
r_2 = \begin{cases}0 &amp;, r_1&lt;0 \\r_1 &amp;,r_1\ge0  \end{cases} \tag{7}
\]</span> 再将式<span class="math inline">\((1)\)</span>代入得： <span class="math display">\[
S_2(q_2-Z_2) =  \begin{cases}0&amp;, q_1&lt;Z_1 \\S_1(q_1-Z_1)&amp;,q_1\ge Z_1  \end{cases} \tag{8}
\]</span> 换算得： <span class="math display">\[
q_2 = \begin{cases}Z_2 &amp;, q_1 &lt; Z_1 \\ \frac{S_1}{S_2}(q_1-Z_1)+Z_2 &amp;, q_1\ge Z_1 \end{cases} \tag{9}
\]</span> 这里的<span class="math inline">\(\frac{S_1}{S_2}\)</span>是浮点数，所以在实际运算是也需要和之前的<span class="math inline">\(M\)</span>一样通过定点数移位的方式实现。需要注意的是，这里的<span class="math inline">\(Z_2\)</span>表示的是<span class="math inline">\(ReLU\)</span>输出的zero point，而根据式<span class="math inline">\((6)\)</span>可知，<span class="math inline">\(ReLU\)</span>输出的结果是<span class="math inline">\([0, ReLU(input_{max})]\)</span>，而<span class="math inline">\(Z_2\)</span>需要与其中的0对齐，同时<span class="math inline">\(Z_2\)</span>的取值范围又是<span class="math inline">\([0, 255]\)</span>(如果其是uint8类型的话)，这样一来，<strong><span class="math inline">\(Z_2\)</span>就一定为0了</strong>。</p>
<p>而在具体工程实践过程中，通常并不是完全按照式<span class="math inline">\((9)\)</span>进行的，因为<span class="math inline">\(ReLU\)</span>的物理意义就是将小于零点的数值截断，其余不变。因此，工程上，通常将<span class="math inline">\(ReLU\)</span>前后的scale和zero point保持一致，然后使用如下公式来实现理化： <span class="math display">\[
q_2 = \begin{cases}Z_1 &amp;, q_1 &lt; Z_1 \\ q_1 &amp;, q_1 \ge Z_1 \end{cases} \tag{10}
\]</span></p>
<h2 id="relu整合convolution">ReLU整合Convolution</h2>
<p>假设一个卷积操作为<span class="math inline">\(r_3 = \sum_i^N r_1^ir_2^i\)</span>，则其量化后的公式为： <span class="math display">\[
S_3(q_3-Z_3) = S_1S_2\sum_i^N(q_1-Z_1)(q_2-Z_2)\tag{11}
\]</span> 将<span class="math inline">\(q_3\)</span>代入式<span class="math inline">\((8)\)</span>得： <span class="math display">\[
S_4(q_4-Z_4) =  \begin{cases}0&amp;, q_3&lt;Z_3 \\S_3(q_3-Z_3)&amp;,q_3\ge Z_3  \end{cases} \tag{12}
\]</span> 将式<span class="math inline">\((11)\)</span>代入得： <span class="math display">\[
S_4(q_4-Z_4) =  \begin{cases}0&amp;, q_3&lt;Z_3 \\S_1S_2\sum_i^N(q_1-Z_1)(q_2-Z_2) &amp;,q_3\ge Z_3  \end{cases} \tag{13}
\]</span> 整合得： <span class="math display">\[
q_4 = \begin{cases}Z_4&amp;, q_3&lt;Z_3 \\\frac{S_1S_2}{S_4}\sum_i^N(q_1-Z_1)(q_2-Z_2)+Z_4 &amp;,q_3\ge Z_3  \end{cases} \tag{14}
\]</span> 上述操作clip后则是： <span class="math display">\[
q_4 = \begin{cases}Z_4&amp;, q_3&lt;Z_3 \\ clip(\frac{S_1S_2}{S_4}\sum_i^N(q_1-Z_1)(q_2-Z_2)+Z_4,0,255) &amp;,q_3\ge Z_3  \end{cases} \tag{15}
\]</span> 这里由于<span class="math inline">\(ReLU\)</span>的物理原理，<span class="math inline">\(Z_4\)</span>是为0的，而当<span class="math inline">\(q_3&lt;Z_3\)</span>时，代入到式<span class="math inline">\((11)\)</span>可以发现，<span class="math inline">\(\sum_i^N(q_1-Z_1)(q_2-Z_2)&lt;0\)</span>，如果代入到<span class="math inline">\((15)\)</span>中的<span class="math inline">\(q_3 \ge Z_3\)</span>分支中时，可以得到<span class="math inline">\(q_4 = clip(\frac{S_1S_2}{S_4}\sum_i^N(q_1-Z_1)(q_2-Z_2)+Z_4,0,255)=0\)</span>，其中的<span class="math inline">\(\frac{S_1S_2}{S_4}\sum_i^N(q_1-Z_1)(q_2-Z_2)+Z_4=\frac{S_1S_2}{S_4}\times负数+0\)</span>，clip后就是0了</p>
<p>综上，就可以使用如下式子表示卷积和<span class="math inline">\(ReLU\)</span>整合的结果： <span class="math display">\[
q_4 = clip(\frac{S_1S_2}{S_4}\sum_i^N(q_1-Z_1)(q_2-Z_2)+Z_4,0,255) \tag{16}
\]</span> 这个公式的意义相当于：计算出<span class="math inline">\(ReLU\)</span>后<span class="math inline">\(S\)</span>和<span class="math inline">\(Z\)</span>，然后将这个<span class="math inline">\(S\)</span>和<span class="math inline">\(Z\)</span>对应到卷积层的输出，这样一来，<span class="math inline">\(ReLU\)</span>运算就合并到了卷积层了。</p>
<h2 id="leakyrelu">LeakyReLU</h2>
<p>首先，<span class="math inline">\(LeakyReLU\)</span>的公式为： <span class="math display">\[
LeakyReLU(x) = \begin{cases} \alpha x &amp;,x&lt;0 \\ x &amp;, x\ge0 \end{cases} \tag{17}
\]</span> <span class="math inline">\(\alpha\)</span>为超参数，通常取值范围为<span class="math inline">\([0,1]\)</span></p>
<p>类比式<span class="math inline">\((6),(7),(8),(9)\)</span>，可以得到： <span class="math display">\[
r_2 = \begin{cases}\alpha r_1 &amp;,r_1&lt;0 \\ r_1 &amp;, r_1 \ge 0 \end{cases} \tag{18}
\]</span></p>
<p><span class="math display">\[
S_2(q_2-Z_2) = \begin{cases}\alpha S_1(q_1-Z_1) &amp;,q_1&lt;Z_1 \\ S_1(q_1-Z_1) &amp;, q_1 \ge Z_1 \end{cases} \tag{19}
\]</span></p>
<p><span class="math display">\[
q_2 = \begin{cases}\frac{\alpha S_1}{S_2}(q_1-Z_1)+Z_2 &amp;,q_1&lt;Z_1 \\ \frac{S_1}{S_2}(q_1-Z_1)+Z_2 &amp;, q_1 \ge Z_1 \end{cases} \tag{20}
\]</span></p>
<p>这里，由于<span class="math inline">\(\alpha\)</span>的存在，<span class="math inline">\(q_2\)</span>是无法用一个式子进行表示的，也就无法整合到卷积操作里了。</p>
<h2 id="非线性函数">非线性函数</h2>
<p>对于类<span class="math inline">\(ReLU\)</span>函数来说，其实还都是分段线性的，而遇到非线性的函数如<span class="math inline">\(sigmoid\)</span>、<span class="math inline">\(tanh\)</span>等，又应该如何量化呢？</p>
<p>这些函数其实是用定点运算来近似浮点的效果，以<em>I-BERT: Integer-only BERT Quantization float</em>为例，它是采用多项式拟合的方式用线性计算来实现其中的非线性计算。</p>
]]></content>
      <categories>
        <category>轻量化模型</category>
        <category>模型压缩</category>
        <category>模型量化</category>
      </categories>
      <tags>
        <tag>轻量化模型</tag>
        <tag>模型压缩</tag>
        <tag>模型量化</tag>
      </tags>
  </entry>
  <entry>
    <title>注解复习</title>
    <url>/2020/02/03/%E6%B3%A8%E8%A7%A3-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="注解复习">注解复习</h1>
<h2 id="注解与注释">注解与注释</h2>
<p>注解：说明程序的，给计算机看的</p>
<p>注释：用文字描述程序的，给程序员看的</p>
<h2 id="概念描述">概念描述</h2>
<ol type="1">
<li>JDK1.5之后的新特性</li>
<li>说明程序的</li>
<li>使用注解：<span class="citation" data-cites="注解名称">@注解名称</span></li>
</ol>
<h2 id="作用分类">作用分类</h2>
<ol type="1">
<li>编写文档：通过代码里标识的注解生成doc文档</li>
<li>代码分析：通过代码里标识的注解对代码进行分析-使用反射</li>
<li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查-类似于Override</li>
</ol>
<h2 id="jdk内置注解">JDK内置注解</h2>
<ul>
<li><span class="citation" data-cites="Override">@Override</span>：检测被该注解标注的方法是否是继承自父类(接口)的</li>
<li><span class="citation" data-cites="Deprecated">@Deprecated</span>：表示标注的内容已过时</li>
<li><span class="citation" data-cites="SuppressWarnings">@SuppressWarnings</span>：压制警告
<ul>
<li>一般传递参数all：<span class="citation" data-cites="SuppressWarnings">@SuppressWarnings</span>("all")</li>
</ul></li>
</ul>
<h2 id="自定义注解">自定义注解</h2>
<ul>
<li>格式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">// 元注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno&#123;</span><br><span class="line">    <span class="comment">// 属性列表</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> 30</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public interface MyAnno extends java.lang.annotation.Annotation&#123; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>本质：一个接口，默认继承Annotation接口</p></li>
<li><p>属性：接口中的抽象方法</p>
<ul>
<li>要求：返回值类型-基本数据类型、String、枚举、注解、以上类型对应的数组</li>
<li>定义了属性，在使用时需要给属性赋值，如果定义属性时使用default 关键字给属性默认化初始值，则使用注解时，可以不进行属性的赋值 ；如果只有一个属性需要赋值，且属性的名称是value，则value可以省略，直接定义值即可；数组赋值时，值使用{}包裹，如果数组中只有一个值，则{}省略</li>
</ul></li>
<li><p>元注解：用于描述注解的注解</p>
<ol type="1">
<li><span class="citation" data-cites="Target">@Target</span>：描述注解能够作用的位置
<ul>
<li>ElementType取值：
<ul>
<li>TYPE：可作用于类上</li>
<li>METHOD：可作用于方法上</li>
<li>FIELD：可作用于成员变量上</li>
</ul></li>
</ul></li>
<li><span class="citation" data-cites="Retention">@Retention</span>：描述注解被保留的阶段
<ul>
<li>RetentionPolicy.RUNTIME：当前注解会保留到class字节码文件中，并被JVM读取到</li>
</ul></li>
<li><span class="citation" data-cites="Documented">@Documented</span>：描述注解是否被抽取到api文档中</li>
<li><span class="citation" data-cites="Inherited">@Inherited</span>：描述注解是否被子类继承</li>
</ol></li>
</ul>
<h2 id="在程序中使用解析注解-获取注解中定义的属性值">在程序中使用(解析)注解-获取注解中定义的属性值</h2>
<ol type="1">
<li>获取注解定义的位置的对象(Class,Method,Field)</li>
<li>获取指定的注解-getAnnotation(Class)</li>
<li>调用注解中的抽象方法获取配置的属性值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnno(className = &quot;com.zephon.domain.Person&quot;,method = &quot;eat&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 解析注解</span></span><br><span class="line">        <span class="comment">// 获取该类的字节码对象</span></span><br><span class="line">        Class&lt;Test&gt; testClass = Test.class;</span><br><span class="line">        <span class="comment">// 获取上边的注解对象</span></span><br><span class="line">        MyAnno annotation = testClass.getAnnotation(MyAnno.class);</span><br><span class="line">        <span class="comment">// 调用注解对象中的抽象方法，获取返回值</span></span><br><span class="line">        String className = annotation.className();</span><br><span class="line">        String method = annotation.method();</span><br><span class="line">        System.out.println(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载该类进内存</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(className);</span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        Method method1 = cls.getMethod(method);</span><br><span class="line">        method1.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简单案例">简单案例</h2>
<p>使用注解实现一个简单的测试框架(当主方法执行后，会自动执行被检测的所有方法(加了Check注解的方法)，判断方法是否有异常，记录到文件中)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCheck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建计算器对象</span></span><br><span class="line">        Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="comment">// 获取字节码文件对象</span></span><br><span class="line">        Class cls = c.getClass();</span><br><span class="line">        <span class="comment">// 获取所有方法</span></span><br><span class="line">        Method[] methods = cls.getMethods();</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;<span class="comment">// 出现异常的次数</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;bug.txt&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (Method m :</span><br><span class="line">                methods) &#123;</span><br><span class="line">            <span class="comment">// 判断方法上是否有Check注解</span></span><br><span class="line">            <span class="keyword">if</span>(m.isAnnotationPresent(Check.class)) &#123;</span><br><span class="line">                <span class="comment">// 有Check注解，执行</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    m.invoke(c);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// 捕获异常</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 记录到文件中</span></span><br><span class="line">                    num++;</span><br><span class="line">                    bw.write(m.getName()+<span class="string">&quot;出异常了&quot;</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;异常的名称：&quot;</span>+e.getCause().getClass().getSimpleName());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;异常的原因：&quot;</span>+e.getCause().getMessage());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bw.write(<span class="string">&quot;本次测试一共出现&quot;</span>+num+<span class="string">&quot;次异常&quot;</span>);</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-Logistic回归二分类</title>
    <url>/2020/12/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Logistic%E5%9B%9E%E5%BD%92%E4%BA%8C%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="深度学习-logistic回归二分类">深度学习-Logistic回归二分类</h1>
<h2 id="图片存储形式">图片存储形式</h2>
<p>计算机中保存一幅彩色图像，需要存储3个独立矩阵(RGB)Red、Green、Blue，分别对应红、绿、蓝3个颜色通道</p>
<p>最后我们通常使用一个向量x来表式图像，x中包含了展开的R、G、B三个矩阵，如果R、G、B矩阵大小是64<em>64，则对应的x的大小是64 </em> 64 * 3 <span class="math display">\[
(x,y) \ x \in  \mathbb R^{n_x} (\mathbb R表示实数域), y \in \{0,1\} \\
m个训练样本：\{(x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),\cdots,(x^{(m)},y^{(m)})\} \\
X = \begin{bmatrix} 
        x^{(1)}_1 \ x^{(2)}_1 \cdots x^{(m)}_1 \\
        x^{(1)}_2 \ x^{(2)}_2 \cdots x^{(m)}_2 \\
        \cdots \\
        x^{(1)}_n \ x^{(2)}_n \cdots x^{(m)}_n
\end{bmatrix} = \begin{bmatrix} 
        (x^{(1)})^T \\ (x^{(2)})^T \\ \cdots \\ (x^{(m)})^T
\end{bmatrix} (n表示特征数，m表示训练集大小) \\
Y = [y^{(1)} \ y^{(2)} \ \cdots \ y^{(m)}]
\]</span></p>
<h2 id="logistic-regression">Logistic Regression</h2>
<p><span class="math display">\[
给定x,求\hat y = P(y=1|x) x \in \mathbb R^{n_x}(x \in \mathbb R^{n_x}：表示x是一个n维向量)\\
参数：w \in \mathbb R^{(n_x)} \ b \in \mathbb R \\
输出：线性回归： \hat y = w^T x + b \\
Logistic:\sigma(w^Tx+b) \\
\sigma(z) = \frac{1}{1+e^{-z}}(如图)
\]</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201216165726337.png" alt="image-20201216165726337" /> <span class="math display">\[
也可以设定x_0 = 1,然后X \in \mathbb R^{n_x +1} \\
\hat y = \sigma(\theta^Tx) \\
\theta = \begin{bmatrix}\theta_0 \\ \theta_1 \\ \cdots \\ \theta_{n_x} \end{bmatrix} \\
\theta_0相当于b，\theta_1 - \theta_n表示w
\]</span></p>
<h2 id="cost-function代价函数">Cost Function(代价函数)</h2>
<p><span class="math display">\[
Loss(error) function: \\
L(\hat y,y) = \frac{1}{2}(\hat y-y)^2 \\
在Logistic \ Regression中：L(\hat y,y) = -(y\log\hat y+ (1-y)\log(1-\hat y)) \\
和上面L(\hat y,y)一样，也需要使L(\hat y,y)尽量小 \\
Cost \ Function：J(w,b) = \frac{1}{m}\sum_{i=1}^mL(\hat y^{(i)},y^{(i)}) \\
 = -\frac{1}{m} \sum_{i=1}^m[ y^{(i)}log\hat y^{(i)} + (1-y^{(i)})log(1-\hat y^{(i)})]
\]</span></p>
<p>Loss function：适用于单一优化示例</p>
<p>Cost function：反映的是整个模型参数代价</p>
<h2 id="gradient-descent梯度下降">Gradient Descent(梯度下降)</h2>
<p>找到代价函数后，需要找到一组w,b来使J(w,b)最小</p>
<p>对w而言，暂时忽略b</p>
<p><span class="math inline">\(Repeat \ \{ \\  w := w - \alpha \frac{dJ(w)}{dw}\\ \}(:=表示迭代,\alpha：表示学习率,在编写代码时我们通常将\frac{dJ(w)}{dw}写作dw变量名)\)</span></p>
<p>对J(w,b)而言,导数以为偏导数</p>
<p><span class="math inline">\(w:=w-\alpha\frac{\partial J(w)}{\partial w} \\b:=b-\alpha\frac{\partial J(w,b)}{\partial b}\)</span></p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201216213735209.png" alt="image-20201216213735209" /><figcaption>image-20201216213735209</figcaption>
</figure>
<p>m examples： <span class="math display">\[
\begin{array}{l}
J=0;dw_i=0;dw_2=0;db=0 \\
For \ i=1 \ to \ m:\\
\ \ \ z^{(i)} = w^Tx^{(i)}+b \\
\ \ \ a^{(i)} = \sigma(z^{(i)}) \\
\ \ \ J += -[y^{(i)}\log a^{(i)} + (1-y^{(i)})\log(1-a^{(i)})] \\
\ \ \ dz^{(i)} = a^{(i)} - y^{(i)} \\
\ \ \ dw_1 += x_1^{(i)}dz^{(i)} \\
\ \ \ dw_2 += x_2^{(i)}dz^{(i)} \\
\ \ \ db += dz^{(i)} \\
J /= m;dw_1 /=m;dw_2/=m;db/=m \\
dw_1 = \frac{\partial J}{\partial w_1} \\
w_1 := w_1 - \alpha dw_1 \\
w_2 := w_2 - \alpha dw_2 \\
b := b - \alpha db
\end{array}
\]</span></p>
<h2 id="使用矩阵">使用矩阵</h2>
<p>大量的for循环会使代码速度非常慢，使用矩阵乘法来改善</p>
<p>对于<span class="math inline">\(z=w^Tx+b\)</span></p>
<p>使用非向量化方法(python中)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">  z += w[i] * x[i]</span><br><span class="line">z += b</span><br></pre></td></tr></table></figure>
<p>使用向量化方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = np.dot(w,x) + b</span><br></pre></td></tr></table></figure>
<p>实际代码验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line">b = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line">tic = time.time()</span><br><span class="line">c = np.dot(a,b)</span><br><span class="line">toc = time.time()</span><br><span class="line"><span class="built_in">print</span>((toc-tic)*<span class="number">1000</span>,<span class="string">&quot;ms&quot;</span>) <span class="comment"># 1.7743110656738281 ms</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">tic = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">  c += a[i] * b[i]</span><br><span class="line">toc = time.time()</span><br><span class="line"><span class="built_in">print</span>((toc-tic)*<span class="number">1000</span>,<span class="string">&quot;ms&quot;</span>) <span class="comment"># 563.2264614105225 ms</span></span><br></pre></td></tr></table></figure>
<h2 id="向量化的logistic-regression">向量化的Logistic Regression</h2>
<p><span class="math display">\[
X = \begin{bmatrix} 
\cdots \ \cdots \ \cdots \ \cdots \\
x^{(1)} \  x^{(2)} \ \cdots \ x^{(m)}\\
\cdots \ \cdots \ \cdots \ \cdots
\end{bmatrix} \\
w^T = [w^{(1)} \ w^{(2)} \cdots w^{(n)}]\\
Z = [z^{(1)} \ z^{(2)} \cdots z^{(m)}] = w^TX +[b \ b \cdots b] \\
A = [a^{(1)} \ a^{(2)} \cdots a^{(m)}] = \sigma(z)
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = np.dot(w.T,x) + b</span><br></pre></td></tr></table></figure>
<h2 id="向量化logistic-regression的梯度计算">向量化Logistic Regression的梯度计算</h2>
<p><span class="math inline">\(dz^{(1)} = a^{(1)} - y^{(1)} \ \ \ dz^{(2)} = a^{(2)} - y^{(2)} \cdots \\ dZ = [dz^{(1)} \ dz^{(2)} \dots dz^{(m)}] \\ A = [a^{(1)} \cdots a^{(m)}] \ \ Y = [y^{(1)} \cdots y^{(m)}]\\ dZ = A-Y = [a^{(1)}-y^{(1)} \cdots a^{(m)}-y^{(m)}] \\\)</span></p>
<p><span class="math inline">\(dw = 0 \\ dw += x^{(1)}dz^{(1)} \\ dw += x^{(2)}dz^{(2)} \\ \cdots \\ dw /= m \\ dw = \frac{1}{m}XdZ^T = \frac{1}{m}\begin{bmatrix} \cdots \ \cdots \ \cdots \\ x^{(1)} \ \cdots \ x^{(m)} \\ \cdots \ \cdots \ \cdots \end{bmatrix} \begin{bmatrix}dz^{(1)} \\ \cdots \\ dz^{(m)}\end{bmatrix}\)</span> $db = 0 \ db += dz^{(1)} \ db += dz^{(2)} \ \ db /= m \ db = _{i=1}<sup>mdz</sup>{(i)} = np.sum(dZ) $</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向量计算db</span></span><br><span class="line"><span class="comment"># 此处dZ为向量形式</span></span><br><span class="line">db = <span class="number">1</span>/m * np.<span class="built_in">sum</span>(dZ)</span><br><span class="line"><span class="comment"># 向量计算dw</span></span><br><span class="line">dw = <span class="number">1</span>/m * X *dZ.T</span><br></pre></td></tr></table></figure>
<h2 id="python中的向量说明">Python中的向量说明</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.random.randn(<span class="number">5</span>) <span class="comment"># 生成秩为1的数组，a.shape=(5,)</span></span><br><span class="line">a = np.random.randn(<span class="number">5</span>,<span class="number">1</span>) <span class="comment"># 生成列向量，a.shape= (5,1)</span></span><br><span class="line">a = np.random.randn(<span class="number">1</span>,<span class="number">5</span>) <span class="comment"># 生成行向量, a.shape=(1,5)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-入门</title>
    <url>/2020/12/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="深度学习-入门">深度学习-入门</h1>
<h2 id="什么是机器学习">什么是机器学习</h2>
<p>深度学习，一般是指训练神经网络，有时网络会比较deep</p>
<h2 id="什么是神经网络">什么是神经网络</h2>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201215201552851.png" alt="image-20201215201552851" /><figcaption>image-20201215201552851</figcaption>
</figure>
<p>如图，是一个最基本的神经网络，中间的"neuron"是神经元</p>
<p>ReLU(Rectified Linearar Unite)：线性整流函数<span class="math inline">\(f(x) = max(0,x)\)</span></p>
<h2 id="其它的神经网络">其它的神经网络</h2>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201215210727473.png" alt="image-20201215210727473" /><figcaption>image-20201215210727473</figcaption>
</figure>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-多层神经网络</title>
    <url>/2020/12/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="深度学习-多层神经网络">深度学习-多层神经网络</h1>
<h2 id="符号表示">符号表示</h2>
<p><span class="math inline">\(l:层数 \\ n^{[l]}：第l层的节点单元数 \\ a^{[l]}：第l层的激活函数\)</span></p>
<h2 id="正向传播和反向传播">正向传播和反向传播</h2>
<p>$正向传播: \ 对于第l层: \ 输入：a^{[l-1]} \ 输出：a<sup>{[l]},中间(z</sup>{[l]})(对应权重w<sup>{[l]},偏置b</sup>{[l]}) \ z^{[l]} = w<sup>{[l]}a</sup>{[l-1]}+b<sup>{[l]}\ a</sup>{[l]} = g<sup>{[l]}(z</sup>{[l]}) \ 对应向量运算：\ Z^{[l]} = W<sup>{[l]}A</sup>{[l-1]}+b<sup>{[l]}\ A</sup>{[l]} = g<sup>{[l]}(Z</sup>{[l]}) $ <span class="math inline">\(反向传播:\\ 对于第l层： 输入：da^{[l]} \\ 输出：da^{[l-1]},dW^{[l]},db^{[l]} \\ dz^{[l]} = da^{[l]}*g^{[l]&#39;}(z^{[l]}) \\ dw^{[l]} = dz^{[l]}a^{[l-1]}\\ db^{[l]} = dz^{[l]} \\ da^{[l-1]} = w^{[l]T}dz^{[l]} \\ 向量运算:\\ dZ^{[l]} = dA^{[l]} * g^{[l]&#39;}(Z^{[l]}) \\ dW^{[l]} = \frac{1}{m}dZ^{[l]}A^{[l-1]T} \\ db^{[l]} = \frac{1}{m}np.sum(dZ^{[l]},axis=1,keepdims=True) \\ dA^{[l-1]} = W^{[l]T}dZ^{[l]}\)</span></p>
<h2 id="为什么需要更深层的网络">为什么需要更深层的网络</h2>
<ol type="1">
<li>通过增加深度，以一种从简单到复杂的金字塔状表示方法，前几层学习一些低层次的简单特征，而后几层就能把简单的特征结合起来来探测更加复杂的东西</li>
<li>例如，要计算<span class="math inline">\(y=x_1 XOR x_2XORx_3\cdots XORx_n\)</span>,如果使用深度解决，则复杂度为<span class="math inline">\(O(\log n)\)</span>,而如果不用深度，则对单层中的神经元复杂度为<span class="math inline">\(O(2^n)\)</span></li>
</ol>
<h2 id="参数和超参数">参数和超参数</h2>
<p>参数：<span class="math inline">\(W^{[1]},b^{[1]},W^{[2]},b^{[2]},\cdots\)</span></p>
<p>超参数：学习率、迭代情况、隐藏层数、隐藏层单元数、激活函数的选择...</p>
<blockquote>
<p>之所以叫做超参数，是因为这些参数的选择会影响参数的值</p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-改善训练结果</title>
    <url>/2020/12/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%94%B9%E5%96%84%E8%AE%AD%E7%BB%83%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<h1 id="深度学习-改善训练结果">深度学习-改善训练结果</h1>
<h2 id="数据集划分">数据集划分</h2>
<p>通常将数据集划分为：训练集(traing set)、验证集(validation set)(或开发集(development set))、测试集(test set)</p>
<p>在小数据时代，通常7:3划分或6:2:2划分</p>
<p>在大数据时代，则98%：1%：1%，</p>
<h2 id="偏差bias和方差variance">偏差(Bias)和方差(Variance)</h2>
<p>当训练集错误率小(如1%)，验证集错误率大(如11%)时，则通常方差较高</p>
<p>当训练集和验证集错误率均较大(如15%和16%)时，则通常偏差较高</p>
<p>当训练集错误率较大(如15%)，验证集错误率更大(如30%)时，则通常偏差和方差都较高，属于欠拟合</p>
<p>当训练集错误率和验证集错误率都较小时(如0.5%和1%)，则通常偏差和方差都较低</p>
<h2 id="一些训练技巧">一些训练技巧</h2>
<ol type="1">
<li>如果训练结果偏差高甚至无法拟合训练集，则需要选择一个新网络(规模更大、更深、训练时间更长、更适合的神经网络框架等)</li>
<li>如果训练结果方差偏高，则需要查看验证集效果，则可以使用更多的数据或通过正则化来解决过拟合或选择更适合的神经网络框架</li>
<li>直到最终偏差、方差都较小</li>
</ol>
<h2 id="l2正则化">L2正则化</h2>
<p>以Logistic Regression为例：</p>
<p><span class="math inline">\(J(w,b) = \frac{1}{m}\sum_{i=1}^mL(\hat y^{(i)},y^{(i)})+\frac{\lambda}{2m}||w||_2^2 \\ L2正则化：||w||_2^2 = \sum_{j=1}^{n_x}w_j^2=w^Tw \\ L1正则化：\frac{\lambda}{2m}\sum_{j=1}^{n_x}|w_j| = \frac{\lambda}{2m}||w||_1\)</span></p>
<p><span class="math inline">\(\lambda\)</span>：正则化参数</p>
<blockquote>
<p>注：由于lambda是python中的保留字，所以通常我们在编码中使用lambd来代替</p>
</blockquote>
<p>在神经网络中：</p>
<p><span class="math inline">\(J(w^{[1]},b^{[1]},\cdots,w^{[l]},b^{[l]})=\frac{1}{m}\sum_{i=1}^mL(\hat y^{(i)},y^{(i)}） + \frac{lambda}{2m}\sum_{l=1}^{L}||W^{[l]}||^2 \\ ||W^{[l]}||^2 = \sum_i^{n^{[l-1]}}\sum_j^{n^{[l]}}(W^{[l]}_{ij})^2 \ (Frobenius \ norm) \\ dw^{[l]} = (反向传播结果) + \frac{\lambda}{m}W^{[l]} \\ \Rightarrow W^{[l]} := W^{[l]}-\alpha dW^{[l]} = W^{[l]} - \frac{\alpha \lambda}{m}W^{[l]}-\alpha (反向传播结果)\)</span></p>
<blockquote>
<p>为什么正则化有利于预防过拟合？</p>
<p>如果正则化<span class="math inline">\(\lambda\)</span>设置得足够大，则权重矩阵被设置为接近于0的值，直观理解就是把多个隐藏单元的权重设为0，进而消除了这些单元，从而形成一个简化的小网络，从而接近逻辑回归，导致方差降低，解决过拟合问题。</p>
<p>如果正则化参数足够大，权重矩阵足够小，则<span class="math inline">\(z^{[l]}=w^{[l]}a^{[l-1]}+b^[[l]]\)</span>也会相对变小，在z变小且取值范围较小的情况下，以tanh激活函数为例，则此时激活函数会相对呈线性关系，从而导致整个网络会计算类似线性函数的值，向欠拟合靠近，在这个靠近的过程中，有一个恰好适合的值，可以正好解决过拟合问题，</p>
</blockquote>
<h2 id="随机失活dropout-正则化">随机失活(Dropout) 正则化</h2>
<p>最基本原理：将所有单元设置50%概率删除，以该概率删除部分单元，然后训练，进而减少网络复杂程度</p>
<p>实现方法：Inverted dropout</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># layer l=3,keep_prob=0.8(保留80%单元)</span></span><br><span class="line">d3 = np.random.rand(a3.shape[<span class="number">0</span>],a3.shape[<span class="number">1</span>])</span><br><span class="line">a3 = np.multiply(a3,d3)</span><br><span class="line">a3 /= keep_prob</span><br></pre></td></tr></table></figure>
<h2 id="其它正则化方法">其它正则化方法</h2>
<ol type="1">
<li>数据扩增；通过增加训练的数据，改善训练结果，但有时我们无法获得更多的训练数据，这里可以对数据进行变换(如图片进行水平水平翻转、随意剪裁等得到新的图片)</li>
<li>Early stopping；可以提前停止迭代，在训练集和验证集Loss均适度时停止，</li>
</ol>
<h2 id="归一化">归一化</h2>
<ol type="1">
<li><p>零均值化(subtrat out or zero out the mean)</p>
<p><span class="math inline">\(\mu = \frac{1}{m}\sum_{i=1}^mx^{(i)} \\ x:=x-\mu\)</span></p></li>
<li><p>归一化方差(normalize the variances)</p>
<p><span class="math inline">\(\sigma^2 = \frac{1}{m}\sum_{i=1}^mx^{(i)}**2 \\ x /= \sigma^2\)</span></p></li>
</ol>
<blockquote>
<p>为什么要归一化？</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201220173527012.png" alt="image-20201220173527012" /><figcaption>image-20201220173527012</figcaption>
</figure>
<p>当正则化后，函数是一个更圆的球形轮廓，则无论从哪个位置开始，梯度下降都会更快的找到最小值</p>
</blockquote>
<h2 id="梯度消失与梯度爆炸vanishingexploding-gradients">梯度消失与梯度爆炸(Vanishing/exploding gradients)</h2>
<blockquote>
<p>当训练深度网络时，导数或坡度有时会变得非常大或非常小甚至以指数方式变小</p>
</blockquote>
<p>假设<span class="math inline">\(b^{[l]}=0,g(z)=z\)</span>则<span class="math inline">\(\hat y=W^{[l]}W^{[l-1]}\cdots W^{[2]}W^{[1]}x\)</span></p>
<p>如果W中的值比1略大如<span class="math inline">\(W^{[l]} = \begin{bmatrix}1.5 \ 0 \\ 0 \ 1.5 \end{bmatrix}\)</span>，则最终结果<span class="math inline">\(1.5^{[l-1]}x\)</span>指数增大，类似的，如果W中的值比1略小如<span class="math inline">\(W^{[l]} = \begin{bmatrix}0.5 \ 0 \\ 0 \ 0.5 \end{bmatrix}\)</span>，则最终结果<span class="math inline">\(0.5^{[l-1]}x\)</span>指数减小，从而导致梯度下降算法将花费很长时间来学习</p>
<h2 id="权重初始化">权重初始化</h2>
<p>单个神经元</p>
<p><span class="math inline">\(z=w_1x_1+w_2x_2+\cdots+w_nx_n (忽略b，暂时设为0) \\ 则n越大，w_i越小 \\ Var(w_i) = \frac{1}{n} (Var:Variance)\\ w^{[l]} = np.random.randn(shape)*np.sqrt(\frac{1}{n^{[l-1]}}) \\ 如果使用的是ReLU激活函数，则Var(w_i)设为\frac{2}{n}更好，同样的\\ w^{[l]} = np.random.randn(shape)*np.sqrt(\frac{2}{n^{[l-1]}}) \\\)</span></p>
<p>如果使用tanh激活函数，则可以使用<span class="math inline">\(\sqrt{\frac{1}{n^{[l-1]}}}\)</span>或Xavier初始化(<span class="math inline">\(\frac{2}{n^{[n-1]}+n^{[l]}}\)</span>)</p>
<h2 id="梯度的数值逼近">梯度的数值逼近</h2>
<blockquote>
<p>双边误差公式的结果更准确：</p>
<p>双边误差<span class="math inline">\(\displaystyle f&#39;(\theta) = \lim_{\epsilon \rightarrow 0}\frac{f(\theta+\epsilon)-f(\theta+\epsilon)}{2\epsilon}(O(\epsilon^2))\)</span></p>
<p>单边误差<span class="math inline">\(\displaystyle f&#39;(\theta) =\lim_{\epsilon \rightarrow 0} \frac{f(\theta+\epsilon)-f(\theta)}{\epsilon}\)</span></p>
</blockquote>
<h2 id="梯度检验">梯度检验</h2>
<ol type="1">
<li>将<span class="math inline">\(W^{[1]},b^{[1]},\cdots,W^{[L]},b^{[L]}\)</span>转换成一个向量<span class="math inline">\(\theta\)</span>，从而<span class="math inline">\(J(W^{[1]},b^{[1],\cdots,W^{[L]},b^{[L]}}=J(\theta))\)</span></li>
<li>将<span class="math inline">\(dW^{[1]},db^{[1]},\cdots,dW^{[L]},db^{[L]}\)</span>转换成向量<span class="math inline">\(d\theta\)</span>，</li>
</ol>
<p><span class="math inline">\(J(\theta) = J(\theta_1,\theta_2,\cdots) \\ 对每个i，d\theta_{approx[i]}(d\theta的逼近值) = \frac{J(\theta_1,\theta_2,\cdots,\theta_i+\epsilon,\cdots) - J(\theta_1,\theta_2,\cdots,\theta_i-\epsilon,\cdots)}{2\epsilon} \approx d\theta[i] = \frac{\partial J}{\partial \theta_i}\)</span></p>
<p>检验： <span class="math display">\[
\frac{||d\theta_{approx}-d\theta||_2}{||d\theta_{approx}||_2+||d\theta||_2}&lt;(\epsilon=10^{-7})
\]</span></p>
<blockquote>
<p>注：</p>
<ol type="1">
<li>不要在训练中使用梯度检验，它只用于调试</li>
<li>如果算法的梯度检验失败，需要检查每一项，并试着找出bug</li>
<li>注意正则化</li>
<li>梯度检验不能与dropout同时使用</li>
<li>在随机初始化下运行；可能经过一些训练后再次运行</li>
</ol>
</blockquote>
<h2 id="mini-batch梯度下降法">Mini-batch梯度下降法</h2>
<p>确定角标</p>
<p><span class="math inline">\(x^{(i)}:第i个训练样本 \\ z^{[l]}:表示神经网络第l层的z值 \\ X^{\{t\}}:表示第t个Mini-batch\)</span></p>
<p>之前的向量化可以高效的计算m个训练样本</p>
<p><span class="math inline">\(X = [x^{(1)} \ x^{(2)} \ \cdots \ x^{(m)}] \\ Y = [y^{(1)} \ y^{(2)} \ \cdots \ y^{(m)}] \\\)</span></p>
<p>如果m很大，处理速度还是会很慢，这样一来就可以有一种新的方式：</p>
<p>假设m=5,000,000,可以把训练集分割为小一点的子训练集，将这些子集称为Mini-batch，假设每个子集有1000个样本，则</p>
<p><span class="math inline">\(X^{\{1\}} = [x^{(1)} \ x^{(2)} \ \cdots \ x^{(1000)}] \\ X^{\{2\}} = [x^{(1001)} \ \cdots \ x^{(2000)}] \\ \cdots \\ X^{\{5000\}} = [\cdots \ x^{(m)}] \\ Y^{\{1\}} = [y^{(1)} \ y^{(2)} \ \cdots \ y^{(1000)}] \\ Y^{\{2\}} = [y^{(1001)} \ \cdots \ y^{(2000)}] \\ \cdots \\ Y^{\{5000\}} = [\cdots \ y^{(m)}]\)</span></p>
<p>Mini-batch梯度下降法：</p>
<p><span class="math inline">\(for \ t=1,\cdots,5000 \\ \ \ 在X^{\{t\}}上前向传播 \\ \ \ Z^{[1]} = W^{[l]}X^{\{t\}}+b^{[l]} \\ \ \ A^{[1]} = g^{[1]}(Z^{[1]}) \\ \ \ \cdots \\ \ \ A^{[l]} = g^{[l]}(Z^{[l]}) \\ \ \ 计算Cost \ J = \frac{1}{1000} \sum_{i=1}^lL(\hat y^{(i)},y^{(i)})+\frac{\lambda}{2*1000}\sum_l||W^{[l]}||_F^2 \\ \ \ 反向传播\\ \ \ W^{[l]} := W^{[l]}-\alpha dW^{[l]},b^{[l]} := b^{[l]}-\alpha db^{[l]} \\\)</span></p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201221111343456.png" alt="image-20201221111343456" /><figcaption>image-20201221111343456</figcaption>
</figure>
<p>选择每个mini-batch的大小</p>
<p>如果mini-batch size=m，则转为batch gradient descent,<span class="math inline">\((X^{\{1\}},Y^{\{1\}}) = (X,Y)\)</span></p>
<p>如果mini-batch size=1，则称为stochastic gradient descent(随机梯度下降法)，每个样本都是独立的mini-batch，<span class="math inline">\((X^{\{1\}},Y^{\{1\}}) = (x^{(1)},y^{(1)})\)</span>，并且无法使用向量化加速</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201221112021756.png" alt="image-20201221112021756" /><figcaption>image-20201221112021756</figcaption>
</figure>
<p>因此，在实际使用中时，通常对size的选择不能太大也不能太小，需要适中</p>
<h2 id="指数加权平均exponentially-weighted-averages">指数加权平均(Exponentially weighted averages)</h2>
<blockquote>
<p>例：每日温度绘制出的散点图如下</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201221112802102.png" alt="image-20201221112802102" /><figcaption>image-20201221112802102</figcaption>
</figure>
</blockquote>
<p>数据杂乱，如果要计算趋势，则计算局部平均值(或移动平均值)</p>
<p><span class="math inline">\(V_0 = 0 \\ V_1 = 0.9V_0 + 0.1\theta_1(\theta_t为当日温度)\\ V_2 = 0.9V_1 + 0.1\theta_2 \\ \cdots \\ V_t = 0.9V_{t-1} + 0.1\theta_t\)</span></p>
<p>计算结果，绘制出图上红色的线</p>
<p><span class="math inline">\(V_t = \beta V_{t-1} + (1-\beta)\theta_t(V_t可视为约\frac{1}{1-\beta}天的温度的平均)\\ 当\beta = 0.9，则是十天的平均值 \\ 当\beta = 0.98,则是50天的平均值 \\ 当\beta = 0.5,则是2天的平均值\)</span></p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201221113753152.png" alt="image-20201221113753152" /><figcaption>image-20201221113753152</figcaption>
</figure>
<p>指数加权平均的<strong>偏差修正</strong>，来使平均数运算更加准确</p>
<p>由于上述初始化<span class="math inline">\(V_0=0\)</span>，所以当第1天温度较低时，计算出来<span class="math inline">\(V_1\)</span>也会较小，同理<span class="math inline">\(V_2,V_3\)</span>等也会较小</p>
<p>为了解决这个问题，通过<span class="math inline">\(\frac{V_t}{1-\beta^t}\)</span>进行修正，如在第2天，则<span class="math inline">\(V_2 = \frac{原本计算的V_2}{1-\beta^2}\)</span></p>
<h2 id="动量梯度下降法gradient-descent-with-momentum">动量梯度下降法(Gradient descent with momentum)</h2>
<p>传统的梯度下降法中，计算以上下波动的方式向目标点靠近，如图</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201221120027386.png" alt="image-20201221120027386" /><figcaption>image-20201221120027386</figcaption>
</figure>
<p>如果使用较大的学习率，则结果又可能会偏离函数的范围</p>
<p>在纵轴上，希望学习慢一点避免波动过大，而在横轴上，又希望加快学习，快速从左向右移</p>
<p>使用动量梯度下降法来解决这一点：</p>
<p><span class="math inline">\(在第t次迭代中： \\ 使用现有的mini-batch计算dW,db \\ V_{dW} = \beta V_{dW} + (1-\beta)dW(和指数加权平均中的公式一样，计算出dw的移动平均数)\\ V_{db} = \beta V_{db} + (1-\beta)db \\ W := W - \alpha V_{dW},b:=b-\alpha V_{db}\)</span></p>
<p>最终结果类似如图红色线部分</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201221120801137.png" alt="image-20201221120801137" /><figcaption>image-20201221120801137</figcaption>
</figure>
<blockquote>
<p>约束：适用于碗状函数，因为如<span class="math inline">\(V_{db} = \beta V_{db}+(1-\beta)db\)</span>中，<span class="math inline">\(db\)</span>相当于加速度，<span class="math inline">\(V_{db}\)</span>相当于速度，而<span class="math inline">\(\beta\)</span>相当于摩擦力，所以，不同于梯度下降法的每一步都是独立的，动量梯度下降相当于小球从碗上向下滚，球可以获得动量</p>
</blockquote>
<h2 id="加速梯度下降rmsprop">加速梯度下降(RMSprop)</h2>
<p>同上述动量梯度下降类似</p>
<p><span class="math inline">\(在第t次迭代时：\\ 通过现有mini-batch计算dW,db \\ S_{dW} = \beta_2 S_{dW} + (1-\beta_2)dW^2 \\ S_{db} = \beta_2 S_{db} + (1-\beta_2)db^2 \\ W := W - \alpha \frac{dW}{\sqrt{S_{dW}}} \ b:=b-\alpha\frac{db}{\sqrt{S_{db}}} \\为了保证分母不为0，通常会在分母上添加一个非常小的数\epsilon \\ W := W - \alpha \frac{dW}{\sqrt{S_{dW}}+\epsilon} \ b:=b-\alpha\frac{db}{\sqrt{S_{db}}+\epsilon} (如\epsilon = 10^{-8})\)</span></p>
<blockquote>
<p>原理是通过这样计算，可以使用更大的学习率，而不会超出函数范围，进而加速梯度下降</p>
</blockquote>
<h2 id="adam优化算法">Adam优化算法</h2>
<blockquote>
<p>Adam优化算法是将Momentum和RMSprop结合起来的优化算法</p>
<p>Adam:Adaptive Moment Estimation</p>
</blockquote>
<p>具体： <span class="math display">\[
V_{dW}=0,S_{dW}=0,V_{db}=0,S_{db}=0 \\
在第t次迭代 \\
通过现有mini-batch计算dW,db \\
V_{dW} = \beta_1 V_{dW}+(1-\beta_1)dW \\
V_{db} = \beta_1 V_{db}+(1-\beta_1)db \\
S_{dW} = \beta_2 S_{dW}+(1-\beta_2)dW^2 \\
S_{db} = \beta_2 S_{db}+(1-\beta_2)db^2 \\
V^{corrected}_{dW} = \frac{V_{dW}}{1-\beta_1^t},V^{corrected}_db = \frac{V_{db}}{1-\beta_1^t}(偏差修正) \\
S^{corrected}_{dW} = \frac{V_{dW}}{1-\beta_2^t},S^{corrected}_db = \frac{S_{db}}{1-\beta_2^t}(偏差修正) \\
W := W-\alpha \frac{V^{corrected}_{dW}}{\sqrt{S_{dW}^{corrected}}+\epsilon},b:=b-\alpha\frac{V_{db}^{corrected}}{\sqrt{S^{corrected}_{db}}+\epsilon}
\]</span></p>
<blockquote>
<p>超参数选择：</p>
<p><span class="math inline">\(\alpha\)</span>:需要多次尝试调整</p>
<p><span class="math inline">\(\beta_1\)</span>:默认值一般用0.9</p>
<p><span class="math inline">\(\beta_2\)</span>:默认值一般用0.999</p>
<p><span class="math inline">\(\epsilon\)</span>:建议用<span class="math inline">\(10^{-8}\)</span></p>
</blockquote>
<h2 id="学习率衰减learning-rate-decay">学习率衰减(Learning rate decay)</h2>
<blockquote>
<p>本质在于在训练学习初期，可以快速向收敛点靠拢，当开始收敛时，小的学习率可以让步伐小一些，保证在收敛点小范围内波动</p>
</blockquote>
<p><span class="math display">\[
\alpha = \frac{1}{1+decay \ rate(衰减率) * epoch\ num(迭代次数}\alpha_0 \\
decay \ rate是一个超参数 
\]</span></p>
<blockquote>
<p>eg:<span class="math inline">\(\alpha\)</span>=0.2,decay rate=1，则</p>
<table>
<thead>
<tr class="header">
<th>Epoch</th>
<th><span class="math inline">\(\alpha\)</span></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>0.1</td>
</tr>
<tr class="even">
<td>2</td>
<td>0.067</td>
</tr>
<tr class="odd">
<td>3</td>
<td>0.05</td>
</tr>
<tr class="even">
<td>4</td>
<td>0.04</td>
</tr>
<tr class="odd">
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
</blockquote>
<p>其它的学习率衰减方法：</p>
<ul>
<li><p><span class="math inline">\(\alpha = 0.95^{epoch\ num}\alpha_0\)</span>学习率呈指数下降</p></li>
<li><p><span class="math inline">\(\alpha = \frac{k}{\sqrt{epoch\ num}}\alpha_0\)</span>,k为常数</p></li>
<li><p>离散下降</p></li>
<li><p>手动衰减</p></li>
</ul>
<h2 id="局部最优问题">局部最优问题</h2>
<blockquote>
<p>实际上，由于深度学习大多数在高维空间，所以遇到局部最优的可能并不大，更可能遇到的是鞍点</p>
<p>新的问题是平稳段会减缓学习(因此Momentum、RMSprop可以加速学习)</p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-改善训练结果</title>
    <url>/2020/12/23/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h1 id="深度学习-机器学习策略">深度学习-机器学习策略</h1>
<h2 id="什么是机器学习策略">什么是机器学习策略</h2>
<blockquote>
<p>因为在训练过程中，如果通常会有很多选择可以深试，但如果做出了错误的选择，就有可能浪费时间向错误的方向前进，所有需要机器学习策略来迅速判断跟哪些想法是靠谱的，或者提出新想法等，进而指引朝向最有可能的方向前进</p>
</blockquote>
<h2 id="正交化">正交化</h2>
<blockquote>
<p>调整多个互不影响(正交)的参数，进而调整训练效果</p>
</blockquote>
<p>机器学习的假设链</p>
<ol type="1">
<li>确保系统在训练集上得到的结果不错(否则采取更深的网络、Adam等法处理)</li>
<li>在验证集上表现不错(否则采取正则化、增大训练集等操作)</li>
<li>在测试集上表现不错(否则采取增大验证集等操作)</li>
<li>在实际应用中表示不错(否则回去改变验证集或修改Cost function)</li>
</ol>
<h2 id="单个数字评估指标">单个数字评估指标</h2>
<p>查准率(Precision)和召回率(Recall)</p>
<p>以猫分类为例：</p>
<p>查准率是在分类器标记为猫的例子中，有多少真的是猫；</p>
<p>查全率(召回率)是对于所有真猫的图片，分类器正确识别出了多少百分比</p>
<blockquote>
<p>查准率和查全率通常不能同时达到非常高，往往需要折衷</p>
<p>使用查准率和查全率作为评价指标，通常是很好的，但当两个分类器，一个在查准率上表现好，一个在查全率上表现好时，则无法判断哪个分类器表现更好。</p>
</blockquote>
<p>因此，在评估一个分类器时，通常使用一个新的评估指标，可以结合查准率和查全率，那就是F1 score，记查准率为P，查全率为R，则<span class="math inline">\(F_1 = \frac{2}{\frac{1}{P}+\frac{1}{R}}\)</span></p>
<p>这种单一评价指标可以加速机器学习</p>
<h2 id="满足和优化指标">满足和优化指标</h2>
<blockquote>
<p>优化指标：尽量达到最好</p>
<p>满足指标：必须足够好，达到之后则不在乎这个指标有多好</p>
</blockquote>
<h2 id="训练集验证集测试集划分">训练集、验证集、测试集划分</h2>
<blockquote>
<ol type="1">
<li>验证集、测试集尽量来自同一分布</li>
<li>选择很重要的数据或能够反映将来会得到的数据作为验证集和测试集</li>
</ol>
</blockquote>
<h2 id="验证集和测试集的大小">验证集和测试集的大小</h2>
<blockquote>
<p>过去的划分方式：将所有数据按照7:3分成训练集和测试集或按照6:2:2划分训练集、验证集和测试集</p>
<p>但在现在的大数据型的数据集中，例如有1,000,000数据，则可以划分98%作为训练集，而只需要1%验证集和1%测试集，因为1,000,000的1%已经是10,000，对于验证集和测试集来说已经足够了</p>
<p>对于测试集而言：需要让测试集足够大，保证能够以较高置信度的评估系统整体性能，因此，除非需要对最终投产系统有一个很精确的指标，一般来说，测试集不需要上百万个例子</p>
</blockquote>
<h2 id="什么时候更改验证集测试集和指标">什么时候更改验证集、测试集和指标</h2>
<blockquote>
<p>一个猫分类的例子：</p>
<p>有两个算法可能将图片中的关于猫的图片分类出来</p>
<p>算法A错误率：3%；算法B错误率：5%</p>
<p>但A会将一些不能被用户或公司接受的图片分类到猫类，而B则不会</p>
<p>所以从单一错误率指标看，可能会选A，但实际上更可能会选B</p>
<p>即：在训练和验证集的基础上，偏向于A，因为A的错误率更低，但公司和用户更倾向于B，因此，当评估指标无法正确衡量算法之间的优劣排序时，这就意味着应该改变评估指标了，或要改变验证集和测试集。</p>
<p>其中一个修改评估指标的方法是加一个权重项，当图片是正常图片时，w为1，当图片是无法接受的图片时，w为10或更大，同时要将之前分类器错误率计算中的<span class="math inline">\(\frac{1}{m}\)</span>改为<span class="math inline">\(\frac{1}{\sum_iw^{(i)}}\)</span></p>
</blockquote>
<p>为猫图片分类做正交化</p>
<ol type="1">
<li>明白如何定义一个指标来衡量想做的事情的表现(设定目标)</li>
<li>然后可以分开考虑如何改善系统在这个指标上的表现(调试如何精确)</li>
</ol>
<blockquote>
<p>另一个例子：仍然是两个算法A和B，错误率同上，但可能训练和验证集用的图片都是高清图片，实际使用时使用的图片比较模糊，而B在这些模糊图片中表现的更好。</p>
<p>方针：如果指标在当前验证集或验证和测试集的分布中表现的很好，但在实际应用中真正关注的地方表现不好，则需要修改指标，或验证测试集</p>
</blockquote>
<h2 id="和人类表现比较">和人类表现比较</h2>
<h3 id="为什么是人类">1. 为什么是人类</h3>
<ol type="1">
<li>随着深度学习的的进步，机器学习算法的表现突然表现很好了，在许多机器学习的应用邻域已经开始见到一些算法可以威胁到人类的表现了</li>
<li>当试图让机器做人类能做的事情时，可以设计机器学习系统的工作流程，使工作流程效率更高，因此在这些场合，将机器和人类相比是很自然的</li>
</ol>
<blockquote>
<p>人类在许多任务上表现是很好的，因此，在机器学习中，如果机器表现不如人类时你可以：</p>
<ol type="1">
<li>从人类处获取标签数据</li>
<li>从人工错误分析中获得洞察力</li>
<li>更好的分析偏差和方差</li>
</ol>
</blockquote>
<h3 id="可避免偏差">2. 可避免偏差</h3>
<blockquote>
<p>Eg: 对于猫分类案例中，</p>
<p>假设人类错误率1%，训练集错误率8%，验证集错误率10%，那么你如果想在训练集上得到更好的结果，从减少偏差和方差的角度来看，这种情况下，一般会把重点放在偏差上，因此需要做的是：训练更大的神经网络或运行更久的训练，深度在训练集上表现更好；</p>
<p>假设人类错误率是7.5%了,训练集错误率8%，验证集错误率10%，则通常把重点放在方差上，可以尝试正则化</p>
</blockquote>
<blockquote>
<p>将贝叶斯错误率或对贝叶斯错误率的估计和训练错误率之间的差值称为可避免差值</p>
<p>而训练错误率和开发错误率之间的差值则说明了算法在方差问题上还有多少改善空间</p>
</blockquote>
<h3 id="理解人类表现的定义">3. 理解"人类表现"的定义</h3>
<blockquote>
<p>人类水平错误率可以作为贝叶斯错误率的代表</p>
</blockquote>
<blockquote>
<p>以医疗图像分类为例：</p>
<p>假设普通人错误率是3%；普通医生的错误率是1%；专家的错误率是0.7%；经验丰富的医生团队的错误率是0.5%</p>
<p>那么人类水平定义为多少呢？</p>
<p>答案是人类水平错误率是想要替代或估计贝叶斯错误率的，那么贝叶斯错误率 &lt;= 0.5%，所以最优错误率必须在0.5%以下，因此将人类水平定义为0.5%</p>
</blockquote>
<h3 id="超过人类表现水平">4. 超过人类表现水平</h3>
<blockquote>
<p>假设对于一个问题：</p>
<p>团队讨论的错误率是0.5%；单个人的错误率是1%；训练错误率是0.6%；验证集错误率是0.8%。那么由于可避免偏差的估计=0.6%-0.5%=0.1%；方差=0.8%-0.6%=0.2%，因此相比减少可避免误差而言，减少方差的可能空间更大</p>
<p>假设对于另一个问题：</p>
<p>团队讨论的错误率是0.5%，单人错误率是1%；但训练错误率是0.3%，验证错误率是0.4%，这种情况下，验证集错误率都已经超过了人类，因此会导致继续下去时就没有明确的选项和前进方向了</p>
</blockquote>
<p>目前机器在以下方面可能已经超过人类的表现了：</p>
<ul>
<li>在线广告</li>
<li>产品推荐</li>
<li>物流预测</li>
<li>贷款预测</li>
</ul>
<blockquote>
<p>而以上四个例子都是从结构化数据中学习得来的，而并不是自然感知问题，不是计算机视觉问题或语音识别或自然语言处理任务，人类往往在自然感知问题上表现的更好，但是如今也已经有一些特定的自然感知问题上机器 的表现已经优于人类了。</p>
</blockquote>
<h3 id="总结改善模型的表现的方法">总结改善模型的表现的方法</h3>
<blockquote>
<p>想要一个监督学习算法达到衫，基本上需要能完成两个事情</p>
<ol type="1">
<li>算法对训练集的拟合很好，可以看成可能做到可避免偏差很低</li>
<li>推广到验证集和测试集上也很好，也就是说方差不是太大</li>
</ol>
</blockquote>
<p>降低可避免偏差和方差：</p>
<ol type="1">
<li><p>计算训练错误率和贝叶斯错误率估计值之间的差值(即train error和human error)，从而知道可避免偏差有多大</p>
<p>减小可避免偏差的措施：</p>
<ul>
<li>使用规模更大的模型</li>
<li>训练更久或使用更好的优化算法(momentum、RMSprop、Adam)</li>
<li>尝试寻找更好的新的神经网络架构或更好的超参数</li>
</ul></li>
<li><p>计算验证错误率和训练错误率之间的差值，从而知道方差问题有多大</p>
<p>减小方差的措施：</p>
<ul>
<li>收集更多的数据</li>
<li>正则化(L2、Dropout、数据扩增)</li>
<li>尝试使用不同的神经网络架构或超参数搜索</li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-神经网络</title>
    <url>/2020/12/21/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="深度学习-神经网络">深度学习-神经网络</h1>
<h2 id="神经网络概览">神经网络概览</h2>
<p>图中上标方括号[n] 表示层数</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201217181744490.png" alt="image-20201217181744490" /><figcaption>image-20201217181744490</figcaption>
</figure>
<h2 id="神经网络的表示">神经网络的表示</h2>
<p>输入层、隐藏层、输出层</p>
<p>如图是一个两层神经网络(计算层数时不包括输入层)，但输入层通常被称为第0层</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201217181909976.png" alt="image-20201217181909976" /><figcaption>image-20201217181909976</figcaption>
</figure>
<p>以Logistic Regression为例，每个神经元代表两个步骤</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201217182506125.png" alt="image-20201217182506125" /><figcaption>image-20201217182506125</figcaption>
</figure>
<h2 id="多实例训练过程">多实例训练过程</h2>
<p><span class="math inline">\(for \ i=1 \ to \ m: \\ \ \ z^{[1](i)} = w^{[1]}x^{(i)}+b^{[1]} \\ \ \ a^{[1](i)}=\sigma(z^{[1](i)}) \\ \ \ z^{[2](i)}=w^{[2]}a^{[1](i)} + b^{[2]} \\ \ \ a^{[2](i)}=\sigma(z^{[2](i)})\)</span></p>
<h2 id="向量化代替循环">向量化代替循环</h2>
<p><span class="math inline">\(X = \begin{bmatrix} \cdots \ \cdots \ \cdots \\ x^{(1)} \ \cdots \ x^{(m)} \\ \cdots \ \cdots \ \cdots \end{bmatrix} \\ Z^{[1]} = W^{[1]}X + b^{[1]} A^{[1]} = \sigma(Z^{[1]}) \\ Z^{[2]} = W^{[2]}A^{[1]}+b^{[2]} \\ A^{[2]} = \sigma(Z^{[2]}) \\ Z^{[1]} = \begin{bmatrix} \cdots \ \cdots \ \cdots \\ z^{[1](1)} \ z^{[1](2)} \ z^{[1](m)} \\ \cdots \ \cdots \ \cdots \end{bmatrix} \\ A^{[1]} = \begin{bmatrix} \cdots \ \cdots \ \cdots \\ a^{[1](1)} \ a^{[1](2)} \ a^{[1](m)} \\ \cdots \ \cdots \ \cdots \end{bmatrix} \\\)</span></p>
<h2 id="激活函数activation-function">激活函数(Activation function)</h2>
<p>Sigmoid：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201217205519238.png" alt="image-20201217205519238" /><figcaption>image-20201217205519238</figcaption>
</figure>
<p>tanh：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201217205603188.png" alt="image-20201217205603188" /><figcaption>image-20201217205603188</figcaption>
</figure>
<p>ReLU：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201217205718141.png" alt="image-20201217205718141" /><figcaption>image-20201217205718141</figcaption>
</figure>
<blockquote>
<p>如果是二分类问题，输出是0或1，可使用Sigmoid函数或tanh(常用)</p>
<p>如果不确定使用什么函数，通常使用ReLU(导数不会趋于0)</p>
</blockquote>
<blockquote>
<p>为什么需要非线性激活函数？</p>
<p><span class="math inline">\(假设去掉非线性激活函数，使用线性激活函数(或恒等激活函数)，则以最简单的y=x为例：\\ z^{[1]} = W^{[1]}x+b^{[1]} \\ a^{[1]} = z^{[1]} \\ a^{[2]} = W^{[2]}a^{[1]} + b^{[2]}\\ a^{[2]} = z^{[2]} \Rightarrow \\ a^{[2]} = W^{[2]}(W^{[1]}x+b^{[1]})+b^{[2]} \\ a^{[2]} =(W^{[2]}W^{[1]})x+(W^{[2]}b^{[1]}+b^{[2]} = W&#39;x + b&#39;\)</span></p>
<p>这样一来，神经网络的输出则仅仅是输入的线性变化，则无论有多少层，最终结果都是输入的线性变换结果，这样其实就和没有隐藏层的逻辑回归模型相同</p>
<p>如此，通常情况下，唯一可以使用线性激活函数的地方，就是输出层</p>
</blockquote>
<h2 id="梯度下降">梯度下降</h2>
<p><span class="math inline">\(正向传播:\\ Z^{[1]} = W^{[1]}X + b^{[1]} \\ A^{[1]} = g^{[1]}(Z^{[1]} \\ Z^{[2]} = W^{[2]}A^{[1]}+b^{[2]} \\ A^{[2]} = g^{[2]}(Z^{[2]}=\sigma(Z^{[2]})\)</span> <span class="math inline">\(反向传播: \\ dZ^{[2]} = A^{[2]} - Y \\ dW^{[2]} = \frac{1}{m}dZ^{[2]}A^{[1]T} \\ db^{[2]} = \frac{1}{m}np.sum(dZ^{[2]},axis=1,keepdims=True) \\ dZ^{[1]} = W^{[2]T}dZ^{[2]}*g^{[1]&#39;}(Z^{[1]}) \\ dW^{[1]} = \frac{1}{m}dZ^{[1]}X^T \\ db^{[1]} = \frac{1}{m}np.sum(dZ^{[1]},axis=1,keepdims=True)\)</span></p>
<h2 id="随机初始化">随机初始化</h2>
<blockquote>
<p>如果将权重W和偏置都设为0，则会引起一些问题：</p>
<p>即无论使用什么样的样本进行训练，<span class="math inline">\(a^{[1]}_1=a^{[1]}_2\)</span>，同层隐藏神经元在进行完全相同的计算工作，并且也会影响作用在输出神经元上，并且在反向传播时，<span class="math inline">\(dz^{[1]}_1 = d^{[1]}_2\)</span>，这样无论训练多久，这几个神经元作用一样，并没有效果</p>
</blockquote>
<p>随机初始化：</p>
<p><span class="math inline">\(W^{[1]} = np.random.randn((2,2))*0.01 \\ b^{[1]}=np.zero((2,1))\)</span></p>
<blockquote>
<p>为什么*0.01，不是100？</p>
<p>因为W初始化不能太大，否则会使tanh和sigmoid激活函数学习进度缓慢，导致无法实现预期功能</p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-误差分析</title>
    <url>/2020/12/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E8%AF%AF%E5%B7%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="深度学习-误差分析">深度学习-误差分析</h1>
<h2 id="执行误差分析">执行误差分析</h2>
<blockquote>
<p>引言：假设在进行一个猫分类的训练，目前已经达到了90%的正确率，经过查看发现错误的数据中有许多的关于狗的被识别错误，这里是否需要正对狗收集更多的图片？或设计一些只处理狗的算法功能？或做一个项目专门处理狗？</p>
</blockquote>
<p>错误分析流程：</p>
<ol type="1">
<li>收集一些比如100个错误标记的验证集的例子</li>
<li>检查其中有多少个是狗</li>
<li>假如狗的概率是5%，则对应的100个中有5个是狗标记错误的，这样的话，如果采取上述一些比较耗费时间的措施，就有可能浪费了很多时间，但最多也只能将正确率从90%提升到90.5%，这个值也可以称为是改善算法性能的上限</li>
<li>假如狗的概率是50%，则这种情况下，花费一些时间去解决狗的问题可能效果就更好，可能就将正确率从90%提升到了95%</li>
</ol>
<p>有时，在进行错误分析的同时，也可以并行评估几个问题：</p>
<p>以猫检测器为例：</p>
<ol type="1">
<li>或许可以改善针对狗的图片的性能</li>
<li>或许可以改善针对一些猫科动物如狮子、豹等的误识别问题</li>
<li>或许可以改善在模糊图像上的性能</li>
</ol>
<p>综上可以使用表格进行记录如：</p>
<table>
<thead>
<tr class="header">
<th>Image</th>
<th>狗识别错误</th>
<th>猫科动物识别错误</th>
<th>模糊图像</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Y</td>
<td></td>
<td></td>
<td>泰迪犬</td>
</tr>
<tr class="even">
<td>2</td>
<td></td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr class="odd">
<td>3</td>
<td></td>
<td>Y</td>
<td>Y</td>
<td>下雨天的大型猫科动物</td>
</tr>
<tr class="even">
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td>总百分比</td>
<td>8%</td>
<td>43%</td>
<td>61%</td>
<td></td>
</tr>
</tbody>
</table>
<p>然后根据统计百分比，决定是否值得去处理每个不同的错误类型</p>
<h2 id="清楚标注错误的数据">清楚标注错误的数据</h2>
<blockquote>
<p>如果发现数据中有一些标记错误的例子，应该怎么办？</p>
</blockquote>
<ol type="1">
<li>考虑训练集，事实证明，深度学习算法对于训练集中的随机错误是相当健壮的，只要标记出错 的例子离随机错误不太远，如果错误足够随机，那么放着这些错误不管可能也没问题，而不用花费时间去修复，只要数据集足够大，实际错误率一般不会太高</li>
<li>如果是验证集或测试集中有这些标记出错的例子，一般建议在错误分析时，添加一个额外的列，这样就可以进行统计了，如果这些标记错误严重影响了在开发集上评估算法的能力，就应该花时间去修正，但如果没有严重影响，可能就不应该浪费时间去修正，比较修正最大可能带来的正确率的提升是否足够多</li>
</ol>
<p>修正验证集或测试集的错误样本：</p>
<ul>
<li>无论怎样，都要同时作用到验证集和测试集上，从而确保他们来自相同分布</li>
<li>考虑同时检验算法判断正确和判断错误的例子</li>
<li>可能决定只修正开发集和测试集中的标签，因为它们通常比训练集小的多，这样其实是可以的，但需要进行一些步骤用于处理训练集分布和验证集、测试集不同的情况，但是验证集和测试集来自同一分布非常重要</li>
</ul>
<h2 id="快速搭建第一个系统并进行迭代">快速搭建第一个系统，并进行迭代</h2>
<p>以语音识别为例：</p>
<ul>
<li>嘈杂的背景
<ul>
<li>咖啡厅噪音</li>
<li>汽车噪音</li>
<li>...</li>
</ul></li>
<li>带口音的声音</li>
<li>远距离声音</li>
<li>儿童声音</li>
<li>口吃等类似的声音</li>
<li>...</li>
</ul>
<blockquote>
<p>一般来说，对于几乎所有的机器学习程序，都会有很多的不同方向可以选择前进，并且每个方向都是相对合理的，可以改善系统，但挑战在于，如何选择一个方向集中精力处理</p>
</blockquote>
<ul>
<li>设定验证集和测试集</li>
<li>迅速建立初始化系统</li>
<li>使用偏差/方差分析和错误分析等来确定下下一步优先做什么</li>
</ul>
<h2 id="在不同分布上训练和测试">在不同分布上训练和测试</h2>
<blockquote>
<p>eg: 假设需要开发一个识别猫的App，从网上找到的训练数据集往往是比较清楚的高清图片等，但用户可能会上传一些用手机拍摄的模糊照片。因此，有两个数据来源，一个是真正关心的数据分布，来自应用上传的数据，一般比较业余，另一个数据来源就是从网上获取的相对专业的猫图片，因此你可能会获取这样一些数据，大量的如200,000张清楚的图片，和少量的如10,000张模糊的图片，相当于它们并不来自同一分布，那么应该怎么做？</p>
</blockquote>
<p>选择1：将这些图片合在一起，相当于有了210,000张照片，然后随机分配到训练、开发和测试集中，这样做好处在于：训练集、验证集和测试集都来自同一分布，更好管理；坏处在于：如果观察验证集则会发现这些图片中很多图片来自网上下载的高清图片，并不是真正关心的数据分布，真正要处理的是手机上传的图片，因此通常<strong>不建议</strong>使用这种方式</p>
<p>选择2：训练集是来自网上下载的200,000张图片，如果需要再加上5000张来自手机上传的图片，然后对于验证集和测试集，则都是手机上传的图片，这样划分的好处在于：现在验证集中针对的目标就是想要处理的目标；坏处在于：现在的训练集分布和验证集、测试集分布不一样，但事实证明这样划分，在长期能带来更好的性能</p>
<blockquote>
<p>eg: 假设你需要实现一个语音激活后视镜，那么可能会从网上获取或购买一些各种语音数据，但不一定和你的目的相关，这些数据非常多(如500,000段语音)，还会有一些语音激活后视镜的相关语间数据，而这些就相对比较少(如20,000段语音)</p>
</blockquote>
<p>在这个例子中，可以这样划分数据集：</p>
<p>将500,000段语音作为训练集，然后对于验证集和测试集每个包括10,000段语音激活后视镜相关的语音，或510K+5K+5K划分</p>
<h2 id="不匹配数据分布的偏差和方差">不匹配数据分布的偏差和方差</h2>
<blockquote>
<p>还是以猫分类器为例，假设人类错误率约为0%，因此贝叶斯错误率(或贝叶斯最优错误率)在这个问题中基本为0%，假设训练集错误率是1%，验证集错误率是10%</p>
</blockquote>
<p>如果验证集和训练集来自同一分布，可能会认为这里存在很大的方差问题，算法不能很好的泛化；</p>
<p>但如果训练集和验证集来自不同的分布，就不能下定上述结论了，因为可能算法在验证集上做得不错，可能是因为训练集容易识别，因为训练集都是高清图上，而验证集则比较难识别，因此，可能算法并没有方差问题，这只是反映了验证集中包含更难分类的图片</p>
<blockquote>
<p>因此，当训练集和验证集来自不同的分布时，再看训练错误和验证错误，有两件事情发生了变化 ：</p>
<ol type="1">
<li>算法只使用了训练集数据，并没有使用验证集数据</li>
<li>验证集数据来自不同的分布</li>
</ol>
<p>所以，很难确认这增加的9%的错误率有多少是因为算法没用到验证集的数据导致的</p>
</blockquote>
<p>为了解决这种问题，定义一种新的数据集——训练-验证数据集是有必要的，它和训练集数据分布一样，但不用来训练，具体步骤是：随机打散一些训练集，然后分出一部分作为 训练-验证集，就像验证集和测试集一样，训练集和训练-验证集也来自同一分布，但不同的是，现在，只在训练集上训练神经网络，然后需要查看的是分类器在训练集上的错误、在训练-验证集上的错误、还有在验证集上的错误</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225114359778.png" alt="image-20201225114359778" /><figcaption>image-20201225114359778</figcaption>
</figure>
<p>假设上述问题中的训练集错误率是1%，训练-验证集错误率是9%，验证集错误率是10%，则说明算法存在方差问题；</p>
<p>同样假设上述问题中的训练集错误率是1%，训练-验证集错误率是1.5%，验证集错误是10%，则说明存在数据不匹配问题</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201225115046338.png" alt="image-20201225115046338" /><figcaption>image-20201225115046338</figcaption>
</figure>
<h2 id="处理数据不匹配">处理数据不匹配</h2>
<ul>
<li>如果发现有严重的数据不匹配问题，通常会做错误分析，了解训练集和验证、测试集的具体差异</li>
<li>可以尝试将训练集数据变得更像验证集，或收集更多类似验证集和测试集的数据</li>
<li>人工合成数据</li>
</ul>
<h2 id="迁移学习">迁移学习</h2>
<blockquote>
<p>神经网络可以从一个任务中学习，并将这些学习的内容应用到另一个独立的任务中</p>
</blockquote>
<p>假设有一个已经训练好的图像识别神经网络，有输入图像x和识别对象y，将这个神经网络拿出进行迁移，如放射性诊断，可以做的是将神经网络最后的输出层拿走，然后将进入最后一层的权重删掉，然后为最后一层重新赋予随机权重，然后让它在放射诊断数据上训练</p>
<p>即要实现迁移学习，要做的就是将数据集换成新的x和y，x就是上述的放射性诊断图，y是诊断结果，然后将最后一层的权重随机初始化，然后在这个新数据集上重新训练网络。如果新数据集很小，你可能只需要重新训练最后一层的权重，并保持其它参数不变；但如果有足够多的数据，可以重新训练神经网络中剩下的所有层</p>
<p>规则通常是：如果有一个小数据集，就只训练输出层前的最后一层或两层，如果有大量数据，则可以重新训练网络中的所有参数</p>
<p>如果重新训练网络中的所有参数，那么这个在图像识别数据的初期训练阶段(称为预训练)，如果以后更新所有权重，然后在新数据上训练，这个过程也称为微调</p>
<blockquote>
<p>为什么会有这样的效果呢？</p>
<p>有很多低层次特征如边缘检测、曲线检测、阳性对象检测等，从大的图像识别数据库中学习的这些能力，可能有助于算法在新数据诊断中做得更好</p>
</blockquote>
<p>迁移学习，通常迁移来源问题中有很多数据，但迁移目标问题中通常数据相对较少，而反过来往往是不可行的。</p>
<blockquote>
<p>总结：什么时候迁移学习是有意义的？</p>
<ul>
<li><p>想提高任务B的性能</p></li>
<li><p>任务A和任务B有一样类型的输入</p></li>
<li><p>任务A的数据比任务B的数据多</p></li>
<li><p>任务A的低层次特征对任务B有帮助</p></li>
</ul>
</blockquote>
<h2 id="多任务学习">多任务学习</h2>
<blockquote>
<p>在迁移学习中，步骤是串行的，从任务A学习，然后迁移到任务B</p>
<p>而在多任务学习中，是现时开始学习的，尝试让单个神经网络同时做几件事情，然后希望让每个任务都能帮到其它任务</p>
</blockquote>
<p>以自动驾驶为例：</p>
<p>神经网络的输入x是一张图片，输出y是一个四维向量，对应的是预测图中有没有行人、有没有车、有没有停车标志、有没有交通灯</p>
<p>对应的损失函数：<span class="math inline">\(\frac{1}{m} \sum_{i=1}^m \sum_{j=1}^4 L(\hat y_j^{(i)},y_j^{(i)}) \ (此处L使用的是Logistic \ loss)\)</span></p>
<p>与softmax回归不同的是，softmax将单个标签分配给单个样本，而这里这张图可以有很多不同的标签</p>
<p>如果训练一个神经网络，试图最小化这个代价函数，进行的就是多任务学习，因为现在做是建立单个神经网络，观察每张图，然后解决四个问题，此外，也可以训练四个不同的神经网络，但神经网络的一些早期特征在识别不同物体时都会用到，然后就会发现，训练一个神经网络做四件事会比训练四个完全独立的神经网络分别做四件事性能要更好。</p>
<blockquote>
<p>多任务学习什么时候有意义？</p>
<ul>
<li>训练的一组任务可以共用低层次特征</li>
<li>通常每个任务的数据量很接近</li>
<li>可以训练一个足够大的神经网络同时做好所有的工作</li>
</ul>
</blockquote>
<p><code>通常迁移学习的使用频率比多任务学习更高</code></p>
<h2 id="什么是端到端学习">什么是端到端学习</h2>
<blockquote>
<p>简而言之，以前有一些数据处理系统或学习系统，它们需要多个阶段的处理，而端到端深度学习，就是忽略所有这些不同的阶段，用单个神经网络代替。</p>
</blockquote>
<p>以语音识别为例：</p>
<p>目标是对于输入音频x，映射一个输出对应文本y</p>
<p>传统上，语音识别需要很多阶段的处理，首先提取一些特征，然后使用机器学习算法找到"音素"(phoneme:声音的基本单位)，再将单位串在一起构成独立的词，最后将词串起来构成文本</p>
<p>而端到端深度学习做的是，训练一个巨大的神经网络，输入是一个音频x，输出是文本y，直接绕过了中间步骤，训练出一个从x到y的映射</p>
<blockquote>
<p>而端到端深度学习的的一个挑战是可能需要大量的数据，才能让训练结果变得足够好</p>
</blockquote>
<p>以身份验证系统为例：</p>
<p>一种做法是，将获取的图片作为输入x，而输出y则是对应的身份，但由于人站位不同、距离不同等，拍摄的图片可能会各种各样</p>
<p>因此，迄今为止最好的做法是：使用多步方法，首先使用一个算法进行人脸检测，检测到人脸，然后放大对应的部分，并裁剪图像，使人脸居中显示，然后再输入到神经网络中，通常神经网络判别身份，结果显示，这种将任务分成两个更简单的任务，通常在整体上得到的表现更好。</p>
<blockquote>
<p>为什么分成两步更好呢？</p>
<ol type="1">
<li>解决的两个问题，每个问题实际上要简单得多</li>
<li>两个子任务的训练数据都很多；对于人脸检测的数据，网络上有许多，而对于第二步，可看作是检测两张图片上的人是否是同一个，对就的网络上数据也有很多，而对于原始的一步方法对应的输入输出对应的数据，则相对很少了</li>
</ol>
</blockquote>
<h2 id="是否使用端到端学习">是否使用端到端学习</h2>
<p>端到端学习的优点：</p>
<ol type="1">
<li>只让数据说话；只要有足够多的数据，不用关注中间繁琐的其它步骤</li>
<li>所需手动设计的组件更少</li>
</ol>
<p>缺点：</p>
<ol type="1">
<li>可能需要大量的数据(有时如果没有大量数据，可以尝试将任务拆分成可能收集到大量数据的子任务)</li>
<li>排除了可能有用的手动设计的组件</li>
</ol>
<p>因此，是否使用端到端学习的关键的问题在于：</p>
<blockquote>
<p>是否有足够的数据能够直接学习复杂的从x映射到y的函数？</p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习-超参数调试处理</title>
    <url>/2020/12/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E8%AF%95%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="深度学习-超参数调试处理">深度学习-超参数调试处理</h1>
<h2 id="超参数选择">超参数选择</h2>
<p><strong>学习率<span class="math inline">\(\alpha\)</span></strong></p>
<p><u>momentum中的<span class="math inline">\(\beta\)</span></u></p>
<p>Adam中的<span class="math inline">\(\beta_1,\beta_2,\epsilon\)</span></p>
<p>层数#layers</p>
<p><u>不同层隐藏单元数量#hidden units</u></p>
<p>学习率衰减率</p>
<p><u>mini-batch size</u></p>
<blockquote>
<p>随机取值：调试时，随机取值，而不是网格取值</p>
<p>精确搜索：采用由粗糙到精细的策略，发现一块区域中的点对应的超参数取得的效果较好，则可以放大该区域，然后在其中更密集地取值</p>
</blockquote>
<h2 id="为超参数选择合适的范围">为超参数选择合适的范围</h2>
<blockquote>
<p>假设认为<span class="math inline">\(\alpha\)</span>=0.0001，...，1</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = -<span class="number">4</span>*np.random.rand()<span class="comment"># [-4,0]</span></span><br><span class="line">lr = <span class="number">10</span> ** r <span class="comment"># [10^-4,1]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>假设认为<span class="math inline">\(\beta\)</span>=0.9，...，0.999，则</p>
<p>1-<span class="math inline">\(\beta\)</span>=0.1，...，0.001</p>
<p><span class="math inline">\(r \in [-3,-1]\)</span></p>
<p><span class="math inline">\(1-\beta=10^r\)</span></p>
<p><span class="math inline">\(\beta = 1-10^r\)</span></p>
</blockquote>
<h2 id="batch-normalization">Batch Normalization</h2>
<blockquote>
<p>Batch归一化会使参数搜索问题变得很容易，使神经网络对超参数的选择更加稳定</p>
</blockquote>
<p>和Logistic Regression中归一化输入X一样，在深度神经网络中</p>
<p>对任意隐藏层而言，可以通过对<span class="math inline">\(z^{[l]}\)</span>归一化，加快训练 <span class="math display">\[
已知一些中间值，假设有一些隐藏单元值：z^{(1)},\cdots,z^{(m)} (省略了[l])\\
\mu = \frac{1}{m}\sum_i z^{(i)} \\
\sigma^2 = \frac{1}{m} \sum_i(z_i-\mu)^2 \\
z^{(i)}_{norm} = \frac{z^{(i)}-\mu}{\sqrt{\sigma^2+\epsilon}} \\
\tilde z^{(i)} = \gamma z^{(i)}_{norm}+\beta(\gamma,\beta是学习参数)从而：\\
如果\gamma = \sqrt{\sigma^2+\epsilon},\beta = \mu，则\tilde z^{(i)}=z^{(i)} \\
\]</span></p>
<h2 id="将batch-norm拟合进神经网络">将Batch Norm拟合进神经网络</h2>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201221143511249.png" alt="image-20201221143511249" /><figcaption>image-20201221143511249</figcaption>
</figure>
<p>参数：<span class="math inline">\(W^{[1]},b^{[1]},\cdots,W^{[L]},b^{[L]} \\ \beta^{[1]},\gamma^{[1]},\cdots,\beta^{[L]},\gamma^{[L]}\)</span></p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20201221144146555.png" alt="image-20201221144146555" /><figcaption>image-20201221144146555</figcaption>
</figure>
<p>实现</p>
<p><span class="math inline">\(对每个第t个mini-batch: \\ 在X^{\{t\}}上计算前向传播 \\ 对每个隐藏层，使用BN计算，用\tilde z^{[l]}代替z^{[l]} \\ 使用反向传播计算dW^{[l]},\bcancel{db^{[l]}},d\beta^{[l]},d\gamma^{[l]} \\ 更新参数:W^{[l]}:=W^{[l]}-\alpha dW^{[l]},\beta^{[l]} :=\beta^{[l]}-\alpha d\beta^{[l]},\gamma^{[l]} :=\gamma^{[l]}-\alpha d\gamma^{[l]}\)</span></p>
<blockquote>
<p>为什么Batch Norm有用？</p>
<ol type="1">
<li>和Logistic Regression中的归一化一样，通过归一化，可以将不同特征值包括隐藏单元的值的范围归到类似，从而加速学习</li>
<li>可以使权重比网络更滞后或更深层</li>
<li>有一些正则化效果</li>
</ol>
</blockquote>
<h2 id="在测试时的batch-norm">在测试时的Batch Norm</h2>
<p><span class="math display">\[
在测试时，需要单独估算\mu和\sigma^2,通常的\\
\mu,\sigma^2：使用指数加权平均来估算，这个平均数涵盖所有mini-batch\\
假设有mini-batch：\\
X^{\{1\}},X^{\{2\}},\cdots,\\
对应的有:\\
\mu^{\{1\}[l]},\mu^{\{2\}[l]},\cdots, \rightarrow \mu\\
同样的有:\\
\sigma^{\{1\}[l]},\sigma^{\{2\}[l]},\cdots, \rightarrow \sigma^2 \\
最终测试时:\\
z^{(i)}_{norm}=\frac{z^{(i)}-\mu}{\sqrt{\sigma^2+\epsilon}}
\]</span></p>
<blockquote>
<p>总结：在训练时，<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\sigma^2\)</span>是在整个mini-batch上计算出来的，包含了多个数量的样本，但在测试时，可能需要逐处理样本，因为可以根据训练集估算<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\sigma^2\)</span>，在实际操作中，我们通常使用指数加权平均来估算<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\sigma^2\)</span></p>
</blockquote>
<h2 id="softmax-regression">Softmax Regression</h2>
<blockquote>
<p>使用softmax回归进行多分类</p>
</blockquote>
<p><span class="math inline">\(C = \#classes \\ 则输出层单元数通常n^{[L]}=C,对应每类的概率 \\\)</span></p>
<p>Softmax layer:</p>
<p><span class="math inline">\(Z^{[l]} = W^{[l]}a^{[l-1]}+b^{[l]} ,shape=(C,1)\\ 激活函数： \\ t = e^{z^{[l]}} ,shape=(C,1)\\ a^{[l]} = \frac{t}{\sum_{j=1}^Ct_j},a_i^{[l]} = \frac{t_i}{\sum_{j=1}^Ct_j} \\ 整个过程概括为softmax激活函数:\\ a^{[l]} = g^{[l]}(z^{[l]}),\\不同之处在于输入输出都是一个shape=(C,1)的向量，而之前的sigmoid、ReLU等输入输出都是一个实数\)</span></p>
<p>Loss function</p>
<p><span class="math inline">\(L(\hat y,y) = -\sum_{j=1}^Cy_j\log\hat y_j \\ J(W^{[1]},b^{[1]},\cdots) = \frac{1}{m}\sum_{i=1}^m L(\hat y^{(i)},y^{(i)})\)</span></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>经典序列模型-HMM与CRF</title>
    <url>/2021/10/07/%E7%BB%8F%E5%85%B8%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B-HMM%E4%B8%8ECRF/</url>
    <content><![CDATA[<h1 id="经典序列模型-hmm与crf">经典序列模型-HMM与CRF</h1>
<h2 id="hmm">HMM</h2>
<h3 id="ｈｍｍ模型的输入和输出">ＨＭＭ模型的输入和输出</h3>
<ul>
<li>HMM(Hidden Markov Model)，中文名是<strong>隐含马尔科夫模型</strong>，因俄国数学家马尔科夫而得名，一般以文本序列数据为输入，以该序列对应的隐含序列为输出</li>
</ul>
<h3 id="什么是隐含序列">什么是隐含序列</h3>
<ul>
<li>序列数据中每个单元包含的隐性信息，这些隐性信息之间也存在一定的关联</li>
</ul>
<p>如：</p>
<blockquote>
<p>给定一段文本：“人生该如何起头”</p>
<p>看到的这句话可以叫做：<strong>观测序列</strong></p>
<p>可以将这句话以词为单位进行划分得到：</p>
<p>["人生","该", "如何", "起头"]</p>
<p>则每个词对应的词性就是它的隐含序列，如：</p>
<p>["n", "r", "r", "v"]</p>
</blockquote>
<h3 id="hmm模型的作用">HMM模型的作用</h3>
<ul>
<li>在NLP领域，HMM用来解决文本序列标注问题。如分词，词性标注，命名实体识别等都可以看作是序列标注问题</li>
</ul>
<h3 id="hmm模型使用过程简述">HMM模型使用过程简述</h3>
<ol type="1">
<li>HMM模型表示为：lambda = HMM(A, B, pi)，其中A,B,pi都是模型的参数，分别称为：转移概率矩阵，发射概率矩阵和初始概率矩阵</li>
<li>训练HMM模型，语料是事先准备好的一定数量的观测序列及其对应的隐含序列，通过不断训练求得一组参数，使由观测序列到对应隐含序列的概率最大</li>
<li>在训练过程中，为了简化计算，马尔可夫提出了一种假设：隐含序列中每个单元的可能性只与上一个单元有关。这个假设就是著名的隐含假设</li>
<li>训练后，就得到了具备预测能力的新模型：lambda=HMM(A,B,pi)，其中模型参数已经改变</li>
<li>之后给定输入序列(x1, x2, ..., xn)，经过模型计算lambda(x1, x2, ..., xn)得到对应隐含序列的条件概率分布</li>
<li>最后，使用维特比算法从隐含序列的条件概率分布中找出概率最大的一条序列路径就是所需要的隐含序列：(y1, y2, ..., yn)</li>
</ol>
<h2 id="crf">CRF</h2>
<h3 id="crf模型的输入和输出">CRF模型的输入和输出</h3>
<ul>
<li>CRF(Conditional Random Fields)，中文名是<strong>条件随机场</strong>，同HMM一样，它一般也以文本列数据为输入，以该序列对应的隐含序列为输出</li>
</ul>
<h3 id="crf模型的作用">CRF模型的作用</h3>
<ul>
<li>同HMM一样，在NLP领域，CRF用来解决文本序列标注问题。如分词，词性标注，命名实体识别</li>
</ul>
<h3 id="crf模型使用过程简述">CRF模型使用过程简述</h3>
<ol type="1">
<li>CRF模型表示为：lambda=CRF(w1, w2, ..., wn)，其中w1到wn是模型参数</li>
<li>训练CRF模型，语料同样是事先准备好的一定数量的观测序列及其对应的隐含序列</li>
<li>与此同时还需要做人工特征工程，然后通过不断训练求得一组参数，使由观测序列到对应隐含序列的概率最大</li>
<li>训练后，就得到了具备预测能力的新模型:lambda = CRF(w1, w2,... , wn)，其中的模型参数已经改变</li>
<li>之后给定输入序列(x1, x2, ..., xn)，经过模型计算lambda(x1, x2, ..., xn)得到对应隐含序列的条件概率分布</li>
<li>最后，使用维特比算法从隐含序列的条件概率分布中找出概率最大的一条序列路径就是需要的隐含序列：(y1, y2, ..., yn)</li>
</ol>
<h2 id="hmm和crf模型之间的差异">HMM和CRF模型之间的差异</h2>
<ul>
<li>HMM模型存在隐马假设，而CRF不存在，因此HMM计算速度要比CRF快很多，适用于对预测性能要求较高的场合</li>
<li>同样因为隐马假设，当预测问题中隐含序列单元不只与上一个单元有关时，HMM的准确率会大大降低，而CRF不受这样限制，准确率明显高于HMM</li>
</ul>
<h2 id="hmm和crf的发展现状">HMM和CRF的发展现状</h2>
<ul>
<li>HMM和CRF模型曾在多种序列任务中表现出色，伴随NLP工程师度过漫长的一段时间</li>
<li>但由于近年来深度学习发展迅速，经典序列模型，如HMM和CRF，已经开始渐渐淡出人们的视野</li>
</ul>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>自然语言处理入门</title>
    <url>/2021/10/04/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="自然语言处理入门">自然语言处理入门</h1>
<h2 id="什么是自然语言处理">什么是自然语言处理</h2>
<ul>
<li>自然语言处理(Natural Language Processing，简称NLP)是计算机科学与语言学中关注于计算机与人类语言间转换的领域</li>
</ul>
<h2 id="自然语言处理的发展简史">自然语言处理的发展简史</h2>
<ul>
<li>1950年，计算机科学之父图灵在论文中提出“机器可以思考吗”这一划时代的问题，从此促成了人类语言学与计算机科学的交融</li>
<li>1957~1970，自然语言处理领域开始形成“两大阵营”，基于规则和基于统计</li>
<li>1994~1999，基于统计的方法逐渐取得胜利，概率计算开始引入到NLP领域的每个任务中</li>
<li>2000~2008，机器学习开始兴起，迅速占领了<strong>NLP</strong>的主流市场</li>
<li>2015~，人工智能时代到来，深度学习技术深刻改变<strong>NLP</strong>的未来</li>
</ul>
<h2 id="自然语言处理的应用场景">自然语言处理的应用场景</h2>
<ul>
<li>语音助手</li>
<li>机器翻译</li>
<li>搜索引擎</li>
<li>智能问答</li>
<li>...</li>
</ul>
<h2 id="内容概要">内容概要</h2>
<h3 id="文本预处理">文本预处理</h3>
<blockquote>
<p>文本处理基本方法，文本张量表示，文本数据分析，文本增强方法等</p>
</blockquote>
<h3 id="经典序列模型">经典序列模型</h3>
<blockquote>
<p>HMM与CRF模型的作用，使用过程，差异比较以及发展现状等</p>
</blockquote>
<h3 id="rnn及其变体">RNN及其变体</h3>
<blockquote>
<p>RNN、LSTM、GRU模型的作用，构建，优劣势比较等</p>
</blockquote>
<h3 id="transformer">Transformer</h3>
<blockquote>
<p>Transformer模型的作用，细节原理解析，模型构建过程等</p>
</blockquote>
<h3 id="迁移学习">迁移学习</h3>
<blockquote>
<p>fasttext工具的作用，迁移学习理论，NLP标准数据集和预训练模型的使用等</p>
</blockquote>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中的问题</title>
    <url>/2020/03/28/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="项目中的问题">项目中的问题</h1>
<h2 id="项目地址">项目地址</h2>
<p>https://github.com/Zephon-H/vue-ssm-traveller-manage</p>
<h2 id="使用mybatis时数据库中使用驼峰命名到java中的命名无法自动转换">1、使用mybatis时，数据库中使用驼峰命名，到java中的命名无法自动转换</h2>
<p>解决：</p>
<ol type="1">
<li><p>在spring配置文件中添加mybatis配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--	 配置mybatis配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置mybatis-config.xml中的驼峰命名转换</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="使用jackson解析时当请求中有日期时解析错误">2、使用jackson解析时，当请求中有日期时，解析错误</h2>
<p>解决：</p>
<p>直接将@RequestBody中的对象转为map再进行提取</p>
<h2 id="在使用pagehelper插件时parent的pom.xml中导入了包但还是报错classnotfoundexecption">3、在使用pagehelper插件时，parent的pom.xml中导入了包，但还是报错ClassNotFoundExecption</h2>
<p>解决：</p>
<p>在idea中，project structure-&gt;Artifacts-&gt;右侧的Available Elements中找到parent模块-&gt;右键-&gt;put into output root</p>
<h2 id="使用aop时aop不生效">4、使用AOP时，AOP不生效</h2>
<p>解决：</p>
<p>在applicationContext.xml添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.zephon.aop&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="文件上传时报错required-request-part-file-is-not-present">5、文件上传时报错Required request part 'file' is not present</h2>
<p>解决：</p>
<p>配置文件上传解析器</p>
<ol type="1">
<li><p>在pom.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在applicationContext.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传的解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置上传文件的大小，以字节为单位；-1代表没有限制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-JVM核心机制</title>
    <url>/2019/04/27/Java-JVM%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="jvm核心机制">JVM核心机制</h1>
<hr />
<h2 id="类加载的全过程">类加载的全过程</h2>
<h3 id="类加载机制">类加载机制</h3>
<p>JVM把class文件加载到内存，并对数据进行校验、解析和初始化，最终形成JVM可以直接使用的Java类型的过程</p>
<ul>
<li><p>加载</p>
<p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区中的运行时数据结构，在堆中生成一个代表这个类的java.lang.Class对象，作为方法区类数据的访问入口，这个过程需要类加载器参与。</p></li>
<li><p>链接</p>
<p>将Java类的二进制代码合并到JVM的运行状态之中的过程</p>
<ul>
<li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题</li>
<li>准备：正式为类变量(static变量)分配肉冻并设置类变量初始值的阶段，这些内存将在方法区中进行分配</li>
<li>解析：虚拟机常量池内的符号引用替换为直接引用的过程</li>
</ul></li>
<li><p>初始化</p>
<ul>
<li>初始化阶段是执行类构造器&lt; clinit &gt;()方法的过程。类构造器&lt; clinit &gt;()方法是由编译器自动收集类中的所有变量的赋值动作和静态语句块(static块)中的语句合并产生的。</li>
<li>当初始化一个类的时候，如果发现其还没有进行过初始化化，则需要先对其父类初始化</li>
<li>虚拟机会保证一个类的&lt; clinit &gt;()方法在多线程环境中被正确加锁和同步</li>
<li>当访问一个Java类的静态域时，只有真正声明这个域的类才会被初始化。</li>
</ul></li>
</ul>
<p>代码验证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(A.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">1</span>;<span class="comment">//静态变量，静态域</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态初始化类A&quot;</span>);</span><br><span class="line">        a=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建A类的对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<pre><code>执行结果：
静态初始化类A
创建A类的对象
2</code></pre>
</blockquote>
<figure>
<img src="/img/JVM01.png" alt="JVM01" /><figcaption>JVM01</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态初始化块t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法&quot;</span>);</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(A.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">A_Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态初始化类A&quot;</span>);</span><br><span class="line">        a=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建A类的对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A_Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态初始化A_Father&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A_Father</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建A_Father对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<pre><code>执行结果：
静态初始化块t
main方法
静态初始化A_Father
静态初始化类A
创建A_Father对象
创建A类的对象
2</code></pre>
</blockquote>
<h3 id="类的主动引用一定会发生类的初始化">类的主动引用(一定会发生类的初始化)</h3>
<ul>
<li><strong>new</strong> 一个类的对象</li>
<li>调用类的静态成员(<strong>除了final常量</strong>)和静态方法</li>
<li>使用java.lang.reflect包的方法对类进行<strong>反射</strong>调用</li>
<li>当虚拟机启动，java Hello，则一定会初始化Hello类。也就是先启动main方法所在的类</li>
<li>当初始化一个类时，如果其父类没有被初始化，则先会初始化他的父类</li>
</ul>
<h3 id="类的被动引用不会发生类的初始化">类的被动引用(不会发生类的初始化)</h3>
<ul>
<li><p>当访问一个静态域时，只有真正声明这个域的类才会被初始化</p>
<p>​ 通过子类引用父类的静态变量，不会导致子类初始化</p></li>
<li><p>通过<strong>数组</strong>定义类引用，不会触发此类的初始化</p></li>
<li><p>引用<strong>常量</strong>不会触发此类的初始化(常量在编译阶段就存入调用类的常量池中了)</p></li>
</ul>
<h2 id="深入类加载器">深入类加载器</h2>
<h3 id="类加载器原理">类加载器原理</h3>
<ul>
<li><p>类加载器的作用</p>
<p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区中的运行时数据结构，在堆中生成一个代表这个类折java.lang.Class对象，作为方法区类数据的访问入口</p></li>
<li><p>类缓存</p>
<p>标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载(缓存)一段时间。不过，JVM垃圾收集器可以回收这些Class对象。</p></li>
</ul>
<h3 id="java.class.classloader类介绍">java.class.ClassLoader类介绍</h3>
<p>作用：java.lang.ClassLoader类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义一个Java类，即java.lang.Class类的一个实例。除此之外，ClassLoader还负责加载Java应用所需的资源，如图像文件和配置文件等。</p>
<p>相关方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getParent()<span class="comment">//返回类加载器的父类加载器</span></span><br><span class="line">loadClass(String name) <span class="comment">//加载名称为name的类，返回的结果是java.lang.Class类的实例</span></span><br><span class="line">findClass(String name) <span class="comment">//查找名称为name的类，返回的结果是java.lang.Class类的实例</span></span><br><span class="line">findLoadedClass(String name) <span class="comment">//查找名称为name的已经被加载过的类，返回的结果是java.lang.Class类的实例</span></span><br><span class="line">defineClass(String name,<span class="keyword">byte</span>[] b,<span class="keyword">int</span> off,<span class="keyword">int</span> len) <span class="comment">//把字节数组b中的内容转换成Java类，返回结果是java.lang.Class类的实例。这个方法被声明为final</span></span><br><span class="line">resolveClass(Class&lt;?&gt; c) <span class="comment">//链接指定的Java类</span></span><br></pre></td></tr></table></figure>
<h3 id="类加载器树状结构双亲委托代理机制">类加载器树状结构、双亲委托(代理)机制</h3>
<h3 id="树状结构">树状结构</h3>
<ul>
<li><p>引导类加载器(用C语言写的)</p>
<p>它用来加载Java的核心库(JAVA_HOME/jre/lib/rt.jar，或sun.boot.class.path路径下的内容)，是用原生代码来实现的，并不继承自java.lang.ClassLoader</p></li>
<li><p>扩展类加载器(用Java写的)</p>
<p>用来加载Java的扩展库(JAVA_HOME/jre/ext/*.jar，或java.ext.dirs路径下的内容)。Java虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载Java类</p></li>
<li><p>应用程序类加载器(用Java写的)</p>
<p>它根据Java应用的类路径(classpath，java.class.path路径)</p>
<p>一般来说，Java应用的类都是由它来完成加载的</p></li>
<li><p>自定义类加载器(用Java写的)</p>
<p>开发人员可以通过继承java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求</p></li>
</ul>
<figure>
<img src="/img/JVM02.png" alt="JVM02" /><figcaption>JVM02</figcaption>
</figure>
<h3 id="代理模式">代理模式</h3>
<ul>
<li><p>代理模式：</p>
<p>交给其它加载器来加载指定的类</p></li>
<li><p>双亲委托机制：</p>
<p>就是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次追溯，直到最高的爷爷辈的，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。</p>
<p>双亲委托机制是为了保证Java核心库的类型安全(这种机制就保证不会出现用户自己能定义java.lang.Object类的情况)</p>
<p>类加载器除了用于加载类，也是安全的最基本的屏障</p></li>
<li><p>双亲委托机制是代理模式的一种</p>
<p>并不是所有的类加载器都采用双亲委托机制</p>
<p>tomcat服务器类加载器也使用代理模式，所不同的是它是首先尝试去加载某个类，如果找不到再代理给父类加载器。这与一般类加载器的顺序是相反的。</p></li>
</ul>
<h3 id="自定义类加载器文件网络加密">自定义类加载器(文件、网络、加密)</h3>
<ul>
<li><p>自定义类加载器的流程：</p>
<p>首先检查请求的类型是否已经被这个类装载器装载到命名空间中了，如果已经装载，直接返回；</p>
<p>委派类加载请求给父类加载器，如果父类加载器能够完成，则返回父类加载器加载的Class实例；</p>
<p>调用本类加载器的findClass()方法，试图获取对应的字节码，如果获取到，则调用defineClass()导入类型到方法区；如果获取不到对应的字节码或者其它原因失败，返回异常给loadClass()，loadClass()转抛异常，终止加载过程</p>
<blockquote>
<p>注意：被两个类加载器加载的同一个类，JVM不认为是相同的类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件类加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//com.zephon.test.User</span></span><br><span class="line">    <span class="keyword">private</span> String rootDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemClassLoader</span><span class="params">(String rootDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootDir = rootDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="comment">//先查询有没有加载过这个类，如果已经加载，则直接返回加载好的类。如果没有，则加载新的类</span></span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ClassLoader parent = <span class="keyword">this</span>.getParent();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                c = parent.loadClass(name); <span class="comment">//委派给父类加载</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">               <span class="comment">// e.printStackTrace();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] classData = getClassData(name);</span><br><span class="line">                <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassData(String classname) &#123;</span><br><span class="line">        String path = rootDir + <span class="string">&quot;/&quot;</span> + classname.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((temp = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        baos.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123; </span><br><span class="line">        FileSystemClassLoader l = <span class="keyword">new</span> FileSystemClassLoader(<span class="string">&quot;./temp&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; c = l.loadClass(<span class="string">&quot;temp.com.Hello&quot;</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网络类加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String rootUrl;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetClassLoader</span><span class="params">(String rootUrl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootUrl = rootUrl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="comment">//先查询有没有加载过这个类，如果已经加载，则直接返回加载好的类。如果没有，则加载新的类</span></span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ClassLoader parent = <span class="keyword">this</span>.getParent();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                c = parent.loadClass(name); <span class="comment">//委派给父类加载</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">// e.printStackTrace();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] classData = getClassData(name);</span><br><span class="line">                <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassData(String classname) &#123;</span><br><span class="line">        String path = rootUrl + <span class="string">&quot;/&quot;</span> + classname.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">            is = url.openStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((temp = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        baos.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncrptUtil</span> </span>&#123;</span><br><span class="line">	<span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        encrpt(<span class="string">&quot;./temp/temp/com/Hello.class&quot;</span>,<span class="string">&quot;./temp/temp/com/a.class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encrpt</span><span class="params">(String src,String dest)</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(dest);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> temp = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>((temp=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(temp^<span class="number">0xff</span>);<span class="comment">//取反操作</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(fis!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                        fis.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        fos.close();</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载文件系统中加密后的class字节码的类加载器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecrptClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String rootDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecrptClassLoader</span><span class="params">(String rootDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootDir = rootDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="comment">//先查询有没有加载过这个类，如果已经加载，则直接返回加载好的类。如果没有，则加载新的类</span></span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ClassLoader parent = <span class="keyword">this</span>.getParent();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                c = parent.loadClass(name); <span class="comment">//委派给父类加载</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">// e.printStackTrace();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] classData = getClassData(name);</span><br><span class="line">                <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassData(String classname) &#123;</span><br><span class="line">        String path = rootDir + <span class="string">&quot;/&quot;</span> + classname.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            <span class="comment">//解密</span></span><br><span class="line">            <span class="keyword">int</span> temp = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((temp = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(temp ^ <span class="number">0xff</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        baos.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="线程上下文类加载器">线程上下文类加载器</h3>
<figure>
<img src="/img/JVM03.png" alt="JVM03" /><figcaption>JVM03</figcaption>
</figure>
<h3 id="服务器类加载原理和osgi介绍">服务器类加载原理和OSGI介绍</h3>
<figure>
<img src="/img/JVM04.png" alt="JVM04" /><figcaption>JVM04</figcaption>
</figure>
<figure>
<img src="/img/JVM05.png" alt="JVM05" /><figcaption>JVM05</figcaption>
</figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate</title>
    <url>/2019/05/12/JavaWeb-Hibernate/</url>
    <content><![CDATA[<h1 id="hibernate">Hibernate</h1>
<h2 id="hibernate概述">Hibernate概述</h2>
<ol type="1">
<li>Hibernate框架应用在javaEE三层结构中的dao层框架</li>
<li>在dao层里面做对数据库crud(增上改查)操作，使用Hibernate实现crud操作，Hibernate底层代码就是jdbc，Hibernate对jdbc进行封装，使用Hibernate可以不用写复杂的jdbc代码，不需要写sql语句实现</li>
<li>Hibernate是开源的轻量级的框架</li>
</ol>
<h2 id="orm思想">ORM思想</h2>
<h3 id="什么是orm">什么是ORM</h3>
<p>object relational mapping：对象关系映射</p>
<ol type="1">
<li><p>让实体类和数据库表进行一一对应关系</p>
<p>让实体类首先和数据库表对应</p>
<p>让实体类属性和表里面字段对应</p></li>
<li><p>不需要直接操作数据库表，而操作表对应实体类对象</p></li>
</ol>
<h2 id="hibernate入门">Hibernate入门</h2>
<ol type="1">
<li><p>搭建Hibernate环境</p>
<p>导入jar包(包括本身的lib中的required和jpa以及mysql驱动jar包和log4j日志jar包)</p></li>
<li><p>创建实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//hibernate要求实体类中有一个属性唯一</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置实体类和数据库表一对关系(映射关系)</p>
<ol type="1">
<li><p>创建xml格式的配置文件(位置没有固定文件，但建议在实体类所在包中，名称为实体类名.hbm.xml)</p></li>
<li><p>配置xml格式，在配置文件中首先引入xml约束，hibernate里面引入的是dtd约束</p></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>配置映射关系</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User.hbm.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.配置类和表对应</span></span><br><span class="line"><span class="comment">        class标签</span></span><br><span class="line"><span class="comment">        name属性：实体类全路径</span></span><br><span class="line"><span class="comment">        table属性：数据库表名称</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.zephon.entity.User&quot;</span> <span class="attr">table</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.配置实体类id和表id对应</span></span><br><span class="line"><span class="comment">            hibernate要求实体类有一个属性唯一值</span></span><br><span class="line"><span class="comment">            hibernate要求表有字段作为唯一值</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id标签</span></span><br><span class="line"><span class="comment">            name属性：实体类里面id属性名称</span></span><br><span class="line"><span class="comment">            column属性：生成的表字段名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置数据库中增长策略</span></span><br><span class="line"><span class="comment">                native:生成表id值就是主键自动增长</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置其它属性和表字段对应</span></span><br><span class="line"><span class="comment">            name属性：实体类属性名称</span></span><br><span class="line"><span class="comment">            column属性：生成表字段名称</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>创建hibernate的核心配置文件(必须在src下，名称必须是hibernate.cfg.xml)</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hibernate.cfg.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库信息 必须--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql:///JavaMysql0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置hibernate信息 可选--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出底层sql语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输出底层sql语句格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否需要hibernate帮忙创建表</span></span><br><span class="line"><span class="comment">            update：如果已经有表，更新，没有则创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库方言</span></span><br><span class="line"><span class="comment">            如：在mysql中实现分页，关键字是limit，只能在mysql中用</span></span><br><span class="line"><span class="comment">                而在oracle，实现分页用rownum</span></span><br><span class="line"><span class="comment">             该配置就是让hibernate识别不同数据库特有的语句</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySQL5.0之后，type=... 不再有效,所以修改方言中MySQLInnoDBDialect为MySQL5InnoDBDialect --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQL5InnoDBDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 把映射文件放到核心配置文件中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/zephon/entity/User.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li>测试-实现添加操作</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHibernate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 加载hibernate核心配置文件</span></span><br><span class="line">        <span class="comment">//在src下找到名称是hibernate.cfg.xml的文件</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">        cfg.configure();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建SessionFactory对象</span></span><br><span class="line">        <span class="comment">//读取hibernate核心配置文件内容，创建sessionFactory</span></span><br><span class="line">        <span class="comment">//在此过程中，根据映射关系，在数据库中把表创建</span></span><br><span class="line">        SessionFactory sessionFactory = cfg.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 使用SessionFactory创建session对象</span></span><br><span class="line">        <span class="comment">// 类似于jdbc中的连接</span></span><br><span class="line">        Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 开启事务</span></span><br><span class="line">        Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 写具体逻辑crud操作</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUname(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        user.setPwd(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="comment">//调用session的方法实现添加</span></span><br><span class="line">        session.save(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7. 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="hibernate-核心api">Hibernate 核心api</h2>
<h3 id="configuration">Configuration</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">cfg.configure();</span><br></pre></td></tr></table></figure>
<p>到src下找到名称hibernage.cfg.xml配置文件，创建对象，将配置文件放到对象中，即加载核心配置文件</p>
<h3 id="sessionfactory重点">SessionFactory(重点)</h3>
<ol type="1">
<li><p>使用configuration对象创建sessionFactory对象</p>
<p>1）创建sessionFactory过程中做的事：</p>
<p>根据核心配置文件中，数据库配置，映射文件部分，到数据库里根据映射关系创建表(前提是在配置文件中配置了需要创建表)</p></li>
<li><p>创建sessionFactory过程中，该过程特别耗资源，</p>
<p>解决：在hibernate操作中，建议每个项目一般创建一个sessionFactory对象</p>
<p>具体实现：写一个工具类，用静态代码块实现，静态代码块在类加载时执行，执行一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration cfg = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//加载核心配置文件</span></span><br><span class="line">        cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">        cfg.configure();</span><br><span class="line">        sessionFactory = cfg.buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="session重点">Session(重点)</h3>
<ol type="1">
<li><p>session类似于jdbc中connection</p></li>
<li><p>调用session里面不同的方法实现crud操作</p>
<p>1）添加 save</p>
<p>2）修改 update</p>
<p>3）删除 delete</p>
<p>4）根据id查询 get</p></li>
<li><p>session对象是单线程对象(不能共用，只能自己用)</p></li>
</ol>
<h3 id="transaction">Transaction</h3>
<ol type="1">
<li><p>事务对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4. 开启事务</span></span><br><span class="line">       Transaction tx = session.beginTransaction();</span><br></pre></td></tr></table></figure></li>
<li><p>事务的提交和回滚</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tx.commit();<span class="comment">//提交</span></span><br><span class="line">tx.rollback();<span class="comment">//回滚</span></span><br></pre></td></tr></table></figure></li>
<li><p>事务</p>
<p>1）四个特性</p>
<p>原子性、一致性、隔离性、持久性</p></li>
</ol>
<h2 id="实体类编写规则">实体类编写规则</h2>
<ol type="1">
<li><p>实体类里面的属性是私有的</p></li>
<li><p>私有属性使用对应公开的set、get方法</p></li>
<li><p>要求有一个属性作为唯一值(一般用id值)</p></li>
<li><p>属性建议不使用基本数据类型，使用基本数据类型对应的包装类</p>
<p>1）八个基本数据类型对应的包装类</p>
<p>​ int-Interger</p>
<p>​ char-Character</p>
<p>​ 其它的都是首字母大写 如：double-Double</p>
<p>2）使用包装类的原因：</p>
<p>​ 如：表示学生的分数，若int score;</p>
<p>​ 学生得0分：int score=0;</p>
<p>​ 学生没有参加考试，int score=0;不能准确表示</p>
<p>如果用包装类：Interger score = 0;得0分</p>
<p>Interger score=null; 没有参加考试</p></li>
</ol>
<h2 id="hibernate主键生成策略">Hibernate主键生成策略</h2>
<ol type="1">
<li><p>hibernate要求实体类里面有一个属性作为唯一值，对应表主键，主键可以不同生成策略</p></li>
<li><p>hibernate主键生成策略有很多的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置数据库中增长策略</span></span><br><span class="line"><span class="comment">               native:生成表id值就是主键自动增长</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在class属性中的值</p>
<p><img src="/img/hibernate01.png" /></p></li>
<li><p>演示使用uuid</p>
<ol type="1">
<li>使用uuid生成策略，实体类id属性类型必须改成字符串类型</li>
<li>配置部分改成uuid</li>
</ol></li>
</ol>
<h2 id="实体类操作">实体类操作</h2>
<h3 id="添加">添加</h3>
<p>使用session.save方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">   user.setUname(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">   user.setPwd(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">   <span class="comment">//调用session的方法实现添加</span></span><br><span class="line">   session.save(user);</span><br></pre></td></tr></table></figure>
<h3 id="根据id查询">根据id查询</h3>
<p>调用session.get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数：实体类的class，第二个参数：id值</span></span><br><span class="line">User user =  session.get(User.class,<span class="number">2</span>);</span><br><span class="line">System.out.println(user.getUid()+<span class="string">&quot;-&quot;</span>+user.getUname()+<span class="string">&quot;-&quot;</span>+user.getPwd());</span><br></pre></td></tr></table></figure>
<h3 id="修改">修改</h3>
<p>首先查询(根据id查询)，再修改值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改uid=2记录的uname值</span></span><br><span class="line"><span class="comment">//1. 根据id查询</span></span><br><span class="line">User user = session.get(User.class, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//2. 向返回user对象里面设置修改之后的值</span></span><br><span class="line">user.setUname(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line"><span class="comment">//3. 调用session的方法update修改</span></span><br><span class="line"><span class="comment">//执行过程：到user对象里面找到uid值，根据uid进行修改</span></span><br><span class="line">session.update(user);</span><br></pre></td></tr></table></figure>
<h3 id="删除">删除</h3>
<p>调用session.delete方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line">      <span class="comment">//方式一 根据id查询对象(常用)</span></span><br><span class="line">      User user = session.get(User.class, <span class="number">2</span>);</span><br><span class="line">      session.delete(user);</span><br><span class="line">      <span class="comment">//方式二</span></span><br><span class="line">      User u = <span class="keyword">new</span> User();</span><br><span class="line">      u.setUid(<span class="number">2</span>);</span><br><span class="line">      session.delete(u);</span><br></pre></td></tr></table></figure>
<h3 id="saveorupdate方法">saveOrUpdate方法</h3>
<p>实体类对象状态是瞬时态时，做添加操作</p>
<p>实体类对象状态是托管态时，做更新操作</p>
<p>实体类对象状态是持久态时，做更新操作</p>
<h2 id="实体类对象状态概念">实体类对象状态(概念)</h2>
<ol type="1">
<li><p>瞬时态</p>
<p>对象中没有id值，对象与session没有关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User u = <span class="keyword">new</span> User();</span><br><span class="line">u.setUname(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">u.setPwd(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>持久态</p>
<p>对象中有id值，与session有关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = session.get(User.class,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>托管态</p>
<p>对象中有id值，与session没有关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUid(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="hibernate的一级缓存">Hibernate的一级缓存</h2>
<h3 id="什么是缓存">什么是缓存</h3>
<ol type="1">
<li><p>数据存放到数据库里面，数据库本身是文件系统，使用流方式操作文件效率不是很高</p>
<p>1）把数据存到内存里面，不需要使用流方式，可以直接读内存中的数据</p>
<p>2）把数据存到内存中，提高读取效率</p></li>
</ol>
<h3 id="hibernate缓存">Hibernate缓存</h3>
<ol type="1">
<li><p>hibernate框架中提供很多优化方式，hibernate的缓存就是一个优化方式</p></li>
<li><p>hibernate缓存特点：</p>
<p>第一类：hibernate的一级缓存</p>
<p>1）hibernate的一级缓存默认是打开的</p>
<p>2）hibernate的一级缓存使用范围，是session的范围，从session创建到session关闭</p>
<p>3）hibernate的一级缓存中，存储数据必须是持久态数据</p>
<p>第二类：hibernate的二级缓存</p>
<p>1）目前已经不使用了，替代技术redis</p>
<p>2）二级缓存默认不是打开的，需要配置</p>
<p>3）二级缓存使用范围，是sessionFactory范围</p></li>
</ol>
<h3 id="验证一级缓存的存在">验证一级缓存的存在</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCasch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SessionFactory sessionFactory = HibernateUtils.getSessionFactory();</span><br><span class="line">        Session session = sessionFactory.openSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1根据uid=2查询</span></span><br><span class="line">        <span class="comment">//执行第一次get方法，查看是否查询数据库，是否发送sql语句</span></span><br><span class="line">        User user = session.get(User.class, <span class="number">2</span>);</span><br><span class="line">        System.out.println(user.getUname());</span><br><span class="line">        <span class="comment">//2再根据uid=2查询</span></span><br><span class="line">        <span class="comment">//执行第二次get方法，查看是否查询数据库，是否发送sql语句</span></span><br><span class="line">        User user1 = session.get(User.class, <span class="number">2</span>);</span><br><span class="line">        System.out.println(user1.getUname());</span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hibernate一级缓存特性">Hibernate一级缓存特性</h3>
<ol type="1">
<li><p>持久态自动更新数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCasch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SessionFactory sessionFactory = HibernateUtils.getSessionFactory();</span><br><span class="line">        Session session = sessionFactory.openSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.根据id查询</span></span><br><span class="line">        User user = session.get(User.class,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2.设置返回对象值</span></span><br><span class="line">        user.setUname(<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//3.调用方法实现</span></span><br><span class="line">        <span class="comment">//session.update(user); //注释了仍然可以更新</span></span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>执行过程(了解)</p>
<p>1）第一步查询时会把返回的user持久态对象放到一级缓存和缓存对应的快照区中</p>
<p>2）第二步设置对象值时会修改user对象里面的值，同时修改一级缓存内容，但不会修改一级缓存对应的快照区中内容</p>
<p>3）最后提交事务时，会比较一级缓存的内容和对应的快照区内容是否相同，若不同，则需要把一级缓存内容更新到数据库中</p></li>
</ol>
<h2 id="hibernate事务代码规范写法">Hibernate事务代码规范写法</h2>
<p>1.代码结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	开启事务</span><br><span class="line">	提交事务</span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">	回滚事务</span><br><span class="line">&#125;<span class="keyword">finally</span>()&#123;</span><br><span class="line">	关闭</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SessionFactory sessionFactory =<span class="keyword">null</span>;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction transaction = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            sessionFactory = HibernateUtils.getSessionFactory();</span><br><span class="line">            session = sessionFactory.openSession();</span><br><span class="line">            transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加</span></span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUname(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">            user.setPwd(<span class="string">&quot;153&quot;</span>);</span><br><span class="line">            session.save(user);</span><br><span class="line"></span><br><span class="line">            transaction.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            sessionFactory.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="hibernate绑定session">Hibernate绑定session</h2>
<ol type="1">
<li><p>session类似于jdbc中的connection</p></li>
<li><p>Hibernate已经帮实现与本地线程绑定session</p></li>
<li><p>获取与本地线程绑定的session</p>
<p>1）在hibernate核心配置文件中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在hibernate核心配置文件中配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.current_session_context_class&quot;</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2）调用sessionFactory中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提供返回与本地线程绑定的session的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSessionObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sessionFactory.getCurrentSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="hibernate的api使用">Hibernate的api使用</h2>
<h3 id="query对象">Query对象</h3>
<ol type="1">
<li><p>使用query对象，不需要写sql语句，但要写hql语句</p>
<p>1）hql：hibernate query language，hibernate提供的查询语言，和普通sql语句相似</p>
<p>2）hql和sql区别：</p>
<p>​ 使用sql操作表和表字段，而使用hql操作实体类和属性</p></li>
<li><p>查询所有记录的hql语句</p>
<p>from 实体类名</p></li>
<li><p>Query对象使用</p>
<p>1）创建Query对象</p>
<p>2）调用Query对象里面的方法得到结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SessionFactory sessionFactory =<span class="keyword">null</span>;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction transaction = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            sessionFactory = HibernateUtils.getSessionFactory();</span><br><span class="line"><span class="comment">//            session = sessionFactory.openSession();</span></span><br><span class="line">            session = HibernateUtils.getSessionObject();</span><br><span class="line">            transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            Query query = session.createQuery(<span class="string">&quot;from User&quot;</span>);</span><br><span class="line">            List&lt;User&gt; list = query.list();</span><br><span class="line">            <span class="keyword">for</span>(User u:list)&#123;</span><br><span class="line">                System.out.println(u);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            transaction.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            sessionFactory.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="criteria对象">Criteria对象</h3>
<ol type="1">
<li><p>使用这个对象查询时，不需要写语句，直接调用方法实现</p></li>
<li><p>实现过程</p>
<p>1）创建Criteria对象</p>
<p>2）调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCriteria</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SessionFactory sessionFactory =<span class="keyword">null</span>;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction transaction = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            sessionFactory = HibernateUtils.getSessionFactory();</span><br><span class="line"><span class="comment">//            session = sessionFactory.openSession();</span></span><br><span class="line">            session = HibernateUtils.getSessionObject();</span><br><span class="line">            transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            Criteria criteria = session.createCriteria(User.class);</span><br><span class="line">            List&lt;User&gt; list = criteria.list();</span><br><span class="line">            <span class="keyword">for</span>(User u:list)&#123;</span><br><span class="line">                System.out.println(u);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            transaction.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            sessionFactory.close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="sqlquery对象">SQLQuery对象</h3>
<ol type="1">
<li><p>使用该对象，调用底层sql实现</p></li>
<li><p>实现过程</p>
<p>1）创建对象</p>
<p>2）调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSQL</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SessionFactory sessionFactory =<span class="keyword">null</span>;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction transaction = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            sessionFactory = HibernateUtils.getSessionFactory();</span><br><span class="line"><span class="comment">//            session = sessionFactory.openSession();</span></span><br><span class="line">            session = HibernateUtils.getSessionObject();</span><br><span class="line">            transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            NativeQuery sqlQuery = session.createSQLQuery(<span class="string">&quot;select * from ta_user&quot;</span>);</span><br><span class="line">            <span class="comment">//默认返回数组形式</span></span><br><span class="line"><span class="comment">//            List&lt;Object[]&gt; list = sqlQuery.list();</span></span><br><span class="line"><span class="comment">//            for(Object[] object:list)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(object));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//设置返回对象形式</span></span><br><span class="line">            sqlQuery.addEntity(User.class);</span><br><span class="line">            List&lt;User&gt; list = sqlQuery.list();</span><br><span class="line">            <span class="keyword">for</span>(User u:list)&#123;</span><br><span class="line">                System.out.println(u);</span><br><span class="line">            &#125;</span><br><span class="line">            transaction.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            sessionFactory.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="待学">待学</h2>
<p>表与表之间的关系(一对多操作、多对多操作 )、hql、QBC等。。。。待学</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2019/05/15/JavaWeb-MyBatis/</url>
    <content><![CDATA[<h1 id="mybatis">MyBatis</h1>
<h2 id="javaee命名规范">JavaEE命名规范</h2>
<ol type="1">
<li>项目名：没有要求，尽量不用中文</li>
<li>包：公司域名倒写com.zephon</li>
<li>持久层：dao，persist，<strong>mapper</strong></li>
<li>实体：entity，model，bean，javabean，<strong>pojo</strong></li>
<li>业务逻辑：<strong>service</strong>，biz</li>
<li>控制器：controller，<strong>servlet</strong>，action，web</li>
<li>过滤器：filter</li>
<li>异常：exception</li>
<li>监听器：listener</li>
<li>注释：
<ul>
<li>类上和方法上使用文档注释/** */</li>
<li>在方法里面使用/* */或//</li>
<li>类：使用大驼峰(首字母大写，后面每个单词首字母大写)</li>
<li>方法，属性：小驼峰(首字母小写，后面每个单词首字母大写)</li>
</ul></li>
</ol>
<h2 id="框架介绍">框架介绍</h2>
<h3 id="框架是什么">框架是什么</h3>
<p>框架：软件的半成品，为解决问题制定的一套约束，在提供功能基础上进行扩充</p>
<p>框架中一些不能被封装的代码(变量)，需要使用框架者自己新建一个xml文件，在文件中添加变量内容，因此，几乎所有框架，都需要建立特定位置和特定名称的配置文件，这使用的就是xml解析技术和反射技术。</p>
<p>常用概念：</p>
<p>类库：提供的类没有封装一定的逻辑，就像写作文时用的名言警句</p>
<p>框架：有一些约束，就像是模板，只用填空就可以写作文</p>
<p>二者表现形式都是引入jar包</p>
<h2 id="mybatis简介">MyBatis简介</h2>
<ol type="1">
<li>Mybatis，开源免费框架，原名叫iBatis</li>
<li>作用：数据访问层框架，底层是对JDBC的封装</li>
<li>优点之一是：使用MyBatis时不需要编写实现类，只需要写需要执行的sql命令</li>
</ol>
<h2 id="mybatis使用">MyBatis使用</h2>
<ol type="1">
<li>导入jar包</li>
<li>在src下新建全局配置文件，没有名称和地址要求</li>
<li>在全局配置文件中引入DTD或schema</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- default引用environment的id，当前所使用的环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明可以使用的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 事务管理 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用原生JDBC事务 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///JavaMysql0&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zephon/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li><p>新建包com.zephon.mapper，在里面新建xml文件，名字建议为实体类Mapper.xml</p>
<p>文件作用：编写需要执行的SQL命令，可以将xml文件理解成实现类(dao层)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace:实现类的全路径(包名+类名) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zephon.mapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id：方法名</span></span><br><span class="line"><span class="comment">         parameterType：参数类型</span></span><br><span class="line"><span class="comment">         resultType：返回值类型</span></span><br><span class="line"><span class="comment">         如果方法返回值是list，则需要在resultType中写List泛型，因为mybatis是对jdbc封装，是一行一行读取数据</span></span><br><span class="line"><span class="comment">         如果加了parameterType=“”，“”中没内容就会报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selAll&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;com.zephon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from ta_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用工厂设计模式</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="comment">//生产SqlSession</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">&quot;com.zephon.mapper.selAll&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(User u:list)&#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="环境搭建详解">环境搭建详解</h2>
<ol type="1">
<li>&lt; transactionManager /&gt;type属性可取值
<ul>
<li>JDBC，事务管理使用JDBC原生事务管理方式</li>
<li>MANAGED，将事务管理转交给其它窗口，相当于原生JDBC事务setAutoMapping(false);</li>
</ul></li>
<li>&lt; dataSource /&gt; type属性值
<ul>
<li>POOLED 使用数据库连接池</li>
<li>UNPOOLED 不使用数据库连接池，和直接使用JDBC一样</li>
<li>JNDI Java命名目录接口技术</li>
</ul></li>
</ol>
<h2 id="数据库连接池">数据库连接池</h2>
<ol type="1">
<li><p>在内存中开辟一块空间，存放多个数据库连接对象</p></li>
<li><p>JDBC Tomcat Pool，直接由Tomcat产生数据库连接池</p></li>
<li><p>状态</p>
<p>active :当前连接对象被应用程序使用中</p>
<p>Idle：空闲状态；等待应用程序使用</p></li>
<li><p>使用数据库连接池的目的：在高频率访问数据库时，使用数据库连接池可以降低服务器系统压力，提升程序运行效率</p>
<blockquote>
<p>小型项目不适用数据库连接池</p>
</blockquote></li>
<li><p>实现JDBC tomcat Pool的步骤</p>
<ol type="1">
<li><p>在web项目的META-INF中存放context.xml，写数据库连接池相关属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Resource</span></span></span><br><span class="line"><span class="tag">       		  <span class="attr">driverClassName</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">        	  <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/Mysql&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">username</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">password</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxActive</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxIdle</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">&quot;test&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxWait</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;javax.sql.DataSource&quot;</span></span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>把项目发布到tomcat中，数据库连接池就产生了</p></li>
</ol></li>
<li><p>可以在java中使用jndi获取数据库连接池中的对象</p>
<ul>
<li><p>Context：上下文接口，context.xml文件对象类型</p></li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Context cxt = <span class="keyword">new</span> InitialContext();</span><br><span class="line">DataSource ds = cxt.lookup(<span class="string">&quot;java:com/env/test&quot;</span>);</span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure></li>
<li><p>当关闭连接对象时，是将连接对象归还给数据库连接池，并将状态改为Idle，而非真正关闭</p></li>
</ul></li>
</ol>
<h2 id="三种查询方式">三种查询方式</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selAll&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;com.zephon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zephon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user where uid=1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol type="1">
<li><p>selectList() 返回值为List&lt; resultType属性控制 &gt;</p>
<blockquote>
<p>适用于查询结果都需要遍历的需求</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; list = sqlSession.selectList(<span class="string">&quot;com.zephon.mapper.selAll&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(User u:list)&#123;</span><br><span class="line">    System.out.println(u.getUid()+u.getUname()+u.getPwd());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>selectOne()返回Object</p>
<blockquote>
<p>适用于返回结果只是变量或一行数据时</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user=sqlSession.selectOne(<span class="string">&quot;com.zephon.mapper.selById&quot;</span>);</span><br><span class="line">        System.out.println(user.getUname());</span><br></pre></td></tr></table></figure></li>
<li><p>selectMap()返回Map</p>
<blockquote>
<p>适用于需要在查询结果中快速通过某列的值取到这行数据的需求</p>
<p>Map&lt;key,resultType控制&gt;</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Object, Object&gt; map = sqlSession.selectMap(<span class="string">&quot;com.zephon.mapper.selById&quot;</span>, <span class="string">&quot;uname&quot;</span>);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="log4j">Log4J</h2>
<ol type="1">
<li><p>由apache推出的开源免费日志处理的类库</p></li>
<li><p>为什么需要日志</p>
<ol type="1">
<li>在项目中编写System.out.prinln();输出到控制台，当项目发布到tomcat后，没有控制台(在命令行能看见)，不容易观察一些输出结果</li>
<li>log4J作用：不仅能把内容输出到控制台，不能把内容输出到文件中，便于观察结果</li>
</ol></li>
<li><p>使用步骤</p>
<ol type="1">
<li>导入jar包</li>
<li>在src下新建log4j.properties(路径和名称固定)</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 设置###</span></span><br><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">DEBUG,CONSOLE,LOGFILE</span></span><br><span class="line"><span class="comment">#log4j.rootLogger = DEBUG,CONSOLE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出信息到控制抬 ###</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出信息到文件  ###</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE</span> = <span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.File</span> = <span class="string">/home/zephon/JetB rains/logs/my.log</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.Append</span>=<span class="string">true;</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = Logger.getLogger(TestLog4j.class);</span><br><span class="line">logger.debug(<span class="string">&quot;testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>log4j输出级别</p>
<p>fatal(致命错误)&gt;error(错误)&gt;warm(警告)&gt;info(普通信息)&gt;debug(调试信息)</p></li>
<li><p>pattern中常用表达式</p>
<p>%C：包名+类名</p>
<p>%d{YYYY-MM-dd HH:mm:ss}：时间</p>
<p>%L：行号</p>
<p>%m：信息</p>
<p>%n：换行</p></li>
</ol>
<h2 id="settings-标签">&lt; settings &gt;标签</h2>
<ol type="1">
<li><p>在mybatis全局配置文件中通过&lt; settings &gt;标签控制mybatis全局开关</p></li>
<li><p>在mybatis-config.xml中开启log4j</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>log4j中可以输出指定内容的日志(控制指定内容)</p>
<ol type="1">
<li>命名空间级别(包级别)&lt; mapper &gt;namespace属性中除了最后一个类名，需要在log4j.propeties中先在总体级别调成Error，然后log4j.logger.com.a.b=debug</li>
<li>类级别</li>
<li>方法级别</li>
</ol></li>
</ol>
<h2 id="parametertype属性">parameterType属性</h2>
<ol type="1">
<li><p>在xxxMapper.xml中&lt; select &gt;&lt; delete &gt;等标签的parameterType可以控制参数类型</p></li>
<li><p>在SqlSession的selectXxx()中第二个参数传递中传递参数以实现查询特定数据</p></li>
<li><p>在Mapper.xml中可以通过#{}获取参数</p>
<ol type="1">
<li>使用索引，从arg0开始，#{arg0}表示第一个参数</li>
<li>使用#{param1}表示第一个参数</li>
<li>如果只有一个参数(基本类型或String)，mybatis对#{}里面的内容没有要求只要写内容即可</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zephon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user where uid=#&#123;0&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user=sqlSession.selectOne(<span class="string">&quot;com.zephon.dao.selById&quot;</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(user.getUname());</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>如果参数是对象，使用#{属性名}</li>
<li>如果参数是map，写成#{key}</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zephon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user where uid=#&#123;uid&#125; and uname=#&#123;uname&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">//传递多个参数</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;uid&quot;</span>,<span class="number">3</span>);</span><br><span class="line">map.put(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">User user=sqlSession.selectOne(<span class="string">&quot;com.zephon.dao.selById&quot;</span>,map);</span><br><span class="line">System.out.println(user.getUname());</span><br></pre></td></tr></table></figure></li>
<li><p>#{}或${}区别</p>
<ol type="1">
<li>#{}获取参数的内容支持索引获取，param1获取指定位置参数，并在SQL语句中使用？占位符</li>
<li><span class="math inline">\({}字符串拼接，不使用？，默认找\)</span>{内容}内容的get/set方法，如果写数字，就是一个数字</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zephon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user where uid=$&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User u = <span class="keyword">new</span> User();</span><br><span class="line">u.setUid(<span class="number">2</span>);</span><br><span class="line">User user=sqlSession.selectOne(<span class="string">&quot;com.zephon.dao.selById&quot;</span>,u);</span><br><span class="line">System.out.println(user.getUname());</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="使用mybatis实现mysql分页">使用mybatis实现mysql分页</h2>
<blockquote>
<p>注：?不允许在关键字前后进行数学运算，所以需要在代码中计算完成再传入mapper.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selPage&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zephon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user limit #&#123;pageStart&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="comment">//分页</span></span><br><span class="line"><span class="comment">//页大小</span></span><br><span class="line">      <span class="keyword">int</span> pageSize=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//页码</span></span><br><span class="line">      <span class="keyword">int</span> pageNumber=<span class="number">2</span>;</span><br><span class="line">      Map&lt;String,Object&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      m.put(<span class="string">&quot;pageSize&quot;</span>,pageSize);</span><br><span class="line">      m.put(<span class="string">&quot;pageStart&quot;</span>,pageSize*(pageNumber-<span class="number">1</span>));</span><br><span class="line">      List&lt;User&gt; ul = sqlSession.selectList(<span class="string">&quot;com.zephon.dao.selPage&quot;</span>,m);</span><br><span class="line">      System.out.println(ul);</span><br></pre></td></tr></table></figure>
<h2 id="别名">别名</h2>
<ol type="1">
<li><p>系统内置别名：把类型全小写(Map-&gt;map,List-&gt;list,Integer-&gt;int)</p></li>
<li><p>给某个类起别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.zephon.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;U&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selAll&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;U&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>直接给某个包下所有类起别名，别名为类名</p></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zephon.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selAll&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="mybatis实现新增">MyBatis实现新增</h2>
<ol type="1">
<li><p>概念</p>
<ol type="1">
<li>功能：从应用程序角度出发，软件具有哪些功能</li>
<li>业务：完成功能时的逻辑</li>
<li>事务：从数据库角度出发，完成业务时需要执行的SQL集合，统称一个事务
<ul>
<li>事务回滚：如果在一个事务中某个SQL执行失败，希望回归到事务的原点，保证数据库数据的完整性</li>
</ul></li>
</ol></li>
<li><p>在mybatis中默认是关闭了JDBC的自动提交功能的</p>
<ol type="1">
<li>每一个SqlSession默认都是不自动提交事务</li>
<li>session.commit()提交事务</li>
<li>openSession(true);设置自动提交setAutoCommit(true);</li>
</ol></li>
<li><p>mybatis底层是对JDBC的封装</p>
<ol type="1">
<li>JDBC中executeUpdate()执行新增，删除，修改的SQL返回值int类型，表示受影响的行数</li>
<li>mybatis中&lt; insert &gt;&lt; delete &gt; &lt; update &gt;标签没有resultType属性，默认返回值为int类型</li>
</ol></li>
<li><p>在openSession()时，mybatis会创建SqlSession时同时创建一个Transation对象 ，同时autoCommit都为false]</p>
<ul>
<li>如果出现异常，应该用session.rollback()回滚</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用工厂设计模式</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="comment">//生产SqlSession</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setUname(<span class="string">&quot;新增&quot;</span>);</span><br><span class="line">        u.setPwd(<span class="string">&quot;zdf&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> index = sqlSession.insert(<span class="string">&quot;insUser&quot;</span>,u);</span><br><span class="line">            <span class="keyword">if</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;失败 &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="mybatis接口绑定方案及多参数传递">Mybatis接口绑定方案及多参数传递</h2>
<ol type="1">
<li><p>作用：实现创建一个接口后把mapper.xml由mybatis生成接口的实现类，通过调用接口对象就可以获取mapper.xml中编写的sql</p></li>
<li><p>实现步骤</p>
<ol type="1">
<li>创建一个接口
<ul>
<li>接口包名和接口名与mapper.xml中&lt; mappers&gt;namespace相同</li>
<li>接口中方法名和mapper.xml标签的id属性相同</li>
</ul></li>
<li>在mybatis-config.xml中使用&lt; package&gt;进行扫描接口和mapper.xml</li>
</ol></li>
<li><p>代码实现</p>
<ol type="1">
<li><p>在mybatis-config.xml中&lt; mappers&gt;下使用&lt; package&gt;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zephon.mapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在com.xxx.mapper下新建接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在com.xxx.mapper新建一个UserMapper.xml</p>
<ol type="1">
<li>其中namespace必须与接口全限定路径(包名+类名)相同</li>
<li>id值必须与接口中方法名相同</li>
<li>如果接口中方法多个参数，可以省略parameterType</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zephon.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from ta_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>多参数实现办法</p>
<ol type="1">
<li><p>在接口中声明方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//List&lt;User&gt; selByUidName(int uid,String uname);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有注解时，对于基本类型，xml中使用只能用param1或arg0</span></span><br><span class="line"><span class="comment">     * 使用注解后，mybatis把参数转换为map了，其中<span class="doctag">@Param</span>(&quot;key&quot;)</span></span><br><span class="line"><span class="comment">     * 参数内容就是map的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selByUidName</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="keyword">int</span> uid,<span class="meta">@Param(&quot;uname&quot;)</span> String uname)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>在mapper.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当多参数时，不需要写parameterType --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selByUidName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from ta_user where uid=#&#123;param1&#125; and uname=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>Test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 接口，为什么能实例化？</span></span><br><span class="line"><span class="comment">         * 需要给接口一个实例化对象</span></span><br><span class="line"><span class="comment">         * 使用的是JDK的动态代理设计模式(面向接口的代理设计模式(必须有接口))</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//        List&lt;User&gt; list = userMapper.selAll();</span></span><br><span class="line"><span class="comment">//        for (User u : list) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(u.getUname()+&quot;-&quot;+u.getPwd());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; l = userMapper.selByUidName(<span class="number">1</span>, <span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User u : l) &#123;</span><br><span class="line">            System.out.println(u.getUname()+<span class="string">&quot;-&quot;</span>+u.getPwd());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol></li>
</ol>
<h2 id="动态sql">动态SQL</h2>
<ol type="1">
<li><p>根据不同的条件需要执行不同的SQL命令，称为动态SQL</p></li>
<li><p>Mybatis中动态SQL就是在mapper.xml中添加逻辑判断等</p></li>
<li><p>if的使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selByUnamePwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from ta_user where 1=1</span><br><span class="line">        <span class="comment">&lt;!-- OGNL表达式，直接写key或对象的属性,不需要添加任何特殊符号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;uname!=null and uname!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and uname=#&#123;uname&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;pwd!=null and pwd!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and pwd=#&#123;pwd&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>where</p>
<ol type="1">
<li>当编写where标签时，如果内容中第一个是and，会去掉第一个and</li>
<li>如果where中有内容会生成where关键字，如果没有内容不生成where关键字</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selByUnamePwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from ta_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span><span class="comment">&lt;!-- 其实就是代替了where 1==1,但是效率有提高--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;uname!=null and uname!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and uname=#&#123;uname&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;pwd!=null and pwd!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and pwd=#&#123;pwd&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>choose、when、otherwise</p>
<ol type="1">
<li>只要有一个成立，其它都不执行</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selByUnamePwd&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from ta_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;uname!=null and uname!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    and uname=#&#123;uname&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;pwd!=null and pwd!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    and pwd=#&#123;pwd&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>set用作修改SQL中set从句</p>
<ol type="1">
<li><p>作用：去掉最后一个逗号，如果set里面有内容，生成关键字，否则不生成</p></li>
<li><p>示例：</p>
<ol type="1">
<li>uid=#{uid}目的是防止&lt; set &gt;中没有内容，mybatis不生成set关键字，如果修改中没有set从句，会有SQL语法错误</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;upd&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        update ta_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            uid=#&#123;uid&#125;,</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;uname!=null and uname!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                uname=#&#123;uname&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;pwd!=null and pwd!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                pwd=#&#123;pwd&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>trim</p>
<ol type="1">
<li>prefix在前面添加内容</li>
<li>prefixOverrides去掉前面内容</li>
<li>suffix在后面添加内容</li>
<li>suffixOverrides去掉后面的内容</li>
<li>执行顺序：先去掉内容，再添加内容</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--- 相当于使用&lt;set&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;upd&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    update ta_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span> &gt;</span></span><br><span class="line">        a=a,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>bind</p>
<ol type="1">
<li><p>作用：给参数重新赋值</p></li>
<li><p>使用场景：</p>
<ul>
<li>模糊查询</li>
<li>在原内容前或后添加内容</li>
</ul></li>
<li><p>示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模糊查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+uname+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>foreach</p>
<ol type="1">
<li><p>循环参数内容，还具备在内容的前后添加内容、添加分隔符功能</p></li>
<li><p>适用场景：在in查询中常用,批量新增(mybatis中foreach效率比较低)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- collection：要遍历的集合</span></span><br><span class="line"><span class="comment">	 item：迭代变量，#&#123;迭代变量名&#125;获取内容</span></span><br><span class="line"><span class="comment"> 	 open：循环后左侧添加的内容</span></span><br><span class="line"><span class="comment">	 close：循环后右侧添加的内容</span></span><br><span class="line"><span class="comment">	 separator：每次循环，元素之间的分隔符</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selIn&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from ta_user where uid in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;i&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
<li><p>sql和include</p>
<ol type="1">
<li><p>某些SQL片段如果希望复用，可以使用&lt; sql&gt;定义这个片段</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">	uid,uname,pwd</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在&lt; select&gt;或&lt; delete&gt;或&lt; update&gt;或&lt; insert&gt;中使用&lt; include&gt;引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from ta_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol></li>
</ol>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP入门笔记</title>
    <url>/2019/03/02/JavaWeb-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="jsp入门笔记">JSP入门笔记</h1>
<hr />
<h2 id="静态与动态">静态与动态</h2>
<blockquote>
<p>不要和是否有“动感”混为一谈 是否随着时间、地点、用户操作 的改变而改变 动态网页 需要使用到 服务端脚本语言(JSP)</p>
</blockquote>
<h2 id="bs与cs架构">BS与CS架构</h2>
<p>CS:Client Server 客户端与服务端 eg:QQ、微信<br />
不足：</p>
<ol type="1">
<li>如果软件升级，那么所有软件都需要升级</li>
<li>维护麻烦，需要维护每一台客户端软件</li>
<li>每一台客户端都需要安装客户端软件</li>
</ol>
<p>BS:Broswer Server 浏览器服务器 eg:网页版京东、百度 客户端可以通过浏览器直接访问浏览器</p>
<blockquote>
<p>注：CS与BS各有优劣</p>
</blockquote>
<h2 id="tomcat解压后目录">tomcat解压后目录</h2>
<p>bin:存放可执行文件(startup.bat shutdown.bat...)<br />
conf:存放配置文件(server.xml) lib:存放tomcat依赖jar包 log:存放日志文件(记录出错等信息) temp:存放临时文件 webapps:存放可执行的项目(将我们开发的项目 放入该目录) work:存放由jsp翻译成的java，以及编译成的class文件</p>
<h2 id="配置tomcat">配置tomcat</h2>
<ol type="1">
<li>配置jdk(必须配置JAVA_HOME) JAVA_HOME CLASSPATH PATH</li>
<li>配置catalina_home(值为根目录)</li>
</ol>
<blockquote>
<p>常见错误：可能与其他服务端口冲突，可关闭冲突服务或修改tomcat端口(在server.xml)</p>
</blockquote>
<h2 id="访问tomcat">访问tomcat</h2>
<p><a href="http://localhost:8080">http://localhost:8080</a><br />
默认访问root中的index.jsp<br />
可在web.xml中修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index2.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>常见状态码：<br />
200：一切正常<br />
300/301：页面重定向(跳转)<br />
404：资源不存在<br />
403：权限不足（如果访问a目录，但a目录设置不可见)<br />
500：服务器内部错误(代码有误)</p>
<p>jsp:在html中嵌套的Java代码</p>
<h2 id="虚拟路径">虚拟路径</h2>
<p>方式一：<br />
将web项目配置到webapps以外的目录 在conf/server.xml中的<Host></Host>中添加<Contest docBase="D:\JsProject" path="/JspProject"/><br />
docBase：实际路径 path：虚拟路径 （绝对路径、相对路径(相对于webapps))</p>
<p>方式二：<br />
在conf/Catalina/中新建<em>.xml(</em>与项目同名),内容也为 <Contest docBase="D:\JsProject" path="/JspProject"/></p>
<h2 id="虚拟主机一般不用">虚拟主机(一般不用)</h2>
<p>通过www.test.com访问主机</p>
<p>在conf/server.xml中增加一个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">name</span>=<span class="string">&quot;www.test.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改<Engin>中的defaultHost="www.test.com"</p>
<p>在hosts文件添加 127.0.0.1 www.test.com</p>
<p>端口改为80</p>
<p>流程：www.test.com-&gt;host找映射关系-&gt;server.xml找Engine的defaultHost-&gt;通过"/"映射到硬盘</p>
<h2 id="jsp执行流程">JSP执行流程</h2>
<p>第一次访问：服务端将JSP翻译成java，再将java编译成class文件(比较慢)</p>
<p>后续访问：直接访问class文件(如果服务端代码修改，将会重新编译)(比较快)</p>
<p>JSP和Servlet可以相互转换</p>
<h2 id="统一字符集编码">统一字符集编码</h2>
<ol type="1">
<li><p>编码分类：</p>
<p>设置jsp文件的编码（jsp文件中的pageEncoding属性）：jsp-&gt;java</p>
<p>设置浏览器读取jsp文件的编码（jsp中的content属性）</p>
<p>一般将上述设置成一致的编码，推荐使用UTF-8</p></li>
<li><p>文本编码：</p>
<p>a.将IDE所有文件统一设置(推荐)</p>
<p>b.设置某一项目</p>
<p>c.设置单独文件</p></li>
</ol>
<h2 id="jsp的页面元素">JSP的页面元素</h2>
<p>a.脚本Scriptlet(三种代码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%	局部变量、java语句	%&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!	全局变量、定义方法	%&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%= 输出表达式%&gt;</span><br></pre></td></tr></table></figure>
<p>一般而言，修改web.xml、配置文件、java、需要重启tomcat服务，但是如果修改Jsp、html、css、js，不需要重启</p>
<blockquote>
<p>注意：out.println()不能回车，要想加回车，必须用<br/></p>
</blockquote>
<p>b.指令</p>
<p>page指令:&lt;%@ page ...%&gt;</p>
<p>page指令的属性:</p>
<p>language:jsp页面使用的脚本语言</p>
<p>import:导入类</p>
<p>pageEncoding:jsp文件自身编码 jsp-&gt;java</p>
<p>contentType：浏览器解析jsp的编码</p>
<ol start="3" type="a">
<li>注释</li>
</ol>
<p>html注释 ：<!--------> 可以被客户通过浏览器查看源码看到</p>
<p>java注释：// / * .... * /</p>
<p>jsp注释：&lt;%-- ....... --%&gt;</p>
<h2 id="jsp九大内置对象自带的不需要new也能用的对象">JSP九大内置对象(自带的，不需要new也能用的对象)</h2>
<blockquote>
<p>out：输出对象，向客户端输出内容</p>
</blockquote>
<blockquote>
<p>request：请求对象;存储”客户端向服务端发送的请求信息“</p>
<p>常见方法：</p>
<p>String getParameter(String name) ：根据请求的字段名key(标签的name属性)，返回字段值value</p>
<p>String[] getParameterValues(String name)：根据请求的字段名key，返回多个字段值value，(checkbox多选按钮)</p>
<p>void setCharacterEncoding("编码格式utf-8...")：设置请求编码 默认tomcat7以前iso-8859-1,tomcat8以后utf-8</p>
<p>getRequestDispatcher("目的页面").forward(request,response)：请求转发的方式跳转页面</p>
<p>getServerContext()：获取项目的ServletContext对象</p>
</blockquote>
<p>示例：注册页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Register&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;show.jsp&quot;</span>&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;upwd&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uage&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">        爱好：</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;uhobbies&quot;</span> value=<span class="string">&quot;足球&quot;</span>/&gt;足球</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;uhobbies&quot;</span> value=<span class="string">&quot;篮球&quot;</span>/&gt;篮球</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;uhobbies&quot;</span> value=<span class="string">&quot;排球&quot;</span>/&gt;排球</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Show&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//根据name取value</span></span><br><span class="line">        String name=request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.valueOf(request.getParameter(<span class="string">&quot;uage&quot;</span>));</span><br><span class="line">        String pwd = request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line">        String[] hobbies = request.getParameterValues(<span class="string">&quot;uhobbies&quot;</span>);</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line">    注册成功，信息如下：&lt;br/&gt;</span><br><span class="line">    姓名：&lt;%=name%&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;%=age%&gt;&lt;br/&gt;</span><br><span class="line">    密码：&lt;%=pwd%&gt;&lt;br/&gt;</span><br><span class="line">    爱好：</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (String hobby:hobbies)</span><br><span class="line">            out.print(hobby);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>response：响应对象</p>
<p>常见方法：</p>
<p>void addCookie(Cookie cookie)：服务端向客户端增加cookie对象</p>
<p>void sendRedirect(String location)：页面跳转的一种方式（重定向）</p>
<p>void setContentType(String type)：设置服务端响应编码（设置服务端的contentType类型）</p>
</blockquote>
<p>示例：登录 login.jsp-&gt;check.jsp-&gt;success.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;check.jsp&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;upwd&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登陆&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Check&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String uname = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String upwd = request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(uname.equals(<span class="string">&quot;张三&quot;</span>)&amp;&amp;upwd.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 重定向 会导致数据丢失</span></span><br><span class="line">            <span class="comment">//response.sendRedirect(&quot;success.jsp&quot;);</span></span><br><span class="line">            <span class="comment">//  请求转发 可以获取到数据，并且地址栏没有改变（仍然保留转发时的地址）</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;success.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out.print(<span class="string">&quot;用户名或密码有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Success&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    登陆成功&lt;br/&gt;</span><br><span class="line">    欢迎你！&lt;%=request.getParameter(<span class="string">&quot;uname&quot;</span>)%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>请求转发与重定向的区别：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">请求转发</th>
<th style="text-align: center;">重定向</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">地址栏是否改变</td>
<td style="text-align: center;">不变(check.jsp)</td>
<td style="text-align: center;">改变(success.jsp)</td>
</tr>
<tr class="even">
<td style="text-align: center;">是否保留第一次请求时的数据</td>
<td style="text-align: center;">保留</td>
<td style="text-align: center;">不保留</td>
</tr>
<tr class="odd">
<td style="text-align: center;">请求的次数</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="even">
<td style="text-align: center;">跳转发生的位置</td>
<td style="text-align: center;">服务端</td>
<td style="text-align: center;">客户端发出第二次跳转</td>
</tr>
</tbody>
</table>
<blockquote>
<p>session(服务端)</p>
<p>Cookie(客户端，不是内置对象)：Cookie是由服务端产生的，再发送给客户端保存，相当于本地缓存的作用：客户端-&gt;服务端，能提高访问服务端的效率，但是安全性较差</p>
<p>Cookie：key-value</p>
<p>public Cookie(String key,String value)：构造方法</p>
<p>String getName()：获取name</p>
<p>String getValue()：获取value</p>
<p>void setMaxAge(int expiry)：设置最大有效期(单位：秒)</p>
<p>服务端准备Cookie：</p>
<p>response.addCookie(Cookie cookie)</p>
<p>页面跳转（转发/重定向）</p>
<p>客户端获取cookie：request.getCookies()</p>
<p>注：服务端增加cookie：response对象;客户端获取对象 ：request对象</p>
<p>​ 不能直接获取某一个单独cookie对象，只能一次性将全部的cookie拿到再遍历</p>
</blockquote>
<p>例：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;addCookie&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">//服务端</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        response.addCookie(cookie1);</span><br><span class="line">        <span class="comment">//页面跳转到客户端（转发、重定向）</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;result.jsp&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;result&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">//客户端 获取cookies</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">            out.print(cookie.getName()+<span class="string">&quot;---&quot;</span>+cookie.getValue()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过检查可以发现，除了自己设置的Cookie对象外，还有一个name为JSESSIONID的cookie</p>
<p>建议：cookie只保存 英文和数字，否则需要进行编码、解码</p>
</blockquote>
<p>案例：使用Cookie实现记住用户名的功能</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Login&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%!</span><br><span class="line">        String uname;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;name&quot;</span>))&#123;</span><br><span class="line">                uname = cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;check.jsp&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span> value=<span class="string">&quot;&lt;%=(uname==null?&quot;</span><span class="string">&quot;:uname)%&gt;&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;upwd&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登陆&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Check&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String pwd = request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line">        <span class="comment">//将用户名与密码加入cookie</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        <span class="comment">//Cookie cookie1 = new Cookie(&quot;pwd&quot;,pwd);</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="comment">//服务端将cookie发回给客户端保存  A.jsp属于客户端</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;A.jsp&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>session:会话</p>
<ol type="1">
<li><p>浏览网站：从开始到关闭</p></li>
<li><p>购物：浏览、付款、退出</p></li>
<li><p>电子邮件：浏览、写邮件、退出</p></li>
</ol>
<p>运行机制：</p>
<p>浏览器客户端第一次请求服务端时，（JSESSIONID与SESSIONID匹配失败）服务端会产生一个session对象（用于保存该客户的信息），并且每个session对象，都会有一个唯一的SESSIONID（用于区分其它session）服务端会产生一个cookie，并且该cookie的name=JSESSIONID，value=服务端SESSIONID的值，然后服务端会在响应客户端的同时，将该cookie发送给客户端，至此，客户端就有了一个cookie（JSESSIONID）;因此，客户端的cookie就可以和服务端的SESSIONID一一对应（JSESSIONID-SESSIONID），从而保证每个用户一个session。</p>
<p>客户端第2/n次请求，服务端会先用客户端cookie中的JSESSIONID，去服务端session中匹配SESSIONID，如果匹配成功（cookie JSESSIONID和session SESSIONID），说明此用户不是第一次访问，</p>
<p>session：</p>
<ol type="1">
<li><p>session存储在服务端</p></li>
<li><p>session是在同一个客户请求时共享的</p></li>
<li><p>实现机制：第一次请求时，产生一个SESSIONID并复制给cookie的JSESSIONID然后发送给客户端。最终通过session的SESSIONID和cookie的JSESSIONID</p></li>
</ol>
<p>session方法：</p>
<p>String getId()：获取SESSIONID</p>
<p>boolean isNew()：判断是否是新用户（第一次访问）</p>
<p>void invalidate()：使session失效（退出登录、注销）</p>
<p>setAttribute()</p>
<p>getAttribute()</p>
<p>void setMaxInactiveInterval(秒)：设置最大有效非活动时间</p>
<p>int getMaxInactiveInterval()：获取最大有效非活动时间</p>
</blockquote>
<p>案例：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Check&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">//login.jsp 与之前的相同</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        String pwd = request.getParameter(<span class="string">&quot;upwd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;zs&quot;</span>)&amp;&amp;pwd.equals(<span class="string">&quot;123&quot;</span>))&#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;uname&quot;</span>,name);</span><br><span class="line">            session.setAttribute(<span class="string">&quot;upwd&quot;</span>,pwd);</span><br><span class="line">            <span class="comment">//设置最大非活动时间</span></span><br><span class="line">            session.setMaxInactiveInterval(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">//request数据只在同一次请求有效</span></span><br><span class="line">            <span class="comment">//地址栏回车（发出第二次请求）</span></span><br><span class="line">            <span class="comment">//如果F5刷新，浏览器提示重新提交表单，相当于重复之前的登录，建立请求</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;welcome.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;welcome&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    welcome</span><br><span class="line">    &lt;%</span><br><span class="line">        String name= (String) session.getAttribute(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="comment">//如果用户没有登录，而是直接通过地址栏访问welcome.jsp，即name为null，</span></span><br><span class="line">        <span class="comment">//则跳转到login.jsp</span></span><br><span class="line">        <span class="keyword">if</span>(name==<span class="keyword">null</span>)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out.print(name);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;invalidate.jsp&quot;</span>&gt;注销&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;invalidate&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        session.invalidate();<span class="comment">//ssesion失效</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th></th>
<th style="text-align: center;">session</th>
<th style="text-align: center;">cookie</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>保存的位置</td>
<td style="text-align: center;">服务端</td>
<td style="text-align: center;">客户端</td>
</tr>
<tr class="even">
<td>安全性</td>
<td style="text-align: center;">较安全</td>
<td style="text-align: center;">较不安全</td>
</tr>
<tr class="odd">
<td>保存的内容</td>
<td style="text-align: center;">Object</td>
<td style="text-align: center;">String</td>
</tr>
</tbody>
</table>
<blockquote>
<p>pageContext：JSP页面容器</p>
</blockquote>
<blockquote>
<p>application：全局对象</p>
<p>常用方法：</p>
<p>String getContextPath()：获取虚拟路径</p>
<p>String getRealPath(“虚拟路径”)：获取绝对路径（虚拟路径相对的绝对路径）</p>
</blockquote>
<blockquote>
<p>用的较少：</p>
<p>config：配置对象（服务器配置信息）</p>
<p>page：当前JSP页面对象（相当于java中的this）</p>
<p>exception：异常对象</p>
</blockquote>
<blockquote>
<p>四种范围对象（从小到大）</p>
<p>pageContext JSP页面容器 （page对象） 当前页面有效</p>
<p>request 请求对象 同一次请求有效</p>
<p>session 会话对象 同一次会话有效</p>
<p>application 全局对象 全局有效（整个项目有效,即使切换了浏览器）</p>
<p>都有一些共同的方法：</p>
<p>Object getAttribute(String name)：根据属性名，获取属性值</p>
<p>void setAttribute(String name,Object obj)：设置属性值（新增/修改）</p>
<p>eg:setAttribute("a","b");//如果a对象不存在，则新建，否则将a的值改为b</p>
<p>void removeAttribute(String name)：根据属性名，删除对象</p>
<p>以上范围对象使用时，尽量使用最小的范围。因为对象的范围越大，造成的性能损耗越多。</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>手写WebServer笔记</title>
    <url>/2019/02/25/JavaWeb-%E6%89%8B%E5%86%99WebServer%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="手写webserver笔记">手写WebServer笔记</h1>
<hr />
<h2 id="webserver简介">WebServer简介</h2>
<p>上网浏览网页，离不开服务器，客户请求页面，服务器响应内容，响应的内容是根据每个web请求来产生动态内容，其内部即启动多个线程来产生不同内容。这种<strong>请求响应式</strong>的交互，都是基于HTTP协议的。当然现在随着业务越来越多样化，web服务器变得复杂了，拥有了像缓存、安全和session管理这些附加功能。</p>
<h2 id="反射reflection">反射Reflection</h2>
<p>把java类中的各种结构(方法、属性、构造器、类名)映射成一个个Java对象。利用反射技术可以 对一个类进行解剖，反射是框架设计的灵魂。</p>
<p>三种方式获取Class对象：</p>
<blockquote>
<ol type="1">
<li><p>对象.getClass()</p></li>
<li><p>类.class</p></li>
<li><p>Class.forName(“包名.类名")(推荐)</p></li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 反射：把Java类中的各种结构(方法、属性、构造器、类名)映射成一个个对象</span></span><br><span class="line"><span class="comment"> * 1.获取Class对象</span></span><br><span class="line"><span class="comment"> * 三种方式：Class.forName(“完整路径&quot;)</span></span><br><span class="line"><span class="comment"> * 2.可以动态创建对象</span></span><br><span class="line"><span class="comment"> * clz.getConstructor().newInstance()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//三种方式</span></span><br><span class="line">        <span class="comment">//1.对象.getClass()</span></span><br><span class="line">        Class clz = <span class="keyword">new</span> Iphon().getClass();</span><br><span class="line">        <span class="comment">//2.类.class</span></span><br><span class="line">        clz = Iphon.class;</span><br><span class="line">        <span class="comment">//3.Class.forName(&quot;包名.类名&quot;)</span></span><br><span class="line">        clz = Class.forName(<span class="string">&quot;com.zephon.webserver.webserver.Iphon&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Iphon iphon = (Iphon)clz.getConstructor().newInstance();</span><br><span class="line">        System.out.println(iphon);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iphon</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Iphon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="xml解析">XML解析</h2>
<p>XML:Extensible Markup Language,可扩展标记语言，作为<strong>数据的一种存储格式</strong>或<strong>用于存储软件的参数</strong>，程序解析此配置文件，就可以到达不修改代码就能更改程序的目的。</p>
<p>解析XML：采用SAX解析</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>至尊宝<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>紫霞仙子<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>8999<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persons</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈SAX解析〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//SAX解析</span></span><br><span class="line">        <span class="comment">//1.获取解析工厂</span></span><br><span class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">        <span class="comment">//2.从解析工厂获取解析器</span></span><br><span class="line">        SAXParser parse = factory.newSAXParser();</span><br><span class="line">        <span class="comment">//3.加载文档Document注册处理器</span></span><br><span class="line">        <span class="comment">//4.编写处理器</span></span><br><span class="line">        PHandler handler = <span class="keyword">new</span> PHandler();</span><br><span class="line">        parse.parse(Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;com/zephon/webserver/webserver/p.xml&quot;</span>),handler);</span><br><span class="line">        List&lt;Person&gt; l = handler.getPersons();</span><br><span class="line">        <span class="keyword">for</span>(Person p:l)</span><br><span class="line">            System.out.println(p.getName()+<span class="string">&quot;--&quot;</span>+p.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; persons;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始解析文档</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        persons = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始解析元素 qName--&gt;元素名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(qName!=<span class="keyword">null</span>)</span><br><span class="line">            tag = qName;</span><br><span class="line">        <span class="keyword">if</span>(qName.equals(<span class="string">&quot;person&quot;</span>))</span><br><span class="line">            person = <span class="keyword">new</span> Person();</span><br><span class="line">           &#125;</span><br><span class="line">    <span class="comment">//内容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.characters(ch, start, length);</span><br><span class="line">        String str = <span class="keyword">new</span> String(ch,start,length);</span><br><span class="line">        <span class="keyword">if</span>(str.length()&gt;<span class="number">0</span> &amp;&amp; tag!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tag.equals(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">                person.setName(str);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tag.equals(<span class="string">&quot;age&quot;</span>))</span><br><span class="line">                person.setAge(Integer.valueOf(str));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析元素结束</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endElement(uri, localName, qName);</span><br><span class="line">        <span class="keyword">if</span>(qName.equals(<span class="string">&quot;person&quot;</span>))</span><br><span class="line">            persons.add(person);</span><br><span class="line">        tag = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析文档结束</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endDocument();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getPersons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> persons;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="sax在serverlet中的应用">SAX在Serverlet中的应用</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zephon.webserver.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>reg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zephon.webserver.servlet.RegisterServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/g<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>reg<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/reg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String clz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClz</span><span class="params">(String clz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clz = clz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapping</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; patterns;</span><br><span class="line">    Mapping()&#123;</span><br><span class="line">        patterns = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getPatterns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patterns;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPatterns</span><span class="params">(Set&lt;String&gt; patterns)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.patterns = patterns;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPattern</span><span class="params">(String pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.patterns.add(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoginServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RegisterServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Entity&gt; entities = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Mapping&gt; mappings = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key--&gt;servlet-name value--&gt;servlet-class</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; entityMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//key--&gt;url-pattern value--&gt;servlet-name</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; mappingMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebContext</span><span class="params">(List&lt;Entity&gt; entities, List&lt;Mapping&gt; mappings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.entities = entities;</span><br><span class="line">        <span class="keyword">this</span>.mappings = mappings;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将entity的List转成对应的map</span></span><br><span class="line">        <span class="keyword">for</span>(Entity e:entities)&#123;</span><br><span class="line">            entityMap.put(e.getName(),e.getClz());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将map的List转成对应的map</span></span><br><span class="line">        <span class="keyword">for</span>(Mapping m:mappings)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String p:m.getPatterns())&#123;</span><br><span class="line">                mappingMap.put(p,m.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClz</span><span class="params">(String pattern)</span></span>&#123;</span><br><span class="line">        String name = mappingMap.get(pattern);</span><br><span class="line">        <span class="keyword">return</span> entityMap.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParserConfigurationException, SAXException, IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//SAX解析</span></span><br><span class="line">        <span class="comment">//1.获取解析工厂</span></span><br><span class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">        <span class="comment">//2.从解析工厂获取解析器</span></span><br><span class="line">        SAXParser parse = factory.newSAXParser();</span><br><span class="line">        <span class="comment">//3.加载文档Document注册处理器</span></span><br><span class="line">        <span class="comment">//4.编写处理器</span></span><br><span class="line">        WebHandler handler = <span class="keyword">new</span> WebHandler();</span><br><span class="line">        parse.parse(Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;com/zephon/webserver/servlet/web.xml&quot;</span>),handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        WebContext context = <span class="keyword">new</span> WebContext(handler.getEntities(),handler.getMappings());</span><br><span class="line">        <span class="comment">//假设输入了/login</span></span><br><span class="line">        String name = context.getClz(<span class="string">&quot;/reg&quot;</span>);</span><br><span class="line">        Class clz = Class.forName(name);</span><br><span class="line">        Servlet servlet = (Servlet) clz.getConstructor().newInstance();</span><br><span class="line">        servlet.service();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Entity&gt; entities;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Mapping&gt; mappings;</span><br><span class="line">    <span class="keyword">private</span> Entity entity;</span><br><span class="line">    <span class="keyword">private</span> Mapping mapping;</span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isMapping;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始解析文档</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        entities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        mappings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始解析元素 qName--&gt;元素名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(qName!=<span class="keyword">null</span>)</span><br><span class="line">            tag = qName;</span><br><span class="line">        <span class="keyword">if</span>(qName.equals(<span class="string">&quot;servlet&quot;</span>)) &#123;</span><br><span class="line">            entity = <span class="keyword">new</span> Entity();</span><br><span class="line">            isMapping = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qName.equals(<span class="string">&quot;servlet-mapping&quot;</span>)) &#123;</span><br><span class="line">            mapping = <span class="keyword">new</span> Mapping();</span><br><span class="line">            isMapping = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//内容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.characters(ch, start, length);</span><br><span class="line">        String str = <span class="keyword">new</span> String(ch,start,length);</span><br><span class="line">        <span class="keyword">if</span>(str.length()&gt;<span class="number">0</span> &amp;&amp; tag!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isMapping)&#123;</span><br><span class="line">                <span class="keyword">if</span>(tag.equals(<span class="string">&quot;servlet-name&quot;</span>))</span><br><span class="line">                    mapping.setName(str);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(tag.equals(<span class="string">&quot;url-pattern&quot;</span>))</span><br><span class="line">                    mapping.addPattern(str);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(tag.equals(<span class="string">&quot;servlet-name&quot;</span>))</span><br><span class="line">                    entity.setName(str);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(tag.equals(<span class="string">&quot;servlet-class&quot;</span>))</span><br><span class="line">                    entity.setClz(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析元素结束</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endElement(uri, localName, qName);</span><br><span class="line">        <span class="keyword">if</span>(qName.equals(<span class="string">&quot;servlet&quot;</span>))</span><br><span class="line">            entities.add(entity);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(qName.equals(<span class="string">&quot;servlet-mapping&quot;</span>))</span><br><span class="line">            mappings.add(mapping);</span><br><span class="line">        tag = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析文档结束</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endDocument();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Entity&gt; <span class="title">getEntities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Mapping&gt; <span class="title">getMappings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mappings;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="http协议">HTTP协议</h2>
<h3 id="基础">基础</h3>
<p>超文本传输协议(HTTP,Hyper Text Transfer Protocol)是互联网上应用最为广泛的一种网络协议，所有的WWW文件都必须遵守这个标准。</p>
<blockquote>
<p>请求协议：</p>
<ol type="1">
<li>请求行：方法（GET/POST)、URI、协议/版本</li>
<li>请求头：（Request Header）</li>
<li>请求正文：</li>
</ol>
</blockquote>
<blockquote>
<p>响应协议：</p>
<ol type="1">
<li>状态行：协议/版本 状态码 状态描述</li>
<li>响应头（Response Header）</li>
<li>响应正文：</li>
</ol>
</blockquote>
<blockquote>
<p>典型GET的请求协议：</p>
<p>1、请求行</p>
<p>GET /index.html?name=test&amp;pwd=123456 HTTP/1.1</p>
<p>2、请求体</p>
<p>Accept:text/html,application/xhtml+xml，* / *</p>
<p>Accept-Language:zh-CN</p>
<p>User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.81 Safari/537.36</p>
<p>Accept-Encoding:gzip,deflate</p>
<p>Host:localhost</p>
<p>Connection:Keep-Alive</p>
<p>3、请求正文</p>
</blockquote>
<blockquote>
<p>典型POST的请求协议：</p>
<p>1、请求行</p>
<p>POST /index.html HTTP/1.1</p>
<p>2、请求体</p>
<p>Accept：text/html，application/xhtml+xml，* / * Accept-Language：zh-CN</p>
<p>User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.81 Safari/537.36</p>
<p>Host：localhost</p>
<p>Connection：Keep-Alive</p>
<p>3、请求正文</p>
<p>name=test&amp;pwd=123456</p>
</blockquote>
<blockquote>
<p>典型的响应协议：</p>
<p>1、状态行：HTTP/1.0 200 OK</p>
<p>2、请求头：</p>
<p>Date：Tue Feb 19 15:18:50 CST 2019</p>
<p>Server：zephon Server/0.0.1;charset=GBK</p>
<p>Content-type：text/html</p>
<p>Content-length:384</p>
<p>3、请求正文(注意与请求头之间有个空行)</p>
<p>xxxxxxxx</p>
</blockquote>
<h3 id="实例">实例：</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8888/index.html&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈使用ServerSocket建立与浏览器的连接，获取请求协议〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Server01 server = <span class="keyword">new</span> Server01();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动服务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            receive();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器启动失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接受连接处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket client = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;一个客户端建立成功&quot;</span>);</span><br><span class="line">            <span class="comment">//获取请求协议</span></span><br><span class="line">            InputStream is = client.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] datas = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = is.read(datas);</span><br><span class="line">            String requestInfo = <span class="keyword">new</span> String(datas,<span class="number">0</span>,len);</span><br><span class="line">            System.out.println(requestInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//停止服务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈返回相应协议〉</span></span><br><span class="line"><span class="comment"> * 1.准备内容</span></span><br><span class="line"><span class="comment"> * 2.获取字节数的长度</span></span><br><span class="line"><span class="comment"> * 3.拼接响应协议(注意空格与换行)</span></span><br><span class="line"><span class="comment"> * 4.使用输出流输出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server02</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Server02 server = <span class="keyword">new</span> Server02();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动服务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            receive();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器启动失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接受连接处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket client = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;一个客户端建立成功&quot;</span>);</span><br><span class="line">            <span class="comment">//获取请求协议</span></span><br><span class="line">            InputStream is = client.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] datas = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = is.read(datas);</span><br><span class="line">            String requestInfo = <span class="keyword">new</span> String(datas,<span class="number">0</span>,len);</span><br><span class="line">            System.out.println(requestInfo);</span><br><span class="line"></span><br><span class="line">            StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            content.append(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;&lt;title&gt;&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;服务器响应成功&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;&lt;/title&gt;&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;终于回来了...&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">            content.append(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">            <span class="comment">//字节数</span></span><br><span class="line">            <span class="keyword">int</span> size = content.toString().getBytes().length;</span><br><span class="line">            StringBuilder responseInfo = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            String blank = <span class="string">&quot; &quot;</span>;</span><br><span class="line">            String CRLF = <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">            <span class="comment">//返回</span></span><br><span class="line">            <span class="comment">//1.响应状态行：HTTP/1.1 200 OK</span></span><br><span class="line">            responseInfo.append(<span class="string">&quot;HTTP/1.1&quot;</span>).append(blank);</span><br><span class="line">            responseInfo.append(<span class="string">&quot;200&quot;</span>).append(blank);</span><br><span class="line">            responseInfo.append(<span class="string">&quot;OK&quot;</span>).append(CRLF);</span><br><span class="line">            <span class="comment">//2.响应头(最后一行存在空行):</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                Date: Tue Feb 19 15:18:50 CST 2019</span></span><br><span class="line"><span class="comment">                Server: zephon Server/0.0.1;charset=GBK</span></span><br><span class="line"><span class="comment">                Content-type: text/html</span></span><br><span class="line"><span class="comment">                Content-length: 93</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            responseInfo.append(<span class="string">&quot;Date:&quot;</span>).append(<span class="keyword">new</span> Date()).append(CRLF);</span><br><span class="line">            responseInfo.append(<span class="string">&quot;Server:&quot;</span>).append(<span class="string">&quot;zephon Server/0.0.1;charset=GBK&quot;</span>).append(CRLF);</span><br><span class="line">            responseInfo.append(<span class="string">&quot;Content-type:text/html&quot;</span>).append(CRLF);</span><br><span class="line">            responseInfo.append(<span class="string">&quot;Content-length:&quot;</span>).append(size).append(CRLF);</span><br><span class="line">            responseInfo.append(CRLF);</span><br><span class="line">            <span class="comment">//3.正文:</span></span><br><span class="line">            responseInfo.append(content.toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写出到客户端</span></span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(client.getOutputStream()));</span><br><span class="line">            bw.write(responseInfo.toString());</span><br><span class="line">            bw.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//停止服务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="response封装">Response封装:</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈封装响应信息〉</span></span><br><span class="line"><span class="comment"> * 1.内容可以动态添加</span></span><br><span class="line"><span class="comment"> * 2.关注状态码,拼接好响应的协议信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BufferedWriter bw;</span><br><span class="line">    <span class="comment">//正文</span></span><br><span class="line">    <span class="keyword">private</span> StringBuilder content;</span><br><span class="line">    <span class="comment">//协议头(状态行与请求头 回车)信息</span></span><br><span class="line">    <span class="keyword">private</span> StringBuilder headInfo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;<span class="comment">//正文的字节数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String BLANK = <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String CRLF = <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Response</span><span class="params">()</span></span>&#123;</span><br><span class="line">        content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        headInfo = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Response</span><span class="params">(Socket client)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(client.getOutputStream()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Response</span><span class="params">(OutputStream os)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(os));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 动态添加内容（流模式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>:info信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">print</span><span class="params">(String info)</span></span>&#123;</span><br><span class="line">        content.append(info);</span><br><span class="line">        len+=info.getBytes().length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">println</span><span class="params">(String info)</span></span>&#123;</span><br><span class="line">        content.append(info).append(CRLF);</span><br><span class="line">        len+=(info+CRLF).getBytes().length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 推送响应信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushToBrowser</span><span class="params">(<span class="keyword">int</span> code)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==headInfo)&#123;</span><br><span class="line">            code=<span class="number">505</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        createHeadInfo(code);</span><br><span class="line">        bw.append(headInfo);</span><br><span class="line">        bw.append(content);</span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 构建头信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: code-状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createHeadInfo</span><span class="params">(<span class="keyword">int</span> code)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.响应状态行：HTTP/1.1 200 OK</span></span><br><span class="line">        headInfo.append(<span class="string">&quot;HTTP/1.1&quot;</span>).append(BLANK);</span><br><span class="line">        headInfo.append(code).append(BLANK);</span><br><span class="line">        <span class="keyword">switch</span> (code)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">                headInfo.append(<span class="string">&quot;OK&quot;</span>).append(CRLF);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">                headInfo.append(<span class="string">&quot;NOT FOUND&quot;</span>).append(CRLF);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">                headInfo.append(<span class="string">&quot;SERVER ERROR&quot;</span>).append(CRLF);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.响应头(最后一行存在空行):</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                Date: Tue Feb 19 15:18:50 CST 2019</span></span><br><span class="line"><span class="comment">                Server: zephon Server/0.0.1;charset=GBK</span></span><br><span class="line"><span class="comment">                Content-type: text/html</span></span><br><span class="line"><span class="comment">                Content-length: 93</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        headInfo.append(<span class="string">&quot;Date:&quot;</span>).append(<span class="keyword">new</span> Date()).append(CRLF);</span><br><span class="line">        headInfo.append(<span class="string">&quot;Server:&quot;</span>).append(<span class="string">&quot;zephon Server/0.0.1;charset=GBK&quot;</span>).append(CRLF);</span><br><span class="line">        headInfo.append(<span class="string">&quot;Content-type:text/html&quot;</span>).append(CRLF);</span><br><span class="line">        headInfo.append(<span class="string">&quot;Content-length:&quot;</span>).append(len).append(CRLF);</span><br><span class="line">        headInfo.append(CRLF);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="封装request">封装Request：</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈封装请求协议：封装请求参数为Map〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//协议信息</span></span><br><span class="line">    <span class="keyword">private</span> String requestInfo;</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line">    <span class="comment">//请求url</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">//请求参数</span></span><br><span class="line">    <span class="keyword">private</span> String queryStr;</span><br><span class="line">    <span class="comment">//存储参数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;String&gt;&gt; parameterMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String CRLF = <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request2</span><span class="params">(Socket client)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(client.getInputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request2</span><span class="params">(InputStream is)</span></span>&#123;</span><br><span class="line">        parameterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">byte</span>[] datas = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            len = is.read(datas);</span><br><span class="line">            <span class="keyword">this</span>.requestInfo = <span class="keyword">new</span> String(datas,<span class="number">0</span>,len);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分解字符串</span></span><br><span class="line">        parseRequestInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分解字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRequestInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---分解---&quot;</span>);</span><br><span class="line">        <span class="comment">//1.获取请求方式：开头到第一个/</span></span><br><span class="line">        <span class="keyword">this</span>.method = <span class="keyword">this</span>.requestInfo.substring(<span class="number">0</span>,<span class="keyword">this</span>.requestInfo.indexOf(<span class="string">&quot;/&quot;</span>)).toLowerCase();</span><br><span class="line">        <span class="keyword">this</span>.method.trim();</span><br><span class="line">        <span class="comment">//2.获取请求的url：第一个/到HTTP/(可能包含请求参数?前面的为url)</span></span><br><span class="line">        <span class="comment">//1）获取/的位置</span></span><br><span class="line">        <span class="keyword">int</span> idx1 = <span class="keyword">this</span>.requestInfo.indexOf(<span class="string">&quot;/&quot;</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//2）获取HTTP/的位置</span></span><br><span class="line">        <span class="keyword">int</span> endIdx = <span class="keyword">this</span>.requestInfo.indexOf(<span class="string">&quot;HTTP/&quot;</span>);</span><br><span class="line">        <span class="comment">//3）分割字符串</span></span><br><span class="line">        <span class="keyword">this</span>.url = <span class="keyword">this</span>.requestInfo.substring(idx1,endIdx);</span><br><span class="line">        <span class="comment">//4）获取？的位置</span></span><br><span class="line">        <span class="keyword">int</span> queryIdx = <span class="keyword">this</span>.url.indexOf(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(queryIdx&gt;=<span class="number">0</span>)&#123;<span class="comment">//表示存在请求参数</span></span><br><span class="line">            String[] urlArray = <span class="keyword">this</span>.url.split(<span class="string">&quot;\\?&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.url = urlArray[<span class="number">0</span>];</span><br><span class="line">            queryStr = urlArray[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="comment">//3.获取请求参数：如果Get已经获取，如果是Post可能在请求体中</span></span><br><span class="line">        <span class="keyword">if</span>(method.trim().equals(<span class="string">&quot;post&quot;</span>))&#123;</span><br><span class="line">            String qStr = <span class="keyword">this</span>.requestInfo.substring(<span class="keyword">this</span>.requestInfo.lastIndexOf(CRLF)).trim();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>==queryStr)&#123;</span><br><span class="line">                queryStr = qStr;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                queryStr +=<span class="string">&quot;&amp;&quot;</span>+qStr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        queryStr=<span class="keyword">null</span>==queryStr?<span class="string">&quot;&quot;</span>:queryStr;</span><br><span class="line">        System.out.println(method+<span class="string">&quot;--&gt;&quot;</span>+url+<span class="string">&quot;--&gt;&quot;</span>+queryStr);</span><br><span class="line">        <span class="comment">//转成Map fav=1&amp;fav=2&amp;uname=zephon&amp;age=18&amp;others=</span></span><br><span class="line">        convertMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 处理请求参数为Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">convertMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//分割字符串 &amp;</span></span><br><span class="line">        String[] keyValues = <span class="keyword">this</span>.queryStr.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String queryStr:keyValues)&#123;</span><br><span class="line">            <span class="comment">//再次分割字符串 =</span></span><br><span class="line">            String[] kv = queryStr.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            kv = Arrays.copyOf(kv,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//获取key和value</span></span><br><span class="line">            String key = kv[<span class="number">0</span>];</span><br><span class="line">            String value = kv[<span class="number">1</span>]==<span class="keyword">null</span>?<span class="keyword">null</span>:decode(kv[<span class="number">1</span>],<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//存储到map中</span></span><br><span class="line">            <span class="keyword">if</span>(!parameterMap.containsKey(key))&#123;</span><br><span class="line">                parameterMap.put(key,<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            parameterMap.get(key).add(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 处理中文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decode</span><span class="params">(String value,String enc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> java.net.URLDecoder.decode(value,enc);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通过name获取对应的多个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String key)&#123;</span><br><span class="line">        List&lt;String&gt; values = <span class="keyword">this</span>.parameterMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==values||values.size()&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通过name获取对应的一个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Zephon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        String[] values = getParameterValues(key);</span><br><span class="line">        <span class="keyword">return</span> values==<span class="keyword">null</span>?<span class="keyword">null</span>:values[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQueryStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queryStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="封装servlet">封装Servlet:</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈服务器小脚本接口〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(Request request,Response response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈实现Servlet〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(Request request, Response response)</span> </span>&#123;</span><br><span class="line">        response.print(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        response.print(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        response.print(<span class="string">&quot;&lt;title&gt;&quot;</span>);</span><br><span class="line">        response.print(<span class="string">&quot;第一个Servlet&quot;</span>);</span><br><span class="line">        response.print(<span class="string">&quot;&lt;/title&gt;&quot;</span>);</span><br><span class="line">        response.print(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        response.print(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        response.print(<span class="string">&quot;欢迎回来...&quot;</span>+request.getParameter(<span class="string">&quot;uname&quot;</span>));</span><br><span class="line">        response.print(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        response.print(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server06</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Server06 server = <span class="keyword">new</span> Server06();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动服务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            receive();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器启动失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接受连接处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket client = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;一个客户端建立成功&quot;</span>);</span><br><span class="line">            <span class="comment">//获取请求协议</span></span><br><span class="line">            Request request = <span class="keyword">new</span> Request(client);</span><br><span class="line"></span><br><span class="line">            Response response = <span class="keyword">new</span> Response(client);</span><br><span class="line">            Servlet servlet = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(request.getUrl().equals(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">                servlet = <span class="keyword">new</span> LoginServlet();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//首页。。。</span></span><br><span class="line">            &#125;</span><br><span class="line">            servlet.service(request,response);</span><br><span class="line">            <span class="comment">//关注状态码</span></span><br><span class="line">            response.pushToBrowser(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//停止服务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多线程处理">多线程处理：</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket client;</span><br><span class="line">    <span class="keyword">private</span> Request request;</span><br><span class="line">    <span class="keyword">private</span> Response response;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dispatcher</span><span class="params">(Socket client)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = <span class="keyword">new</span> Request(client);</span><br><span class="line">            response = <span class="keyword">new</span> Response(client);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">this</span>.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Servlet servlet = WebApp.getServletFromUrl(request.getUrl());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != servlet) &#123;</span><br><span class="line">                servlet.service(request, response);</span><br><span class="line">                response.pushToBrowser(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.pushToBrowser(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.pushToBrowser(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        release();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈整合配置文件,〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zephon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 19-2-21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server07</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRunning;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Server07 server = <span class="keyword">new</span> Server07();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动服务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isRunning = <span class="keyword">true</span>;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            receive();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器启动失败&quot;</span>);</span><br><span class="line">            stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接受连接处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                Socket client = serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;一个客户端建立成功&quot;</span>);</span><br><span class="line">                <span class="comment">//多线程处理</span></span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Dispatcher(client)).start();</span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//停止服务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        isRunning = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.serverSocket.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已停止&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty-应用实例</title>
    <url>/2020/08/15/Netty-%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="netty-应用实例">Netty-应用实例</h1>
<h2 id="实例-群聊系统">实例-群聊系统</h2>
<blockquote>
<p>需求：</p>
<ol type="1">
<li>编写一个Netty群聊系统，实现服务器端和客户端之间的数据简单通讯(非阻塞)</li>
<li>实现多个群聊</li>
<li>服务器端：可以监测用户上线、离线，并实现消息转发功能</li>
<li>客户端：通过channel可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息</li>
</ol>
</blockquote>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理客户端请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            b.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE,<span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">// 添加解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>,<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            <span class="comment">// 添加编码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            <span class="comment">// 添加业务处理器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> GroupChatServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;netty 服务器启动&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = b.bind(port).sync();</span><br><span class="line">            <span class="comment">// 监听关闭事件</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Server(<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupChatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个channel组，管理所有的channel</span></span><br><span class="line">    <span class="comment">// GlobalEventExecutor.INSTANCE：是全局的事件执行器，是一个单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到当前channel</span></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">// 遍历channelGroup，根据不同的情况，回送不同消息</span></span><br><span class="line">        channelGroup.forEach(ch -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(channel != ch)&#123;</span><br><span class="line">                ch.writeAndFlush(sdf.format(<span class="keyword">new</span> Date()) + <span class="string">&quot; [客户端]&quot;</span> + channel.remoteAddress() +<span class="string">&quot;发送了消息：&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 回显自己发送的消息</span></span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;[自己]发送了消息&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 关闭</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示连接建立后，执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将消息推送给客户端</span></span><br><span class="line">        <span class="comment">// 该方法会加将channelGroup中所有的channel遍历，并发送消息，不需要自己遍历</span></span><br><span class="line">        channelGroup.writeAndFlush(sdf.format(<span class="keyword">new</span> Date()) + <span class="string">&quot; [客户端]&quot;</span>+ctx.channel().remoteAddress()+<span class="string">&quot;加入聊天\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 将当前channel加入到channelGroup</span></span><br><span class="line">        channelGroup.add(ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示连接断开后，执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将消息推送给客户端</span></span><br><span class="line">        <span class="comment">// 该方法会加将channelGroup中所有的channel遍历，并发送消息，不需要自己遍历</span></span><br><span class="line">        channelGroup.writeAndFlush(sdf.format(<span class="keyword">new</span> Date()) +  <span class="string">&quot; [客户端]&quot;</span>+ctx.channel().remoteAddress()+<span class="string">&quot;离开了\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 不需要手动从channelGroup中移除channel</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示channel处于活动状态，提示xx上线</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot; 上线了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示channel处于非活动状态，提示xx离线</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot; 离线了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(String host,<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(group)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">// 得到pipeline</span></span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">// 加入相关handler</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>,<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> GroupChatClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = b.connect(host, port).sync();</span><br><span class="line">            <span class="comment">// 得到channel</span></span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(<span class="string">&quot;-----&quot;</span> + channel.remoteAddress() + <span class="string">&quot;-----&quot;</span>);</span><br><span class="line">            <span class="comment">// 客户端需要输入信息，创建一个扫描器</span></span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                <span class="comment">// 通过channel 发送到服务器端</span></span><br><span class="line">                channel.writeAndFlush(msg + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Client(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupChatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(msg.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="实例-心跳检测机制">实例-心跳检测机制</h2>
<blockquote>
<p>需求：</p>
<ol type="1">
<li>编写Netty心跳检测机制案例，当服务器超过3秒没有读时，就提示读空闲</li>
<li>当服务器超过5秒没有写操作时，就提示写空闲</li>
<li>当服务器超过7秒没有读或写操作时，就提示读写空闲</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">// 加入一个netty提供的IdleStateHandler</span></span><br><span class="line">                            <span class="comment">// 说明：</span></span><br><span class="line">                            <span class="comment">// 1：IdleStateHandler 是netty提供的处理空闲状态的处理器</span></span><br><span class="line">                            <span class="comment">// 2. IdleStateHandler(</span></span><br><span class="line">                            <span class="comment">//            long readerIdleTime, long writerIdleTime, long allIdleTime,</span></span><br><span class="line">                            <span class="comment">//            TimeUnit unit)</span></span><br><span class="line">                            <span class="comment">// readerIdleTime：表示多长时间没有读，就会发送一个心跳检测包，检测还是连接状态</span></span><br><span class="line">                            <span class="comment">// writerIdleTime：表示多长时间没有写，就会发送一个心跳检测包，检测是否连接</span></span><br><span class="line">                            <span class="comment">// allIdleTime：表示多长时间没有读写，就会发送一个心跳检测包，检测是否连接</span></span><br><span class="line">                            <span class="comment">// 3. 文档说明：当channel没有执行read、write或read和write，就会触发</span></span><br><span class="line">                            <span class="comment">// 4. 当IdleStateEvent 触发后，就会传递给pipeline的下一个handler处理</span></span><br><span class="line">                            <span class="comment">//    通过调用(触发)下一个handler的userEventTriggered，在该方法中去处理IdleStateEvent(读空闲、写空闲、读写空闲)</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 加入一个对空闲检测进一步处理的自定义handler</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(evt <span class="keyword">instanceof</span> IdleStateEvent)&#123;</span><br><span class="line">             IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class="line">             String eventType = <span class="keyword">null</span>;</span><br><span class="line">             <span class="keyword">switch</span> (event.state())&#123;</span><br><span class="line">                 <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                     eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                     eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                     eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;-- 超时事件 --&quot;</span>+eventType);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实例-通过websocket编程实现服务器和客户端长连接">实例-通过WebSocket编程实现服务器和客户端长连接</h2>
<blockquote>
<p>需求：</p>
<ol type="1">
<li>Http协议是无状态的，浏览器和服务器的请求响应一次，下一次会重新创建连接</li>
<li>要求：实现基于webSocket的长连接的全双工的交互</li>
<li>改变Http协议多次请求的约束，实现长连接了，服务器可以发送消息给浏览器</li>
<li>客户端浏览器和服务器端会相互感知，比如服务器关闭了，浏览器会感知，同样浏览器关闭了，服务器会感知</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        b.group(bossGroup,workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                        <span class="comment">// 基于HTTP协议，使用HTTP编码解码器</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                        <span class="comment">// 以块方式写，添加chunkedWriteHandler处理器</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 说明：</span></span><br><span class="line"><span class="comment">                         * 1. http数据在传输过程中是分段，HttpObjectAggregator 就是可以将多个段聚合</span></span><br><span class="line"><span class="comment">                         * 2. 这就是为什么当浏览器发送大量数据时，就会发出多次http请求</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 说明：</span></span><br><span class="line"><span class="comment">                         * 1. 对于websocket，数据是以帧的形式传递的</span></span><br><span class="line"><span class="comment">                         * 2. 可以看到WebSocketFrame下面有6个子类</span></span><br><span class="line"><span class="comment">                         * 3. 浏览器请求时，形式：ws://localhost:8888/xxx 表示请求的uri</span></span><br><span class="line"><span class="comment">                         * 4. WebSocketServerProtocolHandler 核心功能是将http协议升级为ws协议，保持长连接</span></span><br><span class="line"><span class="comment">                         * 5. 协议切换是通过101状态码实现</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">&quot;/hello&quot;</span>));</span><br><span class="line">                        <span class="comment">// 自定义handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        ChannelFuture channelFuture = b.bind(<span class="number">8888</span>).sync();</span><br><span class="line">        channelFuture.channel().closeFuture().sync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TextWebSocketFrame：表示一个文本帧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器收到消息：&quot;</span>+msg.text());</span><br><span class="line">        <span class="comment">// 回复浏览器</span></span><br><span class="line">        ctx.writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">&quot;服务器时间：&quot;</span> + LocalDateTime.now() + <span class="string">&quot; &quot;</span> + msg.text()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当web客户端连接后，触发方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// id：表示唯一的值，有LongText(唯一)和ShortText(不唯一)两种形式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdded被调用 &quot;</span> + ctx.channel().id().asLongText());</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdded被调用 &quot;</span> + ctx.channel().id().asShortText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerRemoved被调用 &quot;</span> + ctx.channel().id().asLongText());</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerRemoved被调用 &quot;</span> + ctx.channel().id().asShortText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常发生 &quot;</span>+cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> socket;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 判断当前浏览器是否支持websocket</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> ( <span class="built_in">window</span>.WebSocket)&#123;</span></span><br><span class="line"><span class="javascript">        socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:8888/hello&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ev 收到服务器端回送的消息</span></span></span><br><span class="line"><span class="javascript">        socket.onmessage = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> resText = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;resText&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            resText.value = resText.value + <span class="string">&#x27;\n&#x27;</span> + ev.data</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 连接开启(感知连接开启)</span></span></span><br><span class="line"><span class="javascript">        socket.onopen = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> resText = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;resText&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            resText.value = <span class="string">&quot;连接开启..&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        socket.onclose = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> resText = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;resText&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            resText.value = resText.value + <span class="string">&quot;\n连接关闭..&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;当前浏览器不支持websocket&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 发送消息到服务器</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(!<span class="built_in">window</span>.socket)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(socket.readyState == WebSocket.OPEN)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过socket发送消息</span></span></span><br><span class="line"><span class="javascript">            socket.send(message);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;连接未开启&quot;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 300px;width: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送消息&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send(this.form.message.value)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;resText&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 300px;width: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空内容&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;resText&#x27;).value = &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-分类问题(细)</title>
    <url>/2021/07/07/Part1-%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98(%E7%BB%86)/</url>
    <content><![CDATA[<h1 id="part1-分类问题细">Part1-分类问题(细)</h1>
<blockquote>
<p>这一部分学习自李宏毅老师的机器学习深度学习相关课程</p>
</blockquote>
<p>对于分类这件事，我们需要找的是一个函数，输入为x，输出是这个输入x对应的属于哪个类别class n，即：</p>
<p><span class="math inline">\(x \rightarrow function \rightarrow Class\ n\)</span></p>
<p>例：</p>
<blockquote>
<p>对于宝可梦游戏而言，输入的是精灵的特征(如总的战斗力、生命值、攻击值、防御值、特殊攻击值、特征防御值、速度等)，输出的是精灵对应的属性类别，如<span class="math inline">\(f(皮卡丘)=雷\)</span></p>
</blockquote>
<p>训练集：<span class="math inline">\((x^{(1)},\hat y^{(1)}),(x^{(2)},\hat y^{(2)}),\cdots,(x^{(m)},\hat y^{(m)})\)</span> (为与吴恩达老师教学保持一致，将目标有所修改)</p>
<h2 id="二分类">二分类</h2>
<h3 id="使用线性回归">使用线性回归</h3>
<p>对于训练数据：Class 1意味着目标值是1，Class 2意味着目标值是-1</p>
<p>预测时：采用线性回归方式，输出大于0，则类别接近于Class 1，输出小于0，则类别接近于Class 2</p>
<p>这样会出现如图所示的问题：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706194806573.png" /></p>
<p>如图，蓝色表示Class 1,红色表示Class 2，则<span class="math inline">\(b+w_1x_1+w_2x_2=0\)</span>是绿色线，表示两类的分界线，分界线上部表示回归输出小于0，下部表示输出大于0；但是可能会有这种情况：比如，Class 1的分布是右图的情况，这样的话，为了满足右下角的蓝色点在方程中的值接近1，则最终求出的分界线会是紫色这条线，这样分类结果就会有问题了。</p>
<p>此外，对于线性回归用于多分类问题而言，如果将Class 1对应于1，Class 2对应于2，Class 3对应于3等，则会存在以下问题：因为当这样做时，就默认是假设Class 3和Class 2是比较接近的，它们有某种关系，Class 2和Class 1是比较近的，它们有某种关系，但如果实际上这种关系不存在，这样将它作为一个线性回归问题来处理就没有办法得到一个好的结果。</p>
<h3 id="理想做法">理想做法</h3>
<blockquote>
<p>模型：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706195401513.png" /></p>
<p>损失函数(Loss function)：<span class="math inline">\(L(f)=\sum_m \delta(f(x^{(m)}\ne \hat y^{(m)}))\)</span>（预测结果错误的次数）</p>
<p>但是，这样的模型和损失函数，并不能微分，也就不能梯度下降，但可以使用感知机(Perceptron)或支持向量机(SVM)来解决，但这里不用。</p>
</blockquote>
<h2 id="概率模型">概率模型</h2>
<p>如图</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210706211829411.png" /></p>
<p>则</p>
<p>一个蓝球，从<span class="math inline">\(B_1\)</span>中抽出来的概率：<span class="math inline">\(P(B_1|Blue)=\frac{P(Blue|B_1)P(B_1)}{P(Blue|B_1)P(B_1)+P(Blue|B_2)P(B_2)}\)</span></p>
<p>对应的，如果将盒子换成类别则：</p>
<p>给定一个x，则它从对应类别抽出来的概率：</p>
<p><span class="math inline">\(P(C_1|x)=\frac{P(x|C_1)P(C_1)}{P(x|C_1)P(C_1)+P(x|C_2)P(C_2)}\)</span></p>
<p>要计算<span class="math inline">\(P(C_1|x)\)</span>，就必须知道<span class="math inline">\(P(C_1)、P(x|C_1)、P(C_2)、P(x|C_2)\)</span></p>
<blockquote>
<p>这一整套想法，叫做生成模型(Generative Model)，因为根据这些，可以计算任一x产生的概率，<span class="math inline">\(P(x)=P(x|C_1)P(C_1)+P(x|C_2)P(C_2)\)</span></p>
</blockquote>
<h3 id="先验概率">先验概率</h3>
<p>以宝可梦为例，数据集中79只水系，61只一般系，则：</p>
<p><span class="math inline">\(P(C_1)=\frac{79}{79+61}=0.56\)</span></p>
<p><span class="math inline">\(P(C_2)=\frac{61}{79+61}==0.44\)</span></p>
<p>从类别中挑选出某一只的概率：</p>
<p><span class="math inline">\(P(x|C_1)=？\)</span></p>
<p>假设只考虑防御力和特殊防御力两个特征，则79只水系的分布情况大概如图所示：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707095513882.png" /></p>
<p>那么，对于一只没有在79只宝可梦中的水系新宝可梦，则对应求出的概率难道就是0？</p>
<p>所以，需要想办法从这些已经有的宝可梦估测，如果从所有水系宝可梦中选一个，则对应的是这个新宝可梦的概率。</p>
<p><strong>解决</strong>：</p>
<p>可以想象为，这79只宝可梦，只是水系中的一小部分，即它们的防御力和特殊防御力是从一个高斯分布中抽样出来的，而从这个高斯分布中，抽取到新宝可梦对应防御力和特殊防御力对应点的概率并不为0。</p>
<p>高斯分布(正态分布)：</p>
<p><span class="math inline">\(f_{\mu,\Sigma}(x) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma|^{1/2}}exp\{-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu)\}\)</span></p>
<p>高斯分布可以看作：一个输入为向量<span class="math inline">\(x\)</span>，输出为<span class="math inline">\(x\)</span>从这一分布中被抽取出来的概率(实际是概率密度)的函数，这个函数则是由<strong>均值(期望)<span class="math inline">\(\mu\)</span></strong>和<strong>方差<span class="math inline">\(\Sigma\)</span></strong>决定</p>
<p>接下来，我们需要做的就是根据上述79个样本，来估计出<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\Sigma\)</span></p>
<p>方法：<strong>极大似然估计(Maximum Likelihood)</strong></p>
<p>可以想象成，这79个点，其实可以从任何一个高斯分布中被抽取出来，因为从一个高斯分布中可以抽取出空间上的任意一点，只是有的地方概率高，有的地方概率低。</p>
<p>但是，虽然说每个高斯分布都可以抽取出这79个样本，但它们抽取这79个样本的可能性并不一样。</p>
<p>对于一个高斯分布：</p>
<p><span class="math inline">\(Likelihood=从高斯分布中抽取到x^{(1)},x^{(2)},\cdots,x^{(79)}的概率\)</span></p>
<p>即：<span class="math inline">\(L(\mu,\Sigma)\)</span>（此处<span class="math inline">\(L\)</span>表示Likelihood，而非Loss）</p>
<p>由于这79个点是独立从高斯分布中抽取出来的，所以：</p>
<p><span class="math inline">\(L(\mu,\Sigma)=f_{\mu,\Sigma}(x^{(1)})f_{\mu,\Sigma}(x^{(2)})\cdots f_(\mu,\Sigma)(x^{79})\)</span></p>
<p>然后我们需要就是对应<span class="math inline">\(L(\mu,\Sigma)\)</span>最大时的<span class="math inline">\(\mu^*\)</span>和<span class="math inline">\(\Sigma^*\)</span>，即：</p>
<p><span class="math inline">\(\mu^*,\Sigma^*=arg\ \max_{\mu,\Sigma}L(\mu,\Sigma)\)</span></p>
<p>求解：</p>
<p><span class="math inline">\(\mu^*=\frac{1}{79}\sum_{n=1}^{79}x^{(n)}\)</span></p>
<p><span class="math inline">\(\Sigma^*=\frac{1}{79}\sum_{n=1}^{79}(x^{(n)}-\mu^*)(x^{(n)}-\mu^*)^T\)</span></p>
<p>代入到具体数值，可以计算出：</p>
<p><span class="math inline">\(\mu^1=\left[ \begin{matrix} 75.0 \\ 71.3 \end{matrix} \right] \ \Sigma^1=\left[ \begin{matrix} 874 &amp; 327 \\ 327 &amp; 929 \end{matrix} \right]\)</span></p>
<p>同理，求出一般系对应的：</p>
<p><span class="math inline">\(\mu^2=\left[ \begin{matrix} 55.6 \\ 59.8 \end{matrix} \right] \ \Sigma^2=\left[ \begin{matrix} 847&amp; 422 \\ 422&amp; 685\end{matrix} \right]\)</span></p>
<p>### 开始分类</p>
<p><span class="math inline">\(P(C_1|x)=\frac{P(x|C_1)P(C_1)}{P(x|C_1)P(C_1)+P(x|C_2)P(C_2)}\)</span></p>
<p>将上述计算代入后，如果<span class="math inline">\(P(C_1|x)&gt;0.5\)</span>，则x属于Class 1</p>
<p>至此，就得到了一个模型来解决这个分类问题。</p>
<h3 id="模型改良">模型改良</h3>
<p>上述得出：</p>
<p><span class="math inline">\(\mu^1=\left[ \begin{matrix} 75.0 \\ 71.3 \end{matrix} \right] \ \Sigma^1=\left[ \begin{matrix} 874 &amp; 327 \\ 327 &amp; 929 \end{matrix} \right]\)</span></p>
<p><span class="math inline">\(\mu^2=\left[ \begin{matrix} 55.6 \\ 59.8 \end{matrix} \right] \ \Sigma^2=\left[ \begin{matrix} 847&amp; 422 \\ 422&amp; 685\end{matrix} \right]\)</span></p>
<p>其实这在实际中是比较少见的，实际中，通常不会给第一个高斯分布都有自己的<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\Sigma\)</span>，比较常见的做法是<strong>不同的类别可以共用同一个$$</strong>，这样就可以减少参数量，由此：</p>
<p><span class="math inline">\(L(\mu^1,\mu^2,\Sigma)=f_{\mu^1,\Sigma}(x^{(1)})f_{\mu^1,\Sigma}(x^{(2)})\cdots f_{\mu^1,\Sigma}(x^{(79)}) \times f_{\mu^2,\Sigma}(x^{(80)})f_{\mu^2,\Sigma}(x^{(81)})\cdots f_{\mu^2,\Sigma}(x^{(140)})\)</span></p>
<p><span class="math inline">\(\Sigma = \frac{79}{140}\Sigma^1+\frac{61}{140}\Sigma^2\)</span></p>
<p>如图，当<span class="math inline">\(\Sigma\)</span>取一样时，分界线就是一条线性的：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707094834100.png" /></p>
<blockquote>
<p>总结：三步：</p>
<p>函数模型：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707095140023.png" /></p>
<p>函数好坏：使用<span class="math inline">\(\mu\)</span>和<span class="math inline">\(\Sigma\)</span>进行极大似然估计</p>
</blockquote>
<blockquote>
<p>为什么使用高斯分布呢？</p>
<p>没有原因，也可以使用别的，只是高斯分布使用比较多而已。</p>
</blockquote>
<p>另外一种常见的假设：</p>
<p>假设<span class="math inline">\(P(x|C_1)\)</span>中的<span class="math inline">\(x=\left[\begin{matrix} x_1 \\ x_2 \\ \cdots \\ x_k \\ \cdots \\ x_K \end{matrix} \right]\)</span>,其中<span class="math inline">\(x_k\)</span>表示对应的第k个特征</p>
<p>假设每个维度从概率模型中产生出来的概率是独立的，则</p>
<p><span class="math inline">\(P(x|C_1)=P(x_1|C_1)P(x_2|C_1)\cdots P(x_k|C_1)\cdots\)</span></p>
<p>可以说第一个概率<span class="math inline">\(P(x_k|C_1)\)</span>分别都是一维的高斯分布(1-D Gaussian)，这样就可以更加减少参数量。</p>
<p>以上这种假设处理方法也叫做<strong>朴素贝叶斯(Naive Bayes Classifier)</strong></p>
<h3 id="后验概率分析">后验概率分析</h3>
<p><span class="math inline">\(\begin{split} P(C_1|x) &amp;= \frac{P(x|C_1)P(C_1)}{P(x|C_1)P(C_1)+P(x|C_2)P(C_2)}\\ &amp;=\frac{1}{1+\frac{P(x|C_2)P(C_2)}{P(x|C_1)P(C_1)}}\end{split}\)</span></p>
<p>假设：<span class="math inline">\(z=\ln\frac{P(x|C_1)P(C_1)}{P(x|C_2)P(C_2)}\)</span></p>
<p>则：</p>
<p><span class="math inline">\(P(C_1|x)=\frac{1}{1+exp(-z)}=\sigma(z)\)</span></p>
<p>这个函数<span class="math inline">\(\sigma(z)\)</span>就叫做激活函数，对应的曲线图如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707101028977.png" /></p>
<p>具体计算z：(<em>数学警告</em>)</p>
<p><span class="math inline">\(\begin{split} z&amp;=\ln\frac{P(x|C_1)P(C_1)}{P(x|C_2)P(C_2)}\\ &amp;= \ln\frac{P(x|C_1)}{P(x|C_2)}+\ln\frac{P(C_1)}{P(C_2)}\end{split}\)</span></p>
<p>使用<span class="math inline">\(N_1\)</span>表示Class 1在训练数据中出现的次数，<span class="math inline">\(N_2\)</span>表示Class 2在训练数据中出现的次数则</p>
<p><span class="math inline">\(\frac{P(C_1)}{P(C_2)}=\frac{\frac{N_1}{N_1+N_2}}{\frac{N_2}{N_1+N_2}}=\frac{N_1}{N_2}\)</span></p>
<p><span class="math inline">\(P(x|C_1)= \frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma^1|^{1/2}}exp\{-\frac{1}{2}(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1)\)</span></p>
<p><span class="math inline">\(P(x|C_2)= \frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma^2|^{1/2}}exp\{-\frac{1}{2}(x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2)\)</span></p>
<p><span class="math inline">\(\begin{split} \ln\frac{P(x|C_1)}{P(x|C_2)} &amp;=\ln\frac{\frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma^1|^{1/2}}exp\{-\frac{1}{2}(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1)}{\frac{1}{(2\pi)^{D/2}}\frac{1}{|\Sigma^2|^{1/2}}exp\{-\frac{1}{2}(x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2)} \\ &amp;=\ln\frac{|\Sigma^2|^{1/2}}{|\Sigma^1|^{1/2}}exp\{-\frac{1}{2}[(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) \\ &amp;-(x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2)] \} \\ &amp;=\ln\frac{|\Sigma^2|^{1/2}}{|\Sigma^1|^{1/2}}-\frac{1}{2}[(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) \\ &amp;-(x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2)] \end{split}\)</span></p>
<p><span class="math inline">\(\begin{split} &amp;(x-\mu^1)^T(\Sigma^1)^{-1}(x-\mu^1) \\ &amp;=x^T(\Sigma^1)^{-1}x - x^T(\Sigma^1)^{-1}\mu^1-(\mu^1)^T(\Sigma^1)^{-1}x+(\mu^1)^T(\Sigma^1)^{-1}\mu^1 \\ &amp;= x^T(\Sigma^1)^{-1}x - 2(\mu^1)^T(\Sigma^1)^{-1}x+(\mu^1)^T(\Sigma^1)^{-1}\mu^1 \end{split}\)</span></p>
<p><span class="math inline">\(\begin{split} &amp;(x-\mu^2)^T(\Sigma^2)^{-1}(x-\mu^2) \\ &amp;=x^T(\Sigma^2)^{-1}x - x^T(\Sigma^2)^{-1}\mu^2-(\mu^2)^T(\Sigma^2)^{-1}x+(\mu^2)^T(\Sigma^2)^{-1}\mu^2 \\ &amp;= x^T(\Sigma^2)^{-1}x - 2(\mu^2)^T(\Sigma^2)^{-1}x+(\mu^2)^T(\Sigma^2)^{-1}\mu^2 \end{split}\)</span></p>
<p><span class="math inline">\(\Rightarrow \begin{split} z &amp;=\ln\frac{|\Sigma^2|^{1/2}}{|\Sigma^1|^{1/2}} - \frac{1}{2}x^T(\Sigma^1)^{-1}x+(\mu^1)^T(\Sigma^1)^{-1}x-\frac{1}{2}(\mu^1)^T(\Sigma^1)^{-1}\mu^1 \\ &amp;+\frac{1}{2}x^T(\Sigma^2)^{-1}x-(\mu^2)^T(\Sigma^2)^{-1}x+\frac{1}{2}(\mu^2)^T(\Sigma^2)^{-1}\mu^2+\ln\frac{N_1}{N_2} \end{split}\)</span></p>
<p>因为<span class="math inline">\(\Sigma\)</span>共用的，所以<span class="math inline">\(\Sigma_1=\Sigma_2=\Sigma\)</span>，所以简化后：</p>
<p><span class="math inline">\(z = (\mu^1-\mu^2)^T\Sigma^{-1}x-\frac{1}{2}(\mu^1)^T(\Sigma^1)^{-1}\mu^1+\frac{1}{2}(\mu^2)^T(\Sigma^2)^{-1}\mu^2+\ln\frac{N_1}{N_2}\)</span></p>
<p>假设：<span class="math inline">\(w^T=(\mu^1-\mu^2)^T\Sigma^{-1}\)</span> ；<span class="math inline">\(b=-\frac{1}{2}(\mu^1)^T(\Sigma^1)^{-1}\mu^1+\frac{1}{2}(\mu^2)^T(\Sigma^2)^{-1}\mu^2+\ln\frac{N_1}{N_2}\)</span></p>
<p>则<span class="math inline">\(z=w^Tx+b\)</span></p>
<p><span class="math inline">\(P(C_1|x)=\sigma(wx+b)\)</span></p>
<p>这也就是为什么，我们前面将<span class="math inline">\(\Sigma_1\)</span>和<span class="math inline">\(\Sigma_2\)</span>共用时，分界线成为了一条线性的</p>
<h2 id="逻辑回归">逻辑回归</h2>
<blockquote>
<p>函数：<span class="math inline">\(f_{w,b}(x)=P_{w,b}(C_1|x)\)</span></p>
<p><span class="math inline">\(P_{w,b}(C_1|x)=\sigma(z) \\ z=wx+b=\sum_iw_ix_i+b\)</span></p>
</blockquote>
<p>如果使用图像的方式来表示，就是如图所示：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707150109855.png" /></p>
<h3 id="损失函数">损失函数</h3>
<blockquote>
<p>训练数据：</p>
<p><span class="math inline">\(\begin{matrix} x^{(1)} &amp; x^{(2)} &amp; x^{(3)} &amp; \cdots &amp; x^{(m)} \\ C_1 &amp; C_1 &amp; C_2 &amp; \cdots &amp; C_1 \\ \hat y^{(1)}=1 &amp; y^{(2)}=1 &amp; y^{(3)}=0 &amp; \cdots &amp; y^{(m)}=1\end{matrix}\)</span></p>
</blockquote>
<p><span class="math inline">\(L(w,b)=f_{w,b}(x^{(1)})f_{w,b}(x^{(2)})(1-f_{w,b}(x^{(3)}))\cdots f_{w,b}(x^{(m)})\)</span></p>
<p>最好的<span class="math inline">\(w^*,b^*\)</span>就是当<span class="math inline">\(L(w,b)\)</span>最大时对应的<span class="math inline">\(w,b\)</span>，即：</p>
<p><span class="math inline">\(w^*,b^*=\arg \max_{(w,b)} L(w,b) \Leftrightarrow w^*,b^*=\arg \min_{(w,b)}-\ln L(w,b)\)</span></p>
<p><span class="math inline">\(-\ln L(w,b)=-\ln f_{w,b}(x^{(1)})-\ln f_{w,b}(x^{(2)})-\ln (1-f_{w,b}(x^{(3)})) \cdots\)</span></p>
<p>而<span class="math inline">\(-\ln f_{w,b}(x^{(i)})=-[\hat y^{(i)}\ln f(x^{(i)})+(1-\hat y^{(i)})\ln (1-f(x^{(i)}))]\)</span></p>
<p>所以：</p>
<p><span class="math inline">\(-\ln L(w,b)=\sum_i -[\hat y^{(i)}\ln f(x^{(i)})+(1-\hat y^{(i)})\ln (1-f(x^{(i)}))]\)</span></p>
<p><span class="math inline">\(-[\hat y^{(i)}\ln f(x^{(i)})+(1-\hat y^{(i)})\ln (1-f(x^{(i)}))]\)</span>:两个伯努利分布之间的<strong>交叉熵</strong></p>
<blockquote>
<p>交叉熵：</p>
<p>对于分布p：<span class="math inline">\(p(x=1)=\hat y^{(m)};p(x=0)=1-\hat y^{(m)}\)</span></p>
<p>q：<span class="math inline">\(q(x=1)=f(x^{(m)});q(x=0)=1-f(x^{(m)})\)</span></p>
<p>二者的交叉熵：<span class="math inline">\(H(p,q)=-\sum_xp(x)\ln(q(x))\)</span></p>
</blockquote>
<blockquote>
<p>为什么使用交叉熵，而不使用线性回归中的均方误差？</p>
<p>如果使用均方误差，则在计算<span class="math inline">\(\frac{\part L}{\part w_i}时\)</span>：</p>
<p>对于真实值 <span class="math inline">\(\hat y^{(m)}=1\)</span>时</p>
<p>如果<span class="math inline">\(f_{w,b}(x^{(m)})=1\)</span>（接近真实值），则<span class="math inline">\(\frac{\part L}{\part w_i}=0\)</span>;</p>
<p>如果<span class="math inline">\(f_{w,b}(x^{(m)})=0\)</span>（远离真实值），则<span class="math inline">\(\frac{\part L}{\part w_i}=0\)</span>;</p>
<p>对于真实值<span class="math inline">\(\hat{y}^{(m)}=0\)</span>时，同理</p>
<p>对于交叉熵而言，距离目标越远，则对应下降越快，距离目标越近，则下降越慢</p>
<p>而对于均方误差，距离目标远时，下降也很慢</p>
</blockquote>
<h3 id="梯度下降">梯度下降</h3>
<p><span class="math inline">\(\frac{\part \ln f_{w,b}(x)}{\part w_i}=\frac{\part \ln f_{w,b}(x)}{\part z}\frac{\part z}{\part w_i}\)</span></p>
<p><span class="math inline">\(f_{w,b}(x)=\sigma(z)=\frac{1}{1+exp(-z)} \; z=wx+b=\sum_i w_ix_i + b\)</span></p>
<p><span class="math inline">\(\Rightarrow\)</span></p>
<p><span class="math inline">\(\frac{\part\ln f_{w,b}(x)}{\part z}=\frac{\part\ln \sigma(z)}{\part z}=\frac{1}{\sigma(z)}\frac{\part \sigma(z)}{\part z} = \frac{1}{\sigma(z)}\sigma(z)(1-\sigma(z))=1-\sigma(z)\)</span>；<span class="math inline">\(\frac{\part z}{\part w_i}=x_i\)</span></p>
<p>同理：</p>
<p><span class="math inline">\(\frac{\part \ln (1-f_{w,b}(x))}{\part w_i}=\frac{\part \ln (1-f_{w,b}(x))}{\part z}\frac{\part z}{\part w_i}\)</span></p>
<p><span class="math inline">\(\frac{\part \ln (1-f_{w,b}(x))}{\part z}=-\frac{1}{1-\sigma(z)}\frac{\part\sigma(z)}{\part z}=-\frac{1}{1-\sigma(z)}\sigma(z)(1-\sigma(z))=\sigma(z)\)</span></p>
<p>所以：</p>
<p><span class="math inline">\(\frac{-\part \ln L(w,b)}{\part w_i} = \sum_m-[\hat y^{(m)}\frac{\part \ln f_{w,b}(x^{(m)})}{\part w_i}+(1-\hat y^{(m)})\frac{\ln (1-f_{w,b}(x^{(m)}))}{\part w_i} \\ = \sum_m -[\hat y^{(m)}(1-f_{w,b}(x^{(m)}))x_i^{(m)}-(1-\hat y^{(m)})f_{w,b}(x^{(m)})x_i^{(m)}] \\ =\sum_m-[\hat y^{(m)}-\hat y^{(m)}f_{w,b}(x^{(m)})-f_{w,b}(x^{(m)})+\hat y^{(m)}f_{w,b}(x^{(m)})]x_i^{(m)} \]\\ =\sum_m-(\hat y^{(m)}-f_{w,b}(x^{(m)}))x_i^{(m)}\)</span></p>
<p><span class="math inline">\(w_i \leftarrow w_i - \eta \Sigma_n -(\hat y^{(m)}-f_{w,b}(x^{(m)}))x_i^{(m)}\)</span></p>
<h3 id="逻辑回归-vs.-线性回归">逻辑回归 VS. 线性回归：</h3>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Logistic Regression</th>
<th>Linear Regression</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(f_{w,b}(x)=\sigma(\sum_iw_ix_i+b)\)</span><br />输出：[0,1]</td>
<td><span class="math inline">\(f_{w,b}(x)=\sum_iw_ix_i+b\)</span><br />输出：任意值</td>
</tr>
<tr class="even">
<td><span class="math inline">\(L(f)=\sum_mC(f(x^{(m)}),\hat y^{(m)})\)</span><br /><span class="math inline">\(\hat y^{(m)}:类别1:1；类别2:0\)</span></td>
<td><span class="math inline">\(L(f)=\frac{1}{2}\sum_m(f(x^{(m)})-\hat y^{(m)})^2\)</span><br />$y^{(m)}：一个真实值 $</td>
</tr>
<tr class="odd">
<td><span class="math inline">\(w_i \leftarrow w_i - \eta \Sigma_n -(\hat y^{(m)}-f_{w,b}(x^{(m)}))x_i^{(m)}\)</span></td>
<td><span class="math inline">\(w_i \leftarrow w_i - \eta \Sigma_n -(\hat y^{(m)}-f_{w,b}(x^{(m)}))x_i^{(m)}\)</span></td>
</tr>
</tbody>
</table>
<p>交叉熵：<span class="math inline">\(C(f(x^{(m)}),\hat y^{(m)}) =-[\hat y^{(m)}\ln f(x^{(m)})+(1-\hat y^{(m)})\ln (1-f(x^{(m)}))]\)</span></p>
<h2 id="判别模型-vs.-生成模型">判别模型 VS. 生成模型</h2>
<p>对于函数<span class="math inline">\(P(C_1|x)=\sigma(wx+b)\)</span></p>
<p>在判别模型中，我们直接求得<span class="math inline">\(w,b\)</span></p>
<p>在生成模型中，我们求出<span class="math inline">\(\mu^1,\mu^2,\Sigma^{-1}\)</span>，然后<span class="math inline">\(w^T=(\mu^1-\mu^2)^T\Sigma^{-1}；b=-\frac{1}{2}(\mu^1)^T(\Sigma^1)^{-1}\mu^1+\frac{1}{2}(\mu^2)^T(\Sigma^2)^{-1}\mu^2+\ln \frac{N_1}{N_2}\)</span></p>
<blockquote>
<p>问：两种模型中求得的<span class="math inline">\(w\)</span>和<span class="math inline">\(b\)</span>是一样的吗？</p>
<p>答：不是，因为分布不同，前者对于分布没有进行假设，而后者是假设的高斯分布，并且最终得到的结果中，判别模型的结果相对更好一些。</p>
</blockquote>
<p>例：训练数据如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707165441776.png" /></p>
<p>那么，如图的测试数据是属于哪一类呢？</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707165618329.png" /></p>
<p>我们可能都会认为是取自Class 1，而如果使用朴素贝叶斯方法去求呢？</p>
<p>首先，使用朴素贝叶斯则需要假设所有的特征产生的概率互相独立，即<span class="math inline">\(P(x|C_i)=P(x_1|C_i)P(x_2|C_i)\)</span></p>
<p>则：</p>
<p><span class="math inline">\(P(C_1)=\frac{1}{13}\)</span> <span class="math inline">\(P(x_1=1|C_1)=1\)</span> <span class="math inline">\(P(x_2=1|C_1)=1\)</span></p>
<p><span class="math inline">\(P(C_2)=\frac{12}{13}\)</span> <span class="math inline">\(P(x_1=1|C_2)=\frac{1}{3}\)</span> <span class="math inline">\(P(x_2=1|C_2)=\frac{1}{3}\)</span></p>
<p>给定上述测试数据后，则可计算其来自Class 1的概率</p>
<p><span class="math inline">\(P(C_1|x)=\frac{P(x|C_1)P(C_1)}{P(x|C_1)P(C_1)+P(x|C_2)P(C_2)}=\frac{1\times 1 \times \frac{1}{13}}{1 \times 1 \times \frac{1}{13}+\frac{1}{3}\times \frac{1}{3}\times \frac{12}{13}} \approx 0.43 &lt; 0.5\)</span></p>
<p>所以，计算结果是该数据来自Class 2</p>
<p>这就是因为，生成模型在计算时，进行了一些假设， 这个假设中，可能就有一些与测试数据一样的数据取自Class 1</p>
<blockquote>
<p>生成模型的优点：</p>
<ul>
<li>由于对数据分布进行了假设，因此只需要更少的数据量</li>
<li>由于对数据分布进行了假设，因此其对噪音时有更好的鲁棒性</li>
<li>先验概率和类条件概率分布可以由不同的源来进行估计</li>
</ul>
</blockquote>
<h2 id="多分类">多分类</h2>
<blockquote>
<p><span class="math inline">\(C_1:w^1,b_1 \ \ z_1=w^1x+b_1\)</span></p>
<p><span class="math inline">\(C_2:w^2,b_2 \ \ z_2=w^2x+b_2\)</span></p>
<p><span class="math inline">\(C_2:w^2,b_2 \ \ z_2=w^2x+b_2\)</span></p>
<p><span class="math inline">\(1&gt;y_i&gt;0\)</span></p>
<p><span class="math inline">\(\sum_i y_i=1\)</span></p>
</blockquote>
<p><span class="math inline">\(y_i=P(C_i|x)\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707171835492.png" /></p>
<h2 id="逻辑回归的限制">逻辑回归的限制</h2>
<p>例：</p>
<p>对于如图所示的输入：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707172230666.png" /></p>
<p>则<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707172323522.png" /></p>
<p>使用一条直接，无论怎么画，都无法实现正确的分类</p>
<p>这也就是线性模型无法解决<strong>异或问题</strong></p>
<p>解决方法：</p>
<p><strong>特征变换</strong></p>
<p>如图，对于原始数据，通过改变数据的值为对应的点到原点的距离，来实现特征的变换</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707172947600.png" /></p>
<blockquote>
<p>然而，这样同样有一个问题，找到这样一种特征变换方式并不总是这么容易</p>
</blockquote>
<p>由此，我们可以采用<strong>将多个逻辑回归模型级联</strong>的方法解决问题</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210707173324521.png" /></p>
<p>这样，也就引出了<strong>神经网络</strong></p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-支持向量机</title>
    <url>/2021/07/15/Part1-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="part1-支持向量机">Part1-支持向量机</h1>
<h2 id="优化目标">优化目标</h2>
<h3 id="逻辑回归的另类观点">逻辑回归的另类观点</h3>
<blockquote>
<p>逻辑回归：</p>
<p><span class="math inline">\(h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}\)</span>，</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714154306920.png" /></p>
</blockquote>
<p>如果y=1，我们想要<span class="math inline">\(h_\theta(x)\approx 1,\theta^Tx \gg0\)</span></p>
<p>如果y=0，我们想要<span class="math inline">\(h_\theta(x)=0,\theta^Tx \ll 0\)</span></p>
<p>对于单个样本的代价：<span class="math inline">\(-(y\log h_\theta(x) + (1-y)\log(1-h_\theta(x)))\\=-y\log\frac{1}{1+e^{-\theta^Tx}}-(1-y)\log(1-\frac{1}{1+e^{-\theta^Tx}})\)</span></p>
<p>对于y=1，会得到这样一条曲线：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714155404469.png" /></p>
<p>可以看到，当<span class="math inline">\(z\)</span>值很大时，也就是当<span class="math inline">\(\theta^Tx\)</span>很大时，函数对应的值会变得非常小，也就是说它对代价函数的的影响很小，这也就解释了为什么逻辑回归在看见<span class="math inline">\(y=1\)</span>这样的样本时，会将<span class="math inline">\(\theta^Tx\)</span>设成一个很大的值，因为它在代价函数中对应的这一项值会非常小。</p>
<p>为了构建支持向量机，下面我们要做是就是从这个代价函数(<span class="math inline">\(-\log \frac{1}{1+e^{-z}}\)</span> )开始，然后进行少量修改，结果如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714155936730.png" /></p>
<p>不难想到，它和逻辑回归的效果很相似，事实上，这会使支持向量机拥有计算上的优势，并使得之后优化问题变得简单，更容易解决，</p>
<p>还有一种情况，当y=0时，与y=1类似，如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714160220561.png" /></p>
<h3 id="支持向量积svm">支持向量积(SVM)</h3>
<blockquote>
<p>逻辑回归：</p>
<p><span class="math inline">\(\min_\theta \frac{1}{m}[\sum_{i=1}^my^{(i)}(-\log h_\theta(x^{(i)}))+(1-y^{(i)})((-\log(1-h_\theta(x^{(i)})))]+\frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2\)</span></p>
</blockquote>
<p><strong>支持向量积</strong>：</p>
<p><span class="math inline">\(\min_\theta \frac{1}{m}\sum_{i=1}^my^{(i)}cost_1(\theta^Tx^{(i)})+(1-y^{(i)})cost_0(\theta^Tx^{(i)})+\frac{\lambda}{2m}\sum_{i=0}^n \theta_j^2\)</span></p>
<p>其中<span class="math inline">\(cost_1\)</span>和<span class="math inline">\(cost_0\)</span>表示上述改动后的图对应的代价函数</p>
<p>其可以看作于<span class="math inline">\(\min_\theta A+\lambda B \rightarrow \min_\theta CA+B(可以想象成C=\frac{1}{\lambda})\)</span>，但两个表达式并不是相等的，而是当<span class="math inline">\(C=\frac{1}{\lambda}\)</span>时，两个函数的优化目标是一样的，于是：</p>
<p><span class="math inline">\(\min_ \theta C\sum_{i=1}^m[y^{(i)}cost_1(\theta^Tx^{(i)})+(1-y^{(i)})cost_0(\theta^Tx^{(i)})]+\frac{1}{2}\sum_{i=1}^n\theta_j^2\)</span></p>
<p>这也就是SVM学习得到的参数</p>
<p>而与逻辑回归不同的是，支持向量积并不会输出概率，相对的，我们得到的是通过优化这个代价函数得到的一个参数<span class="math inline">\(\theta\)</span>，而支持向量积所做是进行一个直接的预测，预测y是0或1</p>
<p><span class="math inline">\(h_\theta(x)=\left\{ \begin{align} &amp;1,\theta^Tx \ge 0 \\ &amp;0,其它 \end{align} \right.\)</span></p>
<p>这就是SVM的假设函数形式</p>
<h2 id="直观上对大间隔的理解">直观上对大间隔的理解</h2>
<p>有时人们会将<strong>支持向量积</strong>称为<strong>大间距分类器</strong>，接下来，要学习的就是直观的对这个大间距进行理解。</p>
<h3 id="支持向量积support-vector-machinesvm">支持向量积(Support Vector Machine,SVM)</h3>
<p><span class="math inline">\(\min_ \theta C\sum_{i=1}^m[y^{(i)}cost_1(\theta^Tx^{(i)})+(1-y^{(i)})cost_0(\theta^Tx^{(i)})]+\frac{1}{2}\sum_{i=1}^n\theta_j^2\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210714185110521.png" /></p>
<p>对应的左图为:<span class="math inline">\(cost_1(z)\)</span>，右图为<span class="math inline">\(cost_0(z)\)</span></p>
<p>如果<span class="math inline">\(y=1\)</span>，则我们想要<span class="math inline">\(\theta^Tx \ge 1(而不仅仅是\ge0)\)</span></p>
<p>如果<span class="math inline">\(y=0\)</span>，则我们想要<span class="math inline">\(\theta^Tx \le -1(而不仅仅是&lt;0)\)</span></p>
<h3 id="svm决策边界">SVM决策边界</h3>
<p><span class="math inline">\(\min_ \theta C\sum_{i=1}^m[y^{(i)}cost_1(\theta^Tx^{(i)})+(1-y^{(i)})cost_0(\theta^Tx^{(i)})]+\frac{1}{2}\sum_{i=1}^n\theta_j^2\)</span></p>
<p>如果<span class="math inline">\(C\)</span>非常非常大，则当最小化优化目标时，我们就希望能找到一个值， 使得第一项(<span class="math inline">\(\sum_{i=1}^m[y^{(i)}cost_1(\theta^Tx^{(i)})+(1-y^{(i)})cost_0(\theta^Tx^{(i)})]\)</span>)等于0，</p>
<p>而当<span class="math inline">\(y^{(i)}=1\)</span>时，<span class="math inline">\(\theta^Tx^{(i)} \ge 1\)</span>；</p>
<p>当<span class="math inline">\(y^{(i)}=0\)</span>时，<span class="math inline">\(\theta^Tx^{(i)} \le -1\)</span></p>
<p>线性可分情况：</p>
<p>如图，有这样一个数据集，其中有正样本，也有负样本，这些数据线性可分</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715103317855.png" /></p>
<p>例如，可以用绿色这条决策边界将正样本和负样本分开，但它看上去不是非常自然；但是SVM则会选择图中黑色线对应的决策边界，这条边界比绿色的就要好得多，这条黑色的决策边界鲁棒性更好，能更好地分开样本和负样本。从数学上来说，这条黑色边界拥有更大的距离，如图中两条蓝色线，可以发现黑色的决策边界和训练样本的最小距离比绿色线对应的要更大一些。</p>
<p>因此，这个距离叫做支持向量机的间距(margin)，这使得SVM具有鲁棒性，因为它在分离数据时会尽量用大的间距去分离。</p>
<p>因此，支持向量机有时被称为<strong>大间距分类器(Large margin classifier)</strong></p>
<h3 id="存在异常值的大间距分类器">存在异常值的大间距分类器</h3>
<p>现在这个大间距分类器是在常数C被设的非常大的情况下得出的，而SVM实际上要比这个大间距的视图更加复杂。尤其是如果只使用大间距分类器时，这时的学习算法对异常点会非常敏感。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715104330723.png" /></p>
<p>如图，在这样一个异常点的影响下，就会将决策边界从这条黑色线变成紫色线，这可能并不是一个好的结果，但如果不把C设置得那么大，那么最后得到的可能就还是这条黑色的线。</p>
<p>可以想象类比为：<span class="math inline">\(C\)</span>相当于<span class="math inline">\(\frac{1}{\lambda}\)</span>，当C非常大时，就是<span class="math inline">\(\lambda\)</span>非常小，就会在分类时，容易导致过拟合，而当<span class="math inline">\(C\)</span>没那么大时，<span class="math inline">\(\lambda\)</span>就会相对合适，就可以一定程度上避免过拟合</p>
<h2 id="大间隔分类器背后的数学原理">大间隔分类器背后的数学原理</h2>
<h3 id="向量内积">向量内积</h3>
<p>开始前，先复习一下向量内积</p>
<p>例：</p>
<blockquote>
<p><span class="math inline">\(u=\left[ \begin{matrix} u_1 \\ u_2 \end{matrix} \right]\)</span>,<span class="math inline">\(v=\left[ \begin{matrix} v_1 \\ v_2 \end{matrix} \right]\)</span></p>
</blockquote>
<p>则<span class="math inline">\(u\)</span>和<span class="math inline">\(v\)</span>的内积为：<span class="math inline">\(u^Tv\)</span></p>
<p><span class="math inline">\(u\)</span>和<span class="math inline">\(v\)</span>对应的图如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715102755312.png" /></p>
<p>则可以得出向量<span class="math inline">\(u\)</span>的范数(向量的欧几里得长度)：<span class="math inline">\(|| u || =\sqrt{u_1^2+u_2^2}\)</span></p>
<p>那么，如何计算<span class="math inline">\(u\)</span>和<span class="math inline">\(v\)</span>的内积？</p>
<p>将向量<span class="math inline">\(v\)</span>投影到向量<span class="math inline">\(u\)</span>上，如图，然后测量图中对应的红色线长度(p)，则<span class="math inline">\(p\)</span>就是向量<span class="math inline">\(v\)</span>在向量<span class="math inline">\(u\)</span>上的投影长度或者说量，并且此处的<span class="math inline">\(p\)</span>是有符号的，如果<span class="math inline">\(v\)</span>和<span class="math inline">\(u\)</span>夹角大于<span class="math inline">\(90^\circ\)</span>，则<span class="math inline">\(p\)</span>就是小于0的</p>
<p>即：<span class="math inline">\(u^Tv=p\cdot||u||=u_1v_1+u_2v_2(p \in \mathbb R)\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715103246623.png" /></p>
<h3 id="svm决策边界-1">SVM决策边界</h3>
<p>SVM中的优化目标函数：<span class="math inline">\(\min_\theta \frac{1}{2}\sum_{j=1}^n\theta_j^2\)</span></p>
<p><span class="math inline">\(\theta^Tx^{(i)} \ge 1,如果y^{(i)}=1\)</span></p>
<p><span class="math inline">\(\theta^Tx^{(i)} \le -1,如果y^{(i)}=0\)</span></p>
<p>为理解方便进行以下简化：先忽略截距(<span class="math inline">\(\theta_0=0\)</span>)，为画图方便设置特征数为2(n=2)</p>
<p>则优化目标函数可以写作：<span class="math inline">\(\min_\theta\frac{1}{2}\sum_{j=1}^n\theta_j^2 =\frac{1}{2}(\theta_1^2+\theta_2^2)=\frac{1}{2}(\sqrt{\theta_1^2+\theta_2^2})^2=\frac{1}{2}||\theta||^2\)</span></p>
<p>且<span class="math inline">\(\theta=\left[\begin{matrix} \theta_1 \\ \theta_2 \end{matrix} \right]或\theta=\left[\begin{matrix}\theta_0 \\ \theta_1 \\ \theta_2 \end{matrix} \right](\theta_0=0)\)</span></p>
<p>然后再考虑<span class="math inline">\(\theta^Tx^{(i)}\)</span>和前面向量内积中的<span class="math inline">\(u^Tv\)</span>类比，则<span class="math inline">\(\theta\)</span>类比<span class="math inline">\(u\)</span>，<span class="math inline">\(x^{(i)}\)</span>类比<span class="math inline">\(v\)</span>，则将<span class="math inline">\(x^{(i)}\)</span>对应的向量投影到<span class="math inline">\(\theta\)</span>对应的向量上，就会得到一个投影<span class="math inline">\(p^{(i)}\)</span>，则<span class="math inline">\(\theta^Tx^{(i)}=p^{(i)}||\theta||=\theta_1x_1^{(i)}+\theta_2x_2^{(i)}\)</span></p>
<p>这就意味着，这两种条件即：<span class="math inline">\(\theta^Tx^{(i)} \ge 1或\le -1\)</span>可以换种方法表述，即：<span class="math inline">\(p^{(i)}\cdot ||\theta|| \ge 1或\le -1\)</span></p>
<p>所以，将其写入优化目标函数后，得出结果如下：</p>
<p><span class="math inline">\(\min_\theta \frac{1}{2}\sum_{j=1}^n \theta_j^2\)</span></p>
<p><span class="math inline">\(s.t. \begin{align} &amp;p^{(i)}\cdot||\theta|| \ge 1,如果y^{(i)}=1 \\ &amp; p^{(i)}\cdot||\theta|| \le -1,如果y^{(i)}=0 \end{align}\)</span></p>
<p>现在看如图的训练样本，为方便，继续简化<span class="math inline">\(\theta_0=0\)</span>。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715114344260.png" /></p>
<p>则SVM的选择，一种选择是如图中绿色对应的线，这个决策边界并不是一个好的选择，因为它的间距很小，为什么SVM不会选择它？对应这种参数选择，可以看出，<span class="math inline">\(\theta\)</span>实际上是与决策边界<span class="math inline">\(90^\circ\)</span>正交的(因为边界处<span class="math inline">\(\theta^Tx=0\)</span>)，如图，<span class="math inline">\(x^{(1)}\)</span>和<span class="math inline">\(x^{(2)}\)</span>对应投影为<span class="math inline">\(p^{(1)}\)</span>和<span class="math inline">\(p^{(2)}\)</span>,这两个投影线段都会非常短，我们会发现，这些<span class="math inline">\(p^{(i)}\)</span>都是非常小的数，而我们观察优化目标函数，就会发现以<span class="math inline">\(y^{(i)}=1\)</span>为例，<span class="math inline">\(p^{(i)}\cdot||\theta|| \ge 1\)</span>，如果这里的<span class="math inline">\(p^{(i)}\)</span>特别小，那就意味着需要<span class="math inline">\(||\theta||\)</span>非常大，同样的，对于负样本，也是一样，然而，优化目标函数要做的是找一个<span class="math inline">\(\theta\)</span>来使得<span class="math inline">\(\frac{1}{2}||\theta||^2\)</span>足够小，因此这对于<span class="math inline">\(\theta\)</span>而言并不是一个好的方向。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715114824006.png" /></p>
<p>而如果SVM选择了如图中蓝色的边界，则会有很大的不同，此时得出的投影<span class="math inline">\(p^{(1)}\)</span>和<span class="math inline">\(p^{(2)}\)</span>就比之前大许多，此时的对于<span class="math inline">\(p^{(i)}\cdot ||\theta|| \ge 1\)</span>，由于<span class="math inline">\(p^{(i)}\)</span>比较大，则<span class="math inline">\(||\theta||\)</span>可以小一点，这样，就与优化目标函数保持一致了。</p>
<p>这样就意味着，SVM通过选择第二种决策边界，可以使得参数<span class="math inline">\(||\theta||\)</span>变小得多，来达到优化目标函数的目的，这也就是为什么SVM会选择第二种决策边界的假设，这也就是SVM是如何产生大间距分类现象的原理。</p>
<p>而<span class="math inline">\(\theta_0 \ne 0\)</span>时，也是类似的，结果仍然会产生大间距分类。</p>
<h2 id="核函数">核函数</h2>
<h3 id="非线性决策边界">非线性决策边界</h3>
<p>如图，如果有一个像这样的训练集，希望拟合一个非线性的决策边界，来区别正负实例，一种办法是构造一个复杂的多项式特征的集合，如<span class="math inline">\(\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_1x_2+\theta_4x_1^2+\theta_5x_2^2+\cdots \ge 0\)</span></p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715120444270.png" /></p>
<p>为了说明另一种方法，先引入新的符号，可以把假设函数看成用<span class="math inline">\(\theta_0+\theta_1f_1+\theta_2f_2+\cdots\)</span>计算的决策边界，<span class="math inline">\(f_1,f_2,\cdots\)</span>就是新的特征变量，即<span class="math inline">\(f_1=x_1,f_2=x_2,f_3=x_1x_2,\cdots\)</span></p>
<p>是否有一个不同的或更好的特征选择方法呢？</p>
<p>首先，手动选取一些点，然后将这些点称为<span class="math inline">\(l^{(1)},l^{(2)},l^{(3)}\)</span>,并将它们叫做标记(landmark)，然后这样定义新的特征：</p>
<p>给定一个实例<span class="math inline">\(x\)</span>：定义<span class="math inline">\(f_1=similarity(x,l^{(1)})=exp(-\frac{||x-l^{(1)}||^2}{2\sigma^2})\)</span>，similarity为一种相似度的度量，即度量训练样本<span class="math inline">\(x\)</span>与第一个标记的相似度。</p>
<p>同理<span class="math inline">\(f_2=similarity(x,l^{(2)})=exp(-\frac{||x-l^{(2)}||^2}{2\sigma^2})\)</span></p>
<p>这个相似度函数用数学术语说就是一个<strong>核函数</strong>，上述所用的核函数(<span class="math inline">\(exp(-\frac{||x-l^{(1)}||^2}{2\sigma^2})\)</span>)实际上是高斯核函数(Gaussian kernel)，实际上通常我们用<span class="math inline">\(K(x,l^{(i)})\)</span>代替<span class="math inline">\(similarity(x,l^{(i)})\)</span></p>
<h3 id="核和相似度">核和相似度</h3>
<p>先来看第一个标记，即标记<span class="math inline">\(l^{(1)}\)</span></p>
<p><span class="math inline">\(f_1=similarity(x,l^{(1)})=exp(-\frac{||x-l^{(1)}||^2}{2\sigma^2})=exp(-\frac{\sum_{j=1}^n (x_j-l_j^{(1)})^2}{2\sigma^2})\)</span></p>
<p>假设x与其中一个标记点非常接近，<span class="math inline">\(x \approx l^{(1)}\)</span>：</p>
<p>则这个欧氏距离以及这个分子就会接近于0，因此<span class="math inline">\(f_1\)</span>就是个简单的特征，将会接近<span class="math inline">\(exp(-\frac{0^2}{2\sigma^2}) \approx 1\)</span></p>
<p>相反地，如果<span class="math inline">\(x\)</span>离<span class="math inline">\(l^{(1)}\)</span>很远，则<span class="math inline">\(f_1=exp(-\frac{(large\ number)^2}{2\sigma^2})\approx 0\)</span></p>
<p>例：</p>
<blockquote>
<p><span class="math inline">\(l^{(1)}=\left[ \begin{matrix} 3 \\ 5 \end{matrix} \right],f_1=exp(-\frac{||x-l^{(1)}||^2}{2\sigma^2})\)</span></p>
<p><span class="math inline">\(\sigma^2=1\)</span></p>
</blockquote>
<p>如果对特征画图，则如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715152218978.png" /></p>
<p>这个曲面高度是<span class="math inline">\(f_1\)</span>的值，那么横轴则分别对应<span class="math inline">\(x_1,x_2\)</span></p>
<p>当<span class="math inline">\(\sigma^2=0.5\)</span>时，对应的如图：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715152702449.png" alt="image-20210715152702449" /><figcaption>image-20210715152702449</figcaption>
</figure>
<p>当<span class="math inline">\(\sigma^2=3\)</span>时，对应的如图：</p>
<figure>
<img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715152744293.png" alt="image-20210715152744293" /><figcaption>image-20210715152744293</figcaption>
</figure>
<p>上述是对特征的定义，接下来看看我们能得到什么样的预测函数。</p>
<p>给定一个训练样本x，我们准备计算出三个特征变量，即<span class="math inline">\(f_1,f_2,f_3\)</span>，如果<span class="math inline">\(\theta_0+\theta_1f_1+\theta_2f_2+\theta_3f_3 \ge 0\)</span>，则预测值将等于1。</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715154349567.png" /></p>
<p>如：我们假定我们已经找到了一个学习算法，并且假设已经得到了这些参数的值<span class="math inline">\(\theta_0=-0.5,\theta_1=1,\theta_2=1,\theta_3=0\)</span></p>
<p>如果有一个训练实例<span class="math inline">\(x\)</span>接近于<span class="math inline">\(l^{(1)}\)</span>，如图中紫色的点，则我们会有<span class="math inline">\(f_1\)</span>接近于1(<span class="math inline">\(f_1 \approx 1\)</span>)，又因为<span class="math inline">\(x\)</span>离<span class="math inline">\(l^{(2)},l^{(3)}\)</span>都很远，所以<span class="math inline">\(f_2 \approx 0,f_3 \approx 0\)</span>，则<span class="math inline">\(\theta_0+\theta_1*1+\theta_2*0+\theta_3*0=-0.5+1=0.5 \ge0\)</span>，因此这个点预测的值是1</p>
<p>现在假设选择另一个点，如图中蓝色对应的，则<span class="math inline">\(f_1,f_2,f_3 \approx 0\)</span>，于是<span class="math inline">\(\theta_0+\theta_1f_1+\cdots \approx-0.5&lt;0\)</span>，因此预测的y值是0</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715155139389.png" /></p>
<p>我们最后会得到这个预测函数的判别边界，如图所示，在这个红色边界里面，预测的y值等于1，在外面预测的y值等于0，这就是我们如何定义标记点和核函数来训练出非常复杂的非线性决策边界方法。</p>
<h3 id="选择标记landmarks">选择标记(landmarks)</h3>
<p>我们在上述中说到了选择标记点的过程，例如<span class="math inline">\(l^{(1)},l^{(2)},l^{(3)}\)</span>，使我们能定义相似度函数也称为核函数如：<span class="math inline">\(f_i=similarity(x,l^{(i)})=exp(-\frac{||x-l^{(i)}||^2}{2\sigma^2})\)</span>，这使我们能构造一个预测函数<span class="math inline">\(y=1，如果\theta_0+\theta_1f_1+\theta_2f_2+\theta_3f_3 \ge 0\)</span>，但是，我们从哪里得到这些标记点？而且我们有时需要更多的标记点，而不仅仅是我们选的这三个。</p>
<p>因此，在实际应用时，在给定学习问题中，怎么选取标记点？我们的数据集中有一些正样本和一些负样本，我们的想法是将选取样本点，我们拥有的每个样本点，只需要直接使用它们，直接将训练样本作为标记点如图：</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20210715162311428.png" /></p>
<p>这样得到m个标记<span class="math inline">\(l^{(1)},l^{(2)},\cdots,l^{(m)}\)</span>，即每个标记点都和一个样本点的位置相对应，这样还不错，因为这说明特征函数基本上是在描述每一个样本距离，样本集中其它样本的距离，具体的这个过程大致如下：</p>
<p>给定<span class="math inline">\((x^{(1)},y^{(1)}),(x^{(2)},y^{(2)}),\cdots,(x^{(m)},y^{(m)})\)</span></p>
<p>选择<span class="math inline">\(l^{(1)}=x^{(1)},l^{(2)}=x^{(2)},\cdots,l^{(m)}=x^{(m)}\)</span></p>
<p>这样，当给定样本<span class="math inline">\(x\)</span>时:</p>
<p><span class="math inline">\(f_1=similarity(x,l^{(1)})\)</span></p>
<p><span class="math inline">\(f_2=similarity(x,l^{(2)})\)</span></p>
<p><span class="math inline">\(\cdots\)</span></p>
<p>组成<span class="math inline">\(f=\left[ \begin{matrix}f_0\\ f_1\\f_2\\\cdots\\f_m \end{matrix} \right]\)</span><span class="math inline">\(f_0=1\)</span></p>
<p>对于训练样本<span class="math inline">\((x^{(i)},y^{(i)})\)</span></p>
<p><span class="math inline">\(x^{(i)} \rightarrow \begin{matrix} f_1^{(i)}=sim(x^{(i)},l^{(1)}) \\ f_2^{(i)}=sim(x^{(i)},l^{(2)}) \\ \cdots \\ f_m^{(i)}=sim(x^{(i)},l^{(m)}) \end{matrix}\)</span>，其中<span class="math inline">\(f_i^{(i)}=sim(x^{(i)},l^{(i)})=exp(-\frac{0}{2\sigma^2})=1\)</span></p>
<p>将这些合并成一个向量：</p>
<p><span class="math inline">\(f^{(i)}=\left[ \begin{matrix}f_0^{(i)}\\ f_1^{(i)}\\f_2^{(i)}\\\cdots\\f_m^{(i)} \end{matrix} \right]\)</span>，然后作为输入</p>
<h3 id="带核支持向量积">带核支持向量积</h3>
<p>假设：给定<span class="math inline">\(x\)</span>，计算特征<span class="math inline">\(f \in \mathbb R^{(m+1)}\)</span></p>
<p>预测：如果<span class="math inline">\(\theta^Tf \ge 0\)</span>，则<span class="math inline">\(y=1\)</span></p>
<p>训练：<span class="math inline">\(\min_\theta C \sum_{i=1}^m y^{(i)} cost_1(\theta^Tf^{(i)})+(1-y^{(i)})cost_0(\theta^Tf^{(i)})+\frac{1}{2}\sum_{j=1}^n \theta_j^2\)</span></p>
<p>在实际应用中，最后这一项(<span class="math inline">\(\frac{1}{2}\sum_{j=1}^n\theta_j^2\)</span>)会有所不同</p>
<p><span class="math inline">\(\sum_j\theta_j^2\)</span>这一项可以被重写为：<span class="math inline">\(\theta^T\theta\)</span>，如果忽略<span class="math inline">\(\theta_0\)</span>的话，<span class="math inline">\(\theta=\left[\begin{matrix} \theta_1 \\ \cdots \\ \theta_m \end{matrix} \right]\)</span></p>
<p>大多数SVM在实现时，其实是用<span class="math inline">\(\theta^TM\theta\)</span>(<span class="math inline">\(M\)</span>是依赖于核函数的某个矩阵)替换掉<span class="math inline">\(\theta^T\theta\)</span>的</p>
<h3 id="svm参数选择">SVM参数选择</h3>
<p><span class="math inline">\(C(=\frac{1}{\lambda})\)</span></p>
<p>对于C比较大时：偏差小，方差大(类似小的<span class="math inline">\(\lambda\)</span>的结果)</p>
<p>对于C比较小时：偏差大，方差小(类似大的<span class="math inline">\(\lambda\)</span>的结果)</p>
<p><span class="math inline">\(\sigma^2\)</span></p>
<p>对于<span class="math inline">\(\sigma^2\)</span>偏大时：高斯核函数倾向于变得相对平滑，则特征<span class="math inline">\(f_i\)</span>会变化的比较平缓，这也就会导致较高的偏差和较低的方差</p>
<p>对于<span class="math inline">\(\sigma^2\)</span>偏小时：高斯核函数倾向于变得相对不平滑，则特征<span class="math inline">\(f_i\)</span>会变化的比较剧烈，这也就会导致较低的偏差和较高的方差</p>
<h2 id="使用svm">使用SVM</h2>
<p>尽管我们在使用SVM的过程中，不会去自己实现，而是使用现有的包，但也需要做几件事儿：</p>
<ul>
<li>参数C的选择</li>
<li>核的选择(如果是没有核函数，则对应的是线性内核函数)
<ul>
<li>当特征数量大而训练集样本很小的时候，则使用线性内核函数是一个合理的设置</li>
<li>对于内核函数的第二个选择，可以使用高斯函数，需要选择<span class="math inline">\(\sigma^2\)</span>参数，如果特征数量小而训练集样本数很大时，则使用高斯函数是一个不错的选择</li>
<li>其它核函数(如多项式核函数、字符串核函数、卡方核函数、直方相交核函数)</li>
</ul></li>
</ul>
<p>如何选择使用逻辑回归还是SVM呢？</p>
<p>如果有大量的特征，远大于m，就可能如文本分类问题，特征矩阵维度非常大，且训练集个数很少，则通常使用逻辑回归，或者使用不带核的SVM或线性核函数</p>
<p>而如果n较小，m大小适中，如：n可能是1-1000之间的数，m可能是从10到10000中的任何一个数值，则通常使用使用高斯核函数的SVM</p>
<p>如果n较小，而m较大，如：n可能是1-1000之间的数，而m可能是50000甚至上百万，这样，通常选择手动创建更多的特征变量，然后使用逻辑回归或不带核的SVM</p>
<p>神经网络可能可以对于大多数设置都有较好的效果，但或许训练会很慢</p>
]]></content>
      <categories>
        <category>机器/深度学习自学</category>
      </categories>
      <tags>
        <tag>机器/深度学习自学</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM重新学习总结</title>
    <url>/2020/02/16/SSM%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="ssm重新学习总结">SSM重新学习总结</h1>
<h2 id="概述">概述</h2>
<p>SSM是Spring MVC、Spring、Mybatis三大框架的综合，SpringMVC负责Web层(具体表现为Controller)，Spring负责整合与业务层(具体表现为Service，包括接口和实现)，Mybatis负责数据访问层(具体表现为Dao)，在实际使用中通常可与Maven配合使用</p>
<h2 id="配置与使用">配置与使用</h2>
<h3 id="pom.xml中依赖导入">1、pom.xml中依赖导入</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zephon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模块化配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-all_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-all_service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-all_domain<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-all_utils<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ssm-all_web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 版本配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.security.version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">spring.security.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>2.0.0-alpha1<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  SSM--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- AOP --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet与jsp、jstl --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    log日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- druid配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--      &lt;groupId&gt;com.mchange&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--      &lt;version&gt;0.9.5.5&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&amp;lt;!&amp;ndash;      &lt;type&gt;jar&lt;/type&gt;&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&amp;lt;!&amp;ndash;      &lt;scope&gt;compile&lt;/scope&gt;&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 分页配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 权限控制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsr250-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        页面端权限控制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- tomcat插件配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不能在&lt;pluginManagement&gt;中使用，否则会在maven插件中不显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在web模块中配置web.xml">2、在web模块中配置web.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置加载类路径的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationContext.xml,classpath*:spring-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  监听request域对象的创建和销毁--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  用于在日志AOP中获取request--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置解决中文乱码的过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置Spring-security--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--委派过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    固定名称：springSecurityFilterChain，不能改变--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在web模块中配置spring-mvc.xml">3、在web模块中配置spring-mvc.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zephon.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    设置静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;mvc:resources mapping=&quot;/plugins/**&quot; location=&quot;/plugins/&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    开启SpringMVC框架注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    支持AOP的注解支持，AOP底层使用代理技术</span></span><br><span class="line"><span class="comment">            proxy-target-class=&quot;true&quot; 默认使用cglib方式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在web模块中配置applicationcontext.xml">4、在web模块中配置applicationContext.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zephon.service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zephon.dao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring 整合Mybatis框架--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置SqlSessionFactory工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        传入PageHelper的插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--                传入插件的对象--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--                            数据库类型--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;helperDialect&quot;</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--                            分页合理化，不会越界--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;reasonable&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    mybatis-配置mapper,扫描dao接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    指定映射配置文件的位置，映射配置文件指每个dao独立的配置文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    如果是用注解来配置的话，此处应该使用class属性指定被注解的dao全限定类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.zephon.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在web模块中配置db.properties">5、在web模块中配置db.properties</h3>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql:///ssm</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<h3 id="在web模块中配置log4j.properties">6、在web模块中配置log4j.properties</h3>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#you cannot specify every priority with different file for log4j</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug,stdout,info,debug,warn,error</span></span><br><span class="line"><span class="comment">#log4j.rootLogger=info,stdout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#console</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>= <span class="string">[%d&#123;yyyy-MM-dd HH:mm:ss a&#125;]:%p %l%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#info log</span></span><br><span class="line"><span class="meta">log4j.logger.info</span>=<span class="string">info</span></span><br><span class="line"><span class="meta">log4j.appender.info</span>=<span class="string">org.apache.log4j.DailyRollingFileAppender </span></span><br><span class="line"><span class="meta">log4j.appender.info.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="meta">log4j.appender.info.File</span>=<span class="string">./src/com/zephon/log/error.log</span></span><br><span class="line"><span class="meta">log4j.appender.info.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.info.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.info.layout</span>=<span class="string">org.apache.log4j.PatternLayout </span></span><br><span class="line"><span class="meta">log4j.appender.info.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss a&#125; [Thread: %t][ Class:%c &gt;&gt; Method: %l ]%n%p:%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#debug log</span></span><br><span class="line"><span class="meta">log4j.logger.debug</span>=<span class="string">debug</span></span><br><span class="line"><span class="meta">log4j.appender.debug</span>=<span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.debug.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="meta">log4j.appender.debug.File</span>=<span class="string">./src/com/zephon/log/error.log</span></span><br><span class="line"><span class="meta">log4j.appender.debug.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.debug.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.debug.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.debug.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss a&#125; [Thread: %t][ Class:%c &gt;&gt; Method: %l ]%n%p:%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#warn log</span></span><br><span class="line"><span class="meta">log4j.logger.warn</span>=<span class="string">warn</span></span><br><span class="line"><span class="meta">log4j.appender.warn</span>=<span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.warn.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="meta">log4j.appender.warn.File</span>=<span class="string">./src/com/zephon/log/error.log</span></span><br><span class="line"><span class="meta">log4j.appender.warn.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.warn.Threshold</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.appender.warn.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.warn.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss a&#125; [Thread: %t][ Class:%c &gt;&gt; Method: %l ]%n%p:%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#error</span></span><br><span class="line"><span class="meta">log4j.logger.error</span>=<span class="string">error</span></span><br><span class="line"><span class="meta">log4j.appender.error</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.error.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="meta">log4j.appender.error.File</span> = <span class="string">./src/com/zephon/log/error.log</span></span><br><span class="line"><span class="meta">log4j.appender.error.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.error.Threshold</span> = <span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.appender.error.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.error.layout.ConversionPattern</span> = <span class="string">%d&#123;yyyy-MM-dd HH:mm:ss a&#125; [Thread: %t][ Class:%c &gt;&gt; Method: %l ]%n%p:%m%n</span></span><br></pre></td></tr></table></figure>
<h3 id="在web模块中配置spring-security.xml">7、在web模块中配置spring-security.xml</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:security</span>=<span class="string">&quot;http://www.springframework.org/schema/security&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/security</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/security/spring-security.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置不拦截的资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">&quot;/login.jsp&quot;</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">&quot;/failer.jsp&quot;</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">&quot;/img/**&quot;</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">&quot;/plugins/**&quot;</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置具体的规则</span></span><br><span class="line"><span class="comment">            auto-config=&quot;true&quot;：不用自己编写登录页面，框架提供默认登录页面</span></span><br><span class="line"><span class="comment">            use-expressions=&quot;false&quot;：是否使用SPEL表达式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">auto-config</span>=<span class="string">&quot;true&quot;</span> <span class="attr">use-expressions</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置具体的拦截的规则patten=&quot;请求的规则&quot;,access=&quot;访问系统的人，必须有ROLE_USER的角色&quot;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/**&quot;</span> <span class="attr">access</span>=<span class="string">&quot;ROLE_USER,ROLE_ADMIN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        定义跳转的具体页面--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        如果jsp中的name不是username和password要另行配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:form-login</span></span></span><br><span class="line"><span class="tag">                <span class="attr">login-page</span>=<span class="string">&quot;/login.jsp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">login-processing-url</span>=<span class="string">&quot;/login.do&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">default-target-url</span>=<span class="string">&quot;/index.jsp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">authentication-failure-url</span>=<span class="string">&quot;/failer.jsp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">authentication-success-forward-url</span>=<span class="string">&quot;/pages/main.jsp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        关闭跨域请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:csrf</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        退出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:logout</span> <span class="attr">invalidate-session</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">logout-url</span>=<span class="string">&quot;/logout.do&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">logout-success-url</span>=<span class="string">&quot;/login.jsp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    切换成数据库中的用户名和密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">&quot;userService&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            配置加密方式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">security:password-encoder</span> <span class="attr">ref</span>=<span class="string">&quot;passwordEncoder&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置加密类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;passwordEncoder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    权限控制--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    选择一--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置JSR250(权限控制用)--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @RoleAllowed(&quot;ADMIN&quot;)注解在方法上 允许角色使用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    可以省略ROLE_前缀--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;security:global-method-security jsr250-annotations=&quot;enabled&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    选择二--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    @Secured(&quot;ROLE_ADMIN&quot;)-角色权限配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    不能省略ROLE_前缀，但不用pom新导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:global-method-security</span> <span class="attr">secured-annotations</span>=<span class="string">&quot;enabled&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    使用SPEL表达式--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;security:global-method-security pre-post-annotations=&quot;enabled&quot;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="编写其它代码">7、编写其它代码</h3>
<ul>
<li><p>在domain模块编写实体类</p>
<ul>
<li><p>可使用@DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm")进行日期的解析，当从html中获取的日期类型与Spring框架和默认格式不一样时可使用该注解进行解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date departureTime;</span><br></pre></td></tr></table></figure></li>
<li><p>实体类中的成员变量的数量并不是必须和数据库中对应表的列数完全一样，例如：</p>
<ul>
<li><p>在用户的实体类中，有变量 status可取值0(关闭)、1(开启)，则可以使用String statusStr用来表示status对应的状态，在get方法中根据status进行判断返回对应的字符串，从而在前端取值时可直接使用statusStr获取对应的字符串，而不用再进行判断取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStatusStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StatusStr=(status==<span class="number">0</span>)?<span class="string">&quot;未开启&quot;</span>:<span class="string">&quot;开启&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> StatusStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在用户的实体类中，可能一个用户有多种角色，所以，可能需要使用一个List&lt; Role &gt; roles代表，而该成员变量的值，如果需要的话可以在dao层中使用多表查询或其它方式进行获取赋值</p></li>
</ul></li>
</ul></li>
<li><p>在dao模块中编写IxxxDao接口，由于使用Mybatis可以不用写具体实现</p>
<ul>
<li><p>涉及常用注解：<span class="citation" data-cites="Repository">@Repository</span>("userDao")，其中userDao是命名，在其它地方使用时可直接使用userDao，若不命名，默认则是类名首字母变小写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IUserDao userDao;</span><br></pre></td></tr></table></figure></li>
<li><p>关联查询中的一对一，例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询订单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from orders&quot;)</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(id=true,property = &quot;id&quot;,column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;orderNum&quot;,column = &quot;orderNum&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;orderTime&quot;,column = &quot;orderTime&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;orderStatus&quot;,column = &quot;orderStatus&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;peopleCount&quot;,column = &quot;peopleCount&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;payType&quot;,column = &quot;payType&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;orderDesc&quot;,column = &quot;orderDesc&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;product&quot;,column = &quot;productId&quot;,javaType = Product.class</span></span><br><span class="line"><span class="meta">        ,one = @One(select=&quot;com.zephon.dao.IProductDao.findById&quot;))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;Orders&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>关联查询中的一对多，例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询出所有对应的角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from role where id in &quot; +</span></span><br><span class="line"><span class="meta">        &quot;(select roleId from users_role where userId=#&#123;userId&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,property = &quot;id&quot;,column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;roleName&quot;,column = &quot;roleName&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;roleDesc&quot;,column = &quot;roleDesc&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;permissions&quot;,column = &quot;id&quot;,javaType = java.util.List.class,</span></span><br><span class="line"><span class="meta">        many=@Many(select = &quot;com.zephon.dao.IPermissionDao.findPermissionByRoleId&quot;))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;Role&gt; <span class="title">findByUserId</span><span class="params">(String userId)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>在service模块编写IxxxService接口和xxxServiceImpl实现类，在实现类中使用注解</p>
<ul>
<li><p>service层中常用注解：</p>
<ul>
<li><span class="citation" data-cites="Service">@Service</span>("userService")：与dao层的@Repository作用类似；</li>
<li><span class="citation" data-cites="Transactional">@Transactional</span>：：用户事务控制，对应的在applicationContext.xml中进行配置</li>
</ul></li>
<li><p>若涉及到用户登录时的密码加密的可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(UserInfo user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 密码加密，每次加密结果不同</span></span><br><span class="line">        user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));</span><br><span class="line">        System.out.println(bCryptPasswordEncoder.encode(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">        userDao.save(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>在web模块编写xxxController</p>
<ul>
<li>常用注解：
<ul>
<li><span class="citation" data-cites="Controller">@Controller</span>：与@Service类似</li>
<li><span class="citation" data-cites="RequestMapping">@RequestMapping</span>("/user")：地址匹配</li>
<li><span class="citation" data-cites="Secured">@Secured</span>("ROLE_ADMIN")：用户权限控制</li>
</ul></li>
<li>注意，Controller中如果涉及到反射获取方法的，如AOP日志配置中的获取方法，不可使用Model model变量，int需用Integer替代，否则会报错NoSuchMethod，<strong>具体原因暂时还不清楚</strong>，所以通常涉及到变量赋值时，最好还是使用ModelAndView的方式</li>
</ul></li>
<li><p>将代码中涉及到的一些工具类在utils模块中进行编写</p></li>
<li><p>如使用maven中tomcat插件，需要先clean再install再tomcat:run</p></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>第十一天</title>
    <url>/2019/07/22/vue-1/</url>
    <content><![CDATA[<h1 id="第十一天">第十一天</h1>
<h2 id="javascript开源框架">JavaScript开源框架</h2>
<p>Jquery、ExtJS、Dojo、vue.js</p>
<h2 id="js-mv模式">JS MV*模式</h2>
<p>MVC(模式-视图-控制器)、MVP(模型-视图-表示器)、MVVM(模型-视图-视图模型)</p>
<h3 id="mvc">MVC</h3>
<p>MVC全名是Model View Controller，是模型(Model)-视图(View)-控制器(Controller)的缩写。MVC一般用于表现层(Web)开发。</p>
<p>表现层--对应JavaWeb中JSP层</p>
<figure>
<img src="./mvc.png" alt="mvc模式图" /><figcaption>mvc模式图</figcaption>
</figure>
<h3 id="mvp">MVP</h3>
<p>MVP是一种过渡模式，全称是Model-View-Presenter，Model提供数据，View负责显示，Presenter负责逻辑的处理。</p>
<h3 id="mvvm">MVVM</h3>
<p>MVVM是一种基于MVC和MVP的架构模式，全称是Model-View-ViewModel，其中可以将ViewModel看成一个专门的Controller，充当数据转换器，它将Model信息转变成View信息，还将命令从View传递到Model。因此，很多这种模式的实现都要利用声明式数据绑定来实现将View工作从其它层分离。</p>
<figure>
<img src="./mvvm.png" alt="mvvm模式图" /><figcaption>mvvm模式图</figcaption>
</figure>
<h2 id="mvc与mvvm的区别">MVC与MVVM的区别</h2>
<figure>
<img src="./mvc+mvvm.png" alt="mvc+mvvm" /><figcaption>mvc+mvvm</figcaption>
</figure>
<ul>
<li>MVC是后端的分层开发的概念</li>
<li>MVVM是前端视图层的概念，主要关注于视图层分离，也就是说：MVVM把前端的视图层分为了三部分Model、View、VM(ViewModel)</li>
</ul>
<h2 id="单页web应用程序spa">单页Web应用程序(SPA)</h2>
<p>只有一张Web页面的应用，通过改变该页的数据和样式修改页面，提高效率。</p>
<h2 id="vue.js">Vue.js</h2>
<ul>
<li>Vue.js是一个JavaScript的MVVM库，是一套构建用户界面的渐进式框架。它是以数据驱动和组件化的思想构建的，采用自底向上增量开发的设计。</li>
<li>Vue.js是目前最火的一个框架，Recat是最流行的一个框架(React除了开发网站，还可以开发手机App，Vue语法上也可以用于App开发，需要借助于Weex)。</li>
<li>Vue.js是前端的主流框架之一，和Angular.js、React.js一起，并成为前端三大主流框架！</li>
<li>Vue.js是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。</li>
</ul>
<h2 id="vue特点">Vue特点</h2>
<ol type="1">
<li>轻量级的框架</li>
<li>双向数据绑定</li>
<li>指令</li>
<li>插件化</li>
</ol>
<h2 id="框架和库的区别">框架和库的区别</h2>
<ul>
<li>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则重新架构整个项目。</li>
<li>库(插件)：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</li>
</ul>
<h2 id="display和visibility区别">display和visibility区别</h2>
<p>display:none隐藏后不占空间 visibility:hidden隐藏后会占用空间</p>
<h2 id="vue基础">Vue基础</h2>
<h3 id="vue基础-1">Vue基础</h3>
<ol type="1">
<li>如何定义一个基本Vue代码结构</li>
<li>插值表达式和v-text</li>
<li>v-cloak</li>
<li>v-html</li>
<li>v-bind Vue提供的属性绑定机制，缩写是 :属性</li>
<li>v-on Vue提供的事件绑定机制，缩写是@事件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue的基本代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1. 导入vue.js --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Vue 实例所控制的这个元素区域，就是V --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将来new的Vue实例，会控制这个元素中的所有内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// new出来的这个vm对象， 就是mvvm中的VM调度者</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2. 创建一个Vue的实例</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 当我们导入包后， 在浏览器内存中， 就多了一个Vue构造函数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//element,表示当前我们new的这个vue实例，要控制页面上的哪个区域,值是一个选择器</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// data就是MVVM中的M，专门用来保存每个页面的数据</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// data属性中，存放的是el中要用到的数据 </span></span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 通过vue提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了【前端的vue之类的框架，不提倡我们去手动操作DOM元素】</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&quot;welcome to vue!&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-cloak、v-text、v-html、v-on的学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用v-cloak能够解决插值表达式闪烁的问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>++++++&#123;&#123;msg&#125;&#125;--------<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 有+和- --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认v-text是没有闪烁问题的 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-text会覆盖元素中原本的内容，但插值表达式只会替换自己的占位符，不会把整个元素的内容清空 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>=======<span class="tag">&lt;/<span class="name">h4</span>&gt;</span><span class="comment">&lt;!-- 无= --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- v-bind：是vue中提供的用于绑定属性的指令 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle+&#x27;123&#x27;&quot;&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-bind可以被简写为： :要绑定的属性 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-bind中可以写合法的JS表达式，如&#x27;123&#x27; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;mytitle+&#x27;123&#x27;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- vue中提供了v-on:事件绑定机制 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-on:click=&quot;alert(&#x27;hello&#x27;)&quot;&gt;alert()报错 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-on:click=&quot;show&quot;&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&quot;123&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg2</span>: <span class="string">&quot;&lt;h1&gt;标题&lt;h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">mytitle</span>: <span class="string">&quot;这是一个title&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//methods 属性中定义了当前vue实例中所有可用的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">show</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;Hello&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实例-跑马灯效果启动与停止">实例-跑马灯效果启动与停止</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑马灯效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;浪起来&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;lang&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;低调&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;stop&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 注意： 在VM实例中， 如果想要获取data上的数据， 或者想要调用methods中的方法， 必须通过this.数据属性名 或 this.方法名 来进行访问，这里的this就表示new出来的VM实例对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&quot;猥琐发育，别浪~~!&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">intervalId</span>: <span class="literal">null</span> <span class="comment">// 在data上定义定时器ID</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// VM实例， 会监听自己身上的data中所有数据的改变，只要数据发生变化，就会自动把新的数据，从data上同步到页面中去</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// es6新写法</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">lang</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 箭头函数内部的this和外部的this保持一致 </span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (<span class="built_in">this</span>.intervalId != <span class="literal">null</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> start = <span class="built_in">this</span>.msg.substring(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">//获取到头的第一个字符</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> end = <span class="built_in">this</span>.msg.substring(<span class="number">1</span>); <span class="comment">//获取后面的所有字符</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.msg = end + start; <span class="comment">//重新拼得到新的字符串，并赋值给this.msg</span></span></span><br><span class="line"><span class="javascript">                        &#125;, <span class="number">400</span>)</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">stop</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.intervalId);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.intervalId = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 给[浪起来] 按钮， 绑定一个点击事件 v - on @</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2. 在按钮的事件处理函数中，写相关的业务逻辑代码：拿到msg字符串，然后调用字符串的substring来进行字符串的截取操作，把第一个字符截取出来，放到最后一个位置</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3. 为了实现点击一下按钮， 自动截取的功能， 需要所2步骤中的代码， 放到一个定时器中</span></span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="v-on-事件修饰符">v-on 事件修饰符</h3>
<ul>
<li>.stop 阻止冒泡</li>
<li>.prevent 阻止默认事件</li>
<li>.capture 添加事件侦听器使用事件捕获模式</li>
<li>.self只当事件在该元素本身(比如不是子元素)触发时触发回调</li>
<li>.once 事件只触发一次</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: darkcyan;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">                使用.stop 阻止冒泡</span></span><br><span class="line"><span class="comment">                &lt;input type=&quot;button&quot; value=&quot;戳它&quot; @click.stop=&quot;btnHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;/div&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用.prevent 阻止默认行为</span></span><br><span class="line"><span class="comment">                &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;linkClick&quot;&gt;百度&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 使用.capture 捕获机制，与冒泡相反，从外到里执行</span></span><br><span class="line"><span class="comment">            &lt;div class=&quot;inner&quot; @click.capture=&quot;divHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;input type=&quot;button&quot; value=&quot;戳它&quot; @click=&quot;btnHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 使用.self 实现只有点击当前元素时，都会触发事件处理函数，其它捕获、冒泡情况均不执行</span></span><br><span class="line"><span class="comment">            &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;input type=&quot;button&quot; value=&quot;戳它&quot; @click=&quot;btnHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 通过.once 只触发一次事件处理函数 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent.once=&quot;linkClick&quot;&gt;百度&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- .stop 和 .self的区别 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;div class=&quot;outer&quot; @click=&quot;divHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">                    &lt;input type=&quot;button&quot; value=&quot;戳它&quot; @click.stop=&quot;btnHandler&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;/div&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- .self 只阻止自己冒泡行为的触发，并不会阻止其它冒泡行为 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;divHandler&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;divHandler&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;戳它&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnHandler&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">divHandler</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;这是触发了inner div的点击事件&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">btnHandler</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;这是触发了btn的点击事件&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">linkClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;触发了链接的点击事件&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">div2Handler</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;这是触发了outer div的点击事件&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="vue指令之v-model和双向数据绑定">Vue指令之v-model和双向数据绑定</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-bind 只能实现数据的单向绑定，从M自动绑定到V，无法实现数据的双向绑定 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type=&quot;text&quot; v-bind:value=&quot;msg&quot;&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 使用v-model 指令，可以实现表单元素和Model中数据的双向绑定 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注：v-model 只能运用在表单元素中(input(radio、text、address、email...)、select、checkbox、textarea) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot; #app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&quot;Hello word&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="vue中的样式">vue中的样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue中的样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.thin</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-weight</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.italic</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">letter-spacing</span>: <span class="number">0.5em</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第一种使用方式，直接传递一个数组，注意：这里的class需要使用v-bind做数据绑定</span></span><br><span class="line"><span class="comment">            &lt;h1 :class=&quot;[&#x27;thin&#x27;,&#x27;italic&#x27;]&quot;&gt;这是一个h1&lt;/h1&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在数组中使用三元表达式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;h1 :class=&quot;[&#x27;thin&#x27;,&#x27;italic&#x27;,flag?&#x27;active&#x27;:&#x27;&#x27;]&quot;&gt;这是一个h1&lt;/h1&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在数组中使用对象代替三元表达式，提高代码可读性 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;h1 :class=&quot;[&#x27;thin&#x27;,&#x27;italic&#x27;,&#123;&#x27;active&#x27;:flag&#125;]&quot;&gt;这是一个h1&lt;/h1&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在为class使用v-bind绑定对象时，对象的属性是类名，由于对象的属性可带引号，也可不带引号；属性的值是一个标识符 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;h1 :class=&quot;&#123;red:true,thin:true,italic:false,active:false&#125;&quot;&gt;这是一个h1&lt;/h1&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot; #app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">flag</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">classObj</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">red</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">thin</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">italic</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">active</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用内联样式">使用内联样式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue中的样式-style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对象就是无序键值对的集合 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;h1 :style=&quot;&#123;color:&#x27;red&#x27;,&#x27;font-weight&#x27;:200&#125;&quot;&gt;这是一个h1&lt;/h1&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;h1 :style=&quot;styleObj1&quot;&gt;这是一个h1&lt;/h1&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObj1,styleObj2]&quot;</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">styleObj1</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;font-weight&#x27;</span>: <span class="number">200</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">styleObj2</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;font-style&#x27;</span>: <span class="string">&#x27;italic&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="v-for">v-for</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-for循环<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 循环普通数组 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;p&gt;&#123;&#123;list[0]&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">            &lt;p&gt;&#123;&#123;list[1]&#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;p v-for=&quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;p v-for=&quot;(item,i) in list&quot;&gt;索引值：&#123;&#123;i&#125;&#125;---值：&#123;&#123;item&#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 循环对象数组 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;p v-for=&quot;(user,i) in list1&quot;&gt;</span></span><br><span class="line"><span class="comment">                ID:&#123;&#123;user.id&#125;&#125;---Name:&#123;&#123;user.name&#125;&#125;---索引:&#123;&#123;i&#125;&#125;</span></span><br><span class="line"><span class="comment">            &lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 循环对象 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注意：在遍历对象身上的键值对时，除了有val key，在第三个位置还有一个索引 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;p v-for=&quot;(val,key,i) in user&quot;&gt;</span></span><br><span class="line"><span class="comment">                值：&#123;&#123;val&#125;&#125;---键：&#123;&#123;key&#125;&#125;---索引：&#123;&#123;i&#125;&#125;</span></span><br><span class="line"><span class="comment">            &lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 迭代数字 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- in 后面可以放普通数组、对象数组、对象、数字 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- count从1开始 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;p v-for=&quot;count in 10&quot;&gt;这是第&#123;&#123;count&#125;&#125;次循环&lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- v-for循环中key属性的使用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>ID: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注意：v-for 循环时，key属性只能使用number或string --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注意：key在使用时，必须使用v-bind 属性绑定的形式指定key的值 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不用key的话用unshift时会出现bug --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在组件中，使用v-for循环时，或在一些特殊情况中，如果v-for有问题，必须在使用v-for的同时，指定唯一的字符串/数字类型的 :key值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list1&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span>&#123;&#123;item.id&#125;&#125;---&#123;&#123;item.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">list1</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    ],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.list1.unshift(&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="built_in">this</span>.id,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="built_in">this</span>.name</span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="v-if和v-show">v-if和v-show</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-if和v-show的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;toggle&quot;&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;toggle&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flag=!flag&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-if的特点：每次都会重新删除或创建元素 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-show的特点：每次不会重新进行DOM的删除和创建操作，只是切换了元素的display:none样式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-if 有较高的切换性能消耗 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-show 有较高的初始渲染消耗 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果元素涉及到频繁的切换，最后不要使用v-if，而是推荐使用v-show --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果元素可能永远也不会被显示出来被用户看到，则推荐使用v-if --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是用v-if控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是用v-show控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// toggle() &#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     this.flag = !this.flag;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<ol type="1">
<li>MVC和MVVM的区别</li>
<li>学习了Vue中最基本的代码结构</li>
<li>插值表达式 v-cloak v-text v-html v-bind(缩写是:) v-on(缩写是@) v-model v-for v-if v-show</li>
<li>事件修饰符： .stop .prevent .cature .self .once</li>
<li>el 指定要控制的区域 data是个对象，指定了控制的区域内要用到的数据 methods 虽然带个s后缀，但是是个对象，这里可以自定义方法</li>
<li>在VM实例中，如果要访问data上的数据，或者要访问methods中的方法，必须带this</li>
<li>在v-for 要会使用key属性(只接收string/number)</li>
<li>v-model 只能应用于表单元素</li>
<li>在vue中绑定样式两种方式：v-bind:class v-bind:style</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第十二天</title>
    <url>/2019/07/23/vue-2/</url>
    <content><![CDATA[<h1 id="第十二天">第十二天</h1>
<h2 id="过滤器">过滤器</h2>
<p>概念：Vue.js允许自定义过滤器，可以被用作一些常见的文本格式化，过滤器可以用在两个地方：mustache插值和v-bind表达式。过滤器应该被添加在JavaScript表达式的尾部，由“管道”符表示</p>
<h3 id="全局过滤器">全局过滤器</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;msg | msgFormat(&quot;疯狂&quot;) | test&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 定义一个Vue全局过滤器</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 全局过滤器，就是所有的VM共享的</span></span></span><br><span class="line"><span class="javascript">            Vue.filter(<span class="string">&#x27;msgFormat&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, arg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// return msg.replace(/单纯/g, &#x27;邪恶&#x27;);</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>, arg);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            Vue.filter(<span class="string">&quot;test&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> msg + <span class="string">&quot;==========&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&#x27;曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的人&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 过滤器的定义语法</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 过滤器中的function,第一个参数，规定为过滤器管道符前面传递过来的数据</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            vue.filter(<span class="string">&quot;过滤器的名称&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> data + <span class="string">&#x27;123&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// |即管道符</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 过滤器调用时的格式 &#123;&#123;name | 过滤器的名称&#125;&#125;</span></span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="私有过滤器">私有过滤器</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">keywords</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">list</span>: [&#123;</span><br><span class="line">                            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;奔驰&quot;</span>,</span><br><span class="line">                            <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&quot;宝马&quot;</span>,</span><br><span class="line">                            <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">methods</span>: &#123;</span><br><span class="line">                    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                        <span class="comment">// 分析</span></span><br><span class="line">                        <span class="comment">// 1. 获取到id和name， 直接从data上获取</span></span><br><span class="line">                        <span class="comment">// 2. 组织出一个对象</span></span><br><span class="line">                        <span class="comment">// 3. 把这个对象，调用数组相关方法，添加到当前data中的list中</span></span><br><span class="line">                        <span class="comment">// 注意：在vue中已经实现了数据的双向绑定，每当我们修改了data中的数据，vue会默认监听到数据的改动，自动把最新的数据应用到页面上</span></span><br><span class="line">                        <span class="comment">// 程序员更多的是在进行VM中Model数据的操作， 同时， 在操作Model数据的时候， 指定的业务逻辑操作</span></span><br><span class="line">                        <span class="keyword">var</span> car = &#123;</span><br><span class="line">                            <span class="attr">id</span>: <span class="built_in">this</span>.id,</span><br><span class="line">                            <span class="attr">name</span>: <span class="built_in">this</span>.name,</span><br><span class="line">                            <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">                        &#125;;</span><br><span class="line">                        <span class="built_in">this</span>.list.push(car);</span><br><span class="line">                        <span class="built_in">this</span>.id = <span class="built_in">this</span>.name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="title">del</span>(<span class="params">id</span>)</span> &#123; <span class="comment">//根据id删除数据</span></span><br><span class="line">                        <span class="comment">// 分析</span></span><br><span class="line">                        <span class="comment">// 1. 如何根据id找到要删除项的索引</span></span><br><span class="line">                        <span class="comment">// 2. 如果找到索引了，直接调用数组splice方法</span></span><br><span class="line">                        <span class="comment">// this.list.some((item, i) =&gt; &#123;</span></span><br><span class="line">                        <span class="comment">//     if (item.id == id) &#123;</span></span><br><span class="line">                        <span class="comment">//         this.list.splice(i, 1);</span></span><br><span class="line">                        <span class="comment">//         //在数组的some方法中，如果return true,就会立即终止这个数组的后续循环</span></span><br><span class="line">                        <span class="comment">//         return true;</span></span><br><span class="line">                        <span class="comment">//     &#125;</span></span><br><span class="line">                        <span class="comment">// &#125;)</span></span><br><span class="line">                        <span class="keyword">var</span> index = <span class="built_in">this</span>.list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (item.id == id) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                        <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="title">search</span>(<span class="params">keywords</span>)</span> &#123; <span class="comment">//根据关键字进行数据搜索</span></span><br><span class="line">                        <span class="comment">// var newList = [];</span></span><br><span class="line">                        <span class="comment">// this.list.forEach(item =&gt; &#123;</span></span><br><span class="line">                        <span class="comment">//     if (item.name.indexOf(keywords) != -1) &#123;</span></span><br><span class="line">                        <span class="comment">//         newList.push(item);</span></span><br><span class="line">                        <span class="comment">//     &#125;</span></span><br><span class="line">                        <span class="comment">// &#125;);</span></span><br><span class="line">                        <span class="comment">// return newList;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// forEach some filter findIndex 都属于数组新方法，都会被数组中的每一项进行遍历，执行相关操作</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="comment">// if(item.name.indexOf(keywords)!=-1)</span></span><br><span class="line">                            <span class="comment">// es6中为字符串提供一个新方法-String.prototype.includes(要包含的字符串)，若包含，则返回true，否则返回 false</span></span><br><span class="line">                            <span class="keyword">if</span> (item.name.includes(keywords)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> item;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 定义私有过滤器 过滤器有两个条件-过滤器名称和处理函数</span></span><br><span class="line">                <span class="attr">filters</span>: &#123;</span><br><span class="line">                    <span class="comment">//过滤器调用的时候，采用的是就近原则，如果私有过滤器和全局过滤器名称一致，优先调用私有过滤器</span></span><br><span class="line">                    <span class="attr">dateFormat</span>: <span class="function"><span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">&quot;&quot;</span></span>) </span>&#123;</span><br><span class="line">                        <span class="comment">//根据给定的时间字符串，得到特定的时间</span></span><br><span class="line">                        <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> y = dt.getFullYear();</span><br><span class="line">                        <span class="comment">// 使用es6新方法 padStart()实现补零格式化</span></span><br><span class="line">                        <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                        <span class="keyword">var</span> d = (dt.getDate()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">&#x27;yyyy-mm-dd&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">var</span> hh = (dt.getHours()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                            <span class="keyword">var</span> mm = (dt.getMinutes()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                            <span class="keyword">var</span> ss = (dt.getSeconds()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>!!!`</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="自定义键盘修饰符">自定义键盘修饰符</h2>
<p>全部的按键别名：</p>
<ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete(捕获“删除”或“退格”键)</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right</li>
</ul>
<p>不在以上列表中的按键，可以用键盘码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此处113也是对的，113是F2的键盘码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">keyup.113</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以自定义按键修饰符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义全局按键按键修饰符</span></span><br><span class="line"> Vue.config.keyCodes.f2 = <span class="number">113</span>;</span><br></pre></td></tr></table></figure>
<h2 id="自定义指令">自定义指令</h2>
<h3 id="自定义全局指令">自定义全局指令</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 自定义全局指令,,实现自动获取焦点</span></span><br><span class="line"><span class="comment">// 参数1：指令的名称，注意：在定义的时候，指令名称前不需要加v-前缀，调用时必须添加</span></span><br><span class="line"> <span class="comment">// 参数2：是一个对象，对象上有一些指令相关的函数，这些函数可以在特定的阶段执行相关的操作</span></span><br><span class="line"> Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">         <span class="comment">//每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次</span></span><br><span class="line">         <span class="comment">// 注意：在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生JS对象</span></span><br><span class="line">         <span class="comment">// 在元素刚绑定了指令时，还没有插入到DOM中，这时，调用focus()没用，因为一个元素只有插入DOM后，才能获取焦点</span></span><br><span class="line">         <span class="comment">// el.focus();</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 表示元素插入到DOM中的时候会执行这个inserted函数，触发一次</span></span><br><span class="line">         <span class="comment">// 和JS行为有关的操作，最好在inserted中去执行，防止JS行为不生效</span></span><br><span class="line">         el.focus();</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 当VNode更新的时候，会执行这个updated，可能会触发多次</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="使用钩子函数的第二个参数拿到传递的参数">使用钩子函数的第二个参数拿到传递的参数</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义一个设置字体颜色的指令</span></span><br><span class="line">            Vue.directive(<span class="string">&#x27;color&#x27;</span>, &#123;</span><br><span class="line">                <span class="comment">// 样式，只要通过指令绑定给了元素，不管这个元素有没有插入到页面中去，这个元素肯定有了一个内联的样式，将来元素肯定会显示到页面中，这时浏览器的渲染引擎必然会解析样式，应用给这个元素</span></span><br><span class="line">                <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 和样式相关的操作，一般都可以在bind执行</span></span><br><span class="line">                    <span class="comment">// el.style.color = &quot;red&quot;;</span></span><br><span class="line">                    <span class="comment">// binding： 一个对象，包含以下属性</span></span><br><span class="line">                    <span class="comment">// name： 指令名，不包括v-</span></span><br><span class="line">                    <span class="comment">// value：指令绑定值，可计算</span></span><br><span class="line">                    <span class="comment">// oldValue： 指令绑定前一个值</span></span><br><span class="line">                    <span class="comment">// expression： 字符串形式的指令表达</span></span><br><span class="line">                    <span class="comment">// arg： 传给指令的参数，可选</span></span><br><span class="line">                    <span class="comment">// modifies：一个包含修饰符的对象</span></span><br><span class="line">                    el.style.color = binding.value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="自定义局部指令">自定义局部指令</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">                <span class="attr">directives</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;fontweight&#x27;</span>: &#123;</span><br><span class="line">                        <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">                            el.style.fontWeight = binding.value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="函数简写">函数简写</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">directives</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;fontweight&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123; <span class="comment">// 注意：这个function等同于把代码写到了bind和update中去</span></span><br><span class="line">            el.style.fontSize = <span class="built_in">parseInt</span>(binding.value)+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="案例-品牌列表">案例-品牌列表</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>品牌列表案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#app</span> <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#app</span> <span class="selector-tag">thead</span> <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#app</span> <span class="selector-tag">tbody</span> <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>ID: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 自定义按键修饰符 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">keyup.f2</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>搜索名称关键字:</span><br><span class="line">                    <span class="comment">&lt;!-- 注意：Vue中所有的指令在调用时都以v-开头 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">v-focus</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;blue&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 注意v-color中是&quot;&quot;中套&#x27;&#x27;，如果没有&#x27;&#x27;，则会在data中去找--&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Ctime<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 之前v-for中的数据，都是直接从data上的list中直接渲染过来的 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;tr v-for=&quot; item in list&quot; :key=&quot;item.id&quot;&gt; --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 现在，我们自定义了一个search方法，同时把所有的关键字通过传参的形式，传递给search方法 --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 在search方法内部，通过执行for循环，把所有符合搜索关键字的数据，保存到一个新数组中，返回 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in search(keywords)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.ctime | dateFormat&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            Vue.filter(<span class="string">&#x27;dateFormat&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">&quot;&quot;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//根据给定的时间字符串，得到特定的时间</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> y = dt.getFullYear();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> m = dt.getMonth() + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> d = dt.getDate();</span></span><br><span class="line"><span class="javascript">                <span class="comment">// return y + &#x27;-&#x27; + m + &#x27;-&#x27; + d &#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">&#x27;yyyy-mm-dd&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> hh = dt.getHours();</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> mm = dt.getMinutes();</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> ss = dt.getSeconds();</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 自定义全局按键按键修饰符</span></span></span><br><span class="line"><span class="javascript">            Vue.config.keyCodes.f2 = <span class="number">113</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 自定义全局指令,实现自动获取焦点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 参数1：指令的名称，注意：在定义的时候，指令名称前不需要加v-前缀，调用时必须添加</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 参数2：是一个对象，对象上有一些指令相关的函数，这些函数可以在特定的阶段执行相关的操作</span></span></span><br><span class="line"><span class="javascript">            Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意：在每个函数中，第一个参数永远是el，表示被绑定了指令的那个元素，这个el参数，是一个原生JS对象</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 在元素刚绑定了指令时，还没有插入到DOM中，这时，调用focus()没用，因为一个元素只有插入DOM后，才能获取焦点</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// el.focus();</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">inserted</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 表示元素插入到DOM中的时候会执行这个inserted函数，触发一次</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 和JS行为有关的操作，最好在inserted中去执行，防止JS行为不生效</span></span></span><br><span class="line"><span class="javascript">                    el.focus();</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 当VNode更新的时候，会执行这个updated，可能会触发多次</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 自定义一个设置字体颜色的指令</span></span></span><br><span class="line"><span class="javascript">            Vue.directive(<span class="string">&#x27;color&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 样式，只要通过指令绑定给了元素，不管这个元素有没有插入到页面中去，这个元素肯定有了一个内联的样式，将来元素肯定会显示到页面中，这时浏览器的渲染引擎必然会解析样式，应用给这个元素</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 和样式相关的操作，一般都可以在bind执行</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// el.style.color = &quot;red&quot;;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// binding： 一个对象，包含以下属性</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// name： 指令名，不包括v-</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// value：指令绑定值，可计算</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// oldValue： 指令绑定前一个值</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// expression： 字符串形式的指令表达</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// arg： 传给指令的参数，可选</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// modifies：一个包含修饰符的对象</span></span></span><br><span class="line"><span class="javascript">                    el.style.color = binding.value;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">keywords</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">list</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="string">&quot;奔驰&quot;</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="string">&quot;宝马&quot;</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    ]</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 分析</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 1. 获取到id和name， 直接从data上获取</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 2. 组织出一个对象</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 3. 把这个对象，调用数组相关方法，添加到当前data中的list中</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 注意：在vue中已经实现了数据的双向绑定，每当我们修改了data中的数据，vue会默认监听到数据的改动，自动把最新的数据应用到页面上</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 程序员更多的是在进行VM中Model数据的操作， 同时， 在操作Model数据的时候， 指定的业务逻辑操作</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> car = &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="built_in">this</span>.id,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="built_in">this</span>.name,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">ctime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">                        &#125;;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.list.push(car);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.id = <span class="built_in">this</span>.name = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">del</span>(<span class="params">id</span>)</span> &#123; <span class="comment">//根据id删除数据</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 分析</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 1. 如何根据id找到要删除项的索引</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 2. 如果找到索引了，直接调用数组splice方法</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// this.list.some((item, i) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     if (item.id == id) &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//         this.list.splice(i, 1);</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//         //在数组的some方法中，如果return true,就会立即终止这个数组的后续循环</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//         return true;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> index = <span class="built_in">this</span>.list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (item.id == id) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">search</span>(<span class="params">keywords</span>)</span> &#123; <span class="comment">//根据关键字进行数据搜索</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// var newList = [];</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// this.list.forEach(item =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     if (item.name.indexOf(keywords) != -1) &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//         newList.push(item);</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// return newList;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// forEach some filter findIndex 都属于数组新方法，都会被数组中的每一项进行遍历，执行相关操作</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// if(item.name.indexOf(keywords)!=-1)</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// es6中为字符串提供一个新方法-String.prototype.includes(要包含的字符串)，若包含，则返回true，否则返回 false</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (item.name.includes(keywords)) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">return</span> item;</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 定义私有过滤器 过滤器有两个条件-过滤器名称和处理函数</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//过滤器调用的时候，采用的是就近原则，如果私有过滤器和全局过滤器名称一致，优先调用私有过滤器</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">dateFormat</span>: <span class="function"><span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">&quot;&quot;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//根据给定的时间字符串，得到特定的时间</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> y = dt.getFullYear();</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 使用es6新方法 padStart()实现补零格式化</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> d = (dt.getDate()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">&#x27;yyyy-mm-dd&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> hh = (dt.getHours()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> mm = (dt.getMinutes()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> ss = (dt.getSeconds()).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>!!!`</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;fontweight&#x27;</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">bind</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            el.style.fontWeight = binding.value;</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="vue实例的生命周期">Vue实例的生命周期</h2>
<ul>
<li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期。</li>
<li>生命周期钩子，就是生命周期事件的别名</li>
<li>主要的生命周期函数分类：
<ul>
<li>创建期间的生命周期函数：
<ul>
<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好data和methods属性</li>
<li>created：实例已经在内存中创建OK,此时data和methods已经创建OK,此时还没有开始编译模板</li>
<li>breforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>
<li>mounted：此时，已经将编译好的模板挂在到了页面指定的窗口中显示</li>
</ul></li>
<li>运行期间的生命周期函数：
<ul>
<li>beforeUpdate：状态更新之前执行此函数，此时data中的状态值是最新的，但是界面上显示的数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>
<li>updated：实例更新完毕后调用此函数，此时data中的状态值和界面上显示的数据都已经完成了更新，界面已经被重新渲染好了！</li>
</ul></li>
<li>销毁期间的生命周期函数
<ul>
<li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用</li>
<li>destroyed:vue实例销毁后调用。调用后，vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li>
</ul></li>
</ul></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>生命周期函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改msg&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;msg=&#x27;no&#x27;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;h3&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&quot;ok&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;执行了show方法&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//这是遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.msg);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this.show()</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//注意：在beforeCreate生命周期函数执行的时候，data和methods中的数据都还没有被初始化，所以this.msg/this.show()都是undefined</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 这是遇到的第二个生命周期函数</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(this.msg);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this.show();</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 在created中，data和methods都已经被初始化好了</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 如果要调用methods中的方法，或者操作data中的数据，最早只能在created中操作</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">breforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 这是遇到的第三个生命周期函数，表示模板已经在内存中编辑完成，但学未把模板渲染到页面中</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(document.getElementById(&quot;h3&quot;).innerText);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 在beforeMount 执行的时候，页面中的元素还没有被真正替换过来，只是之前写的一些模板字符串</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 这是遇到的第四个生命周期函数，表示内存中的模板已经真实挂载到页面中，用户已经可以看到渲染好的页面了</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;h3&quot;</span>).innerText);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意： mounted是实例创建期间的最后一个生命周期函数， 当执行完mounted就表示， 实例已经被完全创建好了， 此时， 如果没有其它操作的话， 这个实例， 就静静待在内存中</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//这时，界面还没有被更新，数据已经被更新了</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;界面上元素的内容:&#x27;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;h3&quot;</span>).innerText);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;data中的msg数据是:&#x27;</span> + <span class="built_in">this</span>.msg);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 结论：当执行beforeUpdate时，页面中显示的数据还是旧的，此时data数据是最新的，页面还没有和最新的数据保持同步</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 这时，页面和data数据已经保持同步了，都是最新的</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;界面上元素的内容:&#x27;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;h3&quot;</span>).innerText);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;data中的msg数据是:&#x27;</span> + <span class="built_in">this</span>.msg);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="vue-resource实现getpostjsonp请求">Vue-resource实现get、post、jsonp请求</h2>
<p>除了vue-resource外，还可以使用"axios"的第三包实现数据的请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-resource基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：vue-resource依赖于vue，所以先后顺序不能反 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- this.$http.jsonp --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-resource.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;get请求&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getInfo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;post请求&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;postInfo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jsonp请求&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;jsonpInfo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">getInfo</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 发起get请求</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 当发起get请求后， 通过.then来设置成功的回调函数</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$http.get(<span class="string">&#x27;http://vue.studyit.io/api/getlunbo&#x27;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 通过result.body拿到服务器返回成功的数据</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// console.log(result.body);</span></span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">postInfo</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 发起post请求</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 手动发起的post请求，默认没有表单格式，所有有的服务器处理不了</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 通过post方法的第三个参数emulateJSON:true， 设置提交的内容类型为普通表单数据格式</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$http.post(<span class="string">&#x27;http://vue.studyit.io/api/post&#x27;</span>, &#123;&#125;, &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">emulateJSON</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">                        &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(result.body);</span></span><br><span class="line"><span class="javascript">                        &#125;);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">jsonpInfo</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//发起jsonp请求</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$http.jsonp(<span class="string">&#x27;http://vue.studyit.io/api/jsonp&#x27;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(result.body);</span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="jsonp的实现原理">JSONP的实现原理</h3>
<ul>
<li>由于浏览器的安全性限制，不允许AJAX访问协议不同、域名不同、端口号不同的数据接口，浏览器认为这种访问不安全</li>
<li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP(注意：根据JSONP的实现原理，知晓JSONP只支持get请求)</li>
<li>具体实现过程：
<ul>
<li>先在客户端定义一个回调方法，预定义对数据的操作</li>
<li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口</li>
<li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行</li>
<li>客户端拿到服务器返回的字符串后，当作script脚本去解析执行，这样就能拿到JSONP数据了</li>
</ul></li>
</ul>
<h2 id="通过node.js手动实现一个jsonp">通过Node.js，手动实现一个JSONP</h2>
<p>后端：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">// 这个核心模块可以帮我们解析URL地址，从而拿到pathname 和 query</span></span><br><span class="line"><span class="keyword">const</span> urlModule = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// const url = req.url</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="attr">pathname</span>: url,</span><br><span class="line">        query</span><br><span class="line">    &#125; = urlModule.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&#x27;/getscript&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 拼接一个合法的JS脚本，这里拼接的是一个方法的调用</span></span><br><span class="line">        <span class="comment">// var scriptStr = &#x27;show()&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> scriptStr = <span class="string">`<span class="subst">$&#123;query.callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">        <span class="comment">// res.end 发送给客户端，客户端将这个字符串当作JS代码去解析执行</span></span><br><span class="line">        res.end(scriptStr)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server listen at http://127.0.0.1:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>前端：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>客户端JSONP页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Host Current Workspace and Open in Browser --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">showInfo123</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:3000/getscript?callback=showInfo123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 相当于</span></span><br><span class="line"><span class="comment">        &lt;script&gt;</span></span><br><span class="line"><span class="comment">            show()</span></span><br><span class="line"><span class="comment">        &lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第十天</title>
    <url>/2019/07/24/vue-3/</url>
    <content><![CDATA[<h1 id="第十三天">第十三天</h1>
<h2 id="vue-resource改造品牌列表案例">vue-resource改造品牌列表案例</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-resource改造品牌列表案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-resource.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#app</span> <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#app</span> <span class="selector-tag">thead</span> <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#app</span> <span class="selector-tag">tbody</span> <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Ctime<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Operation<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.ctime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">list</span>: []</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.getAllList();</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">getAllList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//获取所有车的列表</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 分析：</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 1. 由于已经导入了 Vue-resource包，可以直接通过this.$http 来发起数据请求</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 2. 根据接口API文档，获取列表时应该发起一个get请求</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 3. this.$http.get(&#x27;url&#x27;).then(function(result)&#123;&#125;)</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 4. 当通过then 指定回调函数后，在回调函数可以拿到数据服务器返回的result</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 5. 先判断result.status是否等于0，如果等于0，就成功了，可以把result.message赋值给this.list；如果不等于0，可以提示获取数据失败</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$http.get(<span class="string">&#x27;http://localhost:8080/Vue/get&#x27;</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(result.body);</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 注意：通过$http获取到的数据，都在result.body中放着</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> result = result.body;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (result.status === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.list = result.message;</span></span><br><span class="line"><span class="javascript">                            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                                alert(<span class="string">&#x27;获取数据失败&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 添加到后台服务器</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 分析</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 1. 经过查看api接口， 发现要发送一个post请求， this.$http.post</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 2. this.$http.post() 中接收三个参数</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 第一个参数：要请求的URL地址</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 第二个参数：要提交给服务器的数据，要以对象形式提交给服务器</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 第三个参数：一个配置对象，要以哪种表单数据类型提交&#123;emulateJSON:true&#125;，以普通表单格式，将数据提交给服务器application/x-www-form-urlencoded</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 3.在post方法中，使用.then来设置成功的回调函数，如果想要拿到成功的结果，需要result.body</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$http.post(<span class="string">&quot;http://localhost:8080/Vue/add&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="built_in">this</span>.name</span></span><br><span class="line"><span class="javascript">                        &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">emulateJSON</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">                        &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(result.body);</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (result.body.status === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="comment">// 成功</span></span></span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.getAllList();</span></span><br><span class="line"><span class="javascript">                            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                                alert(<span class="string">&quot;添加失败&quot;</span>)</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">del</span>(<span class="params">id</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$http.get(<span class="string">&#x27;http://localhost:8080/Vue/del?id=&#x27;</span> + id).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (result.body.status === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.getAllList();</span></span><br><span class="line"><span class="javascript">                            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                                alert(<span class="string">&quot;删除失败&quot;</span>);</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="全局配置域名根路径和全局启用emulatejson">全局配置域名根路径和全局启用emulateJSON</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 如果我们通过全局配置了根域名，请求的数据接口根域名，则每次单独发起http请求的时候，请求的url路径，应该以相对路径开头，前面不能带/，否则，不会启用根路径拼接</span></span><br><span class="line">Vue.http.options.root = <span class="string">&quot;http://localhost:8080&quot;</span>;</span><br><span class="line"><span class="comment">// 全局启用emulateJSON 选项</span></span><br><span class="line">Vue.http.options.emulateJSON = <span class="literal">true</span>;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">this</span>.$http.get(<span class="string">&#x27;Vue/get&#x27;</span>).then();</span><br></pre></td></tr></table></figure>
<h2 id="动画">动画</h2>
<h3 id="使用过渡类名实现动画">使用过渡类名实现动画</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用过渡类名实现动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 2. 自定义两级样式，来控制transition内部的元素实现动画 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* v-enter[一个时间点]:进入之前，元素的起始状态，此时还没有开始进入 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* .v-leave-to[一个时间点]:动画离开的终止状态，此时，元素动画已经结束 */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="comment">/* 从右进入 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">80px</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* v-enter-active[入场动画的时间段] */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* .v-leave-active[离场动画的时间段]*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">0.4s</span> ease;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;toggle&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flag=!flag&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 需求：点击按钮，让h3显示，再点击，让h3隐藏(过程渐变) --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 1. 使用transition元素，把需要被动画控制的元素包裹起来 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- transition元素，是Vue官方提供的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是一个h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="修改v-前缀">修改v-前缀</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改v-前缀<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.my-enter</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-class">.my-leave-to</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">70px</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.my-enter-active</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-class">.my-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">0.4s</span> ease;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;toggle&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flag=!flag&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;my&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h6</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是一个h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用第三方类实现动画">使用第三方类实现动画</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用第三方类实现动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./animate.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;toggle&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flag=!flag&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- duration：&quot;毫秒值&quot; 统一设置入场和离场时动画时间 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- duration=&quot;&#123;enter:毫秒值,leave:毫秒值&#125;&quot; 分别设置入场和离场时间 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">enter-active-class</span>=<span class="string">&quot;animated bounceIn&quot;</span> <span class="attr">leave-active-class</span>=<span class="string">&quot;animated bounceOut&quot;</span> <span class="attr">:duration</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h6</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是一个h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用钩子函数实现半场动画">使用钩子函数实现半场动画</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用钩子函数模拟小球半场动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.ball</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;加入购物车&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flag=!flag&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 1. 使用transition元素把小球包裹起来 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span> @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span> @<span class="attr">after-enter</span>=<span class="string">&quot;afterEnter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 注意：动画钩子函数的第一个参数：el,表示要执行动画的那个DOM元素是个原生的JS DOM对象，可以认为是通过document.getElementByID()获取到的</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">beforeEnter</span>(<span class="params">el</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 表示动画入场之前，此时动画尚未开始，可以在此处设置元素开始动画之前的起始样式</span></span></span><br><span class="line"><span class="javascript">                        el.style.transform = <span class="string">&quot;translate(0,0)&quot;</span>; <span class="comment">//设置小球开始动画之前的起始位置</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">enter</span>(<span class="params">el, done</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 这句话，没有实际作用，但如果不写，出不来动画效果；</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 可以认为el.offsetWidth 会强制动画刷新</span></span></span><br><span class="line"><span class="javascript">                        el.offsetWidth</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 表示动画开始之后的样式，此处可以设置小球完成动画之后的结束状态</span></span></span><br><span class="line"><span class="javascript">                        el.style.transform = <span class="string">&quot;translate(150px,450px)&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        el.style.transition = <span class="string">&quot;all 1s ease&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 这里的done，其实就是afterEnter函数，也就是说done是afterEnter的引用</span></span></span><br><span class="line"><span class="javascript">                        done(); <span class="comment">//动画完成后立即消失</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">afterEnter</span>(<span class="params">el</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 动画完成之后，会调用afterEnter</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="列表动画">列表动画</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">0.8s</span> ease;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">80px</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* .v-move 和 .v-leave-active 配合使用能够实现列表后续的元素渐渐地漂上来的效果 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-move</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">0.6s</span> ease;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>Id: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 在实现列表过渡时，如果需要过渡的元素，是通过v-for循环渲染的，不能使用transition包裹，需要使用transitionGroup --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果要为v-for循环创建的元素设置动画，必须为每一个元素设置:key属性 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 给transition-group 添加appear属性，实现页面刚展示出来的效果 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通过为transition-group元素，设置tag属性，指定transition-group渲染为指定的元素，如果不指定tag属性，默认渲染为span标签 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">appear</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,i) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(i)&quot;</span>&gt;</span>&#123;&#123;item.id&#125;&#125;--&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">list</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;]</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.list.push(&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="built_in">this</span>.id,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="built_in">this</span>.name</span></span><br><span class="line"><span class="javascript">                        &#125;);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.id = <span class="built_in">this</span>.name = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">del</span>(<span class="params">i</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.list.splice(i, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="组件">组件</h2>
<h3 id="什么是组件">什么是组件</h3>
<p>组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可</p>
<h3 id="组件化和模块化的不同">组件化和模块化的不同</h3>
<p>模块化：是从代码逻辑的角度进行划分，方便代码分层开发，保证每个功能模块的职能单一 组件化：是从UI界面的角度进行划分，前端的组件化，方便UI组件的重用</p>
<h3 id="全局组件定义的三种方式">全局组件定义的三种方式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>创建组件的方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果要使用组件，直接把组件的名称，以HTML标签的形式引入到页面中即可 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">my-com1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">my-com1</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 还是以标签的形式引入 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">my-com2</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">my-com3</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在控制的#app外面，使用template元素定义组件的HTML模板结构 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tmp1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是通过template元素，在外面定义的组件组件，这样有代码智能提示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.1 使用Vue.extend来创建全局的Vue组件</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> com1 = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;这是用Vue.extend创建的组件 &lt;/h3&gt;&#x27;</span> <span class="comment">//通过template属性，指定了组件要展示的HTML结构</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1.2 使用Vue.component(&#x27;组件的名称&#x27;,创建出来的组件模板对象)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用使用Vue.component定义全局组件时， 组件名称使用驼峰命名， 则在引用组件时， 需要将大写变小写， 并在单词间加 - 连接,如果不使用驼峰，则直接用名称即可</span></span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;myCom1&#x27;</span>, com1);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// Vue.component 第一个参数： 组件的名称， 在引用组件时， 就是以标签形式来引入</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 第二个参数：Vue.extend创建的组件，其中template就是组件将来要展示的内容</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// Vue.component(&#x27;mycom1&#x27;, Vue.extend(&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     template: &#x27;&lt;h3&gt;这是用Vue...&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;));</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 方式二</span></span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;myCom2&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 注意：无论那种方式创建出来的组件，template属性指定的模板内容，必须有且只有唯一的一个根元素</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;h3&gt;这是直接使用Vue.component创建出来的组件&lt;/h3&gt;&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 方式三</span></span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&quot;myCom3&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&quot;#tmp1&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="定义私有的组件">定义私有的组件</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">                <span class="comment">// 定义实例内部私有组件</span></span><br><span class="line">                <span class="attr">components</span>: &#123;</span><br><span class="line">                    <span class="attr">privateCom</span>: &#123;</span><br><span class="line">                        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;这是私有的自定义组件&lt;/h1&gt;&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="组件中的data和methods">组件中的data和methods</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件中的data和methods<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">my-com1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 组件可以有自己的data数据</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2. 组件的data和实例的data不一样，实例中的data可以为一个对象，但组件中的data必须是一个方法</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3. 组件中的data除了必须是一个方法外，这个方法内部还必须返回一个对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4. 组件中的data数据，使用方式和实例中的data使用方式完全一样</span></span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;myCom1&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;这是全局组件 --- &#123;&#123;msg&#125;&#125;&lt;/h1&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">msg</span>: <span class="string">&#x27;这是组件中data定义的数据&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="为什么组件中数据必须是一个函数">为什么组件中数据必须是一个函数</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>为什么组件中数据必须是一个函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tmp1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;+1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dataObj = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;#tmp1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// return dataObj; // 每次返回对象共享，当多个一起使用时会互相干扰</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.count++;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用components属性定义局部子组件">使用components属性定义局部子组件</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">components</span>: &#123; <span class="comment">// 定义子组件</span></span><br><span class="line">        <span class="attr">account</span>: &#123; <span class="comment">// account 组件</span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;login&gt;&lt;/login&gt;&lt;/div&gt;&#x27;</span>, <span class="comment">// 在这里使用定义的子组件</span></span><br><span class="line">          <span class="attr">components</span>: &#123; <span class="comment">// 定义子组件的子组件</span></span><br><span class="line">            <span class="attr">login</span>: &#123; <span class="comment">// login 组件</span></span><br><span class="line">              <span class="attr">template</span>: <span class="string">&quot;&lt;h3&gt;这是登录组件&lt;/h3&gt;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="组件切换">组件切换</h3>
<h4 id="方式一">方式一</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件切换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;flag=true&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;flag=false&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">login</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">register</span> <span class="attr">v-else</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">register</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;login&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;登录组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;register&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;注册组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="方式二">方式二</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件切换-方式二<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Vue提供了 component，来展示对应名称的组件 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- component 是一个占位符，:is属性，可以用来指定要展示的组件的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;comName=&#x27;login&#x27;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;comName=&#x27;register&#x27;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 组件名称是字符串</span></span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;login&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;登录组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;register&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;注册组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">comName</span>: <span class="string">&quot;login&quot;</span> <span class="comment">// 当前component中的:is绑定的组件的名称</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="组件切换动画">组件切换动画</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件切换-切换动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-enter</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">150px</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;comName=&#x27;login&#x27;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;comName=&#x27;register&#x27;&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通过mode属性，设置组件切换时的方式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 组件名称是字符串</span></span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;login&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;登录组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            Vue.component(<span class="string">&#x27;register&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;注册组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">comName</span>: <span class="string">&quot;login&quot;</span> <span class="comment">// 当前component中的:is绑定的组件的名称</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第十四天</title>
    <url>/2019/07/25/vue-4/</url>
    <content><![CDATA[<h1 id="第十四天">第十四天</h1>
<h2 id="父组件向子组件传值">父组件向子组件传值</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>父组件向子组件传值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 父组件可以在引用子组件时，通过属性绑定的形式，把需要传递的值数据，以属性绑定的形式传递到子组件内，供子组件使用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">com1</span> <span class="attr">:parentmsg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">com1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&#x27;父组件中数据&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">com1</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="comment">// 子组件中的data数据，并不是通过父组件传递过来的，而是子组件自身私有的，比如：子组件通过ajax请求回来的数据，都可以放到data身上</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// data中的数据，都是可读可写的</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="attr">title</span>: <span class="string">&#x27;123&#x27;</span></span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 结论：子组件中默认无法访问到父组件中的data上的数据和methods中的方法</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// template: &#x27;&lt;h1&gt;这是子组件---&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">                        <span class="attr">template</span>: <span class="string">&#x27;&lt;h1 @click=&quot;change&quot;&gt;这是子组件---&#123;&#123;parentmsg&#125;&#125;&lt;/h1&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// props中的数据都是只读的，无法重新赋值(强行赋值不报错，有警告)</span></span></span><br><span class="line"><span class="javascript">                        <span class="attr">props</span>: [<span class="string">&#x27;parentmsg&#x27;</span>], <span class="comment">// 把父组件传递过来的 parentmsg属性，先在props数组中定义，才能使用这个数据</span></span></span><br><span class="line"><span class="javascript">                        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.parentmsg = <span class="string">&quot;被修改了&quot;</span>;</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="父组件把方法传递给子组件子组件通过方法向父组件传值">父组件把方法传递给子组件,子组件通过方法向父组件传值</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>父组件把方法传递给子组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 父组件向子组件传递方法，使用的是事件绑定机制，自定义一个事件func --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">com2</span> @<span class="attr">func</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">com2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tmp1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;子组件按钮，点击触发父组件&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;myclick&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 定义了一个字面量类型的组件模板对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> com2 = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">age</span>: <span class="number">22</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;#tmp1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">myclick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 当点击子组件按钮时， 如何拿到func方法， 并调用?</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// emit：触发</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$emit(<span class="string">&#x27;func&#x27;</span>, <span class="built_in">this</span>.user);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">show</span>(<span class="params">data</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;调用了父组件的show方法&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 通过函数，子组件向父组件传值 </span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.msg = data;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// com2: com2</span></span></span><br><span class="line"><span class="javascript">                    com2</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实例-实现评论的发表与自动刷新">实例-实现评论的发表与自动刷新</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例-评论列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cmt-box</span> @<span class="attr">func</span>=<span class="string">&quot;loadComments&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cmt-box</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>评论人：&#123;&#123;item.user&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    &#123;&#123;item.content&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tmpl&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论人<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发表评论&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;postComment&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> commentBox = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">user</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&quot;#tmpl&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 发表评论的方法</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 分析：发表评论的业务逻辑</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 1. 评论数据存放到本地存储中</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 2. 先组织出一个最新的评论数据对象</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 3. 把2中得到的对象保存到本地存储，</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 3.1 localStoreage只支持存放字符串，要先调用JSON.stringify</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 3.2 在保存最新的评论数据前，先从localStorege获取到之前的评论数据(string)，转为数组对象，然后将最新评论push进数组</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 3.3 如果获取到的评论字符串为空，则可以返回一个&#x27;[]&#x27;，让JSON.parse转换</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 3.4 将最新的评论列表数组，再次调用JSON.stringify转为数组字符串，保存</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">postComment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> comment = &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="built_in">Date</span>.now(),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">user</span>: <span class="built_in">this</span>.user,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">content</span>: <span class="built_in">this</span>.content</span></span><br><span class="line"><span class="javascript">                        &#125;;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 从localStoreage 中获取所有评论</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> list = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;cmts&#x27;</span>) || <span class="string">&#x27;[]&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        list.unshift(comment);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 重新保存最新的评论数据</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;cmts&#x27;</span>, <span class="built_in">JSON</span>.stringify(list));</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.user = <span class="built_in">this</span>.content = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$emit(<span class="string">&#x27;func&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">list</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="built_in">Date</span>.now(),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">user</span>: <span class="string">&#x27;李白&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">content</span>: <span class="string">&#x27;天生我材必有用&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">id</span>: <span class="built_in">Date</span>.now(),</span></span><br><span class="line"><span class="javascript">                            <span class="attr">user</span>: <span class="string">&#x27;杜甫&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">content</span>: <span class="string">&#x27;会当凌绝顶&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    ]</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadComments();</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 从本地localStorege中加载评论列表</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">loadComments</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> list = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;cmts&#x27;</span>) || <span class="string">&#x27;[]&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.list = list;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;cmt-box&#x27;</span>: commentBox</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用refs获取dom的组件">使用$refs获取DOM的组件</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用ref获取DOM元素和组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取元素&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getElement&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mybtn&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">ref</span>=<span class="string">&quot;myh3&quot;</span>&gt;</span>这是一个h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">login</span> <span class="attr">ref</span>=<span class="string">&quot;mylogin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">msg</span>: <span class="string">&#x27;son msg&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;调用了子组件的方法&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">getElement</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(document.getElementById(&quot;&quot;).innerText);</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// ref(reference) 获取DOM节点</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.myh3.innerText);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(this.$refs.mylogin.msg);</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.mylogin.show());</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    login</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="路由">路由</h2>
<h3 id="什么是路由">什么是路由</h3>
<ol type="1">
<li>后端路由：对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源</li>
<li>前端路由：对于单页面应用程序，主要通过URL中的hash(#号)来实现不同页面之间切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现</li>
<li>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由(区别于后端路由)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>路由的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1. 安装vue-router路由模块 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 实现选中路由高亮 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 方式一 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.router-link-active</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-weight</span>: <span class="number">800</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-style</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.myactive</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;a href=&quot;#/login&quot;&gt;登录&lt;/a&gt;</span></span><br><span class="line"><span class="comment">            &lt;a href=&quot;#/register&quot;&gt;注册&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- router-link默认渲染了一个a标签 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通过tag属性可以改变标签类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;span&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 路由容器，由vue-router提供的元素，专门用来当作占位符，将来路由规则匹配到的组件，就会展示到这个router-view中 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可以视作一个占位符 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果需要动画效果，可以用transition包在外面 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;注册组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2. 创建一个路由对象， 当导入vue - router包后， 在window全局对象中就有了一个路由构造函数，叫VueRouter</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 在new路由对象时，可以为构造函数传递一个配置对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// route //这个配置对象中route 表示 [路由匹配规则] 的意思</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">routes</span>: [ <span class="comment">//路由匹配规则</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 每个路由规则，都是一个对象，这个规则对象身上有两个必要属性:</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 属性1：path表示监听哪个路由链接地址</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 属性2：component表示如果路由是前面匹配的path，则展示component属性对应的那个组件</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     path: &#x27;/&#x27;,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     component: login</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">redirect</span>: <span class="string">&#x27;/login&#x27;</span> <span class="comment">//重定向</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">component</span>: login <span class="comment">// 注意：component的属性值，必须是一个组件模板对象，不能是组件引用名称</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">component</span>: register</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                ],</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 路由高亮方式二</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">linkActiveClass</span>: <span class="string">&#x27;myactive&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">router</span>: routerObj <span class="comment">// 将路由规则对象，注册到vm实例上，用来监听URL地址的变化，然后展示对应的组件</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="路由规则传参方式">路由规则传参方式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>路由规则中定义参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第一种传参 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果在路由中，使用查询字符串给路由传递参数，则不需要修改路由规则 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login?id=10&amp;name=zs&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第二种传参 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register/20/ls&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;登录&#123;&#123;$route.query.id&#125;&#125;---&#123;&#123;$route.query.name&#125;&#125;&lt;/h1&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; <span class="comment">//组件生命周期钩子函数</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 获得查询字符串</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.query.id);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;注册&#123;&#123;$route.params.id&#125;&#125;---&#123;&#123;$route.params.name&#125;&#125;&lt;/h1&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 第二种方式获取参数</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.params.id);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">routes</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">component</span>: login</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 第二种方式传参</span></span></span><br><span class="line"><span class="javascript">                        <span class="attr">path</span>: <span class="string">&#x27;/register/:id/:name&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">component</span>: register</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                ]</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                router</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="路由嵌套">路由嵌套</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>路由嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/account&quot;</span>&gt;</span>Account<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tmpl&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是Account组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/account/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/account/register&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> account = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;#tmpl&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;登录&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> register = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;注册&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">routes</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">path</span>: <span class="string">&#x27;/account&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">component</span>: account,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">children</span>: [&#123; <span class="comment">// children属性实现子路由</span></span></span><br><span class="line"><span class="javascript">                            <span class="attr">path</span>: <span class="string">&#x27;login&#x27;</span>, <span class="comment">// 没有/，/login中/表示根目录</span></span></span><br><span class="line"><span class="javascript">                            <span class="attr">component</span>: login</span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">component</span>: register</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    ]</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;, &#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     path: &#x27;/account/login&#x27;,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     component: login</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;, &#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     path: &#x27;/account/register&#x27;,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     component: register</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                &#125;]</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                router</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="路由命名视图实现经典布局">路由命名视图实现经典布局</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>路由命名视图实现经典布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="css">            <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">620px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="css">                <span class="attribute">flex</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: lightpink;</span></span><br><span class="line"><span class="css">                <span class="attribute">flex</span>: <span class="number">8</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 此处name前没:，不用考虑是否加&#x27;&#x27; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&#x27;main&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> header = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1 class=&quot;header&quot;&gt;Header头部区域&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leftBox = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1 class=&quot;left&quot;&gt;Left侧边栏区域&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mainBox = &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">template</span>: <span class="string">&#x27;&lt;h1 class=&quot;main&quot;&gt;Main主体区域&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">routes</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">default</span>: header,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;left&#x27;</span>: leftBox,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;main&#x27;</span>: mainBox</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;, ]</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">                router</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>人名分类器</title>
    <url>/2021/10/12/%E4%BA%BA%E5%90%8D%E5%88%86%E7%B1%BB%E5%99%A8/</url>
    <content><![CDATA[<h1 id="人名分类器">人名分类器</h1>
<h2 id="关于人名分类问题">关于人名分类问题</h2>
<ul>
<li>以一个人名为输入，使用模型帮助我们判断它最有可能来自哪个国家的人名，这在某些国际化公司的业务中具有重要意义，在用户注册过程中， 会根据用户填写的名字直接给他分配可能的国家或地区选项，以及该国家或地区的国旗，限制手机号码位数等</li>
</ul>
<h2 id="人名分类数据">人名分类数据</h2>
<ul>
<li><a href="http://download.pytorch.org/tutorial/data.zip">数据下载地址</a></li>
</ul>
<h2 id="实现步骤">实现步骤</h2>
<ol type="1">
<li>导入必备工具包</li>
<li>对data文件中的数据进行处理，满足训练要求</li>
<li>构建RNN模型(包括传统RNN、LSTM及GRU)</li>
<li>构建训练函数并进行训练</li>
<li>构建评估函数并进行预测</li>
</ol>
<h3 id="导入必备工具包">导入必备工具包</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从io中导入文件打开方法</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line"><span class="comment"># 帮助使用正则表达式子目录的查询</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 用于获得常见字母及字符规范化</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> unicodedata</span><br><span class="line"><span class="comment"># 导入随机工具random</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 导入时间和数学工具包</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 导入torch工具</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment"># 导入nn准备构建模型</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="comment"># 引入制图工具包</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<h3 id="对data文件中的数据进行处理满足训练要求">对data文件中的数据进行处理，满足训练要求</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取所有常用字符包括字母和常用标点</span></span><br><span class="line">all_letters = string.ascii_letters + <span class="string">&quot;.,;&quot;</span></span><br><span class="line"><span class="comment"># 获取常用字符数量</span></span><br><span class="line">n_letters = <span class="built_in">len</span>(all_letters)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n_letter:&quot;</span>, n_letters)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>n_letter: 55</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符规范化-unicode转Ascii函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unicodeToAscii</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(</span><br><span class="line">    	c <span class="keyword">for</span> c <span class="keyword">in</span> unicodedata.normalize(<span class="string">&#x27;NFD&#x27;</span>, s)</span><br><span class="line">        <span class="keyword">if</span> unicodedata.category(c) != <span class="string">&#x27;Mn&#x27;</span></span><br><span class="line">        <span class="keyword">and</span> c <span class="keyword">in</span> all_letters</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">s = <span class="string">&quot;Iñíguez&quot;</span></span><br><span class="line">a = unicodeToAscii(s)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Iniguez</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从从持久化文件中读取的函数</span></span><br><span class="line">data_path = <span class="string">&quot;./data/names/&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_lines</span>(<span class="params">filename</span>):</span></span><br><span class="line">    lines = <span class="built_in">open</span>(filename, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read().strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> [unicodeToAscii(line) <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">filename = data_path + <span class="string">&quot;Chinese.txt&quot;</span></span><br><span class="line">lines = read_lines(filename)</span><br><span class="line"><span class="built_in">print</span>(lines[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>['Ang', 'AuYong', 'Bai', 'Ban', 'Bao', 'Bei', 'Bian', 'Bui', 'Cai', 'Cao']</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建人名类别列表和人名对应关系字典</span></span><br><span class="line">category_lines = &#123;&#125;</span><br><span class="line">all_categories = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> glob.glob(data_path + <span class="string">&quot;*.txt&quot;</span>):</span><br><span class="line">    category = os.path.splitext(os.path.basename(filename))[<span class="number">0</span>]</span><br><span class="line">    all_categories.append(category)</span><br><span class="line">    lines = read_lines(filename)</span><br><span class="line">    category_lines[category] = lines</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看类别总数</span></span><br><span class="line">n_categories = <span class="built_in">len</span>(all_categories)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n_categories:&quot;</span>, n_categories)</span><br><span class="line"><span class="comment"># 查看一些内容</span></span><br><span class="line"><span class="built_in">print</span>(category_lines[<span class="string">&#x27;Italian&#x27;</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>n_categories: 18</p>
<p>['Abandonato', 'Abatangelo', 'Abatantuono', 'Abate', 'Abategiovanni']</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将人名转化对应onehot张量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_to_tensor</span>(<span class="params">line</span>):</span></span><br><span class="line">    tensor = torch.zeros(<span class="built_in">len</span>(line), <span class="number">1</span>, n_letters)</span><br><span class="line">    <span class="keyword">for</span> li, letter <span class="keyword">in</span> <span class="built_in">enumerate</span>(line):</span><br><span class="line">        tensor[li][<span class="number">0</span>][all_letters.find(letter)] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> tensor</span><br><span class="line"></span><br><span class="line">line = <span class="string">&quot;Bai&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;line_tensor:&quot;</span>, line_to_tensor(line))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>line_tensor: tensor([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [[0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]])</p>
</blockquote>
<h3 id="构建rnn模型">构建RNN模型</h3>
<h4 id="构建传统rnn模型">构建传统RNN模型</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用nn.RNN构建完成传统RNN使用类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RNN</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_size, hidden_size, output_size, num_layers=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化函数中有4个参数, 分别代表RNN输入最后一维尺寸, RNN的隐层最后一维尺寸, RNN层数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(RNN, self).__init__()       </span><br><span class="line">        <span class="comment"># 将hidden_size与num_layers传入其中</span></span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.num_layers = num_layers  </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实例化预定义的nn.RNN, 它的三个参数分别是input_size, hidden_size, num_layers</span></span><br><span class="line">        self.rnn = nn.RNN(input_size, hidden_size, num_layers)</span><br><span class="line">        <span class="comment"># 实例化nn.Linear, 这个线性层用于将nn.RNN的输出维度转化为指定的输出维度</span></span><br><span class="line">        self.linear = nn.Linear(hidden_size, output_size)</span><br><span class="line">        <span class="comment"># 实例化nn中预定的Softmax层, 用于从输出层获得类别结果</span></span><br><span class="line">        self.softmax = nn.LogSoftmax(dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span>, hidden</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;完成传统RNN中的主要逻辑, 输入参数input代表输入张量, 它的形状是1 x n_letters</span></span><br><span class="line"><span class="string">           hidden代表RNN的隐层张量, 它的形状是self.num_layers x 1 x self.hidden_size&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 因为预定义的nn.RNN要求输入维度一定是三维张量, 因此在这里使用unsqueeze(0)扩展一个维度</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 将input和hidden输入到传统RNN的实例化对象中，如果num_layers=1, rr恒等于hn</span></span><br><span class="line">        rr, hn = self.rnn(<span class="built_in">input</span>, hidden)</span><br><span class="line">        <span class="comment"># 将从RNN中获得的结果通过线性变换和softmax返回，同时返回hn作为后续RNN的输入</span></span><br><span class="line">        <span class="keyword">return</span> self.softmax(self.linear(rr)), hn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_hidden</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化隐层张量&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 初始化一个（self.num_layers, 1, self.hidden_size）形状的0张量     </span></span><br><span class="line">        <span class="keyword">return</span> torch.zeros(self.num_layers, <span class="number">1</span>, self.hidden_size)  </span><br></pre></td></tr></table></figure>
<h4 id="构建lstm模型">构建LSTM模型</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LSTM</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_size, hidden_size, output_size, num_layers=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(LSTM, self).__init__()</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.num_layers = num_layers</span><br><span class="line">        </span><br><span class="line">        self.lstm = nn.LSTM(input_size, hidden_size, num_layers)</span><br><span class="line">        self.linear = nn.Linear(hidden_size, output_size)</span><br><span class="line">        self.softmax = nn.LogSoftmax(dim=-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span>, hidden, c</span>):</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        rr, (hn, c) = self.lstm(<span class="built_in">input</span>, (hidden, c))</span><br><span class="line">        <span class="keyword">return</span> self.softmax(self.linear(rr)), hn, c</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_hidden_and_c</span>(<span class="params">self</span>):</span></span><br><span class="line">        c = hidden = torch.zeros(self.num_layers, <span class="number">1</span>, self.hidden_size)</span><br><span class="line">        <span class="keyword">return</span> hidden, c</span><br></pre></td></tr></table></figure>
<h4 id="构建gru模型">构建GRU模型</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GRU</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_size, hidden_size, output_size, num_layers=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(GRU, self).__init__()</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.num_layers = num_layers</span><br><span class="line">        self.gru = nn.GRU(input_size, hidden_size, num_layers)</span><br><span class="line">        self.linear = nn.Linear(hidden_size, output_size)</span><br><span class="line">        self.softmax = nn.LogSoftmax(dim=-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span>, hidden</span>):</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.unsqueeze(<span class="number">0</span>)</span><br><span class="line">        rr, hn = self.gru(<span class="built_in">input</span>, hidden)</span><br><span class="line">        <span class="keyword">return</span> self.softmax(self.linear(rr)), hn</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_hidden</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> torch.zeros(self.num_layers, <span class="number">1</span>, self.hidden_size)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_size = n_letters</span><br><span class="line">n_hidden = <span class="number">128</span> <span class="comment"># 定义隐层最后一维尺寸大小</span></span><br><span class="line">output_size = n_categories</span><br><span class="line"><span class="built_in">input</span> = line_to_tensor(<span class="string">&#x27;B&#x27;</span>).squeeze(<span class="number">0</span>)</span><br><span class="line">hidden = c = torch.zeros(<span class="number">1</span>, <span class="number">1</span>, n_hidden)</span><br><span class="line">rnn = RNN(input_size, n_hidden, output_size)</span><br><span class="line">lstm = LSTM(input_size, n_hidden, output_size)</span><br><span class="line">gru = GRU(input_size, n_hidden, output_size)</span><br><span class="line"></span><br><span class="line">rnn_output, next_hidden = rnn(<span class="built_in">input</span>, hidden)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rnn:&quot;</span>, rnn_output)</span><br><span class="line"><span class="built_in">print</span>(rnn_output.shape)</span><br><span class="line">lstm_output, next_hidden, c = lstm(<span class="built_in">input</span>, hidden, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lstm:&quot;</span>, lstm_output)</span><br><span class="line"><span class="built_in">print</span>(lstm_output.shape)</span><br><span class="line">gru_output, next_hidden = gru(<span class="built_in">input</span>, hidden)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gru:&quot;</span>, gru_output)</span><br><span class="line"><span class="built_in">print</span>(gru_output.shape)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>rnn: tensor([[[-2.7586, -2.9267, -2.9233, -2.9483, -2.9034, -2.8620, -3.0104, -2.9470, -2.7736, -2.8324, -2.8893, -2.9148, -2.8490, -2.9128, -3.0092, -2.8207, -2.8846, -2.9011]]], grad_fn=<LogSoftmaxBackward>)</p>
<p>torch.Size([1, 1, 18])</p>
<p>lstm: tensor([[[-2.8870, -2.8785, -2.8590, -2.9680, -2.8337, -2.8333, -2.8774, -2.9016, -2.8173, -2.9711, -2.9113, -2.8614, -2.8533, -2.8560, -2.8948, -2.9332, -2.9586, -2.9509]]], grad_fn=<LogSoftmaxBackward>)</p>
<p>torch.Size([1, 1, 18])</p>
<p>gru: tensor([[[-2.9899, -2.8605, -2.8580, -2.8376, -2.9263, -2.9115, -2.8091, -2.9688, -2.9039, -2.9790, -2.8622, -2.9508, -2.8404, -2.9036, -2.8456, -2.8766, -2.8663, -2.8602]]], grad_fn=<LogSoftmaxBackward>)</p>
<p>torch.Size([1, 1, 18])</p>
</blockquote>
<h3 id="构建训练函数并进行训练">构建训练函数并进行训练</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">category_from_output</span>(<span class="params">output</span>):</span></span><br><span class="line">    top_n, top_i = output.topk(<span class="number">1</span>)</span><br><span class="line">    category_i = top_i[<span class="number">0</span>].item()</span><br><span class="line">    <span class="keyword">return</span> all_categories[category_i], category_i</span><br><span class="line">x = torch.arange(<span class="number">1.</span>, <span class="number">6.</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(torch.topk(x, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tensor([1., 2., 3., 4., 5.])</p>
<p>torch.return_types.topk( values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2]))</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = gru_output</span><br><span class="line">category, category_i = category_from_output(output)</span><br><span class="line"><span class="built_in">print</span>(category, category_i)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Portuguese 15</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机产生训练数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_train_example</span>():</span></span><br><span class="line">    category = random.choice(all_categories)</span><br><span class="line">    line = random.choice(category_lines[category])</span><br><span class="line">    category_tensor = torch.tensor([all_categories.index(category)], dtype=torch.long)</span><br><span class="line">    line_tensor = line_to_tensor(line)</span><br><span class="line">    <span class="keyword">return</span> category, line, category_tensor, line_tensor</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    category, line, category_tensor, line_tensor = random_train_example()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;category=&quot;</span>,category,<span class="string">&quot;/ line=&quot;</span>, line, <span class="string">&quot;/category_tensor=&quot;</span>, category_tensor)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>category= Czech / line= Tykal /category_tensor= tensor([5])</p>
<p>category= Japanese / line= Tsukatani /category_tensor= tensor([9])</p>
<p>category= Chinese / line= Xin /category_tensor= tensor([0])</p>
<p>category= Italian / line= Albanesi /category_tensor= tensor([12])</p>
<p>category= Japanese / line= Fujimaki /category_tensor= tensor([9])</p>
<p>category= Scottish / line= Black /category_tensor= tensor([14])</p>
<p>category= French / line= Bernard /category_tensor= tensor([7])</p>
<p>category= Greek / line= Tselios /category_tensor= tensor([8])</p>
<p>category= Chinese / line= Chen /category_tensor= tensor([0])</p>
<p>category= German / line= Hauer /category_tensor= tensor([16])</p>
</blockquote>
<h4 id="构建传统rnn训练函数">构建传统RNN训练函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">criterion = nn.NLLLoss()</span><br><span class="line">learning_rate = <span class="number">0.005</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_RNN</span>(<span class="params">category_tensor, line_tensor</span>):</span></span><br><span class="line">    hidden = rnn.init_hidden()</span><br><span class="line">    rnn.zero_grad()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(line_tensor.size()[<span class="number">0</span>]):</span><br><span class="line">        output, hidden = rnn(line_tensor[i], hidden)</span><br><span class="line">    </span><br><span class="line">    loss = criterion(output.squeeze(<span class="number">0</span>), category_tensor)</span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> rnn.parameters():</span><br><span class="line">        p.data.add_(learning_rate, p.grad.data)</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">return</span> output, loss.item()</span><br></pre></td></tr></table></figure>
<h4 id="构建lstm训练函数">构建LSTM训练函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_LSTM</span>(<span class="params">category_tensor, line_tensor</span>):</span></span><br><span class="line">    hidden, c = lstm.init_hidden_and_c()</span><br><span class="line">    lstm.zero_grad()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(line_tensor.size()[<span class="number">0</span>]):</span><br><span class="line">        output, hidden, c = lstm(line_tensor[i], hidden, c)</span><br><span class="line">    loss = criterion(output.squeeze(<span class="number">0</span>), category_tensor)</span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> lstm.parameters():</span><br><span class="line">        p.data.add_(-learning_rate, p.grad.data)</span><br><span class="line">    <span class="keyword">return</span> output, loss.item()</span><br></pre></td></tr></table></figure>
<h4 id="构建gru训练函数">构建GRU训练函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_GRU</span>(<span class="params">category_tensor, line_tensor</span>):</span></span><br><span class="line">    hidden = gru.init_hidden()</span><br><span class="line">    gru.zero_grad()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(line_tensor.size()[<span class="number">0</span>]):</span><br><span class="line">        output, hidden = gru(line_tensor[i], hidden)</span><br><span class="line">    loss = criterion(output.squeeze(<span class="number">0</span>), category_tensor)</span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> gru.parameters():</span><br><span class="line">        p.data.add_(-learning_rate, p.grad.data)</span><br><span class="line">    <span class="keyword">return</span> output, loss.item()</span><br></pre></td></tr></table></figure>
<h4 id="构建时间计算函数">构建时间计算函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_since</span>(<span class="params">since</span>):</span></span><br><span class="line">    now = time.time()</span><br><span class="line">    s = now - since</span><br><span class="line">    m = math.floor(s / <span class="number">60</span>)</span><br><span class="line">    s -= m*<span class="number">60</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%dm %ds&quot;</span> % (m, s)</span><br></pre></td></tr></table></figure>
<h4 id="构建训练过程的日志打印函数">构建训练过程的日志打印函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n_iters = <span class="number">1000</span></span><br><span class="line">print_every = <span class="number">50</span></span><br><span class="line">plot_every = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">train_type_fn</span>):</span></span><br><span class="line">    all_losses = []</span><br><span class="line">    start = time.time()</span><br><span class="line">    current_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">iter</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n_iters+<span class="number">1</span>):</span><br><span class="line">        category, line, category_tensor, line_tensor = random_train_example()</span><br><span class="line">        output, loss = train_type_fn(category_tensor, line_tensor)</span><br><span class="line">        current_loss += loss</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">iter</span> % print_every == <span class="number">0</span>:</span><br><span class="line">            guess, guess_i = category_from_output(output)</span><br><span class="line">            correct = <span class="string">&#x27;✓&#x27;</span> <span class="keyword">if</span> guess == category <span class="keyword">else</span> <span class="string">&#x27;✗ (%s)&#x27;</span> % category</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%d %d%% (%s) %.4f %s / %s %s&#x27;</span> % (<span class="built_in">iter</span>, <span class="built_in">iter</span> / n_iters * <span class="number">100</span>, time_since(start), loss, line, guess, correct))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">iter</span> % plot_every == <span class="number">0</span>:</span><br><span class="line">                all_losses.append(current_loss / plot_every)</span><br><span class="line">                current_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> all_losses, <span class="built_in">int</span>(time.time() - start)</span><br></pre></td></tr></table></figure>
<h4 id="训练">训练</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用train函数, 分别进行RNN, LSTM, GRU模型的训练</span></span><br><span class="line"><span class="comment"># 并返回各自的全部损失, 以及训练耗时用于制图</span></span><br><span class="line">all_losses1, period1 = train(train_RNN)</span><br><span class="line">all_losses2, period2 = train(train_LSTM)</span><br><span class="line">all_losses3, period3 = train(train_GRU)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制损失对比曲线, 训练耗时对比柱张图</span></span><br><span class="line"><span class="comment"># 创建画布0</span></span><br><span class="line">plt.figure(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 绘制损失对比曲线</span></span><br><span class="line">plt.plot(all_losses1, label=<span class="string">&quot;RNN&quot;</span>)</span><br><span class="line">plt.plot(all_losses2, color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;LSTM&quot;</span>)</span><br><span class="line">plt.plot(all_losses3, color=<span class="string">&quot;orange&quot;</span>, label=<span class="string">&quot;GRU&quot;</span>) </span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建画布1</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">x_data=[<span class="string">&quot;RNN&quot;</span>, <span class="string">&quot;LSTM&quot;</span>, <span class="string">&quot;GRU&quot;</span>] </span><br><span class="line">y_data = [period1, period2, period3]</span><br><span class="line"><span class="comment"># 绘制训练耗时对比柱状图</span></span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>(x_data)), y_data, tick_label=x_data)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>...</p>
<p>750 75% (0m 2s) 2.8973 Reijnders / Korean ✗ (Dutch)</p>
<p>800 80% (0m 3s) 2.9324 Huynh / Korean ✗ (Vietnamese)</p>
<p>850 85% (0m 3s) 2.7586 Suk / Korean ✓</p>
<p>900 90% (0m 3s) 2.9910 Stanek / Korean ✗ (Polish)</p>
<p>950 95% (0m 3s) 2.9644 Klimek / Greek ✗ (Polish)</p>
<p>1000 100% (0m 3s) 2.9666 Le / Korean ✗ (Vietnamese)</p>
<p>&lt;BarContainer object of 3 artists&gt;</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211012171800024.png" /></p>
</blockquote>
<h4 id="结论">结论</h4>
<blockquote>
<p>损失对比曲线分析：</p>
<ul>
<li>模型训练的损失降低快慢代表模型收敛程度，由图可知，传统RNN的模型收敛情况最好，然后是GRU，最后是LSTM，这是因为：当处理的文本数据是人名时，它们的长度有限，且长距离字母间基本无特定关联，因此无法发挥改进模型LSTM和GRU的长距离捕捉语义关联优势。所以在之后的模型选用时，要通过对任务的分析以及实验对比，选择最适合的模型。</li>
</ul>
<p>训练耗时对比图分析：</p>
<ul>
<li>模型训练的耗时长短代表模型的计算复杂度，由图可知，也正如之前理论分析，传统RNN复杂度最低，耗时最少，然后是GRU，最后是LSTM。</li>
</ul>
</blockquote>
<p>结论：模型选用一般就通过实验对比，并非越复杂或越先进的模型越好，而是需要结合自己的特定任务，从对数据的分析和实验结果中获得最佳答案</p>
<h3 id="构建评估函数并进行预测">构建评估函数并进行预测</h3>
<h4 id="构建传统rnn评估函数">构建传统RNN评估函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_RNN</span>(<span class="params">line_tensor</span>):</span></span><br><span class="line">    hidden = rnn.init_hidden()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(line_tensor.size()[<span class="number">0</span>]):</span><br><span class="line">        output, hidden = rnn(line_tensor[i], hidden)</span><br><span class="line">    <span class="keyword">return</span> output.squeeze(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="构建lstm评估函数">构建LSTM评估函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_LSTM</span>(<span class="params">line_tensor</span>):</span></span><br><span class="line">    hidden, c = lstm.init_hidden_and_c()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(line_tensor.size()[<span class="number">0</span>]):</span><br><span class="line">        output, hidden, c = lstm(line_tensor[i], hidden, c)</span><br><span class="line">    <span class="keyword">return</span> output.squeeze(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="构建gru评估函数">构建GRU评估函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_GRU</span>(<span class="params">line_tensor</span>):</span></span><br><span class="line">    hidden = gru.init_hidden()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(line_tensor.size()[<span class="number">0</span>]):</span><br><span class="line">        output, hidden = gru(line_tensor[i], hidden)</span><br><span class="line">	<span class="keyword">return</span> output.squeeze(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="测试">测试</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = <span class="string">&quot;Bai&quot;</span></span><br><span class="line">line_tensor = line_to_tensor(line)</span><br><span class="line">rnn_output = evaluate_RNN(line_tensor)</span><br><span class="line">lstm_output = evaluate_LSTM(line_tensor)</span><br><span class="line">gru_output = evaluate_GRU(line_tensor)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rnn_output:&quot;</span>, rnn_output)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lstm_output:&quot;</span>, lstm_output)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gru_output:&quot;</span>, gru_output)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>rnn_output: tensor([[-5965.0801, 0.0000, -5944.7900, -5938.4595, -5962.0166, -5947.8330, -5934.5571, -5944.6787, -5954.0552, -5939.5146, -5950.5410, -5955.7983, -5929.8423, -5952.1704, -5936.9551, -5948.0830, -5970.2207, -5947.5967]], grad_fn=<SqueezeBackward1>)</p>
<p>lstm_output: tensor([[-2.8458, -2.9780, -2.8754, -2.9936, -2.8406, -2.9247, -3.0767, -2.8284, -2.9451, -2.8750, -2.8369, -2.7955, -2.8501, -2.8687, -2.9414, -2.8326, -2.8425, -2.9191]], grad_fn=<SqueezeBackward1>)</p>
<p>gru_output: tensor([[-2.9983, -2.6126, -2.9359, -2.9278, -2.8107, -3.0219, -3.0625, -2.9407, -3.0557, -2.8054, -2.6451, -2.9002, -2.7039, -2.7317, -3.1449, -2.9193, -2.9134, -3.1068]], grad_fn=<SqueezeBackward1>)</p>
</blockquote>
<h4 id="构建预测函数">构建预测函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">input_line, evaluate, n_predictions=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&gt; %s&quot;</span> % input_line)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        output = evaluate(line_to_tensor(input_line))</span><br><span class="line">        topv, topi = output.topk(n_predictions, <span class="number">1</span>, <span class="literal">True</span>)</span><br><span class="line">        predictions = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_predictions):</span><br><span class="line">            value = topv[<span class="number">0</span>][i].item()</span><br><span class="line">            category_index = topi[<span class="number">0</span>][i].item()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;(%.2f) %s&quot;</span> % (value, all_categories[category_index]))</span><br><span class="line">            predictions.append([value, all_categories[category_index]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">for</span> evaluate_fn <span class="keyword">in</span> [evaluate_RNN, evaluate_LSTM, evaluate_GRU]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">18</span>)</span><br><span class="line">    predict(<span class="string">&quot;Dovesky&quot;</span>, evaluate_fn)</span><br><span class="line">    predict(<span class="string">&quot;Jackson&quot;</span>, evaluate_fn)</span><br><span class="line">    predict(<span class="string">&quot;Satoshi&quot;</span>, evaluate_fn)</span><br></pre></td></tr></table></figure>
<blockquote>
<hr />
<p>&gt; Dovesky</p>
<p>(0.00) Italian</p>
<p>(-5929.84) Czech</p>
<p>(-5934.56) Irish</p>
<p>&gt; Jackson</p>
<p>(0.00) Italian</p>
<p>(-5929.84) Czech</p>
<p>(-5934.56) Irish</p>
<p>&gt; Satoshi</p>
<p>(0.00) Italian</p>
<p>(-5929.84) Czech</p>
<p>(-5934.56) Irish</p>
<hr />
<p>&gt; Dovesky</p>
<p>(-2.80) English</p>
<p>(-2.81) Portuguese</p>
<p>(-2.82) Arabic</p>
<p>&gt; Jackson</p>
<p>(-2.80) Portuguese</p>
<p>(-2.82) English</p>
<p>(-2.82) Arabic</p>
<p>&gt; Satoshi</p>
<p>(-2.80) Arabic</p>
<p>(-2.82) English</p>
<p>(-2.82) Portuguese</p>
<hr />
<p>&gt; Dovesky</p>
<p>(-2.62) Czech</p>
<p>(-2.67) Polish</p>
<p>(-2.69) Greek</p>
<p>&gt; Jackson</p>
<p>(-2.74) Scottish</p>
<p>(-2.75) English</p>
<p>(-2.77) Russian</p>
<p>&gt; Satoshi</p>
<p>(-2.61) Greek</p>
<p>(-2.64) Italian</p>
<p>(-2.70) Czech</p>
</blockquote>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>第二天CSS</title>
    <url>/2019/07/09/%E5%89%8D%E7%AB%AF-CSS/</url>
    <content><![CDATA[<h1 id="第二天">第二天</h1>
<h2 id="css层叠样式表">CSS(层叠样式表)</h2>
<p>内容与样式相分离</p>
<h3 id="选择器">选择器</h3>
<p>选择器selctor 标签选择器：针对所有标签，css中直接用标签名 类选择器：针对某一些标签，css中以.开头 ID选择器：针对某个标签，css中以#开头 伪类：针对标签的某个状态，css中用标签:状态如(a:hover{}) 后代选择器：针对标签中的子元素，css中用父 子{} 表示如(box p{}) 群组选择器：并列选择元素，css用a,b{}表示如(h2,ul,li{})</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 选择器selctor */</span></span></span><br><span class="line"><span class="css">           <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">               <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">               <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="css">           &#125; </span></span><br><span class="line"><span class="css">           <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">               <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">               <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">           &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页：内容与样式相分离<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>层叠样式表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>property+selctor<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">li</span>&#123; <span class="comment">/* 标签选择器 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">33px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">list-style</span>: none;<span class="comment">/* 前面点去除点 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#039</span>;<span class="comment">/* 边框(线的宽度、实线、颜色)*/</span></span></span><br><span class="line"><span class="css">                <span class="attribute">line-height</span>: <span class="number">33px</span>;<span class="comment">/* 单行垂直居中 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center; <span class="comment">/* 水平居中 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.red</span>&#123; <span class="comment">/* 类选择器 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.dash</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#039</span>;<span class="comment">/* dotted点划线，dashed破折线 */</span></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dash&quot;</span>&gt;</span>标签选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;red dash&quot;</span>&gt;</span>ID先择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>伪类<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>后代选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>群组选择器<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">p</span>&#123;<span class="comment">/* 群组选择器,做CSS先去默认有padding和margin的padding、margin */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span>&#123;<span class="comment">/* ID选择器，唯一，id不能重复 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;<span class="comment">/* 高度不给，由内容决定，宽度不给，由父元素决定 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">9px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span> <span class="selector-tag">h2</span>&#123;<span class="comment">/* 后代选择器(父子选择器，定义具体的标签选择器的时候大多采用这种样式 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">line-height</span>: <span class="number">30px</span>;<span class="comment">/* 行高 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">line-height</span>: <span class="number">180%</span>;<span class="comment">/* font-size*1.8 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-indent</span>: <span class="number">2em</span>;<span class="comment">/* 首行缩进，em表示字体大小,此处为2个字符 */</span></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-decoration</span>: none;<span class="comment">/* 去下划线 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#c00</span>; <span class="comment">/* 去颜色 */</span></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>CSS选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                后代选择器 、群组选择器、交集选择器、并集选择器是CSS选择器的特殊用法</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>[更多]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">                <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: block; <span class="comment">/* a的默认的display为inline，不能设置宽高等属性，要改为block才可以设置 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">float</span><span class="selector-pseudo">:left</span>; <span class="comment">/* float的元素会自动变为display:block */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="comment">/* 伪类，link、visited、hover、active顺序尽量不要改变 */</span></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="comment">/* 访问过的 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="comment">/* 鼠标悬浮 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;<span class="comment">/* 鼠标左键按下时效果 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#0ff</span></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>伪类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="选择器层叠与继承以及优先级">选择器层叠与继承以及优先级</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>层叠与继承<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;test3.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 同优先级的，后定义的css覆盖前定义的，没覆盖的可以继承 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 优先级 复杂后代&gt;后代&gt;id&gt;类&gt;标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span> <span class="selector-id">#box</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: gray;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#h2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>:orange;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.h2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>:green;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;test3.css&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span> = <span class="string">&quot;h2&quot;</span> <span class="attr">id</span> = <span class="string">&quot;h2&quot;</span>&gt;</span></span><br><span class="line">                我是什么颜色？</span><br><span class="line">            <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="框模型">框模型</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>框模型box model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#a</span>&#123;<span class="comment">/* 盒子实际高度为 300+60+40+1+1+30+30=462px */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">60px</span> <span class="number">50px</span> <span class="number">40px</span> <span class="number">30px</span>;<span class="comment">/* 上 右 下 左 (顺时针) */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">30px</span> auto;<span class="comment">/* 两个值 上下 左右 ,左右margin为auto盒子居中 */</span></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/* margin的叠加： a、b间的距离为40px，是两个之中的最大值 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-id">#b</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>; <span class="comment">/* width是盒子内容的宽度，不是盒子的宽度 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>; <span class="comment">/* 三个值 上 左右 下 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span>框模型<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span>距离<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="清除浮动的方式">清除浮动的方式</h3>
<ol type="1">
<li>给父元素设置高度</li>
<li>给父元素设置 overflow:auto/hidden</li>
<li>给浮动后面出现的元素增加clear:both属性(其margin-top可能不起作用)</li>
<li>建立clearfix类，给浮动的父元素使用</li>
<li>增加一个新的空的元素，为其增加clear:both(不推荐使用)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>float<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="comment">/* height: 230px; */</span></span></span><br><span class="line"><span class="css">                <span class="comment">/* overflow: hidden;溢出隐藏 */</span></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.f</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/* h2&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">                clear:both;</span></span></span><br><span class="line"><span class="comment"><span class="css">            &#125; */</span></span></span><br><span class="line"><span class="css">            <span class="selector-class">.clearfix</span>:after&#123;</span></span><br><span class="line"><span class="css">                content:<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">visibility</span>:hidden;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent clearfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;f&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;f&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;f&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;f&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 浮动破坏了正常的文档流 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>浮动之后<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如何清除浮动？ --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.给父元素设置高度--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.给父元素设置 overflow:auto/hidden--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3.给浮动后面出现的元素增加clear:both属性(其margin-top可能不起作用)--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 4.建立clearfix类，给浮动的父元素使用 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 5.增加一个新的空的元素，为其增加clear:both(不推荐使用)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="布局">布局</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>布局(layout)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#wrap</span>&#123;<span class="comment">/* 容器 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#header</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#nav</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#main</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#aside</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: left; </span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#footer</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>:<span class="number">#f0f</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 电脑网站宽度一般：960-1440之间，1200 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 做布局的方法：做宽高、做浮动、做清除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aside&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>absolute绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#header</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: relative;<span class="comment">/* 相对定位，重新定义子元素的绝对定位的元素的坐标起点 */</span></span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 绝对定位和浮动的元素不给宽高，宽高为内容的宽高 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-id">#logo</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">                <span class="attribute">left</span>:<span class="number">50px</span>;<span class="comment">/* 距离的是header左边50px */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">top</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#login</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">                <span class="attribute">right</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">top</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绝对定位，可用于下拉列表、轮播等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span>logo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 常用模板</span><br><span class="line"></span><br><span class="line">#### 上图下文</span><br><span class="line"></span><br><span class="line">``` html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上图下文<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 重要，去除浏览器兼容性问题 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sxlist</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sxlist</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sxlist</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sxlist</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sxlist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基于绝对定位的上图下文<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span>, <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;<span class="comment">/* 重要，去除浏览器兼容性问题 */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sxlist</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sxlist</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sxlist</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sxlist</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 不用绝对定位 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 有position属性(relative absolute fixed)的元素，才可以设置z-index */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* margin-top: -26px; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* position: relative; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* z-index:2; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sxlist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span><span class="comment">&lt;!-- 不用加反斜杠 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="左图右文">左图右文</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>左图右文<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">p</span>&#123;<span class="attribute">padding</span>: <span class="number">0</span>;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>: none&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>: none&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">img</span>&#123;<span class="attribute">border</span>: none;<span class="attribute">display</span>: block&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.zylist</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.zylist</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">                <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.zylist</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.yw</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.yw</span> <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">line-height</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.yw</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">                line-break: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.yw</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;zylist&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../Day1/2.png&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yw&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是好呢多的文字，右边的文字的高度与左边的图片的高度大致相同。花木成畦手自栽 塔顶地花木成畦手自栽 </span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更多&gt;&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>第七天</title>
    <url>/2019/07/16/%E5%89%8D%E7%AB%AF-JS-2/</url>
    <content><![CDATA[<h1 id="第七天">第七天</h1>
<h2 id="dom">DOM</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event-dom<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>JavaScript <span class="tag">&lt;<span class="name">span</span> <span class="attr">onclick</span>=<span class="string">&quot;clickspan()&quot;</span>&gt;</span>事件<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//DOM0 DOM2事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">clickspan</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;you have clicked span&quot;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h2 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h2&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        h2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            e.stopPropagation();<span class="comment">//停止冒泡，在dom0中无效</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;you have clicked h2!&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//需求1：点击span不响应父元素的事件，不冒泡</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//需求2：先响应父元素的事件，后响应子元素的事件，冒泡(默认的事件响应方式)-&gt;捕获(先响应你元素的事件)</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="冒泡与捕获">冒泡与捕获</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event-dom<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>JavaScript <span class="tag">&lt;<span class="name">span</span>&gt;</span>事件<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义DOM2事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//需求1：点击span不响应父元素的事件，不冒泡</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//需求2：先响应父元素的事件，后响应子元素的事件，冒泡(默认的事件响应方式)-&gt;捕获(先响应你元素的事件)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h2 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;h2&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;span&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="comment">//不考虑ie 678(attachEvent)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//true表示捕获，false就默认值，表示冒泡</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//DOM2事件中用click前面不用加on</span></span></span><br><span class="line"><span class="javascript">        span.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;span!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            e.stopPropagation();<span class="comment">//父元素的事件不会被响应，在Dom2事件中定义有效</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        h2.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;h2&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        box.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 常用事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mouseover-鼠标悬浮</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mouseout-鼠标移开</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// scroll-滚动</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// blur-失去焦点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// focus-获取焦点</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// change-内容改变</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// load-网页加载完成</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mousemove-鼠标移动</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 手机事件：</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// touchstart-开始触屏</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// touchend-触屏结束</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// touchmove-触屏移动</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="阻止默认行为">阻止默认行为</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event-阻止默认+事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.elist</span>&gt;<span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;elist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://huanqiucom&quot;</span>&gt;</span>环球<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://ltaaa.com&quot;</span>&gt;</span>龙腾<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://sina.com.cn&quot;</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://taobao.com&quot;</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//需求1：阻止超链接，点击时不链接至网址，而是alert网址</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> elist = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;elist&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> link = elist.getElementsByTagName(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;link.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            link[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                e.preventDefault();<span class="comment">//阻止默认行为</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//alert(link[i].href);//无效，因为i是在定义过程中使用的，定义完成时并没有点击，点击时i已经加到了6，没有link[6]</span></span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.href);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//需求2：只定义一个事件，完成类似的功能，即点哪里，哪里响应</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//事件定义在父元素上，事件委托</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> elist = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;elist&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        elist.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//target是点击的子元素，nodeName是节点名称，LI必须大写</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (e.target.nodeName == <span class="string">&quot;LI&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (e.target.className == <span class="string">&quot;selected&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//通过className可以一次更改多个css属性，并且使样式和行为相分离</span></span></span><br><span class="line"><span class="javascript">                    e.target.className = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    e.target.className = <span class="string">&quot;selected&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// alert(e.taget.nodeName);</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="鼠标移动事件">鼠标移动事件</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 需求：鼠标在左边背景为蓝色，鼠标在右边，背景为绿色</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> w = box[<span class="number">0</span>].offsetWidth; <span class="comment">//获得宽，包括padding和border</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// box[0].onmousemove = function (e) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     if (e.offsetX &gt; w / 2) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         box[0].style.backgroundColor = &quot;green&quot;;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     &#125; else &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         box[0].style.backgroundColor = &quot;blue&quot;;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     box[0].innerHTML = e.offsetX + &quot;,&quot; + e.offsetY + &quot; &quot; + e.clientX + &quot;,&quot; + e.clientY + &quot; &quot; + e.pageX +</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         &quot;,&quot; + e.pageY;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//作业：需求：可以满足多个盒子支持上述行为</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;all&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        all.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(e.target.nodeName==<span class="string">&quot;DIV&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (e.offsetX &gt; w / <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">                e.target.style.backgroundColor = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                e.target.style.backgroundColor = <span class="string">&quot;blue&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125; </span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="表单基本校验">表单基本校验</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>form基本效验<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">form</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#form</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#form</span> <span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.input</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.error</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#form</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="comment">&lt;!-- 当被点击时，for的标签获得焦点 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>用户名输入错误!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>密码输入错误！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwdAgain&quot;</span>&gt;</span>重复密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwdAgain&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwdAgain&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>重复密码输入错误！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 需求：</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1）点击提交按钮能够校验出所有错误</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2）边输入边校验</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 3）美观的错误提示方式，不使用alert提示错误</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 4）美观的表单</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> user = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;user&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwd = <span class="built_in">document</span>.form.pwd;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwdAgain = <span class="built_in">document</span>.form.pwdAgain;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> span = <span class="built_in">document</span>.getElementById(<span class="string">&quot;form&quot;</span>).getElementsByClassName(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        user.onchange = checkUser; <span class="comment">//onchange:控件失去焦点并且内容有改变时触发，onblur失去焦点就触发</span></span></span><br><span class="line"><span class="javascript">        pwd.onchange = checkPwd; <span class="comment">//写函数名称，而不是写函数的执行如checkPwd()</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        pwdAgain.onchange = checkPwdAgain;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkUser</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (user.value.length &lt; <span class="number">6</span> || user.value.length &gt; <span class="number">12</span>) &#123;</span></span><br><span class="line"><span class="javascript">                span[<span class="number">0</span>].style.display = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                span[<span class="number">0</span>].style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkPwd</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (pwd.value.length &lt; <span class="number">6</span> || pwd.value.length &gt; <span class="number">12</span>) &#123;</span></span><br><span class="line"><span class="javascript">                span[<span class="number">1</span>].style.display = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                span[<span class="number">1</span>].style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkPwdAgain</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (pwd.value == pwdAgain.value) &#123;</span></span><br><span class="line"><span class="javascript">                span[<span class="number">2</span>].style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                span[<span class="number">2</span>].style.display = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//扩展：增加一行，重复密码，规则：密码和重复密码必须相同</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkForm</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> rs = checkPwd() * checkUser() * checkPwdAgain();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (rs) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="dom操作">DOM操作</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#dom</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#039</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#dom</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#039</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dom&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>修改h2的HTML和CSS<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>在h2中显示h2的nodeName和nodeType<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>增加一个新的li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除最后一个li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>修改第三个li的下一个兄弟元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>克隆ul<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>使所有li双击可删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//querySelector：找到第一个指定的选择器,支持css3中的选择语法，如：#dom&gt;h2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#dom&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = dom.querySelectorAll(<span class="string">&quot;button&quot;</span>);<span class="comment">//返回类数组</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> h2 = dom.querySelector(<span class="string">&quot;h2&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = dom.querySelector(<span class="string">&quot;ul&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = dom.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        btn[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            h2.innerText = <span class="string">&quot;您点击了第一个按钮&quot;</span>;<span class="comment">//能用innerText的尽量用innerText</span></span></span><br><span class="line"><span class="javascript">            h2.style.backgroundColor = <span class="string">&quot;#c00&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// h2.className = &quot;&quot; //一次修改多个css,推荐使用</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// h2.style.cssText=&quot;backgroundColor:#c00&quot;;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//nodeType:1-&gt;元素节点 2-&gt;文本节点 3-&gt;属性节点</span></span></span><br><span class="line"><span class="javascript">            h2.innerText = h2.nodeName+<span class="string">&quot; &quot;</span>+h2.nodeType+<span class="string">&quot; &quot;</span>+h2.nodeValue;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> l = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">            l.innerText=ul.querySelectorAll(<span class="string">&quot;li&quot;</span>).length+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            ul.appendChild(l);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//ul.insertBefore(l,li[0]);//在li[0]前面添加l</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> del = ul.querySelector(<span class="string">&quot;li:last-child&quot;</span>);</span></span><br><span class="line"><span class="javascript">            ul.removeChild(del);<span class="comment">//一定要通过父元素删除</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// del.parentNode.removeChild(del);</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">4</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> newli = ul.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// var newli = ul.childNodes;//包括文本节点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// var newli = ul.children;//子元素不包括文本节点</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(newli);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//尽量使用ElementSibling，这种写法不考虑文本节点，nextSibling的写法在非ie浏览器下是考虑文本节点的</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// newli[3].nextSibling.innerText = &quot;兄弟元素&quot;;//nextSibling是li与li之间的回车换行</span></span></span><br><span class="line"><span class="javascript">            newli[<span class="number">3</span>].nextElementSibling.innerText = <span class="string">&quot;下一个兄弟元素&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// newli[3].previousElementSibling.innerText = &quot;上一个兄弟&quot;;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        btn[<span class="number">5</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            dom.appendChild(ul.cloneNode(<span class="literal">true</span>));<span class="comment">//true-&gt;连事件一起克隆</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        btn[<span class="number">6</span>].onclick =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> arr = dom.querySelectorAll(<span class="string">&quot;li&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                arr[i].ondblclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.parentNode.removeChild(<span class="built_in">this</span>);<span class="comment">//循环定义事件的函数内部不能使用i</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//扩展：新增加的li双击也可以删除，不需要两点btn[6]</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//在其它后面加btn[6].click();</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="tab选项卡">Tab选项卡</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tab<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.tab</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.ttitle</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">33px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.ttitle</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">33px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.ttitle</span> <span class="selector-class">.cur</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#c00</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">34px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.tcontent</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.ttitle</span>+<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ttitle&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cur&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>专栏<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>热点<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tcontent&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tcontent&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tcontent&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tab = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.tab&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> span = tab.querySelectorAll(<span class="string">&quot;.ttitle&gt;span&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tc = tab.querySelectorAll(<span class="string">&quot;.tcontent&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;span.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            span[i].index = i;</span></span><br><span class="line"><span class="javascript">            span[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;span.length;j++)&#123;</span></span><br><span class="line"><span class="javascript">                    span[j].className=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    tc[j].style.display=<span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.className = <span class="string">&quot;cur&quot;</span>;</span></span><br><span class="line"><span class="javascript">                tc[<span class="built_in">this</span>.index].style.display=<span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="手风琴">手风琴</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>accordion手风琴<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">dl</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">dd</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">dt</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.acd</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#039</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.acd</span> <span class="selector-tag">dt</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#039</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.acd</span> <span class="selector-class">.cur</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">#000</span>, <span class="number">#039</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.acd</span> <span class="selector-tag">dd</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.acd</span> <span class="selector-tag">dd</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扩展：使一个网页中有多个tab选项卡或多个手风琴 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;acd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span> <span class="attr">class</span>=<span class="string">&quot;cur&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;acd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span> <span class="attr">class</span>=<span class="string">&quot;cur&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.acd&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            accordion(a[i]);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//用封装解决</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">accordion</span>(<span class="params">acd</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dt = acd.querySelectorAll(<span class="string">&quot;dt&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dt.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                dt[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; dt.length; j++) &#123;</span></span><br><span class="line"><span class="javascript">                        dt[j].className = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        dt[j].nextElementSibling.style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.className = <span class="string">&quot;cur&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.nextElementSibling.style.display = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>文本预处理-文本张量表示方法</title>
    <url>/2021/10/06/%E6%96%87%E6%9C%AC%E9%A2%84%E5%A4%84%E7%90%86-%E6%96%87%E6%9C%AC%E5%BC%A0%E9%87%8F%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="文本预处理-文本张量表示方法">文本预处理-文本张量表示方法</h1>
<h2 id="什么是文本张量表示">什么是文本张量表示</h2>
<ul>
<li>将一段文本使用张量表示，其中一般将词汇表示成向量，称作词向量，再由各个词向量按顺序组成矩阵形成文本表示</li>
</ul>
<p>如：</p>
<blockquote>
<p>["人生", "该", "如何", "起头"]</p>
<p>==&gt;</p>
<p>每个词对应矩阵中的一个向量</p>
<p>[[1.32, 4.32, 0.32, 5.2],</p>
<p>[3.1, 5.43, 0.34, 3.2],</p>
<p>[3.21, 5.32, 2, 4.32],</p>
<p>[2.54, 7.32, 5.12, 9.54]]</p>
</blockquote>
<h2 id="文本张量表示的作用">文本张量表示的作用</h2>
<ul>
<li>将文本表示成张量（矩阵）形式，能够使语言文本可以作为计算机处理程序的输入，进行接下来一系列的解析工作</li>
</ul>
<h2 id="文本张量表示的方法">文本张量表示的方法</h2>
<ul>
<li>one-hot编码</li>
<li>Word2vec</li>
<li>Word Embedding</li>
</ul>
<h3 id="one-hot">one-hot</h3>
<h4 id="什么是one-hot词向量表示">什么是one-hot词向量表示</h4>
<ul>
<li>又称独热编码，将每个词表示成具有n个元素的向量，这个词向量中只有一个元素是1，其它元素都是0，不同词汇元素为0的位置不同，其中n的大小是整个语料中不同词汇的总数</li>
</ul>
<p>如：</p>
<blockquote>
<p>["改变", "要", "如何", "起手"]</p>
<p>==&gt;</p>
<p>[[1, 0, 0, 0],</p>
<p>[0, 1, 0, 0],</p>
<p>[0, 0, 1, 0],</p>
<p>[0, 0, 0, 1]]</p>
</blockquote>
<h4 id="onehot编码实现">onehot编码实现</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入用于对象保存与加载的joblib</span></span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"><span class="comment"># 导入keras中的词汇映射器Tokenizer</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.text <span class="keyword">import</span> Tokenizer</span><br><span class="line"><span class="comment"># 假定vocab为语料集所有不同的词汇集合</span></span><br><span class="line">vocab = &#123;<span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;陈奕迅&quot;</span>, <span class="string">&quot;王力宏&quot;</span>, <span class="string">&quot;李宗盛&quot;</span>, <span class="string">&quot;吴亦凡&quot;</span>, <span class="string">&quot;鹿晗&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 实例化一个词汇映射器对象</span></span><br><span class="line">t = Tokenizer(num_words=<span class="literal">None</span>, char_level=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 使用映射器拟合现有文本数据</span></span><br><span class="line">t.fit_on_texts(vocab)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> token <span class="keyword">in</span> vocab:</span><br><span class="line">  zero_list = [<span class="number">0</span>]*<span class="built_in">len</span>(vocab)</span><br><span class="line">  <span class="comment"># 使用映射器转换现有文本数据，每个词汇对应从1开始的自然数</span></span><br><span class="line">  <span class="comment"># 返回样式如：[[2]],取出其中的数字需要使用[0][0]</span></span><br><span class="line">  token_index = t.texts_to_sequences([token])[<span class="number">0</span>][<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">  zero_list[token_index] = <span class="number">1</span></span><br><span class="line">  <span class="built_in">print</span>(token, <span class="string">&quot;的one-hot编码为：&quot;</span>,zero_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#　使用joblib工具保存映射器，以便之后使用</span></span><br><span class="line">tokenizer_path = <span class="string">&quot;./Tokenizer&quot;</span></span><br><span class="line">joblib.dump(t, tokenizer_path)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>周杰伦 的one-hot编码为： [1, 0, 0, 0, 0, 0] 李宗盛 的one-hot编码为： [0, 1, 0, 0, 0, 0] 陈奕迅 的one-hot编码为： [0, 0, 1, 0, 0, 0] 王力宏 的one-hot编码为： [0, 0, 0, 1, 0, 0] 吴亦凡 的one-hot编码为： [0, 0, 0, 0, 1, 0] 鹿 晗 的one-hot编码为： [0, 0, 0, 0, 0, 1] ['./Tokenizer']</p>
</blockquote>
<h4 id="onehot编码器的使用">onehot编码器的使用</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入对象保存与加载的joblib</span></span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"><span class="comment"># 加载之前保存的Tokenizer，实例化一个t对象</span></span><br><span class="line">t = joblib.load(tokenizer_path)</span><br><span class="line"><span class="comment"># 编码token为&quot;周杰伦&quot;</span></span><br><span class="line">token = <span class="string">&quot;周杰伦&quot;</span></span><br><span class="line"><span class="comment"># 使用t获得token_index</span></span><br><span class="line">token_index = t.texts_to_sequences([token])[<span class="number">0</span>][<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line"><span class="comment"># 初始化一个zero_list</span></span><br><span class="line">zero_list = [<span class="number">0</span>]*<span class="built_in">len</span>(vocab)</span><br><span class="line"><span class="comment"># 令zero_list的对应索引为1</span></span><br><span class="line">zero_list[token_index] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(token, <span class="string">&quot;的one-hot编码为：&quot;</span>, zero_list)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>周杰伦 的one-hot编码为： [1, 0, 0, 0, 0, 0]</p>
</blockquote>
<h4 id="one-hot编码的优劣势">one-hot编码的优劣势</h4>
<ul>
<li>优势：操作简单，容易理解</li>
<li>劣势：完全割裂了词与词之间的联系，而且在大语料集下，每个向量的长度过大，占据大量内存</li>
</ul>
<blockquote>
<p>说明：</p>
<p>正因为one-hot编码明显劣势，这种编码方式被应用的地方越来越少，取而代之的是稠密向量的表示方法word2vec和word embedding</p>
</blockquote>
<h3 id="word2vec">word2vec</h3>
<h4 id="什么是word2vec">什么是word2vec</h4>
<ul>
<li>是一种流行的将词汇表示成向量的无监督训练方法，该过程将构建神经网络模型，将网络参数作为词汇的向量表示，它包含CBOW和skipgram两种训练模式</li>
</ul>
<h4 id="cbowcontinuous-bag-of-words模式">CBOW(Continuous bag of words)模式</h4>
<ul>
<li><p>给定一段用于训练的文本语料，再选定某长度(窗口)作为研究对象，使用上下文词汇预测目标词汇</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/20211005221805.png" /></p>
<blockquote>
<p>分析：</p>
<ul>
<li>图中窗口大小为9，使用前后4个词汇对目标词汇进行预测</li>
</ul>
</blockquote></li>
</ul>
<h4 id="cbow模式下的word2vec过程说明">CBOW模式下的word2vec过程说明：</h4>
<ul>
<li><p>假设我们给定的训练语料只有一句话：Hope can set you free，窗口大小为3，因此模型的第一个训练样本来自Hope can set，因为是CBOW模式，所以将使用Hope和set作为输入，can作为输出，在模型训练时，Hope、can、set等词汇都使用它们的one-hot编码，如图所示：每个one-hot编码的单词与各自的变换矩阵(即参数矩阵3x5，这里的3是指最后得到的词向量维度)相乘之后再相加，得到上下文表示矩阵(3x1)</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/20211005222149.png" /></p></li>
<li><p>接着，将上下文表示矩阵与变换矩阵(参数矩阵5x3，所有的变换矩阵共享参数)相乘，得到5x1的结果矩阵，它将与我们真正的目标矩阵即can的one-hot编码矩阵(5x1)进行损失的计算，然后更新网络参数完成一次模型迭代</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/20211005222712.png" /></p></li>
<li><p>最后，窗口按序向后移动，重新更新参数，直到所有语料被遍历完成，得到最终的变换矩阵(3x5)，这个变换矩阵与每个词汇的one-hot编码(5x1)相乘，得到的3x1的矩阵就是该词汇的word2vec张量表示</p></li>
</ul>
<h4 id="skipgram模式">skipgram模式</h4>
<ul>
<li><p>给定一段用于训练的文本语料，再选定某段长度(窗口)作为研究对象，使用目标词汇预测上下文词汇</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211005222932875.png" /></p>
<blockquote>
<p>分析：</p>
<ul>
<li>图中窗口大小为9，使用目标词汇对前后四个词汇进行预测</li>
</ul>
</blockquote></li>
</ul>
<h4 id="skipgram模式下的word2vec过程说明">skipgram模式下的word2vec过程说明</h4>
<ul>
<li><p>假设我们给定的训练语料只有一句话：Hope can set you free，窗口大小为3，因此模型的第一个训练样本来自Hope can set，因为是skipgram模式，所以将使用can作为输入，Hope和set作为输出，在模型训练时，Hope、can、set等词汇都使用它们的one-hot编码，如图所示：将can的one-hot编码与变换矩阵(即参数矩阵3x5，这里的3是指最后得到的词向量维度)相乘，得到目标词汇表示矩阵(3x1)</p></li>
<li><p>接着，将目标词汇表示矩阵与多个变换矩阵(参数矩阵5x3)相乘，得到多个5x1的结果矩阵，它将与我们Hope和set对应的one-hot编码矩阵(5x1)进行损失的计算，然后更新网络参数完成一次模型迭代</p>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211005223458089.png" /></p></li>
<li><p>最后窗口按序向后移动，重新更新参数，直到所有语料被遍历完成，得到最终的变换矩阵即参数矩阵(3x5)，这个变换矩阵与每个词汇的one-hot编码(5x1)相乘，得到的3x1的矩阵就是该词汇的word2vec张量表示</p></li>
</ul>
<h4 id="使用fasttext工具实现word2vec训练和使用">使用fasttext工具实现word2vec训练和使用</h4>
<ol type="1">
<li>获取训练数据</li>
<li>训练词向量</li>
<li>模型超参数设定</li>
<li>模型效果检验</li>
<li>模型的保存与重加载</li>
</ol>
<h5 id="获取训练数据">获取训练数据</h5>
<ul>
<li><p>采用的数据是英语维基百科的部分网页信息，大小在300M左右</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">wget -c http://mattmahoney.net/dc/enwik9.zip -P data</span><br><span class="line">unzip data/enwik9.zip -d data</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">head -10 data/enwik9</span><br></pre></td></tr></table></figure>
<blockquote>
<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd" version="0.3" xml:lang="en"> <siteinfo> <sitename>Wikipedia</sitename> <base>http://en.wikipedia.org/wiki/Main_Page</base> ​ <generator>MediaWiki 1.6alpha</generator> ​
<case>
first-letter
</case>
<p>​ <namespaces> ​ <namespace key="-2">Media</namespace> ​ <namespace key="-1">Special</namespace> ​ <namespace key="0" /></p>
</blockquote></li>
<li><p>原始数据处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用wikifil.pl文件处理脚本来清除XML/HTML格式的内容</span></span><br><span class="line">perl wikifil.pl data/enwik9 &gt; data/fil9</span><br></pre></td></tr></table></figure></li>
<li><p>查看预处理后的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看前80个字符</span></span><br><span class="line">head -c 80 data/fil9</span><br></pre></td></tr></table></figure>
<blockquote>
<p>anarchism originated as a term of abuse first used against early working class</p>
</blockquote></li>
</ul>
<h5 id="训练词向量">训练词向量</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fasttext</span><br><span class="line"><span class="comment"># 使用fasttext的train_unsupervised(无监督训练方法)进行词向量训练</span></span><br><span class="line"><span class="comment"># 它的参数是数据集的持久化文件路径&#x27;data/fil9&#x27;</span></span><br><span class="line">model = fasttext.train_unsupervised(<span class="string">&#x27;data/fil9&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>查询单词对应的词向量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.get_word_vector(<span class="string">&quot;the&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>array([ 0.28612754, 0.18887755, 0.12312672, -0.11358871, -0.04313999,</p>
<p>​ -0.03049271, -0.4231865 , -0.09762151, -0.2981492 , -0.21989156,</p>
<p>​ 0.01450618, 0.22954823, -0.11806235, 0.2104983 , -0.08250213,</p>
<p>​ -0.06598049, -0.10693331, 0.02772394, 0.02275106, -0.04281725,</p>
<p>​ 0.20697276, -0.17010634, 0.20779532, 0.20877212, -0.00896981,</p>
<p>​ 0.2956562 , 0.2354818 , -0.10447099, -0.16170514, 0.26910302,</p>
<p>​ 0.13694333, -0.29110473, 0.16928492, -0.10917187, 0.24259156,</p>
<p>​ 0.36317155, -0.09099762, 0.19189015, -0.06971502, 0.18211566,</p>
<p>​ -0.03056046, 0.23826727, 0.08990981, -0.00378818, 0.25064468,</p>
<p>​ -0.2872312 , 0.15523386, -0.00560856, -0.12181274, -0.01934635,</p>
<p>​ 0.13876605, -0.29790625, 0.12139253, 0.05811704, -0.01424001,</p>
<p>​ -0.14908412, -0.23952171, -0.02370461, 0.34857494, 0.05483944,</p>
<p>​ -0.04003375, 0.22713795, 0.01177837, 0.13517821, 0.03359624,</p>
<p>​ 0.04378683, -0.02268096, -0.18240325, 0.13975719, 0.25354248,</p>
<p>​ 0.06034014, -0.0643115 , 0.16107267, 0.06664212, -0.2791056 ,</p>
<p>​ 0.07975964, -0.13255674, -0.10583606, -0.17299654, -0.09542597,</p>
<p>​ -0.02097557, -0.12210673, -0.01789324, 0.23003705, -0.02801042,</p>
<p>​ -0.22421488, 0.2048472 , -0.4755632 , -0.1295094 , -0.02021092,</p>
<p>​ 0.08898196, -0.12367474, -0.10409563, -0.12775469, 0.03284111,</p>
<p>​ -0.22912335, -0.01330527, -0.4232167 , 0.00049854, -0.2794912 ],</p>
<p>​ dtype=float32)</p>
</blockquote></li>
</ul>
<h5 id="模型超参数设定">模型超参数设定</h5>
<ul>
<li><p>在训练词向量过程中，我们可以设定很多常用超参数来调节我们的模型效果，如：</p>
<ul>
<li>无监督训练模式：'skipgram'或者'cbow'，默认为'skipgram'，在实践中，skipgram模式在利用子词方面比cbow更好</li>
<li>词嵌入维度dim：默认为100，但随着语料库的增大，词嵌入的维度往往也要更大</li>
<li>数据循环次数epoch：默认为5，但当数据集足够大，可能不需要那么多次</li>
<li>学习率lr：默认为0.05，根据经验，建议选择[0.01, 1]范围内</li>
<li>使用线程数thread：默认为12线程，一般建议和CPU核数相同</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = fasttext.train_unsupervised(<span class="string">&#x27;data/fil9&#x27;</span>, <span class="string">&#x27;cbow&#x27;</span>, dim=<span class="number">300</span>, epoch=<span class="number">1</span>, lr=<span class="number">0.1</span>, thread=<span class="number">8</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="模型效果检验">模型效果检验</h5>
<ul>
<li>检查单词向量质量的一种简单方法就是查看其邻近单词，通过我们主观来判断这些邻近单词是否与目标单词相关</li>
<li>查找"运动"的邻近单词，可以发现"体育网","运动汽车","运动服"等</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.get_nearest_neighbors(<span class="string">&#x27;sports&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[(0.853657603263855, 'sport'), (0.8383333086967468, 'sporting'), (0.8300549387931824, 'sportsnet'), (0.809310793876648, 'sportsplex'), (0.8088512420654297, 'athletics'), (0.807535707950592, 'sportswomen'), (0.8</p>
<p>067726492881775, 'sportscar'), (0.7960886359214783, 'sportsground'), (0.7926499247550964, 'sportscars'), (0.7785360813140869, 'motorsports')]</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.get_nearest_neighbors(<span class="string">&#x27;music&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[(0.8897189497947693, 'musics'), (0.8462624549865723, 'musical'), (0.8168190121650696, 'musicman'), (0.8151978850364685, 'musico'), (0.810080885887146, 'musices'), (0.808333158493042, 'emusic'), (0.776083827018</p>
<p>7378, 'folksongs'), (0.76759272813797, 'orchestras'), (0.7664333581924438, 'musican'), (0.7638934254646301, 'musicali')]</p>
</blockquote>
<h5 id="模型的保存与重加载">模型的保存与重加载</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.save_model(<span class="string">&#x27;fil9.bin&#x27;</span>) <span class="comment"># 保存</span></span><br><span class="line">model = fasttext.load_model(<span class="string">&#x27;fil9.bin&#x27;</span>) <span class="comment"># 加载</span></span><br><span class="line">model.get_word_vector(<span class="string">&quot;the&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="word-embedding">word embedding</h3>
<h4 id="什么是word-embedding词嵌入">什么是word embedding(词嵌入)</h4>
<ul>
<li>通过一定的方式将词汇映射到指定维度(一般是更高维度)的空间</li>
<li>广义的word embedding包括所有密集词汇向量的表示方法，如之前学习的word2vec，即可认为是word embedding的一种</li>
<li>狭义的word embedding是指在神经网络中加入的embedding层，对整个网络进行训练的同时产生的embedding矩阵(embedding层的参数)，这个embedding矩阵就是训练过程中所有输入词汇的向量表示组成的矩阵</li>
</ul>
<h4 id="word-embedding的可视化分析">word embedding的可视化分析</h4>
<ul>
<li><p>通过tensorboard可视化嵌入和词向量 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入torch和tensorboard的摘要写入方法</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="comment"># 实例化一个摘要定稿对象</span></span><br><span class="line">writer = SummaryWriter()</span><br><span class="line"><span class="comment"># 随机初始化一个100x5的矩阵，认为它是已经得到的词嵌入矩阵</span></span><br><span class="line">embedded = torch.randn(<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 导入中文词汇文件，形成meta列表原始词汇</span></span><br><span class="line">meta = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.strip(), fileinput.FileInput(<span class="string">&#x27;./vocab100.csv&#x27;</span>)))</span><br><span class="line">writer.add_embedding(embedded, metadata=meta)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></p></li>
<li><p>在终端启动tensorboard服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensorboad --logdir runs --host 0.0.0.0</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Zephon-H/ImagesStore/raw/master/img/image-20211006151006769.png" /></p>
</blockquote></li>
</ul>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
</search>
